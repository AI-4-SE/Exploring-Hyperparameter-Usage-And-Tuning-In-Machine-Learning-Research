{
    "flair/training_utils.py": {
        "sklearn": {
            "mean_squared_error_197": {
                "y_true": {
                    "value": "self.true",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "self.pred",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_absolute_error_200": {
                "y_true": {
                    "value": "self.true",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "self.pred",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "flair/visual/manifold.py": {
        "sklearn": {
            "TSNE_18": {
                "variable": {
                    "value": "self.transform",
                    "type": "Attribute",
                    "possible_values": []
                },
                "n_components": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "verbose": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "perplexity": {
                    "value": "40",
                    "type": "int",
                    "possible_values": []
                },
                "n_iter": {
                    "value": "300",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "flair/CRF.py": {
        "torch": {
            "max_25": {
                "variable": {
                    "value": "(_, idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "vec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vec",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "gather_26": {
                "variable": {
                    "value": "max_score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vec",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "idx.view(-1, 1, m_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_39": {
                "variable": {
                    "value": "init_transitions",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.tagset_size + 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "self.tagset_size + 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_46": {
                "variable": {
                    "value": "self.transitions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "init_transitions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(self.tagset_size + 2, self.tagset_size + 2)",
                            "Call"
                        ],
                        [
                            "init_transitions.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_119": {
                "variable": {
                    "value": "length_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask.long()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_163": {
                "variable": {
                    "value": "partition_history",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "partition_history",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "torch.cat(partition_history, 0).view(seq_len, batch_size, -1).transpose(1, 0).contiguous()",
                            "Call"
                        ],
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "torch.cat(partition_history, 0).view(seq_len, batch_size, tag_size, nbest).transpose(1, 0).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_163": {
                "variable": {
                    "value": "partition_history",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_166": {
                "variable": {
                    "value": "last_partition",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "partition_history",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "torch.cat(partition_history, 0).view(seq_len, batch_size, -1).transpose(1, 0).contiguous()",
                            "Call"
                        ],
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "torch.cat(partition_history, 0).view(seq_len, batch_size, tag_size, nbest).transpose(1, 0).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "last_position",
                    "type": "variable",
                    "possible_values": [
                        [
                            "length_mask.view(batch_size, 1, 1).expand(batch_size, 1, tag_size) - 1",
                            "BinOp"
                        ],
                        [
                            "length_mask.view(batch_size, 1, 1, 1).expand(batch_size, 1, tag_size, nbest) - 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "max_169": {
                "variable": {
                    "value": "(_, last_bp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "last_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "last_partition.expand(batch_size, tag_size, tag_size) + self.transitions.view(1, tag_size, tag_size).expand(batch_size, tag_size, tag_size)",
                            "BinOp"
                        ],
                        [
                            "last_partition.expand(batch_size, tag_size, nbest, tag_size) + self.transitions.view(1, tag_size, 1, tag_size).expand(batch_size, tag_size, nbest, tag_size)",
                            "BinOp"
                        ],
                        [
                            "last_values.view(batch_size, tag_size * nbest, tag_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_174": {
                "variable": {
                    "value": "back_points",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "back_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "torch.cat(back_points).view(seq_len, batch_size, tag_size)",
                            "Call"
                        ],
                        [
                            "back_points.transpose(1, 0).contiguous()",
                            "Call"
                        ],
                        [
                            "back_points.transpose(1, 0).contiguous()",
                            "Call"
                        ],
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "torch.cat(back_points).view(seq_len, batch_size, tag_size, nbest)",
                            "Call"
                        ],
                        [
                            "back_points.transpose(1, 0).contiguous()",
                            "Call"
                        ],
                        [
                            "back_points.transpose(1, 0).contiguous()",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_234": {
                "variable": {
                    "value": "length_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask.long()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_236": {
                "variable": {
                    "value": "end_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tags",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tags",
                            "Method Argument"
                        ],
                        [
                            "tags",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "length_mask - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gather_239": {
                "variable": {
                    "value": "end_energy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "end_transition",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.transitions[:, STOP_TAG].contiguous().view(1, tag_size).expand(batch_size, tag_size)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "end_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.gather(tags, 1, length_mask - 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_244": {
                "variable": {
                    "value": "tg_energy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores.view(seq_len, batch_size, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "new_tags",
                    "type": "variable",
                    "possible_values": [
                        [
                            "autograd.Variable(torch.LongTensor(batch_size, seq_len))",
                            "Call"
                        ],
                        [
                            "new_tags.cuda()",
                            "Call"
                        ],
                        [
                            "new_tags.transpose(1, 0).contiguous().view(seq_len, batch_size, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_283": {
                "variable": {
                    "value": "length_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask.long()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_340": {
                "variable": {
                    "value": "partition_history",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "partition_history",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "torch.cat(partition_history, 0).view(seq_len, batch_size, -1).transpose(1, 0).contiguous()",
                            "Call"
                        ],
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "torch.cat(partition_history, 0).view(seq_len, batch_size, tag_size, nbest).transpose(1, 0).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_340": {
                "variable": {
                    "value": "partition_history",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_343": {
                "variable": {
                    "value": "last_partition",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "partition_history",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "torch.cat(partition_history, 0).view(seq_len, batch_size, -1).transpose(1, 0).contiguous()",
                            "Call"
                        ],
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "torch.cat(partition_history, 0).view(seq_len, batch_size, tag_size, nbest).transpose(1, 0).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "last_position",
                    "type": "variable",
                    "possible_values": [
                        [
                            "length_mask.view(batch_size, 1, 1).expand(batch_size, 1, tag_size) - 1",
                            "BinOp"
                        ],
                        [
                            "length_mask.view(batch_size, 1, 1, 1).expand(batch_size, 1, tag_size, nbest) - 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "topk_347": {
                "variable": {
                    "value": "(end_partition, end_bp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "last_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "last_partition.expand(batch_size, tag_size, tag_size) + self.transitions.view(1, tag_size, tag_size).expand(batch_size, tag_size, tag_size)",
                            "BinOp"
                        ],
                        [
                            "last_partition.expand(batch_size, tag_size, nbest, tag_size) + self.transitions.view(1, tag_size, 1, tag_size).expand(batch_size, tag_size, nbest, tag_size)",
                            "BinOp"
                        ],
                        [
                            "last_values.view(batch_size, tag_size * nbest, tag_size)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "nbest",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nbest",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_355": {
                "variable": {
                    "value": "back_points",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "back_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "torch.cat(back_points).view(seq_len, batch_size, tag_size)",
                            "Call"
                        ],
                        [
                            "back_points.transpose(1, 0).contiguous()",
                            "Call"
                        ],
                        [
                            "back_points.transpose(1, 0).contiguous()",
                            "Call"
                        ],
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "torch.cat(back_points).view(seq_len, batch_size, tag_size, nbest)",
                            "Call"
                        ],
                        [
                            "back_points.transpose(1, 0).contiguous()",
                            "Call"
                        ],
                        [
                            "back_points.transpose(1, 0).contiguous()",
                            "Call"
                        ]
                    ]
                }
            },
            "max_413": {
                "variable": {
                    "value": "(max_scores, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feats + self.transitions.view(1, tag_size, tag_size).expand(ins_num, tag_size, tag_size)",
                            "BinOp"
                        ],
                        [
                            "scores.view(seq_len, batch_size, tag_size, tag_size)",
                            "Call"
                        ],
                        [
                            "feats + self.transitions.view(1, tag_size, tag_size).expand(ins_num, tag_size, tag_size)",
                            "BinOp"
                        ],
                        [
                            "scores.view(seq_len, batch_size, tag_size, tag_size)",
                            "Call"
                        ],
                        [
                            "self._calculate_PZ(feats, mask)",
                            "Call"
                        ],
                        [
                            "feats + self.transitions.view(1, tag_size, tag_size).expand(ins_num, tag_size, tag_size)",
                            "BinOp"
                        ],
                        [
                            "scores.view(seq_len, batch_size, tag_size, tag_size)",
                            "Call"
                        ],
                        [
                            "end_partition[:, :, STOP_TAG]",
                            "Subscript"
                        ],
                        [
                            "scores",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "softmax_415": {
                "variable": {
                    "value": "path_score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "minus_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scores - max_scores.view(batch_size, 1).expand(batch_size, nbest)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_27": {
                "input": {
                    "value": "torch.sum(torch.exp(vec - max_score.expand_as(vec)), 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_150": {
                "variable": {
                    "value": "(partition, cur_bp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "cur_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seq_iter",
                            "variable"
                        ],
                        [
                            "cur_values + partition.contiguous().view(batch_size, tag_size, 1).expand(batch_size, tag_size, tag_size)",
                            "BinOp"
                        ],
                        [
                            "self.transitions.view(1, tag_size, tag_size).expand(batch_size, tag_size, tag_size) + partition.contiguous().view(batch_size, tag_size, 1).expand(batch_size, tag_size, tag_size)",
                            "BinOp"
                        ],
                        [
                            "seq_iter",
                            "variable"
                        ],
                        [
                            "cur_values + partition.contiguous().view(batch_size, tag_size, 1).expand(batch_size, tag_size, tag_size)",
                            "BinOp"
                        ],
                        [
                            "seq_iter",
                            "variable"
                        ],
                        [
                            "cur_values.view(batch_size, tag_size, tag_size) + partition.contiguous().view(batch_size, tag_size, 1).expand(batch_size, tag_size, tag_size)",
                            "BinOp"
                        ],
                        [
                            "cur_values.view(batch_size, tag_size, 1, tag_size).expand(batch_size, tag_size, nbest, tag_size) + partition.contiguous().view(batch_size, tag_size, nbest, 1).expand(batch_size, tag_size, nbest, tag_size)",
                            "BinOp"
                        ],
                        [
                            "cur_values.view(batch_size, tag_size * nbest, tag_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_193": {
                "variable": {
                    "value": "pointer",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "back_points[idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "pointer.contiguous().view(batch_size, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "topk_318": {
                "variable": {
                    "value": "(partition, cur_bp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "cur_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seq_iter",
                            "variable"
                        ],
                        [
                            "cur_values + partition.contiguous().view(batch_size, tag_size, 1).expand(batch_size, tag_size, tag_size)",
                            "BinOp"
                        ],
                        [
                            "self.transitions.view(1, tag_size, tag_size).expand(batch_size, tag_size, tag_size) + partition.contiguous().view(batch_size, tag_size, 1).expand(batch_size, tag_size, tag_size)",
                            "BinOp"
                        ],
                        [
                            "seq_iter",
                            "variable"
                        ],
                        [
                            "cur_values + partition.contiguous().view(batch_size, tag_size, 1).expand(batch_size, tag_size, tag_size)",
                            "BinOp"
                        ],
                        [
                            "seq_iter",
                            "variable"
                        ],
                        [
                            "cur_values.view(batch_size, tag_size, tag_size) + partition.contiguous().view(batch_size, tag_size, 1).expand(batch_size, tag_size, tag_size)",
                            "BinOp"
                        ],
                        [
                            "cur_values.view(batch_size, tag_size, 1, tag_size).expand(batch_size, tag_size, nbest, tag_size) + partition.contiguous().view(batch_size, tag_size, nbest, 1).expand(batch_size, tag_size, nbest, tag_size)",
                            "BinOp"
                        ],
                        [
                            "cur_values.view(batch_size, tag_size * nbest, tag_size)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "nbest",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nbest",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_395": {
                "variable": {
                    "value": "new_pointer",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "back_points[idx].view(batch_size, tag_size * nbest)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "pointer.contiguous().view(batch_size, nbest)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_27": {
                "input": {
                    "value": "torch.exp(vec - max_score.expand_as(vec))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_170": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feats.size(0)",
                            "Call"
                        ],
                        [
                            "feats.size(0)",
                            "Call"
                        ],
                        [
                            "scores.size(1)",
                            "Call"
                        ],
                        [
                            "feats.size(0)",
                            "Call"
                        ],
                        [
                            "feats.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "tag_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feats.size(2)",
                            "Call"
                        ],
                        [
                            "feats.size(2)",
                            "Call"
                        ],
                        [
                            "scores.size(2)",
                            "Call"
                        ],
                        [
                            "feats.size(2)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_351": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feats.size(0)",
                            "Call"
                        ],
                        [
                            "feats.size(0)",
                            "Call"
                        ],
                        [
                            "scores.size(1)",
                            "Call"
                        ],
                        [
                            "feats.size(0)",
                            "Call"
                        ],
                        [
                            "feats.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "tag_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feats.size(2)",
                            "Call"
                        ],
                        [
                            "feats.size(2)",
                            "Call"
                        ],
                        [
                            "scores.size(2)",
                            "Call"
                        ],
                        [
                            "feats.size(2)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "nbest",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nbest",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "exp_27": {
                "input": {
                    "value": "vec - max_score.expand_as(vec)",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "flair/__init__.py": {
        "torch": {
            "is_available_9": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_10": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_12": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "flair/config_parser.py": {
        "torch": {
            "ConcatDataset_82": {
                "variable": {
                    "value": "self.corpus._train",
                    "type": "Attribute",
                    "possible_values": []
                },
                "datasets": {
                    "value": "new_train_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "new_train_set + self.unlabeled_corpus.train_list",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ConcatDataset_86": {
                "variable": {
                    "value": "self.corpus._dev",
                    "type": "Attribute",
                    "possible_values": []
                },
                "datasets": {
                    "value": "new_dev_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "new_dev_set + self.unlabeled_corpus.dev_list",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ConcatDataset_90": {
                "variable": {
                    "value": "self.corpus._train",
                    "type": "Attribute",
                    "possible_values": []
                },
                "datasets": {
                    "value": "self.corpus.train_list + self.unlabeled_corpus.train_list",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "where_124": {
                "condition": {
                    "value": "torch.Tensor(list(test.values())) <= mincount",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "ConcatDataset_246": {
                "datasets": {
                    "value": "[train, self.corpus.dev_list[index]]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "flair/custom_data_loader.py": {
        "torch": {
            "zeros_155": {
                "variable": {
                    "value": "word_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[len(batch), max_len]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_157": {
                "variable": {
                    "value": "char_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[len(batch), max_len, max(max_char_len)]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ones_158": {
                "variable": {
                    "value": "char_length_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[len(batch), max_len]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_197": {
                "variable": {
                    "value": "word_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[len(batch), max_len]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_199": {
                "variable": {
                    "value": "char_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[len(batch), max_len, max(max_char_len)]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ones_200": {
                "variable": {
                    "value": "char_length_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[len(batch), max_len]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "stack_257": {
                "variable": {
                    "value": "arc_tags",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[getattr(sentence, tag_type + '_arc_tags') for sentence in batch]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_258": {
                "variable": {
                    "value": "rel_tags",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[getattr(sentence, tag_type + '_rel_tags') for sentence in batch]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_262": {
                "variable": {
                    "value": "tag_list",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[getattr(sentence, tag_type + '_tags') for sentence in batch]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_325": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_206": {
                "variable": {
                    "value": "arc_template",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[max_len, max_len]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_207": {
                "variable": {
                    "value": "rel_template",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[max_len, max_len]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_227": {
                "variable": {
                    "value": "arc_template",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "max_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "UnaryOp"
                        ],
                        [
                            "len(sentence)",
                            "Call"
                        ],
                        [
                            "-1",
                            "UnaryOp"
                        ],
                        [
                            "len(sentence)",
                            "Call"
                        ],
                        [
                            "-1",
                            "UnaryOp"
                        ],
                        [
                            "len(sentence)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_228": {
                "variable": {
                    "value": "arcs",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "arcs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[token.head_id for token in sentence]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(arcs, device='cpu')",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_230": {
                "variable": {
                    "value": "rel_template",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "max_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "UnaryOp"
                        ],
                        [
                            "len(sentence)",
                            "Call"
                        ],
                        [
                            "-1",
                            "UnaryOp"
                        ],
                        [
                            "len(sentence)",
                            "Call"
                        ],
                        [
                            "-1",
                            "UnaryOp"
                        ],
                        [
                            "len(sentence)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_231": {
                "variable": {
                    "value": "rels",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "rels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tag_dictionary.get_idx_for_item(token.get_tag(tag_type).value) for token in sentence]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(rels, device='cpu')",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_242": {
                "variable": {
                    "value": "tag_template",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "max_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "UnaryOp"
                        ],
                        [
                            "len(sentence)",
                            "Call"
                        ],
                        [
                            "-1",
                            "UnaryOp"
                        ],
                        [
                            "len(sentence)",
                            "Call"
                        ],
                        [
                            "-1",
                            "UnaryOp"
                        ],
                        [
                            "len(sentence)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_243": {
                "variable": {
                    "value": "tag",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "tag_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tag_dictionary.get_idx_for_item(token.get_tag(tag_type).value) for token in sentence]",
                            "ListComp"
                        ]
                    ]
                },
                "device": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "flair/data.py": {
        "torch": {
            "stack_784": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "_teacher_prediction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_teacher_prediction",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Subset_877": {
                "variable": {
                    "value": "subset",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset",
                            "Method Argument"
                        ]
                    ]
                },
                "indices": {
                    "value": "non_empty_sentence_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "tensor_242": {
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "flair.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tensor_250": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tensor_565": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_773": {
                "tensors": {
                    "value": "self._teacher_target",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_775": {
                "tensors": {
                    "value": "self._teacher_rel_target",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_777": {
                "tensors": {
                    "value": "self._teacher_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_779": {
                "tensors": {
                    "value": "self._teacher_sentfeats",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_781": {
                "tensors": {
                    "value": "self._teacher_posteriors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ConcatDataset_1061": {
                "datasets": {
                    "value": "[self.train, self.dev, self.test]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_240": {
                "tensors": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[self._embeddings[embed] for embed in sorted(self._embeddings.keys())]",
                            "ListComp"
                        ],
                        [
                            "[self._embeddings[embed] for embed in sorted(names)]",
                            "ListComp"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_248": {
                "tensors": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[self._embeddings[embed] for embed in sorted(self._embeddings.keys())]",
                            "ListComp"
                        ],
                        [
                            "[self._embeddings[embed] for embed in sorted(names)]",
                            "ListComp"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_563": {
                "tensors": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[self._embeddings[embed] for embed in sorted(self._embeddings.keys())]",
                            "ListComp"
                        ],
                        [
                            "[self._embeddings[embed] for embed in sorted(names)]",
                            "ListComp"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConcatDataset_1092": {
                "datasets": {
                    "value": "[corpus.train for corpus in self.corpora]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ConcatDataset_1093": {
                "datasets": {
                    "value": "[corpus.dev for corpus in self.corpora]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ConcatDataset_1094": {
                "datasets": {
                    "value": "[corpus.test for corpus in self.corpora]",
                    "type": "ListComp",
                    "possible_values": []
                }
            }
        }
    },
    "flair/datasets.py": {
        "torch": {}
    },
    "flair/embeddings.py": {
        "torch": {
            "zeros_104": {
                "variable": {
                    "value": "sentence_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[len(sentences), max(sentence_lengths), embedding_length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_517": {
                "variable": {
                    "value": "embeddings_tmp",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "embeddings_tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[torch.FloatTensor(precomputed_word_embeddings['unk']).unsqueeze(0)]",
                            "List"
                        ],
                        [
                            "[rand_emb(torch.FloatTensor(self.__embedding_length)).unsqueeze(0)]",
                            "List"
                        ],
                        [
                            "torch.cat(embeddings_tmp, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_519": {
                "variable": {
                    "value": "self.word_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "embeddings_tmp.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "embeddings_tmp.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Parameter_520": {
                "variable": {
                    "value": "self.word_embedding.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "embeddings_tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[torch.FloatTensor(precomputed_word_embeddings['unk']).unsqueeze(0)]",
                            "List"
                        ],
                        [
                            "[rand_emb(torch.FloatTensor(self.__embedding_length)).unsqueeze(0)]",
                            "List"
                        ],
                        [
                            "torch.cat(embeddings_tmp, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "Embedding_591": {
                "variable": {
                    "value": "self.char_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "len(self.char_dictionary)",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.char_embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_771": {
                "variable": {
                    "value": "self.embedding_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "len(self.vocab_dictionary)",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.__embedding_length",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_790": {
                "variable": {
                    "value": "one_hot_sentences",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "one_hot_sentences",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(one_hot_sentences, dtype=torch.long).to(flair.device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_1373": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[total_sentence_parts, longest_sequence_in_batch]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "flair.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_1378": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[total_sentence_parts, longest_sequence_in_batch]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "flair.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_1390": {
                "variable": {
                    "value": "hidden_states",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "hidden_states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(tokens_tensor)[-1]",
                            "Subscript"
                        ],
                        [
                            "self.model(torch.tensor([1], device=flair.device).unsqueeze(0))[-1]",
                            "Subscript"
                        ],
                        [
                            "self.model(input_ids, attention_mask=mask)[-1]",
                            "Subscript"
                        ],
                        [
                            "torch.stack(hidden_states)",
                            "Call"
                        ],
                        [
                            "torch.stack(self.model(doc_input_ids[i], attention_mask=doc_input_masks[i])[-1])[self.layer_indexes]",
                            "Subscript"
                        ],
                        [
                            "hidden_states.permute([1, 2, 3, 0])",
                            "Call"
                        ],
                        [
                            "[hidden_states[:, :, :, x] for x in range(len(self.layer_indexes))]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(hidden_states, -1)",
                            "Call"
                        ],
                        [
                            "hidden_states.cpu()",
                            "Call"
                        ],
                        [
                            "torch.stack(self.model(doc_input_ids, attention_mask=doc_input_masks)[-1])[self.layer_indexes]",
                            "Subscript"
                        ],
                        [
                            "hidden_states.permute([1, 2, 3, 0])",
                            "Call"
                        ],
                        [
                            "[hidden_states[:, :, :, x] for x in range(len(self.layer_indexes))]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(hidden_states, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_1928": {
                "variable": {
                    "value": "doc_input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[len(sentences), max_input_length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_1929": {
                "variable": {
                    "value": "doc_input_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[len(sentences), max_input_length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ParameterList_2122": {
                "variable": {
                    "value": "self.scalar_parameters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "parameters": {
                    "value": "[Parameter(torch.FloatTensor([initial_scalar_parameters[i]]).to(flair.device), requires_grad=False) for i in range(mixture_size)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Parameter_2131": {
                "variable": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor([1.0]).to(flair.device)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_2149": {
                "variable": {
                    "value": "normed_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat([parameter for parameter in self.scalar_parameters])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_2152": {
                "variable": {
                    "value": "normed_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "normed_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.softmax(torch.cat([parameter for parameter in self.scalar_parameters]), dim=0)",
                            "Call"
                        ],
                        [
                            "torch.split(normed_weights, split_size_or_sections=1)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_2271": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Embedding_2814": {
                "variable": {
                    "value": "self.char_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "len(self.char_dictionary.item2idx)",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.char_embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LSTM_2817": {
                "variable": {
                    "value": "self.char_rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.char_embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_4135": {
                "variable": {
                    "value": "self.word_reprojection_map",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.length_of_all_token_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.embeddings_dimension",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_4203": {
                "variable": {
                    "value": "sentence_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[len(sentences), longest_token_sequence_in_batch, self.embeddings.embedding_length]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "flair.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_4235": {
                "variable": {
                    "value": "packed",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sentence_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros([len(sentences), max(sentence_lengths), embedding_length]).type_as(sentences[0][0]._embeddings[self.name])",
                            "Call"
                        ],
                        [
                            "torch.zeros([len(sentences), longest_token_sequence_in_batch, self.embeddings.embedding_length], dtype=torch.float, device=flair.device)",
                            "Call"
                        ],
                        [
                            "sentence_tensor.transpose_(0, 1)",
                            "Call"
                        ],
                        [
                            "self.word_dropout(sentence_tensor)",
                            "Call"
                        ],
                        [
                            "self.word_reprojection_map(sentence_tensor)",
                            "Call"
                        ],
                        [
                            "self.dropout(sentence_tensor)",
                            "Call"
                        ],
                        [
                            "torch.cat(all_sentence_tensors, 1)",
                            "Call"
                        ],
                        [
                            "self.word_dropout(sentence_tensor)",
                            "Call"
                        ],
                        [
                            "self.word_reprojection_map(sentence_tensor)",
                            "Call"
                        ],
                        [
                            "self.dropout(sentence_tensor)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "pad_packed_sequence_4241": {
                "variable": {
                    "value": "(outputs, output_lengths)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "rnn_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.rnn(packed)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_4317": {
                "variable": {
                    "value": "self.word_reprojection_map",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.length_of_all_token_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.embeddings_dimension",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GRU_4320": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.embeddings_dimension",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "rnn_layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bidirectional": {
                    "value": "self.bidirectional",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_4392": {
                "variable": {
                    "value": "sentence_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_sentence_tensors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_4406": {
                "variable": {
                    "value": "packed",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sentence_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros([len(sentences), max(sentence_lengths), embedding_length]).type_as(sentences[0][0]._embeddings[self.name])",
                            "Call"
                        ],
                        [
                            "torch.zeros([len(sentences), longest_token_sequence_in_batch, self.embeddings.embedding_length], dtype=torch.float, device=flair.device)",
                            "Call"
                        ],
                        [
                            "sentence_tensor.transpose_(0, 1)",
                            "Call"
                        ],
                        [
                            "self.word_dropout(sentence_tensor)",
                            "Call"
                        ],
                        [
                            "self.word_reprojection_map(sentence_tensor)",
                            "Call"
                        ],
                        [
                            "self.dropout(sentence_tensor)",
                            "Call"
                        ],
                        [
                            "torch.cat(all_sentence_tensors, 1)",
                            "Call"
                        ],
                        [
                            "self.word_dropout(sentence_tensor)",
                            "Call"
                        ],
                        [
                            "self.word_reprojection_map(sentence_tensor)",
                            "Call"
                        ],
                        [
                            "self.dropout(sentence_tensor)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "pad_packed_sequence_4412": {
                "variable": {
                    "value": "(outputs, output_lengths)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "lstm_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.char_layer(pack_char_seqs, None)",
                            "Call"
                        ],
                        [
                            "self.char_rnn(packed)",
                            "Call"
                        ],
                        [
                            "self.rnn(packed)",
                            "Call"
                        ]
                    ]
                }
            },
            "Embedding_526": {
                "variable": {
                    "value": "self.empty_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "embeddings_tmp.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "embeddings_tmp.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Dropout_596": {
                "variable": {
                    "value": "self.char_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv1d_597": {
                "variable": {
                    "value": "self.char_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "char_embedding_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "hidden_size_char",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LSTM_600": {
                "variable": {
                    "value": "self.char_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.char_embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_pool1d_636": {
                "variable": {
                    "value": "char_cnn_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "char_cnn_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.char_layer(char_embeds.permute(1, 2, 0))",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.max_pool1d(char_cnn_out, char_cnn_out.size(2)).view(batch_size, char_batch, -1)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "char_cnn_out.size(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_639": {
                "variable": {
                    "value": "pack_char_seqs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "char_embeds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.char_embedding(char_seqs)",
                            "Call"
                        ],
                        [
                            "self.char_drop(char_embeds)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "char_lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sentences.char_lengths.to(flair.device)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "enforce_sorted": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ones_1386": {
                "variable": {
                    "value": "mask[s_id][:sequence_length]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "sequence_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(sentence)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_1672": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros([total_sentence_parts, longest_sequence_in_batch], dtype=torch.long, device=flair.device)",
                            "Call"
                        ],
                        [
                            "tokenizer.convert_tokens_to_ids(tokens)",
                            "Call"
                        ],
                        [
                            "torch.Tensor(doc_subtokens[window_start:window_end]).type_as(batch_input_ids)",
                            "Call"
                        ],
                        [
                            "self.tokenizer.convert_tokens_to_ids(tokens)",
                            "Call"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_1705": {
                "variable": {
                    "value": "doc_hidden_states",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[len(doc_subtokens), self.embedding_length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_1939": {
                "variable": {
                    "value": "hidden_states",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "hidden_states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(tokens_tensor)[-1]",
                            "Subscript"
                        ],
                        [
                            "self.model(torch.tensor([1], device=flair.device).unsqueeze(0))[-1]",
                            "Subscript"
                        ],
                        [
                            "self.model(input_ids, attention_mask=mask)[-1]",
                            "Subscript"
                        ],
                        [
                            "torch.stack(hidden_states)",
                            "Call"
                        ],
                        [
                            "torch.stack(self.model(doc_input_ids[i], attention_mask=doc_input_masks[i])[-1])[self.layer_indexes]",
                            "Subscript"
                        ],
                        [
                            "hidden_states.permute([1, 2, 3, 0])",
                            "Call"
                        ],
                        [
                            "[hidden_states[:, :, :, x] for x in range(len(self.layer_indexes))]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(hidden_states, -1)",
                            "Call"
                        ],
                        [
                            "hidden_states.cpu()",
                            "Call"
                        ],
                        [
                            "torch.stack(self.model(doc_input_ids, attention_mask=doc_input_masks)[-1])[self.layer_indexes]",
                            "Subscript"
                        ],
                        [
                            "hidden_states.permute([1, 2, 3, 0])",
                            "Call"
                        ],
                        [
                            "[hidden_states[:, :, :, x] for x in range(len(self.layer_indexes))]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(hidden_states, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_2313": {
                "variable": {
                    "value": "tokens_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[indexed_tokens]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_2857": {
                "variable": {
                    "value": "tokens_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(tokens_sorted_by_length), longest_token_in_sentence)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "flair.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_2873": {
                "variable": {
                    "value": "packed",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "character_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.char_embedding(chars).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "chars_embeds_temp.clone()",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "chars2_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[len(c) for c in tokens_sorted_by_length]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "pad_packed_sequence_2879": {
                "variable": {
                    "value": "(outputs, output_lengths)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "lstm_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.char_layer(pack_char_seqs, None)",
                            "Call"
                        ],
                        [
                            "self.char_rnn(packed)",
                            "Call"
                        ],
                        [
                            "self.rnn(packed)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_2881": {
                "variable": {
                    "value": "chars_embeds_temp",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(outputs.size(0), outputs.size(2))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "flair.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_4018": {
                "variable": {
                    "value": "self.embedding_flex",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.embedding_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.embedding_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_4024": {
                "variable": {
                    "value": "self.embedding_flex_nonlinear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "self.embedding_length",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_4025": {
                "variable": {
                    "value": "self.embedding_flex_nonlinear_map",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.embedding_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.embedding_length",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_4063": {
                "variable": {
                    "value": "word_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "word_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(word_embeddings, dim=0).to(flair.device)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(word_embeddings, dim=0).to(flair.device)",
                            "Call"
                        ],
                        [
                            "self.embedding_flex(word_embeddings)",
                            "Call"
                        ],
                        [
                            "self.embedding_flex_nonlinear(word_embeddings)",
                            "Call"
                        ],
                        [
                            "self.embedding_flex_nonlinear_map(word_embeddings)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LSTM_4141": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.embeddings_dimension",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "rnn_layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bidirectional": {
                    "value": "self.bidirectional",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GRU_4148": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.embeddings_dimension",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "rnn_layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bidirectional": {
                    "value": "self.bidirectional",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_4161": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_4217": {
                "variable": {
                    "value": "sentence_tensor[s_id][:len(sentence)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[token.get_embedding().unsqueeze(0) for token in sentence]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_4331": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_4382": {
                "variable": {
                    "value": "word_embeddings_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "word_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(word_embeddings, dim=0).to(flair.device)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(word_embeddings, dim=0).to(flair.device)",
                            "Call"
                        ],
                        [
                            "self.embedding_flex(word_embeddings)",
                            "Call"
                        ],
                        [
                            "self.embedding_flex_nonlinear(word_embeddings)",
                            "Call"
                        ],
                        [
                            "self.embedding_flex_nonlinear_map(word_embeddings)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1083": {
                "variable": {
                    "value": "word_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.FloatTensor(sentence_embeddings[0, token_idx, :]), torch.FloatTensor(sentence_embeddings[1, token_idx, :]), torch.FloatTensor(sentence_embeddings[2, token_idx, :])]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "enable_grad_1395": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_1395": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_1644": {
                "variable": {
                    "value": "batch_input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[batch_size, window_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "flair.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_1649": {
                "variable": {
                    "value": "batch_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[batch_size, window_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "flair.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "enable_grad_1696": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_1696": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_1713": {
                "variable": {
                    "value": "hidden_states",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "hidden_states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(tokens_tensor)[-1]",
                            "Subscript"
                        ],
                        [
                            "self.model(torch.tensor([1], device=flair.device).unsqueeze(0))[-1]",
                            "Subscript"
                        ],
                        [
                            "self.model(input_ids, attention_mask=mask)[-1]",
                            "Subscript"
                        ],
                        [
                            "torch.stack(hidden_states)",
                            "Call"
                        ],
                        [
                            "torch.stack(self.model(doc_input_ids[i], attention_mask=doc_input_masks[i])[-1])[self.layer_indexes]",
                            "Subscript"
                        ],
                        [
                            "hidden_states.permute([1, 2, 3, 0])",
                            "Call"
                        ],
                        [
                            "[hidden_states[:, :, :, x] for x in range(len(self.layer_indexes))]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(hidden_states, -1)",
                            "Call"
                        ],
                        [
                            "hidden_states.cpu()",
                            "Call"
                        ],
                        [
                            "torch.stack(self.model(doc_input_ids, attention_mask=doc_input_masks)[-1])[self.layer_indexes]",
                            "Subscript"
                        ],
                        [
                            "hidden_states.permute([1, 2, 3, 0])",
                            "Call"
                        ],
                        [
                            "[hidden_states[:, :, :, x] for x in range(len(self.layer_indexes))]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(hidden_states, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "enable_grad_1933": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_1933": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_2150": {
                "tensors": {
                    "value": "[parameter for parameter in self.scalar_parameters]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_2186": {
                "tensors": {
                    "value": "[first_embedding, last_embedding]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_2332": {
                "variable": {
                    "value": "final_subtoken_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "subtoken_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[sm_embeddings]",
                            "List"
                        ],
                        [
                            "_extract_embeddings(hidden_states=hidden_states, layers=layers, pooling_operation=pooling_operation, subword_start_idx=offset, subword_end_idx=offset + len_subwords, use_scalar_mix=use_scalar_mix)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[sm_embeddings]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "enable_grad_2761": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_2761": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_2864": {
                "variable": {
                    "value": "tokens_mask[i, :chars2_length[i]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "word",
                            "variable"
                        ],
                        [
                            "c in enumerate(tokens_sorted_by_length)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "flair.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "enable_grad_3241": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_3241": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "enable_grad_3575": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_3575": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_3989": {
                "variable": {
                    "value": "word_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "word_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(word_embeddings, dim=0).to(flair.device)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(word_embeddings, dim=0).to(flair.device)",
                            "Call"
                        ],
                        [
                            "self.embedding_flex(word_embeddings)",
                            "Call"
                        ],
                        [
                            "self.embedding_flex_nonlinear(word_embeddings)",
                            "Call"
                        ],
                        [
                            "self.embedding_flex_nonlinear_map(word_embeddings)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_3991": {
                "variable": {
                    "value": "mean_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "word_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(word_embeddings, dim=0).to(flair.device)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(word_embeddings, dim=0).to(flair.device)",
                            "Call"
                        ],
                        [
                            "self.embedding_flex(word_embeddings)",
                            "Call"
                        ],
                        [
                            "self.embedding_flex_nonlinear(word_embeddings)",
                            "Call"
                        ],
                        [
                            "self.embedding_flex_nonlinear_map(word_embeddings)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_4254": {
                "variable": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[first_rep, last_rep]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_4425": {
                "variable": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[first_rep, last_rep]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_467": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1410": {
                "variable": {
                    "value": "sentence_hidden_state",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(sentence_hidden_state[:, :-1 - self.stride // 2, :], remainder_sentence_hidden_state[:, 1 + self.stride // 2:, :])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_1936": {
                "tensors": {
                    "value": "self.model(doc_input_ids, attention_mask=doc_input_masks)[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Parameter_2124": {
                "data": {
                    "value": "torch.FloatTensor([initial_scalar_parameters[i]]).to(flair.device)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "eye_4021": {
                "n": {
                    "value": "self.embedding_length",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_1175": {
                "data": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "flair.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_1175": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "where_1322": {
                "condition": {
                    "value": "token_subtoken_lengths > self.maximum_subtoken_length",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "tensor_1350": {
                "data": {
                    "value": "subtoken_ids_split_sentence",
                    "type": "variable",
                    "possible_values": [
                        [
                            "encoded_inputs['input_ids']",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_1362": {
                "*size": {
                    "value": "self.embedding_length",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_1449": {
                "variable": {
                    "value": "sm_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.stack(subtoken_embeddings, dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_1707": {
                "tensors": {
                    "value": "self.model(doc_input_ids[i], attention_mask=doc_input_masks[i])[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mean_2195": {
                "input": {
                    "value": "torch.cat(all_embeddings, dim=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_3637": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat(embeddings, dim=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_4377": {
                "*size": {
                    "value": "self.length_of_all_token_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_4377": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_980": {
                "*size": {
                    "value": "self.embedding_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_989": {
                "data": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedding in enumerate(embeddings)",
                            "Call"
                        ],
                        [
                            "embeddings",
                            "variable"
                        ],
                        [
                            "self.embeddings",
                            "Attribute"
                        ],
                        [
                            "self.embeddings",
                            "Attribute"
                        ],
                        [
                            "embedded[index]",
                            "Subscript"
                        ],
                        [
                            "np.concatenate((embeddings[0], embeddings[len(embeddings) - 1]))",
                            "Call"
                        ],
                        [
                            "embeddings[token_idx]",
                            "Subscript"
                        ],
                        [
                            "all_hidden_states_in_lm[offset, i, :]",
                            "Subscript"
                        ],
                        [
                            "embedding.detach()",
                            "Call"
                        ],
                        [
                            "zip(sentence, embeddings)",
                            "Call"
                        ],
                        [
                            "all_hidden_states_in_lm[offset, i, :]",
                            "Subscript"
                        ],
                        [
                            "last_rep",
                            "variable"
                        ],
                        [
                            "torch.cat([first_rep, last_rep], 0)",
                            "Call"
                        ],
                        [
                            "last_rep",
                            "variable"
                        ],
                        [
                            "torch.cat([first_rep, last_rep], 0)",
                            "Call"
                        ],
                        [
                            "embedding in enumerate(flair_embeddings)",
                            "Call"
                        ],
                        [
                            "self.embeddings",
                            "Attribute"
                        ],
                        [
                            "embedding",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_1455": {
                "tensors": {
                    "value": "subtoken_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[sm_embeddings]",
                            "List"
                        ],
                        [
                            "_extract_embeddings(hidden_states=hidden_states, layers=layers, pooling_operation=pooling_operation, subword_start_idx=offset, subword_end_idx=offset + len_subwords, use_scalar_mix=use_scalar_mix)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[sm_embeddings]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cat_1755": {
                "tensors": {
                    "value": "[current_embeddings[0], current_embeddings[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "mean_1761": {
                "input": {
                    "value": "torch.cat(all_embeddings, dim=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1973": {
                "tensors": {
                    "value": "[current_embeddings[0], current_embeddings[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "mean_1979": {
                "input": {
                    "value": "torch.cat(all_embeddings, dim=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_2196": {
                "tensors": {
                    "value": "all_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[embedding.unsqueeze(0) for embedding in current_embeddings]",
                            "ListComp"
                        ],
                        [
                            "[embedding.unsqueeze(0) for embedding in current_embeddings]",
                            "ListComp"
                        ],
                        [
                            "[embedding.unsqueeze(0) for embedding in current_embeddings]",
                            "ListComp"
                        ],
                        [
                            "[embedding.unsqueeze(0) for embedding in current_embeddings]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_3617": {
                "tensors": {
                    "value": "all_layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[sm_embeddings]",
                            "List"
                        ]
                    ]
                }
            },
            "zeros_1419": {
                "*size": {
                    "value": "self.embedding_length",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_1437": {
                "tensors": {
                    "value": "[current_embeddings[0], current_embeddings[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "mean_1443": {
                "input": {
                    "value": "torch.cat(all_embeddings, dim=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_1449": {
                "tensors": {
                    "value": "subtoken_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[sm_embeddings]",
                            "List"
                        ],
                        [
                            "_extract_embeddings(hidden_states=hidden_states, layers=layers, pooling_operation=pooling_operation, subword_start_idx=offset, subword_end_idx=offset + len_subwords, use_scalar_mix=use_scalar_mix)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[sm_embeddings]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_1722": {},
            "zeros_1739": {
                "*size": {
                    "value": "self.embedding_length",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_1761": {
                "tensors": {
                    "value": "all_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[embedding.unsqueeze(0) for embedding in current_embeddings]",
                            "ListComp"
                        ],
                        [
                            "[embedding.unsqueeze(0) for embedding in current_embeddings]",
                            "ListComp"
                        ],
                        [
                            "[embedding.unsqueeze(0) for embedding in current_embeddings]",
                            "ListComp"
                        ],
                        [
                            "[embedding.unsqueeze(0) for embedding in current_embeddings]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_1955": {
                "*size": {
                    "value": "self.embedding_length",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_1979": {
                "tensors": {
                    "value": "all_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[embedding.unsqueeze(0) for embedding in current_embeddings]",
                            "ListComp"
                        ],
                        [
                            "[embedding.unsqueeze(0) for embedding in current_embeddings]",
                            "ListComp"
                        ],
                        [
                            "[embedding.unsqueeze(0) for embedding in current_embeddings]",
                            "ListComp"
                        ],
                        [
                            "[embedding.unsqueeze(0) for embedding in current_embeddings]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_3637": {
                "tensors": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cached_path(f'{hu_path}/glove.gensim', cache_dir=cache_dir)",
                            "Call"
                        ],
                        [
                            "cached_path(f'{hu_path}/turian', cache_dir=cache_dir)",
                            "Call"
                        ],
                        [
                            "cached_path(f'{hu_path}/extvec.gensim', cache_dir=cache_dir)",
                            "Call"
                        ],
                        [
                            "cached_path(f'{hu_path}/pubmed_pmc_wiki_sg_1M.gensim', cache_dir=cache_dir)",
                            "Call"
                        ],
                        [
                            "cached_path(f'{hu_path}/en-fasttext-crawl-300d-1M', cache_dir=cache_dir)",
                            "Call"
                        ],
                        [
                            "cached_path(f'{hu_path}/en-fasttext-news-300d-1M', cache_dir=cache_dir)",
                            "Call"
                        ],
                        [
                            "cached_path(f'{hu_path}/twitter.gensim', cache_dir=cache_dir)",
                            "Call"
                        ],
                        [
                            "cached_path(f'{hu_path}/{embeddings}-wiki-fasttext-300d-1M', cache_dir=cache_dir)",
                            "Call"
                        ],
                        [
                            "cached_path(f'{hu_path}/{embeddings[:2]}-wiki-fasttext-300d-1M', cache_dir=cache_dir)",
                            "Call"
                        ],
                        [
                            "cached_path(f'{hu_path}/{embeddings[:2]}-crawl-fasttext-300d-1M', cache_dir=cache_dir)",
                            "Call"
                        ],
                        [
                            "Path(flair.cache_root) / cache_dir / f'{embeddings.lower()}.txt'",
                            "BinOp"
                        ],
                        [
                            "Path(flair.cache_root) / cache_dir / f'{embeddings}'",
                            "BinOp"
                        ],
                        [
                            "Path(flair.cache_root) / cache_dir / f'{embeddings.lower()}.300.txt'",
                            "BinOp"
                        ],
                        [
                            "cached_path(f'{hu_path}/glove.gensim', cache_dir=cache_dir)",
                            "Call"
                        ],
                        [
                            "cached_path(f'{hu_path}/turian', cache_dir=cache_dir)",
                            "Call"
                        ],
                        [
                            "cached_path(f'{hu_path}/extvec.gensim', cache_dir=cache_dir)",
                            "Call"
                        ],
                        [
                            "cached_path(f'{hu_path}/pubmed_pmc_wiki_sg_1M.gensim', cache_dir=cache_dir)",
                            "Call"
                        ],
                        [
                            "cached_path(f'{hu_path}/en-fasttext-crawl-300d-1M', cache_dir=cache_dir)",
                            "Call"
                        ],
                        [
                            "cached_path(f'{hu_path}/en-fasttext-news-300d-1M', cache_dir=cache_dir)",
                            "Call"
                        ],
                        [
                            "cached_path(f'{hu_path}/twitter.gensim', cache_dir=cache_dir)",
                            "Call"
                        ],
                        [
                            "cached_path(f'{hu_path}/{embeddings}-wiki-fasttext-300d-1M', cache_dir=cache_dir)",
                            "Call"
                        ],
                        [
                            "cached_path(f'{hu_path}/{embeddings[:2]}-wiki-fasttext-300d-1M', cache_dir=cache_dir)",
                            "Call"
                        ],
                        [
                            "cached_path(f'{hu_path}/{embeddings[:2]}-crawl-fasttext-300d-1M', cache_dir=cache_dir)",
                            "Call"
                        ],
                        [
                            "Path(flair.cache_root) / cache_dir / f'{embeddings.lower()}.txt'",
                            "BinOp"
                        ],
                        [
                            "Path(flair.cache_root) / cache_dir / f'{embeddings}'",
                            "BinOp"
                        ],
                        [
                            "Path(flair.cache_root) / cache_dir / f'{embeddings}'",
                            "BinOp"
                        ],
                        [
                            "Path(flair.cache_root) / cache_dir / f'{embeddings}'",
                            "BinOp"
                        ],
                        [
                            "Path(flair.cache_root) / cache_dir / f'{embeddings.lower()}.300.txt'",
                            "BinOp"
                        ],
                        [
                            "self.word_embedding(words)",
                            "Call"
                        ],
                        [
                            "embeddings + self.empty_embedding(words)",
                            "BinOp"
                        ],
                        [
                            "self.embed_sentences(sentences)",
                            "Call"
                        ],
                        [
                            "self.embed_sentences(sentences)",
                            "Call"
                        ],
                        [
                            "cached_path(f'{embeddings}', cache_dir=cache_dir)",
                            "Call"
                        ],
                        [
                            "self.embedder.embed(word.lower())",
                            "Call"
                        ],
                        [
                            "self.ee.embed_batch(sentence_words)",
                            "Call"
                        ],
                        [
                            "self.lm_embedder(indices_tensor)[0].detach().cpu().numpy()",
                            "Call"
                        ],
                        [
                            "subtoken_embeddings[token_idx:token_idx + feature.token_subtoken_count[token.idx]]",
                            "Subscript"
                        ],
                        [
                            "[embedding.unsqueeze(0) for embedding in embeddings]",
                            "ListComp"
                        ],
                        [
                            "self.cache.get(key)",
                            "Call"
                        ],
                        [
                            "cached_path(f'{base_path}{embeddings}/{embeddings}_s{size}.zip', cache_dir=cache_dir)",
                            "Call"
                        ],
                        [
                            "cached_path(f'{base_path}{embeddings}/{model}_s{size}.zip', cache_dir=cache_dir)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1443": {
                "tensors": {
                    "value": "all_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[embedding.unsqueeze(0) for embedding in current_embeddings]",
                            "ListComp"
                        ],
                        [
                            "[embedding.unsqueeze(0) for embedding in current_embeddings]",
                            "ListComp"
                        ],
                        [
                            "[embedding.unsqueeze(0) for embedding in current_embeddings]",
                            "ListComp"
                        ],
                        [
                            "[embedding.unsqueeze(0) for embedding in current_embeddings]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "flair/linear_functions.py": {
        "torch": {
            "Parameter_38": {
                "variable": {
                    "value": "self.tag_emd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.tagset_size, self.temb_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_39": {
                "variable": {
                    "value": "self.T",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.wemb_size, self.rank)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_40": {
                "variable": {
                    "value": "self.U",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.wemb_size, self.rank)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_41": {
                "variable": {
                    "value": "self.V",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.temb_size, self.rank)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_42": {
                "variable": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.temb_size, self.rank)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_73": {
                "variable": {
                    "value": "g0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "word_emb[:, :-self.window_size]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "self.U",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_75": {
                "variable": {
                    "value": "g1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "word_emb[:, self.window_size:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "self.T",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_77": {
                "variable": {
                    "value": "g2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.tag_emd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "self.V",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_79": {
                "variable": {
                    "value": "g3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.tag_emd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "einsum_83": {
                "variable": {
                    "value": "temp012",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "nak,bk->nabk",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[temp01, g2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "einsum_85": {
                "variable": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "nabk,ck->nabc",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[temp012, g3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Parameter_112": {
                "variable": {
                    "value": "self.tag_emd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.tagset_size, self.temb_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_113": {
                "variable": {
                    "value": "self.W1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.wemb_size, self.rank)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_114": {
                "variable": {
                    "value": "self.W2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.wemb_size, self.rank)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_115": {
                "variable": {
                    "value": "self.W3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.wemb_size, self.rank)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_116": {
                "variable": {
                    "value": "self.T1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.temb_size, self.rank)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_117": {
                "variable": {
                    "value": "self.T2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.temb_size, self.rank)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_118": {
                "variable": {
                    "value": "self.T3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.temb_size, self.rank)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_154": {
                "variable": {
                    "value": "g1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "word_emb[:, :-2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "self.W1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_156": {
                "variable": {
                    "value": "g2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "word_emb[:, 1:-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "self.W2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_158": {
                "variable": {
                    "value": "g3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "word_emb[:, 2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "self.W3",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_162": {
                "variable": {
                    "value": "g4",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.tag_emd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "self.T1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_164": {
                "variable": {
                    "value": "g5",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.tag_emd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "self.T2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_166": {
                "variable": {
                    "value": "g6",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.tag_emd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "self.T3",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "einsum_170": {
                "variable": {
                    "value": "temp02",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ak,bk,ck->abck",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[g4, g5, g6]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "einsum_172": {
                "variable": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "nmk,abck->nmabc",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[temp01, temp02]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "flair/models/biaffine_attention.py": {
        "torch": {
            "Linear_31": {
                "variable": {
                    "value": "self.linear_encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.input_size_encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_32": {
                "variable": {
                    "value": "self.linear_decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.input_size_decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_36": {
                "variable": {
                    "value": "self.W_d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.num_labels, self.hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_37": {
                "variable": {
                    "value": "self.W_e",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.num_labels, self.hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_38": {
                "variable": {
                    "value": "self.b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, self.num_labels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_73": {
                "variable": {
                    "value": "out_e",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.W_e",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "input_s.transpose(1, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_73": {
                "variable": {
                    "value": "out_e",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_77": {
                "variable": {
                    "value": "out_d",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "nd,bnd->bn",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "self.W_d",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_96": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.einsum('bd,nde->bne', input_s, self.U)",
                            "Call"
                        ],
                        [
                            "torch.einsum('bne,bne->bn', output, input_t)",
                            "Call"
                        ],
                        [
                            "output + out_d + out_e + self.b",
                            "BinOp"
                        ],
                        [
                            "out_d + out_d + self.b",
                            "BinOp"
                        ],
                        [
                            "output * mask_d.unsqueeze(1).unsqueeze(3) * mask_e.unsqueeze(1).unsqueeze(2)",
                            "BinOp"
                        ],
                        [
                            "torch.nn.functional.softmax(output, 1)",
                            "Call"
                        ],
                        [
                            "torch.einsum('bd,de->be', input_s, self.U)",
                            "Call"
                        ],
                        [
                            "torch.einsum('be,ce->bc', output, input_t)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_125": {
                "variable": {
                    "value": "self.linear_encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.input_size_encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_126": {
                "variable": {
                    "value": "self.linear_decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.input_size_decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_132": {
                "variable": {
                    "value": "self.U",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.hidden_size, self.hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "einsum_163": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bd,de->be",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "input_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.linear_encoder(input_s)",
                            "Call"
                        ],
                        [
                            "self.linear_encoder(input_s)",
                            "Call"
                        ],
                        [
                            "input_s",
                            "Method Argument"
                        ],
                        [
                            "input_s",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "einsum_167": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "be,ce->bc",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.einsum('bd,nde->bne', input_s, self.U)",
                            "Call"
                        ],
                        [
                            "torch.einsum('bne,bne->bn', output, input_t)",
                            "Call"
                        ],
                        [
                            "output + out_d + out_e + self.b",
                            "BinOp"
                        ],
                        [
                            "out_d + out_d + self.b",
                            "BinOp"
                        ],
                        [
                            "output * mask_d.unsqueeze(1).unsqueeze(3) * mask_e.unsqueeze(1).unsqueeze(2)",
                            "BinOp"
                        ],
                        [
                            "torch.nn.functional.softmax(output, 1)",
                            "Call"
                        ],
                        [
                            "torch.einsum('bd,de->be', input_s, self.U)",
                            "Call"
                        ],
                        [
                            "torch.einsum('be,ce->bc', output, input_t)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_40": {
                "variable": {
                    "value": "self.U",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.num_labels, self.hidden_size, self.hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "einsum_85": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bd,nde->bne",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "input_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.linear_encoder(input_s)",
                            "Call"
                        ],
                        [
                            "self.linear_encoder(input_s)",
                            "Call"
                        ],
                        [
                            "input_s",
                            "Method Argument"
                        ],
                        [
                            "input_s",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "einsum_89": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bne,bne->bn",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.einsum('bd,nde->bne', input_s, self.U)",
                            "Call"
                        ],
                        [
                            "torch.einsum('bne,bne->bn', output, input_t)",
                            "Call"
                        ],
                        [
                            "output + out_d + out_e + self.b",
                            "BinOp"
                        ],
                        [
                            "out_d + out_d + self.b",
                            "BinOp"
                        ],
                        [
                            "output * mask_d.unsqueeze(1).unsqueeze(3) * mask_e.unsqueeze(1).unsqueeze(2)",
                            "BinOp"
                        ],
                        [
                            "torch.nn.functional.softmax(output, 1)",
                            "Call"
                        ],
                        [
                            "torch.einsum('bd,de->be', input_s, self.U)",
                            "Call"
                        ],
                        [
                            "torch.einsum('be,ce->bc', output, input_t)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "flair/models/dependency_model.py": {
        "torch": {
            "zeros_64": {
                "variable": {
                    "value": "res_val",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[batch, sent_len + 1, sent_len + 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_77": {
                "variable": {
                    "value": "res_val",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[batch, sent_len + 1, sent_len + 1] + list(marginals.shape[3:])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_110": {
                "variable": {
                    "value": "(_, idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "vec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vec",
                            "Method Argument"
                        ],
                        [
                            "vec",
                            "Method Argument"
                        ],
                        [
                            "vec",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "max_121": {
                "variable": {
                    "value": "(_, idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "vecs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vecs",
                            "Method Argument"
                        ],
                        [
                            "vecs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_128": {
                "variable": {
                    "value": "recti_",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(torch.exp(vecs - maxi_bc), 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_141": {
                "variable": {
                    "value": "(_, idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "vec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vec",
                            "Method Argument"
                        ],
                        [
                            "vec",
                            "Method Argument"
                        ],
                        [
                            "vec",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "gather_142": {
                "variable": {
                    "value": "max_score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vec",
                            "Method Argument"
                        ],
                        [
                            "vec",
                            "Method Argument"
                        ],
                        [
                            "vec",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "idx.view(-1, 1, m_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_150": {
                "variable": {
                    "value": "template",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "*shape",
                    "type": "Starred",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "flair.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_409": {
                "variable": {
                    "value": "self.rel_criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_410": {
                "variable": {
                    "value": "self.arc_criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_524": {
                "variable": {
                    "value": "sentence_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sentences.features[x].to(flair.device) for x in sentences.features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "no_grad_1106": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_117": {
                "input": {
                    "value": "torch.sum(torch.exp(vec - max_score_broadcast))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_126": {
                "input": {
                    "value": "vecs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vecs",
                            "Method Argument"
                        ],
                        [
                            "vecs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sum_128": {
                "input": {
                    "value": "torch.exp(vecs - maxi_bc)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_144": {
                "input": {
                    "value": "torch.sum(torch.exp(vec - max_score.expand_as(vec)), 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_276": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_289": {
                "variable": {
                    "value": "self.embedding2nn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "rnn_input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embeddings.embedding_length",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "rnn_input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embeddings.embedding_length",
                            "Attribute"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_413": {
                "variable": {
                    "value": "self.rel_criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_414": {
                "variable": {
                    "value": "self.arc_criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_537": {
                "variable": {
                    "value": "sentence_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "sentence_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([sentences.features[x].to(flair.device) for x in sentences.features], -1)",
                            "Call"
                        ],
                        [
                            "[sentences.features[x].to(flair.device) for x in sorted(sentences.features.keys())]",
                            "ListComp"
                        ],
                        [
                            "self.embed_dropout(sentence_tensor)[0]",
                            "Subscript"
                        ],
                        [
                            "self.embedding2nn(sentence_tensor)",
                            "Call"
                        ],
                        [
                            "torch.cat(sentence_tensor, -1)",
                            "Call"
                        ],
                        [
                            "pad_packed_sequence(x, True, total_length=sentence_tensor.shape[1])",
                            "Call"
                        ],
                        [
                            "self.lstm_dropout_func(sentence_tensor)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_593": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sentence_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([sentences.features[x].to(flair.device) for x in sentences.features], -1)",
                            "Call"
                        ],
                        [
                            "[sentences.features[x].to(flair.device) for x in sorted(sentences.features.keys())]",
                            "ListComp"
                        ],
                        [
                            "self.embed_dropout(sentence_tensor)[0]",
                            "Subscript"
                        ],
                        [
                            "self.embedding2nn(sentence_tensor)",
                            "Call"
                        ],
                        [
                            "torch.cat(sentence_tensor, -1)",
                            "Call"
                        ],
                        [
                            "pad_packed_sequence(x, True, total_length=sentence_tensor.shape[1])",
                            "Call"
                        ],
                        [
                            "self.lstm_dropout_func(sentence_tensor)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[len(sentence.tokens) for sentence in sentences]",
                            "ListComp"
                        ],
                        [
                            "lengths",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "enforce_sorted": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_595": {
                "variable": {
                    "value": "(sentence_tensor, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x in enumerate(sorted(sentences.features.keys()))",
                            "Call"
                        ],
                        [
                            "x in enumerate(sorted(sentences.features.keys()))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(sentence_tensor, lengths, True, False)",
                            "Call"
                        ],
                        [
                            "self.rnn(x)",
                            "Call"
                        ],
                        [
                            "sentence_tensor",
                            "variable"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "total_length": {
                    "value": "sentence_tensor.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_753": {
                "variable": {
                    "value": "one_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "layer_sib.shape[-2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tril_754": {
                "variable": {
                    "value": "tril_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "one_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(layer_sib.shape[-2:]).cuda()",
                            "Call"
                        ],
                        [
                            "torch.ones(layer_cop.shape[-2:]).cuda()",
                            "Call"
                        ]
                    ]
                },
                "diagonal": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "triu_755": {
                "variable": {
                    "value": "triu_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "one_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(layer_sib.shape[-2:]).cuda()",
                            "Call"
                        ],
                        [
                            "torch.ones(layer_cop.shape[-2:]).cuda()",
                            "Call"
                        ]
                    ]
                },
                "diagonal": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_764": {
                "variable": {
                    "value": "one_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "layer_cop.shape[-2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tril_765": {
                "variable": {
                    "value": "tril_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "one_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(layer_sib.shape[-2:]).cuda()",
                            "Call"
                        ],
                        [
                            "torch.ones(layer_cop.shape[-2:]).cuda()",
                            "Call"
                        ]
                    ]
                },
                "diagonal": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "triu_766": {
                "variable": {
                    "value": "triu_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "one_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(layer_sib.shape[-2:]).cuda()",
                            "Call"
                        ],
                        [
                            "torch.ones(layer_cop.shape[-2:]).cuda()",
                            "Call"
                        ]
                    ]
                },
                "diagonal": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_831": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "max_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_len or lengths.max()",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "lt_831": {
                "input": {
                    "value": "lengths.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_56": {
                "start": {
                    "value": "sent_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "marginals.shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "arange_68": {
                "start": {
                    "value": "sent_len + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "arange_69": {
                "start": {
                    "value": "sent_len + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "arange_81": {
                "start": {
                    "value": "sent_len + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "arange_82": {
                "start": {
                    "value": "sent_len + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_117": {
                "input": {
                    "value": "torch.exp(vec - max_score_broadcast)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_128": {
                "input": {
                    "value": "vecs - maxi_bc",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_664": {
                "variable": {
                    "value": "q_value",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "unary_potential.clone()",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(q_value)",
                            "Call"
                        ],
                        [
                            "F.softmax(q_value, 1)",
                            "Call"
                        ],
                        [
                            "unary_potential + second_temp",
                            "BinOp"
                        ]
                    ]
                }
            },
            "softmax_666": {
                "variable": {
                    "value": "q_value",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "unary_potential.clone()",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(q_value)",
                            "Call"
                        ],
                        [
                            "F.softmax(q_value, 1)",
                            "Call"
                        ],
                        [
                            "unary_potential + second_temp",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_668": {
                "variable": {
                    "value": "second_temp_sib",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "nac,nabc->nab",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(q_value, layer_sib)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "einsum_681": {
                "variable": {
                    "value": "second_temp_gp",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "nbc,nabc->nab",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(q_value, layer_gp)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "einsum_682": {
                "variable": {
                    "value": "second_temp_gp2",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "nca,nabc->nab",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(q_value, layer_gp2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "einsum_702": {
                "variable": {
                    "value": "second_temp_cop",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ncb,nabc->nab",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(q_value, layer_cop)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "stack_847": {
                "variable": {
                    "value": "arc_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[getattr(sentence, self.tag_type + '_arc_tags').to(flair.device) for sentence in sentences]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_851": {
                "variable": {
                    "value": "rel_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[getattr(sentence, self.tag_type + '_rel_tags').to(flair.device) for sentence in sentences]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_868": {
                "variable": {
                    "value": "arcs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[getattr(sentence, self.tag_type + '_arc_tags').to(flair.device) for sentence in sentences]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_872": {
                "variable": {
                    "value": "rels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[getattr(sentence, self.tag_type + '_rel_tags').to(flair.device) for sentence in sentences]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_943": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "exp_117": {
                "input": {
                    "value": "vec - max_score_broadcast",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_144": {
                "input": {
                    "value": "torch.exp(vec - max_score.expand_as(vec))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "diagonal_671": {
                "input": {
                    "value": "layer_sib.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim1": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dim2": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_671": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "transpose_671": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "diagonal_674": {
                "input": {
                    "value": "layer_sib",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_edge_second_order_node_scores(arc_sib, arc_cop, arc_gp, mask_sib, mask_cop, mask_gp)",
                            "Call"
                        ],
                        [
                            "self.trilinear_sib(edge_node_sib_h, edge_node_sib_m, edge_node_sib_m) * mask_sib",
                            "BinOp"
                        ],
                        [
                            "layer_sib - layer_sib * tril_mask.unsqueeze(0).unsqueeze(0) + (layer_sib * triu_mask.unsqueeze(0).unsqueeze(0)).permute([0, 1, 3, 2])",
                            "BinOp"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dim1": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dim2": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "diagonal_684": {
                "input": {
                    "value": "layer_gp.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim1": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dim2": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "transpose_684": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "diagonal_687": {
                "input": {
                    "value": "layer_gp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_edge_second_order_node_scores(arc_sib, arc_cop, arc_gp, mask_sib, mask_cop, mask_gp)",
                            "Call"
                        ],
                        [
                            "self.trilinear_gp(edge_node_gp_h, edge_node_gp_hm, edge_node_gp_m) * mask_gp",
                            "BinOp"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dim1": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dim2": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_687": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "diagonal_690": {
                "input": {
                    "value": "layer_gp2.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim1": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dim2": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_690": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "transpose_690": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "diagonal_693": {
                "input": {
                    "value": "layer_gp2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer_gp.permute(0, 2, 3, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim1": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dim2": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "diagonal_705": {
                "input": {
                    "value": "layer_cop.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim1": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dim2": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "transpose_705": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "diagonal_709": {
                "input": {
                    "value": "layer_cop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_edge_second_order_node_scores(arc_sib, arc_cop, arc_gp, mask_sib, mask_cop, mask_gp)",
                            "Call"
                        ],
                        [
                            "self.trilinear_cop(edge_node_cop_h, edge_node_cop_m, edge_node_cop_h) * mask_cop",
                            "BinOp"
                        ],
                        [
                            "layer_cop.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "layer_cop - layer_cop * tril_mask.unsqueeze(0).unsqueeze(0) + (layer_cop * triu_mask.unsqueeze(0).unsqueeze(0)).permute([0, 1, 3, 2])",
                            "BinOp"
                        ],
                        [
                            "layer_cop.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dim1": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dim2": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_709": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_879": {
                "start": {
                    "value": "len(gold_arcs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_970": {
                "variable": {
                    "value": "arc_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[getattr(sentence, self.tag_type + '_arc_tags').to(flair.device) for sentence in batch]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_971": {
                "variable": {
                    "value": "rel_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[getattr(sentence, self.tag_type + '_rel_tags').to(flair.device) for sentence in batch]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_144": {
                "input": {
                    "value": "vec - max_score.expand_as(vec)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_624": {
                "data": {
                    "value": "lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[len(sentence.tokens) for sentence in sentences]",
                            "ListComp"
                        ],
                        [
                            "lengths",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_1045": {
                "variable": {
                    "value": "val",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1047": {
                "variable": {
                    "value": "arc_heads",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[arc_heads, val]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_1034": {
                "input": {
                    "value": "masked_arc_scores[sent_idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "where_1043": {
                "condition": {
                    "value": "arc_predictions[sent_idx, token_idx] > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            }
        }
    },
    "flair/models/language_model.py": {
        "torch": {
            "Dropout_39": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Embedding_40": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "len(dictionary)",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "embedding_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_136": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "output_parts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "transpose_142": {
                "variable": {
                    "value": "input_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_164": {
                "variable": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "str(model_file)",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "flair.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_183": {
                "variable": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "str(model_file)",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "flair.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_344": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[self.dictionary.get_idx_for_item(char) for char in text[:-1]]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "unsqueeze_344": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_354": {
                "variable": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[self.dictionary.get_idx_for_item(char) for char in text[1:]]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_360": {
                "variable": {
                    "value": "cross_entroy_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LSTM_43": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "embedding_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LSTM_45": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "embedding_size",
                    "type": "variable",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_51": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "nout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_53": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "nout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "len(dictionary)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_56": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "len(dictionary)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_127": {
                "variable": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "sequences_as_char_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "flair.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_127": {
                "variable": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_231": {
                "obj": {
                    "value": "model_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'state_dict': self.state_dict(), 'dictionary': self.dictionary, 'is_forward_lm': self.is_forward_lm, 'hidden_size': self.hidden_size, 'nlayers': self.nlayers, 'embedding_size': self.embedding_size, 'nout': self.nout, 'dropout': self.dropout, 'optimizer_state_dict': optimizer.state_dict(), 'epoch': epoch, 'split': split, 'loss': loss}",
                            "Dict"
                        ],
                        [
                            "{'state_dict': self.state_dict(), 'dictionary': self.dictionary, 'is_forward_lm': self.is_forward_lm, 'hidden_size': self.hidden_size, 'nlayers': self.nlayers, 'embedding_size': self.embedding_size, 'nout': self.nout, 'dropout': self.dropout}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "str(file)",
                    "type": "Call",
                    "possible_values": []
                },
                "pickle_protocol": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_245": {
                "obj": {
                    "value": "model_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'state_dict': self.state_dict(), 'dictionary': self.dictionary, 'is_forward_lm': self.is_forward_lm, 'hidden_size': self.hidden_size, 'nlayers': self.nlayers, 'embedding_size': self.embedding_size, 'nout': self.nout, 'dropout': self.dropout, 'optimizer_state_dict': optimizer.state_dict(), 'epoch': epoch, 'split': split, 'loss': loss}",
                            "Dict"
                        ],
                        [
                            "{'state_dict': self.state_dict(), 'dictionary': self.dictionary, 'is_forward_lm': self.is_forward_lm, 'hidden_size': self.hidden_size, 'nlayers': self.nlayers, 'embedding_size': self.embedding_size, 'nout': self.nout, 'dropout': self.dropout}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "str(file)",
                    "type": "Call",
                    "possible_values": []
                },
                "pickle_protocol": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_281": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.dictionary.get_idx_for_item(prefix[-1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_281": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_258": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_276": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "char_tensors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "max_302": {
                "variable": {
                    "value": "max",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prediction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.forward(batch, hidden)",
                            "Call"
                        ],
                        [
                            "self.forward(input_vector, hidden)",
                            "Call"
                        ],
                        [
                            "self.forward(input, hidden)",
                            "Call"
                        ],
                        [
                            "self.forward(input, hidden)",
                            "Call"
                        ],
                        [
                            "prediction.squeeze().detach()",
                            "Call"
                        ],
                        [
                            "prediction.div(temperature)",
                            "Call"
                        ],
                        [
                            "prediction - max",
                            "BinOp"
                        ],
                        [
                            "self.forward(input, hidden)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_312": {
                "variable": {
                    "value": "word_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_271": {
                "data": {
                    "value": "self.dictionary.get_idx_for_item(character)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_271": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multinomial_310": {
                "input": {
                    "value": "word_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "prediction.exp().cpu()",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "flair/models/sequence_tagger_model.py": {
        "torch": {
            "max_41": {
                "variable": {
                    "value": "(_, idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "vec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vec",
                            "Method Argument"
                        ],
                        [
                            "vec",
                            "Method Argument"
                        ],
                        [
                            "vec",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "max_52": {
                "variable": {
                    "value": "(_, idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "vecs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vecs",
                            "Method Argument"
                        ],
                        [
                            "vecs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_59": {
                "variable": {
                    "value": "recti_",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(torch.exp(vecs - maxi_bc), 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_72": {
                "variable": {
                    "value": "(_, idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "vec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vec",
                            "Method Argument"
                        ],
                        [
                            "vec",
                            "Method Argument"
                        ],
                        [
                            "vec",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "gather_73": {
                "variable": {
                    "value": "max_score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vec",
                            "Method Argument"
                        ],
                        [
                            "vec",
                            "Method Argument"
                        ],
                        [
                            "vec",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "idx.view(-1, 1, m_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_81": {
                "variable": {
                    "value": "template",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "*shape",
                    "type": "Starred",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "flair.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_764": {
                "variable": {
                    "value": "start",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[self.tag_dictionary.get_idx_for_item(START_TAG)]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "flair.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_769": {
                "variable": {
                    "value": "stop",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[self.tag_dictionary.get_idx_for_item(STOP_TAG)]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "flair.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_774": {
                "variable": {
                    "value": "pad_start_tags",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[start, tags]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_775": {
                "variable": {
                    "value": "pad_stop_tags",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[tags, stop]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_985": {
                "variable": {
                    "value": "forward_var",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "feats.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "feats.shape[1] + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "flair.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_1038": {
                "variable": {
                    "value": "reversed_feats",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feats.transpose(1, 0).contiguous().view(ins_num, 1, tag_size).expand(ins_num, tag_size, tag_size)",
                            "Call"
                        ],
                        [
                            "feats",
                            "Method Argument"
                        ],
                        [
                            "feats",
                            "Method Argument"
                        ],
                        [
                            "feats",
                            "Method Argument"
                        ],
                        [
                            "feats",
                            "Method Argument"
                        ],
                        [
                            "feats",
                            "Method Argument"
                        ],
                        [
                            "feats",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_1048": {
                "variable": {
                    "value": "forward_var",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "reversed_feats.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "reversed_feats.shape[1] + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "flair.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_1304": {
                "variable": {
                    "value": "length_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask.long()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1362": {
                "variable": {
                    "value": "partition_history",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "partition_history",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "torch.cat(partition_history, 0).view(seq_len, batch_size, tag_size, nbest).transpose(1, 0).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_1362": {
                "variable": {
                    "value": "partition_history",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_1365": {
                "variable": {
                    "value": "last_partition",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "partition_history",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "torch.cat(partition_history, 0).view(seq_len, batch_size, tag_size, nbest).transpose(1, 0).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "last_position",
                    "type": "variable",
                    "possible_values": [
                        [
                            "length_mask.view(batch_size, 1, 1, 1).expand(batch_size, 1, tag_size, nbest) - 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "topk_1369": {
                "variable": {
                    "value": "(end_partition, end_bp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "last_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "last_partition.expand(batch_size, tag_size, nbest, tag_size) + self.transitions.view(1, tag_size, 1, tag_size).expand(batch_size, tag_size, nbest, tag_size)",
                            "BinOp"
                        ],
                        [
                            "last_values.view(batch_size, tag_size * nbest, tag_size)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "nbest",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nbest",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1375": {
                "variable": {
                    "value": "back_points",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "back_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "torch.cat(back_points).view(seq_len, batch_size, tag_size, nbest)",
                            "Call"
                        ],
                        [
                            "back_points.transpose(1, 0).contiguous()",
                            "Call"
                        ],
                        [
                            "back_points.transpose(1, 0).contiguous()",
                            "Call"
                        ]
                    ]
                }
            },
            "max_1432": {
                "variable": {
                    "value": "(max_scores, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._viterbi_decode(feats[:length], all_scores=get_all_tags, current_idx=i)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "distribution[i][:length].tolist()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "feats + self.transitions.view(1, tag_size, tag_size).expand(ins_num, tag_size, tag_size)",
                            "BinOp"
                        ],
                        [
                            "scores.view(seq_len, batch_size, tag_size, tag_size)",
                            "Call"
                        ],
                        [
                            "end_partition[:, :, self.tag_dictionary.get_idx_for_item(STOP_TAG)]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "softmax_1434": {
                "variable": {
                    "value": "path_score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "minus_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scores - max_scores.view(batch_size, 1).expand(batch_size, nbest)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_1657": {
                "variable": {
                    "value": "start",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[self.tag_dictionary.get_idx_for_item(START_TAG)]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "flair.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_1662": {
                "variable": {
                    "value": "stop",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[self.tag_dictionary.get_idx_for_item(STOP_TAG)]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "flair.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_1667": {
                "variable": {
                    "value": "pad_start_tags",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[start, tags]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1668": {
                "variable": {
                    "value": "pad_stop_tags",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[tags, stop]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_1669": {
                "variable": {
                    "value": "transition_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "mask.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "mask.shape[1] + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_1671": {
                "variable": {
                    "value": "transition_mask2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "mask.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "mask.shape[1] + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gather_1687": {
                "variable": {
                    "value": "ts_energy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ts_energy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.transitions.unsqueeze(0).unsqueeze(0).expand(bat_size, seq_len, self.tagset_size, self.tagset_size)",
                            "Call"
                        ],
                        [
                            "torch.gather(ts_energy, 2, pad_stop_tags.unsqueeze(-1).unsqueeze(-1).expand(bat_size, seq_len, 1, feats.shape[-1]))",
                            "Call"
                        ],
                        [
                            "ts_energy.squeeze(2)",
                            "Call"
                        ],
                        [
                            "torch.gather(ts_energy, 2, pad_start_tags.unsqueeze(-1)).squeeze(-1)",
                            "Call"
                        ],
                        [
                            "ts_energy * transition_mask",
                            "BinOp"
                        ],
                        [
                            "ts_energy.sum(1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "pad_stop_tags.unsqueeze(-1).unsqueeze(-1).expand(bat_size, seq_len, 1, feats.shape[-1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_1691": {
                "variable": {
                    "value": "ts_energy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ts_energy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.transitions.unsqueeze(0).unsqueeze(0).expand(bat_size, seq_len, self.tagset_size, self.tagset_size)",
                            "Call"
                        ],
                        [
                            "torch.gather(ts_energy, 2, pad_stop_tags.unsqueeze(-1).unsqueeze(-1).expand(bat_size, seq_len, 1, feats.shape[-1]))",
                            "Call"
                        ],
                        [
                            "ts_energy.squeeze(2)",
                            "Call"
                        ],
                        [
                            "torch.gather(ts_energy, 2, pad_start_tags.unsqueeze(-1)).squeeze(-1)",
                            "Call"
                        ],
                        [
                            "ts_energy * transition_mask",
                            "BinOp"
                        ],
                        [
                            "ts_energy.sum(1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "pad_start_tags.unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_1691": {
                "variable": {
                    "value": "ts_energy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_48": {
                "input": {
                    "value": "torch.sum(torch.exp(vec - max_score_broadcast))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_57": {
                "input": {
                    "value": "vecs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vecs",
                            "Method Argument"
                        ],
                        [
                            "vecs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sum_59": {
                "input": {
                    "value": "torch.exp(vecs - maxi_bc)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_75": {
                "input": {
                    "value": "torch.sum(torch.exp(vec - max_score.expand_as(vec)), 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_202": {
                "variable": {
                    "value": "self.dropout1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Dropout_203": {
                "variable": {
                    "value": "self.dropout2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_254": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size * num_directions",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "len(tag_dictionary)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_290": {
                "variable": {
                    "value": "self.transitions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(self.tagset_size, self.tagset_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_541": {
                "variable": {
                    "value": "teacher_tags",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sentence.get_teacher_target() for sentence in data_points]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_549": {
                "variable": {
                    "value": "lengths_input",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[len(sentence.tokens) for sentence in data_points]",
                            "ListComp"
                        ],
                        [
                            "[len(sentence.tokens) for sentence in sentences]",
                            "ListComp"
                        ],
                        [
                            "[len(sentence.tokens) for sentence in sentences]",
                            "ListComp"
                        ],
                        [
                            "[len(sentence.tokens) for sentence in sentences]",
                            "ListComp"
                        ],
                        [
                            "[len(sentence.tokens) for sentence in data_points]",
                            "ListComp"
                        ],
                        [
                            "[len(sentence.tokens) for sentence in sentences]",
                            "ListComp"
                        ],
                        [
                            "[len(sentence.tokens) for sentence in batch]",
                            "ListComp"
                        ],
                        [
                            "lengths",
                            "Method Argument"
                        ],
                        [
                            "lengths",
                            "Method Argument"
                        ],
                        [
                            "lengths",
                            "Method Argument"
                        ],
                        [
                            "lengths",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_555": {
                "variable": {
                    "value": "teacher_features",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[len(data_points), longest_token_sequence_in_batch, features.shape[-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "flair.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_579": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "max_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_len or lengths.max()",
                            "BoolOp"
                        ],
                        [
                            "features.shape[1]",
                            "Subscript"
                        ],
                        [
                            "max_len or lengths.max()",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "lt_579": {
                "input": {
                    "value": "lengths.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_669": {
                "variable": {
                    "value": "sentence_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sentences.features[x].to(flair.device) for x in sorted(sentences.features.keys())]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_672": {
                "variable": {
                    "value": "sentence_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[len(sentences), longest_token_sequence_in_batch, self.embeddings.embedding_length]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "flair.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_705": {
                "variable": {
                    "value": "packed",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sentence_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([sentences.features[x].to(flair.device) for x in sorted(sentences.features.keys())], -1)",
                            "Call"
                        ],
                        [
                            "torch.zeros([len(sentences), longest_token_sequence_in_batch, self.embeddings.embedding_length], dtype=torch.float, device=flair.device)",
                            "Call"
                        ],
                        [
                            "sentence_tensor.transpose_(0, 1)",
                            "Call"
                        ],
                        [
                            "self.dropout1(sentence_tensor)",
                            "Call"
                        ],
                        [
                            "self.dropout(sentence_tensor)",
                            "Call"
                        ],
                        [
                            "self.embedding2nn(sentence_tensor)",
                            "Call"
                        ],
                        [
                            "self.word_dropout(sentence_tensor)",
                            "Call"
                        ],
                        [
                            "self.locked_dropout(sentence_tensor)",
                            "Call"
                        ],
                        [
                            "sentence_tensor.transpose_(0, 1)",
                            "Call"
                        ],
                        [
                            "sentence_tensor.transpose_(0, 1)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.rnn.pad_packed_sequence(rnn_output, batch_first=True)",
                            "Call"
                        ],
                        [
                            "cnn_feature.transpose(2, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "self.dropout2(sentence_tensor)",
                            "Call"
                        ],
                        [
                            "self.dropout(sentence_tensor)",
                            "Call"
                        ],
                        [
                            "self.locked_dropout(sentence_tensor)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[len(sentence.tokens) for sentence in data_points]",
                            "ListComp"
                        ],
                        [
                            "[len(sentence.tokens) for sentence in sentences]",
                            "ListComp"
                        ],
                        [
                            "[len(sentence.tokens) for sentence in sentences]",
                            "ListComp"
                        ],
                        [
                            "[len(sentence.tokens) for sentence in sentences]",
                            "ListComp"
                        ],
                        [
                            "[len(sentence.tokens) for sentence in data_points]",
                            "ListComp"
                        ],
                        [
                            "[len(sentence.tokens) for sentence in sentences]",
                            "ListComp"
                        ],
                        [
                            "[len(sentence.tokens) for sentence in batch]",
                            "ListComp"
                        ],
                        [
                            "lengths",
                            "Method Argument"
                        ],
                        [
                            "lengths",
                            "Method Argument"
                        ],
                        [
                            "lengths",
                            "Method Argument"
                        ],
                        [
                            "lengths",
                            "Method Argument"
                        ]
                    ]
                },
                "enforce_sorted": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_719": {
                "variable": {
                    "value": "(sentence_tensor, output_lengths)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "rnn_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.rnn(packed, initial_hidden_state)",
                            "Call"
                        ],
                        [
                            "self.rnn(packed)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_809": {
                "variable": {
                    "value": "tag",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "tag_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[self.tag_dictionary.get_idx_for_item(token.get_tag(self.tag_type).value) for token in sentence]",
                            "ListComp"
                        ],
                        [
                            "[self.tag_dictionary.get_idx_for_item(token.get_tag(self.tag_type).value) for token in sentence]",
                            "ListComp"
                        ]
                    ]
                },
                "device": {
                    "value": "flair.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_863": {
                "variable": {
                    "value": "distribution",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.forward(batch)",
                            "Call"
                        ],
                        [
                            "feature",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "max_864": {
                "variable": {
                    "value": "(_, indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.forward(batch)",
                            "Call"
                        ],
                        [
                            "feature",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_865": {
                "variable": {
                    "value": "sentrange",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "distribution.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_925": {
                "variable": {
                    "value": "(_, bptrs_t)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "next_tag_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "forward_var.view(1, -1).expand(self.tagset_size, self.tagset_size) + self.transitions",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_949": {
                "variable": {
                    "value": "softmax",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "backscore",
                    "type": "variable",
                    "possible_values": [
                        [
                            "backscores",
                            "variable"
                        ],
                        [
                            "backscores",
                            "variable"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_950": {
                "variable": {
                    "value": "(_, idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "backscore",
                    "type": "variable",
                    "possible_values": [
                        [
                            "backscores",
                            "variable"
                        ],
                        [
                            "backscores",
                            "variable"
                        ]
                    ]
                }
            },
            "max_1008": {
                "variable": {
                    "value": "(max_tag_var, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "tag_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "emit_score[:, :, None].repeat(1, 1, transitions.shape[2]) + transitions + forward_var[:, i, :][:, :, None].repeat(1, 1, transitions.shape[2]).transpose(2, 1)",
                            "BinOp"
                        ],
                        [
                            "tag_var - max_tag_var[:, :, None].repeat(1, 1, transitions.shape[2])",
                            "BinOp"
                        ],
                        [
                            "emit_score[:, None, :].repeat(1, transitions.shape[2], 1) + transitions + forward_var[:, i, :][:, :, None].repeat(1, 1, transitions.shape[2]).transpose(2, 1)",
                            "BinOp"
                        ],
                        [
                            "tag_var - max_tag_var[:, :, None].repeat(1, 1, transitions.shape[2])",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_1014": {
                "variable": {
                    "value": "agg_",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(torch.exp(tag_var), dim=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_1079": {
                "variable": {
                    "value": "(max_tag_var, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "tag_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "emit_score[:, :, None].repeat(1, 1, transitions.shape[2]) + transitions + forward_var[:, i, :][:, :, None].repeat(1, 1, transitions.shape[2]).transpose(2, 1)",
                            "BinOp"
                        ],
                        [
                            "tag_var - max_tag_var[:, :, None].repeat(1, 1, transitions.shape[2])",
                            "BinOp"
                        ],
                        [
                            "emit_score[:, None, :].repeat(1, transitions.shape[2], 1) + transitions + forward_var[:, i, :][:, :, None].repeat(1, 1, transitions.shape[2]).transpose(2, 1)",
                            "BinOp"
                        ],
                        [
                            "tag_var - max_tag_var[:, :, None].repeat(1, 1, transitions.shape[2])",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_1085": {
                "variable": {
                    "value": "agg_",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(torch.exp(tag_var), dim=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_1094": {
                "variable": {
                    "value": "new_backward_var",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "backward_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "forward_var[:, 1:].clone()",
                            "Call"
                        ],
                        [
                            "self._backward_alg(features, lengths)",
                            "Call"
                        ]
                    ]
                }
            },
            "topk_1340": {
                "variable": {
                    "value": "(partition, cur_bp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "cur_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seq_iter",
                            "variable"
                        ],
                        [
                            "cur_values.view(batch_size, tag_size, tag_size) + partition.contiguous().view(batch_size, tag_size, 1).expand(batch_size, tag_size, tag_size)",
                            "BinOp"
                        ],
                        [
                            "cur_values.view(batch_size, tag_size, 1, tag_size).expand(batch_size, tag_size, nbest, tag_size) + partition.contiguous().view(batch_size, tag_size, nbest, 1).expand(batch_size, tag_size, nbest, tag_size)",
                            "BinOp"
                        ],
                        [
                            "cur_values.view(batch_size, tag_size * nbest, tag_size)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "nbest",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nbest",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_1414": {
                "variable": {
                    "value": "new_pointer",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "back_points[idx].view(batch_size, tag_size * nbest)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "pointer.contiguous().view(batch_size, nbest)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_1544": {
                "variable": {
                    "value": "lengths_input",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[len(sentence.tokens) for sentence in data_points]",
                            "ListComp"
                        ],
                        [
                            "[len(sentence.tokens) for sentence in sentences]",
                            "ListComp"
                        ],
                        [
                            "[len(sentence.tokens) for sentence in sentences]",
                            "ListComp"
                        ],
                        [
                            "[len(sentence.tokens) for sentence in sentences]",
                            "ListComp"
                        ],
                        [
                            "[len(sentence.tokens) for sentence in data_points]",
                            "ListComp"
                        ],
                        [
                            "[len(sentence.tokens) for sentence in sentences]",
                            "ListComp"
                        ],
                        [
                            "[len(sentence.tokens) for sentence in batch]",
                            "ListComp"
                        ],
                        [
                            "lengths",
                            "Method Argument"
                        ],
                        [
                            "lengths",
                            "Method Argument"
                        ],
                        [
                            "lengths",
                            "Method Argument"
                        ],
                        [
                            "lengths",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_1599": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "max_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_len or lengths.max()",
                            "BoolOp"
                        ],
                        [
                            "features.shape[1]",
                            "Subscript"
                        ],
                        [
                            "max_len or lengths.max()",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "lt_1599": {
                "input": {
                    "value": "lengths.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_1606": {
                "variable": {
                    "value": "teacher_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "teacher_features / T",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_1626": {
                "variable": {
                    "value": "tag_list",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[getattr(sentence, self.tag_type + '_tags').to(flair.device) for sentence in sentences]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_48": {
                "input": {
                    "value": "torch.exp(vec - max_score_broadcast)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_59": {
                "input": {
                    "value": "vecs - maxi_bc",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Dropout_194": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_211": {
                "variable": {
                    "value": "self.embedding2nn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "rnn_input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embeddings.embedding_length",
                            "Attribute"
                        ],
                        [
                            "relearn_size",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "rnn_input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embeddings.embedding_length",
                            "Attribute"
                        ],
                        [
                            "relearn_size",
                            "variable"
                        ]
                    ]
                }
            },
            "Linear_213": {
                "variable": {
                    "value": "self.embedding2nn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.embeddings.embedding_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "relearn_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_269": {
                "variable": {
                    "value": "self.word2cnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "rnn_input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embeddings.embedding_length",
                            "Attribute"
                        ],
                        [
                            "relearn_size",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_271": {
                "variable": {
                    "value": "self.cnn_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_272": {
                "variable": {
                    "value": "self.cnn_drop_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_273": {
                "variable": {
                    "value": "self.cnn_batchnorm_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_281": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size * num_directions",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "len(tag_dictionary)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_285": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.embeddings.embedding_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "len(tag_dictionary)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_376": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_469": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_613": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_684": {
                "variable": {
                    "value": "sentence_tensor[s_id][:len(sentence)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[token.get_embedding().unsqueeze(0) for token in sentence]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_736": {
                "variable": {
                    "value": "word_in",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.word2cnn(sentence_tensor)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_736": {
                "variable": {
                    "value": "word_in",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_962": {
                "variable": {
                    "value": "softmax",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "backscore",
                    "type": "variable",
                    "possible_values": [
                        [
                            "backscores",
                            "variable"
                        ],
                        [
                            "backscores",
                            "variable"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_1067": {
                "variable": {
                    "value": "emit_score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "reversed_feats[:, 0, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "stack_1514": {
                "variable": {
                    "value": "teacher_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sentence.get_teacher_posteriors() for sentence in data_points]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_1529": {
                "variable": {
                    "value": "teacher_tags",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sentence.get_teacher_target() for sentence in data_points]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_1676": {
                "input": {
                    "value": "feats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feats.transpose(1, 0).contiguous().view(ins_num, 1, tag_size).expand(ins_num, tag_size, tag_size)",
                            "Call"
                        ],
                        [
                            "feats",
                            "Method Argument"
                        ],
                        [
                            "feats",
                            "Method Argument"
                        ],
                        [
                            "feats",
                            "Method Argument"
                        ],
                        [
                            "feats",
                            "Method Argument"
                        ],
                        [
                            "feats",
                            "Method Argument"
                        ],
                        [
                            "feats",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "tags.unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_1706": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_1799": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "exp_48": {
                "input": {
                    "value": "vec - max_score_broadcast",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_239": {
                "variable": {
                    "value": "self.lstm_init_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(self.nlayers * num_directions, self.hidden_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_244": {
                "variable": {
                    "value": "self.lstm_init_c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(self.nlayers * num_directions, self.hidden_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "randn_291": {
                "*size": {
                    "value": "self.tagset_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.tagset_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_787": {
                "input": {
                    "value": "self.transitions[pad_stop_tags[i, :lens_[i] + 1], pad_start_tags[i, :lens_[i] + 1]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_791": {
                "input": {
                    "value": "feats[i, r, tags[i, :lens_[i]]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_1014": {
                "input": {
                    "value": "torch.exp(tag_var)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_1085": {
                "input": {
                    "value": "torch.exp(tag_var)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_1561": {
                "variable": {
                    "value": "teacher_atts",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sentence.get_teacher_weights() for sentence in data_points]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_1577": {
                "variable": {
                    "value": "teacher_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sentence.get_professor_teacher_prediction(professor_interpolation=professor_interpolation) for sentence in data_points]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_1636": {
                "variable": {
                    "value": "tag",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "tag_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[self.tag_dictionary.get_idx_for_item(token.get_tag(self.tag_type).value) for token in sentence]",
                            "ListComp"
                        ],
                        [
                            "[self.tag_dictionary.get_idx_for_item(token.get_tag(self.tag_type).value) for token in sentence]",
                            "ListComp"
                        ]
                    ]
                },
                "device": {
                    "value": "flair.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_1643": {
                "data": {
                    "value": "lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[len(sentence.tokens) for sentence in data_points]",
                            "ListComp"
                        ],
                        [
                            "[len(sentence.tokens) for sentence in sentences]",
                            "ListComp"
                        ],
                        [
                            "[len(sentence.tokens) for sentence in sentences]",
                            "ListComp"
                        ],
                        [
                            "[len(sentence.tokens) for sentence in sentences]",
                            "ListComp"
                        ],
                        [
                            "[len(sentence.tokens) for sentence in data_points]",
                            "ListComp"
                        ],
                        [
                            "[len(sentence.tokens) for sentence in sentences]",
                            "ListComp"
                        ],
                        [
                            "[len(sentence.tokens) for sentence in batch]",
                            "ListComp"
                        ],
                        [
                            "lengths",
                            "Method Argument"
                        ],
                        [
                            "lengths",
                            "Method Argument"
                        ],
                        [
                            "lengths",
                            "Method Argument"
                        ],
                        [
                            "lengths",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cross_entropy_1647": {
                "input": {
                    "value": "features.view(-1, features.shape[-1])",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "tag_list.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "index_select_1814": {
                "variable": {
                    "value": "teacher_attention",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "language_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "language_weight",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "sent_lang_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cuda.LongTensor([sentence.lang_id for sentence in batch])",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_1815": {
                "variable": {
                    "value": "teacher_attention",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "teacher_attention",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(language_weight, 0, sent_lang_id)",
                            "Call"
                        ],
                        [
                            "F.softmax(teacher_attention, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_1816": {
                "variable": {
                    "value": "teacher_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sentence.get_teacher_prediction(pooling='weighted', weight=teacher_attention[idx]) for (idx, sentence) in enumerate(batch)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_75": {
                "input": {
                    "value": "torch.exp(vec - max_score.expand_as(vec))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_387": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_480": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "kl_div_587": {
                "input": {
                    "value": "F.log_softmax(features / T, dim=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "F.softmax(teacher_features / T, dim=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_640": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_739": {
                "variable": {
                    "value": "cnn_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.cnn_list[idx](word_in)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_741": {
                "variable": {
                    "value": "cnn_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.cnn_list[idx](cnn_feature)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cross_entropy_829": {
                "input": {
                    "value": "sentence_feats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(features, tag_list, lengths)",
                            "Call"
                        ],
                        [
                            "zip(features, tag_list, lengths)",
                            "Call"
                        ],
                        [
                            "sentence_feats[:sentence_length]",
                            "Subscript"
                        ],
                        [
                            "sentence_feats[:sentence_length]",
                            "Subscript"
                        ]
                    ]
                },
                "target": {
                    "value": "sentence_tags",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(features, tag_list, lengths)",
                            "Call"
                        ],
                        [
                            "zip(features, tag_list, lengths)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cross_entropy_842": {
                "input": {
                    "value": "sentence_feats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(features, tag_list, lengths)",
                            "Call"
                        ],
                        [
                            "zip(features, tag_list, lengths)",
                            "Call"
                        ],
                        [
                            "sentence_feats[:sentence_length]",
                            "Subscript"
                        ],
                        [
                            "sentence_feats[:sentence_length]",
                            "Subscript"
                        ]
                    ]
                },
                "target": {
                    "value": "sentence_tags",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(features, tag_list, lengths)",
                            "Call"
                        ],
                        [
                            "zip(features, tag_list, lengths)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_1014": {
                "input": {
                    "value": "tag_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "emit_score[:, :, None].repeat(1, 1, transitions.shape[2]) + transitions + forward_var[:, i, :][:, :, None].repeat(1, 1, transitions.shape[2]).transpose(2, 1)",
                            "BinOp"
                        ],
                        [
                            "tag_var - max_tag_var[:, :, None].repeat(1, 1, transitions.shape[2])",
                            "BinOp"
                        ],
                        [
                            "emit_score[:, None, :].repeat(1, transitions.shape[2], 1) + transitions + forward_var[:, i, :][:, :, None].repeat(1, 1, transitions.shape[2]).transpose(2, 1)",
                            "BinOp"
                        ],
                        [
                            "tag_var - max_tag_var[:, :, None].repeat(1, 1, transitions.shape[2])",
                            "BinOp"
                        ]
                    ]
                }
            },
            "exp_1085": {
                "input": {
                    "value": "tag_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "emit_score[:, :, None].repeat(1, 1, transitions.shape[2]) + transitions + forward_var[:, i, :][:, :, None].repeat(1, 1, transitions.shape[2]).transpose(2, 1)",
                            "BinOp"
                        ],
                        [
                            "tag_var - max_tag_var[:, :, None].repeat(1, 1, transitions.shape[2])",
                            "BinOp"
                        ],
                        [
                            "emit_score[:, None, :].repeat(1, transitions.shape[2], 1) + transitions + forward_var[:, i, :][:, :, None].repeat(1, 1, transitions.shape[2]).transpose(2, 1)",
                            "BinOp"
                        ],
                        [
                            "tag_var - max_tag_var[:, :, None].repeat(1, 1, transitions.shape[2])",
                            "BinOp"
                        ]
                    ]
                }
            },
            "no_grad_1573": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "kl_div_1609": {
                "input": {
                    "value": "F.log_softmax(features / T, dim=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "teacher_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(teacher_features / T, dim=-1)",
                            "Call"
                        ],
                        [
                            "teacher_features",
                            "variable"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_1717": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_1810": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "exp_75": {
                "input": {
                    "value": "vec - max_score.expand_as(vec)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_240": {
                "*size": {
                    "value": "self.nlayers * num_directions",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_245": {
                "*size": {
                    "value": "self.nlayers * num_directions",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv1d_277": {
                "in_channels": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ]
                    ]
                },
                "padding": {
                    "value": "pad_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int((kernel - 1) / 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "Dropout_278": {
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "BatchNorm1d_279": {
                "num_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_softmax_587": {
                "input": {
                    "value": "features / T",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_587": {
                "input": {
                    "value": "teacher_features / T",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_1587": {
                "variable": {
                    "value": "teacher_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sentence.get_teacher_prediction() for sentence in data_points]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_1609": {
                "input": {
                    "value": "features / T",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_756": {
                "data": {
                    "value": "lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[len(sentence.tokens) for sentence in data_points]",
                            "ListComp"
                        ],
                        [
                            "[len(sentence.tokens) for sentence in sentences]",
                            "ListComp"
                        ],
                        [
                            "[len(sentence.tokens) for sentence in sentences]",
                            "ListComp"
                        ],
                        [
                            "[len(sentence.tokens) for sentence in sentences]",
                            "ListComp"
                        ],
                        [
                            "[len(sentence.tokens) for sentence in data_points]",
                            "ListComp"
                        ],
                        [
                            "[len(sentence.tokens) for sentence in sentences]",
                            "ListComp"
                        ],
                        [
                            "[len(sentence.tokens) for sentence in batch]",
                            "ListComp"
                        ],
                        [
                            "lengths",
                            "Method Argument"
                        ],
                        [
                            "lengths",
                            "Method Argument"
                        ],
                        [
                            "lengths",
                            "Method Argument"
                        ],
                        [
                            "lengths",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_1373": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lengths.numel()",
                            "Call"
                        ],
                        [
                            "len(sentences)",
                            "Call"
                        ],
                        [
                            "feats.size(0)",
                            "Call"
                        ],
                        [
                            "lengths.numel()",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "tag_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feats.size(2)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "nbest",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nbest",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stack_1582": {
                "tensors": {
                    "value": "[sentence.get_teacher_posteriors() for sentence in data_points]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_1822": {
                "data": {
                    "value": "lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[len(sentence.tokens) for sentence in data_points]",
                            "ListComp"
                        ],
                        [
                            "[len(sentence.tokens) for sentence in sentences]",
                            "ListComp"
                        ],
                        [
                            "[len(sentence.tokens) for sentence in sentences]",
                            "ListComp"
                        ],
                        [
                            "[len(sentence.tokens) for sentence in sentences]",
                            "ListComp"
                        ],
                        [
                            "[len(sentence.tokens) for sentence in data_points]",
                            "ListComp"
                        ],
                        [
                            "[len(sentence.tokens) for sentence in sentences]",
                            "ListComp"
                        ],
                        [
                            "[len(sentence.tokens) for sentence in batch]",
                            "ListComp"
                        ],
                        [
                            "lengths",
                            "Method Argument"
                        ],
                        [
                            "lengths",
                            "Method Argument"
                        ],
                        [
                            "lengths",
                            "Method Argument"
                        ],
                        [
                            "lengths",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "flair/models/text_classification_model.py": {
        "torch": {
            "Linear_61": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.document_embeddings.embedding_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "len(self.label_dictionary)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_85": {
                "variable": {
                    "value": "text_embedding_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "text_embedding_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[sentence.get_embedding().unsqueeze(0) for sentence in sentences]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_314": {
                "variable": {
                    "value": "sigmoid",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_325": {
                "variable": {
                    "value": "softmax",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "label_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.decoder(text_embedding_tensor)",
                            "Call"
                        ],
                        [
                            "label_scores",
                            "Method Argument"
                        ],
                        [
                            "label_scores",
                            "Method Argument"
                        ],
                        [
                            "label_scores",
                            "Method Argument"
                        ],
                        [
                            "label_scores",
                            "Method Argument"
                        ],
                        [
                            "label_scores",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_326": {
                "variable": {
                    "value": "(conf, idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "softmax",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.softmax(label_scores, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.softmax(label_scores, dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_332": {
                "variable": {
                    "value": "softmax",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "label_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.decoder(text_embedding_tensor)",
                            "Call"
                        ],
                        [
                            "label_scores",
                            "Method Argument"
                        ],
                        [
                            "label_scores",
                            "Method Argument"
                        ],
                        [
                            "label_scores",
                            "Method Argument"
                        ],
                        [
                            "label_scores",
                            "Method Argument"
                        ],
                        [
                            "label_scores",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_353": {
                "variable": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "convert_labels_to_one_hot(label_list, self.label_dictionary)",
                            "Call"
                        ],
                        [
                            "[torch.FloatTensor(l).unsqueeze(0) for l in one_hot]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(one_hot, 0).to(flair.device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_367": {
                "variable": {
                    "value": "vec",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[torch.LongTensor([self.label_dictionary.get_idx_for_item(label.value) for label in sentence.labels]) for sentence in sentences]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_68": {
                "variable": {
                    "value": "self.loss_function",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_70": {
                "variable": {
                    "value": "self.loss_function",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_140": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_175": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "unsqueeze_352": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "flair/models/text_regression_model.py": {
        "torch": {
            "MSELoss_28": {
                "variable": {
                    "value": "self.loss_function",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_38": {
                "variable": {
                    "value": "vec",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[torch.tensor([float(label.value) for label in sentence.labels], dtype=torch.float) for sentence in sentences]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_32": {
                "data": {
                    "value": "[float(label.value) for label in sentence.labels]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_49": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_100": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "flair/nn.py": {
        "torch": {}
    },
    "flair/optim.py": {
        "torch": {
            "zeros_like_223": {
                "variable": {
                    "value": "state[exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_225": {
                "variable": {
                    "value": "state[exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_122": {
                "variable": {
                    "value": "buf",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_228": {
                "variable": {
                    "value": "state[max_exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_242": {
                "input": {
                    "value": "max_exp_avg_sq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state['max_exp_avg_sq']",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "max_exp_avg_sq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state['max_exp_avg_sq']",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "flair/parser/cmds/cmd.py": {
        "torch": {
            "tensor_89": {
                "variable": {
                    "value": "self.puncts",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[i for (s, i) in self.WORD.vocab.stoi.items() if ispunct(s)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_91": {
                "variable": {
                    "value": "self.rel_criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_92": {
                "variable": {
                    "value": "self.arc_criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_133": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_157": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_83": {
                "variable": {
                    "value": "self.fields",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "args.fields",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_94": {
                "variable": {
                    "value": "self.arc_criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_like_185": {
                "variable": {
                    "value": "arc_target",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "arc_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model(words, feats)",
                            "Call"
                        ],
                        [
                            "self.model(words, feats)",
                            "Call"
                        ],
                        [
                            "self.model(words, feats)",
                            "Call"
                        ],
                        [
                            "arc_scores * binary_mask",
                            "BinOp"
                        ],
                        [
                            "arc_scores[mask]",
                            "Subscript"
                        ],
                        [
                            "arc_scores[mask]",
                            "Subscript"
                        ],
                        [
                            "arc_scores",
                            "Method Argument"
                        ],
                        [
                            "arc_scores",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "save_81": {
                "obj": {
                    "value": "self.fields",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "args.fields",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__128": {
                "parameters": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.args.clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "isnan_197": {
                "input": {
                    "value": "arc_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.arc_criterion(arc_scores, res)",
                            "Call"
                        ],
                        [
                            "(arc_loss * binary_mask).sum() / binary_mask.sum()",
                            "BinOp"
                        ],
                        [
                            "self.arc_criterion(arc_scores, arcs)",
                            "Call"
                        ]
                    ]
                }
            },
            "any_197": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_204": {
                "start": {
                    "value": "len(arcs)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "flair/parser/cmds/train.py": {
        "torch": {
            "Adam_70": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(args.mu, args.nu)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "eps": {
                    "value": "args.epsilon",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ExponentialLR_74": {
                "variable": {
                    "value": "self.scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "args.decay ** (1 / args.decay_steps)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "DataParallel_69": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_count_68": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "flair/parser/model.py": {
        "torch": {
            "Embedding_22": {
                "variable": {
                    "value": "self.word_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "args.n_words",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "args.n_embed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_151": {
                "variable": {
                    "value": "embed",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_embeds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[word_embed]",
                            "List"
                        ],
                        [
                            "self.embed_dropout(*feat_embeds)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_153": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(feat_embeds, dim=-1)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "lengths": {
                    "value": "lens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask.sum(dim=1)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "enforce_sorted": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_155": {
                "variable": {
                    "value": "(x, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pack_padded_sequence(embed, lens, True, False)",
                            "Call"
                        ],
                        [
                            "self.lstm(x)",
                            "Call"
                        ],
                        [
                            "pad_packed_sequence(x, True, total_length=seq_len)",
                            "Call"
                        ],
                        [
                            "self.lstm_dropout(x)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "total_length": {
                    "value": "seq_len",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "load_185": {
                "variable": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "path",
                            "Method Argument"
                        ],
                        [
                            "path",
                            "Method Argument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda' if torch.cuda.is_available() else 'cpu'",
                            "IfExp"
                        ]
                    ]
                }
            },
            "Embedding_33": {
                "variable": {
                    "value": "self.pos_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "args.n_pos_feats",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "args.n_embed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_sequence_130": {
                "variable": {
                    "value": "char_embed",
                    "type": "variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "char_embed.split(lens.tolist())",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "save_202": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(path, map_location=device)",
                            "Call"
                        ],
                        [
                            "{'args': self.args, 'state_dict': state_dict, 'pretrained': pretrained}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "path",
                            "Method Argument"
                        ],
                        [
                            "path",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_302": {
                "variable": {
                    "value": "one_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "layer_sib.shape[-2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tril_303": {
                "variable": {
                    "value": "tril_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "one_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(layer_sib.shape[-2:]).cuda()",
                            "Call"
                        ],
                        [
                            "torch.ones(layer_cop.shape[-2:]).cuda()",
                            "Call"
                        ]
                    ]
                },
                "diagonal": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "triu_304": {
                "variable": {
                    "value": "triu_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "one_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(layer_sib.shape[-2:]).cuda()",
                            "Call"
                        ],
                        [
                            "torch.ones(layer_cop.shape[-2:]).cuda()",
                            "Call"
                        ]
                    ]
                },
                "diagonal": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_313": {
                "variable": {
                    "value": "one_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "layer_cop.shape[-2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tril_314": {
                "variable": {
                    "value": "tril_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "one_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(layer_sib.shape[-2:]).cuda()",
                            "Call"
                        ],
                        [
                            "torch.ones(layer_cop.shape[-2:]).cuda()",
                            "Call"
                        ]
                    ]
                },
                "diagonal": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "triu_315": {
                "variable": {
                    "value": "triu_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "one_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(layer_sib.shape[-2:]).cuda()",
                            "Call"
                        ],
                        [
                            "torch.ones(layer_cop.shape[-2:]).cuda()",
                            "Call"
                        ]
                    ]
                },
                "diagonal": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_184": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sigmoid_213": {
                "variable": {
                    "value": "q_value",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "unary_potential.clone()",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(q_value)",
                            "Call"
                        ],
                        [
                            "F.softmax(q_value, 1)",
                            "Call"
                        ],
                        [
                            "unary_potential + second_temp",
                            "BinOp"
                        ]
                    ]
                }
            },
            "softmax_215": {
                "variable": {
                    "value": "q_value",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "unary_potential.clone()",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(q_value)",
                            "Call"
                        ],
                        [
                            "F.softmax(q_value, 1)",
                            "Call"
                        ],
                        [
                            "unary_potential + second_temp",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_217": {
                "variable": {
                    "value": "second_temp_sib",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "nac,nabc->nab",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(q_value, layer_sib)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "einsum_230": {
                "variable": {
                    "value": "second_temp_gp",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "nbc,nabc->nab",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(q_value, layer_gp)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "einsum_231": {
                "variable": {
                    "value": "second_temp_gp2",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "nca,nabc->nab",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(q_value, layer_gp2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "einsum_251": {
                "variable": {
                    "value": "second_temp_cop",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ncb,nabc->nab",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(q_value, layer_cop)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "diagonal_220": {
                "input": {
                    "value": "layer_sib.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim1": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dim2": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_220": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "transpose_220": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "diagonal_223": {
                "input": {
                    "value": "layer_sib",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_edge_second_order_node_scores(arc_sib, arc_cop, arc_gp, mask_sib, mask_cop, mask_gp)",
                            "Call"
                        ],
                        [
                            "self.trilinear_sib(edge_node_sib_h, edge_node_sib_m, edge_node_sib_m) * mask_sib",
                            "BinOp"
                        ],
                        [
                            "layer_sib - layer_sib * tril_mask.unsqueeze(0).unsqueeze(0) + (layer_sib * triu_mask.unsqueeze(0).unsqueeze(0)).permute([0, 1, 3, 2])",
                            "BinOp"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dim1": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dim2": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "diagonal_233": {
                "input": {
                    "value": "layer_gp.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim1": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dim2": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "transpose_233": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "diagonal_236": {
                "input": {
                    "value": "layer_gp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_edge_second_order_node_scores(arc_sib, arc_cop, arc_gp, mask_sib, mask_cop, mask_gp)",
                            "Call"
                        ],
                        [
                            "self.trilinear_gp(edge_node_gp_h, edge_node_gp_hm, edge_node_gp_m) * mask_gp",
                            "BinOp"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dim1": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dim2": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_236": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "diagonal_239": {
                "input": {
                    "value": "layer_gp2.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim1": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dim2": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_239": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "transpose_239": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "diagonal_242": {
                "input": {
                    "value": "layer_gp2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer_gp.permute(0, 2, 3, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim1": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dim2": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "diagonal_254": {
                "input": {
                    "value": "layer_cop.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim1": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dim2": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "transpose_254": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "diagonal_258": {
                "input": {
                    "value": "layer_cop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_edge_second_order_node_scores(arc_sib, arc_cop, arc_gp, mask_sib, mask_cop, mask_gp)",
                            "Call"
                        ],
                        [
                            "self.trilinear_cop(edge_node_cop_h, edge_node_cop_m, edge_node_cop_h) * mask_cop",
                            "BinOp"
                        ],
                        [
                            "layer_cop.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "layer_cop - layer_cop * tril_mask.unsqueeze(0).unsqueeze(0) + (layer_cop * triu_mask.unsqueeze(0).unsqueeze(0)).permute([0, 1, 3, 2])",
                            "BinOp"
                        ],
                        [
                            "layer_cop.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dim1": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dim2": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_258": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "flair/parser/modules/bert.py": {
        "torch": {
            "Linear_23": {
                "variable": {
                    "value": "self.projection",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_out",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "stack_44": {
                "variable": {
                    "value": "bert",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[i.mean(0) for i in bert]",
                    "type": "ListComp",
                    "possible_values": []
                }
            }
        }
    },
    "flair/parser/modules/biaffine.py": {
        "torch": {
            "Parameter_18": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(n_out, n_in + bias_x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_21": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(n_out, n_in + bias_x, n_in + bias_y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_40": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, torch.ones_like(x[..., :1]))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_42": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(y, torch.ones_like(y[..., :1]))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "einsum_45": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bxi,byi,oi->boxy",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((x, torch.ones_like(x[..., :1])), -1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "einsum_47": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bxi,oij,byj->boxy",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((x, torch.ones_like(x[..., :1])), -1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_like_40": {
                "input": {
                    "value": "x[..., :1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_like_42": {
                "input": {
                    "value": "y[..., :1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "flair/parser/modules/bilstm.py": {
        "torch": {
            "ModuleList_21": {
                "variable": {
                    "value": "self.f_cells",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_22": {
                "variable": {
                    "value": "self.b_cells",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_85": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(output)",
                            "Call"
                        ]
                    ]
                }
            },
            "PackedSequence_119": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sequence.data",
                            "Attribute"
                        ],
                        [
                            "torch.split(x, batch_sizes)",
                            "Call"
                        ],
                        [
                            "PackedSequence(x, sequence.batch_sizes, sequence.sorted_indices, sequence.unsorted_indices)",
                            "Call"
                        ],
                        [
                            "[i * mask[:len(i)] for i in x]",
                            "ListComp"
                        ],
                        [
                            "torch.cat((x_f, x_b), -1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_sizes": {
                    "value": "sequence.batch_sizes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sorted_indices": {
                    "value": "sequence.sorted_indices",
                    "type": "Attribute",
                    "possible_values": []
                },
                "unsorted_indices": {
                    "value": "sequence.unsorted_indices",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "split_103": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sequence.data",
                            "Attribute"
                        ],
                        [
                            "torch.split(x, batch_sizes)",
                            "Call"
                        ],
                        [
                            "PackedSequence(x, sequence.batch_sizes, sequence.sorted_indices, sequence.unsorted_indices)",
                            "Call"
                        ],
                        [
                            "[i * mask[:len(i)] for i in x]",
                            "ListComp"
                        ],
                        [
                            "torch.cat((x_f, x_b), -1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "batch_sizes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sequence.batch_sizes.tolist()",
                            "Call"
                        ],
                        [
                            "batch_sizes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_116": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x_f, x_b)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_123": {
                "tensors": {
                    "value": "c_n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LSTMCell_24": {
                "input_size": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size * 2",
                            "BinOp"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LSTMCell_26": {
                "input_size": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size * 2",
                            "BinOp"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_84": {
                "tensors": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "apply_permutation(hx[0], permutation)",
                            "Call"
                        ],
                        [
                            "ih",
                            "variable"
                        ],
                        [
                            "self.permute_hidden(hx, sequence.sorted_indices)",
                            "Call"
                        ],
                        [
                            "h.view(self.num_layers, 2, batch_size, self.hidden_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_117": {
                "tensors": {
                    "value": "(h_f, h_b)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "stack_118": {
                "tensors": {
                    "value": "(c_f, c_b)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_70": {
                "tensors": {
                    "value": "(h, ih[last_batch_size:batch_size])",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "flair/parser/modules/char_lstm.py": {
        "torch": {
            "Embedding_14": {
                "variable": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "n_chars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_chars",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "n_embed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_embed",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LSTM_17": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "n_embed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_embed",
                            "Method Argument"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "n_out // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_26": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.embed(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "lengths": {
                    "value": "lens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask.sum(dim=1)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "enforce_sorted": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_28": {
                "variable": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "torch.unbind(hidden)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unbind_28": {
                "input": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(torch.unbind(hidden), dim=-1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "flair/parser/modules/dropout.py": {
        "torch": {
            "ones_like_55": {
                "input": {
                    "value": "total",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sum(masks)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "flair/parser/modules/mlp.py": {
        "torch": {
            "Linear_13": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_in",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "n_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_hidden",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LeakyReLU_14": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "flair/parser/modules/scalar_mix.py": {
        "torch": {
            "Parameter_15": {
                "variable": {
                    "value": "self.weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(n_layers)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_16": {
                "variable": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor([1.0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_17": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_15": {
                "*size": {
                    "value": "n_layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_layers",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_16": {
                "data": {
                    "value": "[1.0]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "flair/parser/modules/trilinear_attention.py": {
        "torch": {
            "ones_65": {
                "variable": {
                    "value": "ones",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "one_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(layer_shape[:2]) + [1]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_66": {
                "variable": {
                    "value": "layer1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[layer1, ones]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_67": {
                "variable": {
                    "value": "layer2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[layer2, ones]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_68": {
                "variable": {
                    "value": "layer3",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[layer3, ones]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Parameter_34": {
                "variable": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.input_size_1, self.input_size_2, self.input_size_3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_36": {
                "variable": {
                    "value": "self.W_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.input_size_1, self.rank)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_37": {
                "variable": {
                    "value": "self.W_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.input_size_2, self.rank)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_38": {
                "variable": {
                    "value": "self.W_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.input_size_3, self.rank)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "einsum_71": {
                "variable": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "nia,abc,njb,nkc->nijk",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "layer1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([layer1, ones], -1)",
                            "Call"
                        ],
                        [
                            "layer1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "einsum_80": {
                "variable": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "al,nia,bl,njb,cl,nkc->nijk",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "self.W_1",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "flair/parser/utils/alg.py": {
        "torch": {
            "tensor_11": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(x, dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "min_19": {
                "variable": {
                    "value": "(dists, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "grad_103": {
                "variable": {
                    "value": "(probs,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "outputs": {
                    "value": "logZ",
                    "type": "variable",
                    "possible_values": [
                        [
                            "s_c[0].gather(0, lens.unsqueeze(0)).sum()",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scores.permute(2, 1, 0)",
                            "Call"
                        ],
                        [
                            "scores.masked_fill(~cands, float('-inf'))",
                            "Call"
                        ],
                        [
                            "scores.permute(2, 1, 0)",
                            "Call"
                        ],
                        [
                            "scores",
                            "Method Argument"
                        ],
                        [
                            "scores",
                            "Method Argument"
                        ],
                        [
                            "scores",
                            "Method Argument"
                        ]
                    ]
                },
                "retain_graph": {
                    "value": "training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scores.requires_grad",
                            "Attribute"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "marginal_gradient",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "enable_grad_91": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "full_like_127": {
                "variable": {
                    "value": "s_i",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scores.permute(2, 1, 0)",
                            "Call"
                        ],
                        [
                            "scores.masked_fill(~cands, float('-inf'))",
                            "Call"
                        ],
                        [
                            "scores.permute(2, 1, 0)",
                            "Call"
                        ],
                        [
                            "scores",
                            "Method Argument"
                        ],
                        [
                            "scores",
                            "Method Argument"
                        ],
                        [
                            "scores",
                            "Method Argument"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "float('-inf')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "full_like_128": {
                "variable": {
                    "value": "s_c",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scores.permute(2, 1, 0)",
                            "Call"
                        ],
                        [
                            "scores.masked_fill(~cands, float('-inf'))",
                            "Call"
                        ],
                        [
                            "scores.permute(2, 1, 0)",
                            "Call"
                        ],
                        [
                            "scores",
                            "Method Argument"
                        ],
                        [
                            "scores",
                            "Method Argument"
                        ],
                        [
                            "scores",
                            "Method Argument"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "float('-inf')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "full_like_185": {
                "variable": {
                    "value": "s_i",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scores.permute(2, 1, 0)",
                            "Call"
                        ],
                        [
                            "scores.masked_fill(~cands, float('-inf'))",
                            "Call"
                        ],
                        [
                            "scores.permute(2, 1, 0)",
                            "Call"
                        ],
                        [
                            "scores",
                            "Method Argument"
                        ],
                        [
                            "scores",
                            "Method Argument"
                        ],
                        [
                            "scores",
                            "Method Argument"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "float('-inf')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "full_like_186": {
                "variable": {
                    "value": "s_c",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scores.permute(2, 1, 0)",
                            "Call"
                        ],
                        [
                            "scores.masked_fill(~cands, float('-inf'))",
                            "Call"
                        ],
                        [
                            "scores.permute(2, 1, 0)",
                            "Call"
                        ],
                        [
                            "scores",
                            "Method Argument"
                        ],
                        [
                            "scores",
                            "Method Argument"
                        ],
                        [
                            "scores",
                            "Method Argument"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "float('-inf')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "min_38": {
                "variable": {
                    "value": "(dists, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "arange_34": {
                "start": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "k",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "unsqueeze_34": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "randperm_17": {
                "n": {
                    "value": "len(d)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "isfinite_150": {
                "input": {
                    "value": "ilr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stripe(s_c, n, w) + stripe(s_c, n, w, (w, 1))",
                            "BinOp"
                        ],
                        [
                            "ilr.permute(2, 0, 1)[cand_mask].logsumexp(-1)",
                            "Call"
                        ],
                        [
                            "stripe(s_c, n, w) + stripe(s_c, n, w, (w, 1))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "any_150": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "t_150": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isfinite_166": {
                "input": {
                    "value": "cl",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stripe(s_c, n, w, (0, 0), 0) + stripe(s_i, n, w, (w, 0))",
                            "BinOp"
                        ],
                        [
                            "cl.permute(2, 0, 1)[cand_mask].logsumexp(-1)",
                            "Call"
                        ],
                        [
                            "stripe(s_c, n, w, (0, 0), 0) + stripe(s_i, n, w, (w, 0))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "any_166": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "t_166": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isfinite_172": {
                "input": {
                    "value": "cr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stripe(s_i, n, w, (0, 1)) + stripe(s_c, n, w, (1, w), 0)",
                            "BinOp"
                        ],
                        [
                            "cr.permute(2, 0, 1)[cand_mask].logsumexp(-1)",
                            "Call"
                        ],
                        [
                            "stripe(s_i, n, w, (0, 1)) + stripe(s_c, n, w, (1, w), 0)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "any_172": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "t_172": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_29": {
                "start": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "k",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "unsqueeze_29": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "where_45": {
                "condition": {
                    "value": "y.eq(i)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "flair/parser/utils/data.py": {
        "torch": {
            "pad_sequence_24": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(raw_batch, self.fields)",
                            "Call"
                        ],
                        [
                            "pad_sequence(data, True, field.pad_index).to(device)",
                            "Call"
                        ],
                        [
                            "[pad_sequence(f, True, field.pad_index).to(device) for f in zip(*data)]",
                            "ListComp"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "field.pad_index",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_21": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pad_sequence_26": {
                "sequences": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "field.pad_index",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "flair/parser/utils/embedding.py": {
        "torch": {
            "tensor_12": {
                "variable": {
                    "value": "self.vectors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "vectors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(*[(s[0], list(map(float, s[1:]))) for s in splits])",
                            "Call"
                        ],
                        [
                            "vectors",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "flair/parser/utils/field.py": {
        "torch": {
            "zeros_87": {
                "variable": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(self.vocab)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "embed.dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_127": {
                "variable": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(self.vocab)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "embed.dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "std_89": {
                "input": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_100": {
                "data": {
                    "value": "sequence",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.tokenize(sequence)",
                            "Call"
                        ],
                        [
                            "[str.lower(token) for token in sequence]",
                            "ListComp"
                        ],
                        [
                            "self.fn(sequence)",
                            "Call"
                        ],
                        [
                            "sequences",
                            "variable"
                        ],
                        [
                            "[self.transform(token) for token in sequence]",
                            "ListComp"
                        ],
                        [
                            "[piece if piece else self.transform(self.pad) for piece in sequence]",
                            "ListComp"
                        ],
                        [
                            "sequence",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_146": {
                "data": {
                    "value": "[ids[:self.fix_len] + [0] * (self.fix_len - len(ids)) for ids in sequence]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "tensor_168": {
                "data": {
                    "value": "pieces",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_169": {
                "*size": {
                    "value": "len(pieces)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gt_169": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_167": {
                "data": {
                    "value": "[len(piece) for piece in sequence]",
                    "type": "ListComp",
                    "possible_values": []
                }
            }
        }
    },
    "flair/samplers.py": {
        "torch": {
            "multinomial_44": {
                "input": {
                    "value": "self.weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "self.num_samples",
                    "type": "Attribute",
                    "possible_values": []
                },
                "replacement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "flair/trainers/distillation_trainer.py": {
        "torch": {
            "SummaryWriter_174": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_696": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "teacher.forward(teacher_input)",
                            "Call"
                        ],
                        [
                            "F.softmax(logits, -1)",
                            "Call"
                        ],
                        [
                            "teacher.forward(teacher_input)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "flair/trainers/finetune_trainer.py": {
        "torch": {
            "LambdaLR_36": {
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.optimizer([{'params': other_params, 'lr': learning_rate * lr_rate}, {'params': self.update_params_group, 'lr': learning_rate * lr_rate}, {'params': finetune_params}], lr=learning_rate, **kwargs)",
                            "Call"
                        ],
                        [
                            "self.optimizer([{'params': other_params, 'lr': learning_rate * lr_rate}, {'params': finetune_params}], lr=learning_rate, **kwargs)",
                            "Call"
                        ],
                        [
                            "amp.initialize(self.model, optimizer, opt_level=amp_opt_level)",
                            "Call"
                        ],
                        [
                            "self.optimizer(self.model.parameters(), lr=start_learning_rate, **kwargs)",
                            "Call"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ],
                        [
                            "AdamW",
                            "Method Argument"
                        ]
                    ]
                },
                "lr_lambda": {
                    "value": "lr_lambda",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr_lambda",
                            "Call"
                        ]
                    ]
                },
                "last_epoch": {
                    "value": "last_epoch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "SummaryWriter_249": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ExponentialLR_416": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.optimizer([{'params': other_params, 'lr': learning_rate * lr_rate}, {'params': self.update_params_group, 'lr': learning_rate * lr_rate}, {'params': finetune_params}], lr=learning_rate, **kwargs)",
                            "Call"
                        ],
                        [
                            "self.optimizer([{'params': other_params, 'lr': learning_rate * lr_rate}, {'params': finetune_params}], lr=learning_rate, **kwargs)",
                            "Call"
                        ],
                        [
                            "amp.initialize(self.model, optimizer, opt_level=amp_opt_level)",
                            "Call"
                        ],
                        [
                            "self.optimizer(self.model.parameters(), lr=start_learning_rate, **kwargs)",
                            "Call"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ],
                        [
                            "AdamW",
                            "Method Argument"
                        ]
                    ]
                },
                "gamma": {
                    "value": "decay ** (1 / decay_steps)",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "flair/trainers/language_model_trainer.py": {
        "torch": {
            "DataLoader_308": {
                "variable": {
                    "value": "training_generator",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.corpus.train",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DataLoader_316": {
                "variable": {
                    "value": "training_generator",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.corpus.train",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "is_available_366": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "flair/trainers/trainer.py": {
        "torch": {
            "ReduceLROnPlateau_209": {
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.optimizer(self.model.parameters(), lr=learning_rate, **kwargs)",
                            "Call"
                        ],
                        [
                            "amp.initialize(self.model, optimizer, opt_level=amp_opt_level)",
                            "Call"
                        ],
                        [
                            "self.optimizer(self.model.parameters(), lr=start_learning_rate, **kwargs)",
                            "Call"
                        ]
                    ]
                },
                "factor": {
                    "value": "anneal_factor",
                    "type": "variable",
                    "possible_values": []
                },
                "patience": {
                    "value": "patience",
                    "type": "variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "anneal_mode",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'min' if train_with_dev else 'max'",
                            "IfExp"
                        ]
                    ]
                },
                "verbose": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConcatDataset_224": {
                "variable": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": []
                },
                "datasets": {
                    "value": "[self.corpus.train, self.corpus.dev]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "SummaryWriter_134": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__636": {
                "parameters": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "5.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clip_grad_norm__297": {
                "parameters": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "5.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "isnan_654": {
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.forward_loss(batch)",
                            "Call"
                        ],
                        [
                            "self.model.forward_loss(batch)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "flair/utils/checks.py": {
        "torch": {
            "device_count_45": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "flair/utils/environment.py": {
        "torch": {
            "manual_seed_43": {
                "seed": {
                    "value": "torch_seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params['torch_seed']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "is_available_45": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_all_46": {
                "seed": {
                    "value": "torch_seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params['torch_seed']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "device_count_85": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "flair/utils/nn.py": {
        "torch": {
            "sum_285": {
                "variable": {
                    "value": "value_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "replaced_vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vector.masked_fill(one_minus_mask, min_val)",
                            "Call"
                        ],
                        [
                            "vector.masked_fill(one_minus_mask, 0.0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "keepdim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_286": {
                "variable": {
                    "value": "value_count",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "keepdim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "max_365": {
                "variable": {
                    "value": "(viterbi_score, best_path)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "path_scores[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "log_softmax_521": {
                "variable": {
                    "value": "log_probs_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits.view(-1, logits.size(-1))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_1114": {
                "variable": {
                    "value": "sinusoids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.sin(scaled_time), torch.cos(scaled_time)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_40": {
                "variable": {
                    "value": "batched_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tensor_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "key_to_tensors.items()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_146": {
                "variable": {
                    "value": "final_encoder_output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[final_forward_output, final_backward_output]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_187": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vector + (mask + 1e-45).log()",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "softmax_193": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vector * mask",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "log_softmax_227": {
                "input": {
                    "value": "vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vector + (mask + 1e-45).log()",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_334": {
                "variable": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_tags",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(tag_sequence.size())",
                            "Call"
                        ]
                    ]
                }
            },
            "max_344": {
                "variable": {
                    "value": "(scores, paths)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "summed_potentials",
                    "type": "variable",
                    "possible_values": [
                        [
                            "path_scores[timestep - 1].unsqueeze(-1) + transition_matrix",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_like_529": {
                "variable": {
                    "value": "one_hot_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_probs_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.log_softmax(logits_flat, dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_640": {
                "tensors": {
                    "value": "to_concatenate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[_get_combination(piece, tensors) for piece in combination.split(',')]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_1119": {
                "variable": {
                    "value": "sinusoids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sinusoids, sinusoids.new_zeros(timesteps, 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_110": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "len(sequence_lengths)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_357": {
                "variable": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_tags",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(tag_sequence.size())",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_709": {
                "input": {
                    "value": "tensors[index]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weights[dims_so_far:dims_so_far + combination_dim]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "arange_942": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_1109": {
                "input": {
                    "value": "timescale_range * -log_timescale_increments",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rand_167": {
                "*size": {
                    "value": "tensor_for_masking.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_538": {
                "input": {
                    "value": "log_probs_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.log_softmax(logits_flat, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "targets_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "targets.view(-1, 1).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_726": {
                "input": {
                    "value": "intermediate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attention.unsqueeze(-1).expand_as(matrix) * matrix",
                            "BinOp"
                        ],
                        [
                            "first_tensor * weight",
                            "BinOp"
                        ],
                        [
                            "first_tensor * weight",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "second_tensor.transpose(-1, -2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_726": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cumsum_940": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sin_1114": {
                "input": {
                    "value": "scaled_time",
                    "type": "variable",
                    "possible_values": [
                        [
                            "timestep_range.unsqueeze(1) * inverse_timescales.unsqueeze(0)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cos_1114": {
                "input": {
                    "value": "scaled_time",
                    "type": "variable",
                    "possible_values": [
                        [
                            "timestep_range.unsqueeze(1) * inverse_timescales.unsqueeze(0)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "matmul_737": {
                "input": {
                    "value": "intermediate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attention.unsqueeze(-1).expand_as(matrix) * matrix",
                            "BinOp"
                        ],
                        [
                            "first_tensor * weight",
                            "BinOp"
                        ],
                        [
                            "first_tensor * weight",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "second_tensor.pow(-1).transpose(-1, -2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_737": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_739": {
                "input": {
                    "value": "second_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_get_combination(combination[2], tensors)",
                            "Call"
                        ],
                        [
                            "_get_combination(combination[2], tensors)",
                            "Call"
                        ],
                        [
                            "second_tensor.squeeze(expanded_dim)",
                            "Call"
                        ],
                        [
                            "second_tensor.squeeze(expanded_dim)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weights[dims_so_far:dims_so_far + combination_dim]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "matmul_741": {
                "input": {
                    "value": "second_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_get_combination(combination[2], tensors)",
                            "Call"
                        ],
                        [
                            "_get_combination(combination[2], tensors)",
                            "Call"
                        ],
                        [
                            "second_tensor.squeeze(expanded_dim)",
                            "Call"
                        ],
                        [
                            "second_tensor.squeeze(expanded_dim)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weights[dims_so_far:dims_so_far + combination_dim]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "flair/utils/string.py": {
        "torch": {}
    },
    "utils/checks.py": {
        "torch": {
            "device_count_45": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils/environment.py": {
        "torch": {
            "manual_seed_43": {
                "seed": {
                    "value": "torch_seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params['torch_seed']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "is_available_45": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_all_46": {
                "seed": {
                    "value": "torch_seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params['torch_seed']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "device_count_85": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils/nn.py": {
        "torch": {
            "sum_285": {
                "variable": {
                    "value": "value_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "replaced_vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vector.masked_fill(one_minus_mask, min_val)",
                            "Call"
                        ],
                        [
                            "vector.masked_fill(one_minus_mask, 0.0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "keepdim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_286": {
                "variable": {
                    "value": "value_count",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "keepdim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "max_365": {
                "variable": {
                    "value": "(viterbi_score, best_path)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "path_scores[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "log_softmax_521": {
                "variable": {
                    "value": "log_probs_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits.view(-1, logits.size(-1))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_1114": {
                "variable": {
                    "value": "sinusoids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.sin(scaled_time), torch.cos(scaled_time)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_40": {
                "variable": {
                    "value": "batched_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tensor_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "key_to_tensors.items()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_146": {
                "variable": {
                    "value": "final_encoder_output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[final_forward_output, final_backward_output]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_187": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vector + (mask + 1e-45).log()",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "softmax_193": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vector * mask",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "log_softmax_227": {
                "input": {
                    "value": "vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vector + (mask + 1e-45).log()",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_334": {
                "variable": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_tags",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(tag_sequence.size())",
                            "Call"
                        ]
                    ]
                }
            },
            "max_344": {
                "variable": {
                    "value": "(scores, paths)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "summed_potentials",
                    "type": "variable",
                    "possible_values": [
                        [
                            "path_scores[timestep - 1].unsqueeze(-1) + transition_matrix",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_like_529": {
                "variable": {
                    "value": "one_hot_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_probs_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.log_softmax(logits_flat, dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_640": {
                "tensors": {
                    "value": "to_concatenate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[_get_combination(piece, tensors) for piece in combination.split(',')]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_1119": {
                "variable": {
                    "value": "sinusoids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sinusoids, sinusoids.new_zeros(timesteps, 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_110": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "len(sequence_lengths)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_357": {
                "variable": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_tags",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(tag_sequence.size())",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_709": {
                "input": {
                    "value": "tensors[index]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weights[dims_so_far:dims_so_far + combination_dim]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "arange_942": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_1109": {
                "input": {
                    "value": "timescale_range * -log_timescale_increments",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rand_167": {
                "*size": {
                    "value": "tensor_for_masking.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_538": {
                "input": {
                    "value": "log_probs_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.log_softmax(logits_flat, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "targets_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "targets.view(-1, 1).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_726": {
                "input": {
                    "value": "intermediate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attention.unsqueeze(-1).expand_as(matrix) * matrix",
                            "BinOp"
                        ],
                        [
                            "first_tensor * weight",
                            "BinOp"
                        ],
                        [
                            "first_tensor * weight",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "second_tensor.transpose(-1, -2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_726": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cumsum_940": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sin_1114": {
                "input": {
                    "value": "scaled_time",
                    "type": "variable",
                    "possible_values": [
                        [
                            "timestep_range.unsqueeze(1) * inverse_timescales.unsqueeze(0)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cos_1114": {
                "input": {
                    "value": "scaled_time",
                    "type": "variable",
                    "possible_values": [
                        [
                            "timestep_range.unsqueeze(1) * inverse_timescales.unsqueeze(0)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "matmul_737": {
                "input": {
                    "value": "intermediate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attention.unsqueeze(-1).expand_as(matrix) * matrix",
                            "BinOp"
                        ],
                        [
                            "first_tensor * weight",
                            "BinOp"
                        ],
                        [
                            "first_tensor * weight",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "second_tensor.pow(-1).transpose(-1, -2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_737": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_739": {
                "input": {
                    "value": "second_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_get_combination(combination[2], tensors)",
                            "Call"
                        ],
                        [
                            "_get_combination(combination[2], tensors)",
                            "Call"
                        ],
                        [
                            "second_tensor.squeeze(expanded_dim)",
                            "Call"
                        ],
                        [
                            "second_tensor.squeeze(expanded_dim)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weights[dims_so_far:dims_so_far + combination_dim]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "matmul_741": {
                "input": {
                    "value": "second_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_get_combination(combination[2], tensors)",
                            "Call"
                        ],
                        [
                            "_get_combination(combination[2], tensors)",
                            "Call"
                        ],
                        [
                            "second_tensor.squeeze(expanded_dim)",
                            "Call"
                        ],
                        [
                            "second_tensor.squeeze(expanded_dim)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weights[dims_so_far:dims_so_far + combination_dim]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "utils/string.py": {
        "torch": {}
    }
}