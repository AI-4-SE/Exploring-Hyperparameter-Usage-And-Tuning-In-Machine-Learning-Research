{
    "evaluation/mctf_metrics.py": {
        "sklearn": {
            "average_precision_score_27": {
                "y_true": {
                    "value": "targets.flatten()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_score": {
                    "value": "predictions.flatten()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "evaluation/visualization/roc/plot_roc_when.py": {
        "sklearn": {
            "precision_recall_curve_51": {
                "variable": {
                    "value": "(precision[fold_num - 1], recall[fold_num - 1], _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "ground_truth_labels.ravel()",
                    "type": "Call",
                    "possible_values": []
                },
                "probas_pred": {
                    "value": "predictions.ravel()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "average_precision_score_54": {
                "y_true": {
                    "value": "ground_truth_labels.flatten()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_score": {
                    "value": "predictions.flatten()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "evaluation/visualization/roc/plot_roc_where.py": {
        "sklearn": {
            "precision_recall_curve_51": {
                "variable": {
                    "value": "(precision[fold_num - 1], recall[fold_num - 1], _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "ground_truth_labels.ravel()",
                    "type": "Call",
                    "possible_values": []
                },
                "probas_pred": {
                    "value": "predictions.ravel()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "average_precision_score_54": {
                "y_true": {
                    "value": "ground_truth_labels.flatten()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_score": {
                    "value": "predictions.flatten()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "evaluation/visualization/roc/plot_roc_which.py": {
        "sklearn": {
            "precision_recall_curve_51": {
                "variable": {
                    "value": "(precision[fold_num - 1], recall[fold_num - 1], _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "ground_truth_labels.ravel()",
                    "type": "Call",
                    "possible_values": []
                },
                "probas_pred": {
                    "value": "predictions.ravel()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "average_precision_score_54": {
                "y_true": {
                    "value": "ground_truth_labels.flatten()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_score": {
                    "value": "predictions.flatten()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/autoencoder/autoencoder.py": {
        "sklearn": {},
        "torch": {
            "device_27": {
                "variable": {
                    "value": "DEVICE",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Adam_103": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "list(encoder.parameters()) + list(decoder.parameters())",
                            "BinOp"
                        ]
                    ]
                },
                "lr": {
                    "value": "LEARNING_RATE",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0001",
                            "Constant"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "WEIGHT_DECAY",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ]
                    ]
                }
            },
            "BCELoss_104": {
                "variable": {
                    "value": "loss_function",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_161": {
                "obj": {
                    "value": "best_encoder.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(model_save_path, encoder_save_name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_162": {
                "obj": {
                    "value": "best_decoder.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(model_save_path, decoder_save_name)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/trainer.py": {
        "sklearn": {
            "average_precision_score_47": {
                "variable": {
                    "value": "ap",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "all_targets.flatten()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_score": {
                    "value": "all_predictions.flatten()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "average_precision_score_186": {
                "variable": {
                    "value": "ap",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "all_targets.flatten()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_score": {
                    "value": "all_predictions.flatten()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "average_precision_score_337": {
                "variable": {
                    "value": "ap",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "all_targets.flatten()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_score": {
                    "value": "all_predictions.flatten()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "average_precision_score_492": {
                "variable": {
                    "value": "ap",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "all_targets.flatten()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_score": {
                    "value": "all_predictions.flatten()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "average_precision_score_646": {
                "variable": {
                    "value": "ap",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "all_targets.flatten()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_score": {
                    "value": "all_predictions.flatten()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "average_precision_score_115": {
                "variable": {
                    "value": "ap",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "all_targets.flatten()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_score": {
                    "value": "all_predictions.flatten()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "average_precision_score_262": {
                "variable": {
                    "value": "ap",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "all_targets.flatten()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_score": {
                    "value": "all_predictions.flatten()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "average_precision_score_416": {
                "variable": {
                    "value": "ap",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "all_targets.flatten()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_score": {
                    "value": "all_predictions.flatten()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "average_precision_score_575": {
                "variable": {
                    "value": "ap",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "all_targets.flatten()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_score": {
                    "value": "all_predictions.flatten()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "average_precision_score_721": {
                "variable": {
                    "value": "ap",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "all_targets.flatten()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_score": {
                    "value": "all_predictions.flatten()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "no_grad_71": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "squeeze_80": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "batch['inputs'].to(device)",
                            "Call"
                        ],
                        [
                            "inputs.float()",
                            "Call"
                        ],
                        [
                            "batch['inputs'].to(device)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(inputs).float()",
                            "Call"
                        ],
                        [
                            "batch['inputs'].to(device)",
                            "Call"
                        ],
                        [
                            "inputs.float()",
                            "Call"
                        ],
                        [
                            "batch['inputs'].to(device)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(inputs).float()",
                            "Call"
                        ],
                        [
                            "batch['inputs'].to(device)",
                            "Call"
                        ],
                        [
                            "inputs.float()",
                            "Call"
                        ],
                        [
                            "batch['inputs'].to(device)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(inputs).float()",
                            "Call"
                        ],
                        [
                            "batch['inputs'].to(device)",
                            "Call"
                        ],
                        [
                            "inputs.float()",
                            "Call"
                        ],
                        [
                            "batch['inputs'].to(device)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(inputs).float()",
                            "Call"
                        ],
                        [
                            "batch['inputs'].to(device)",
                            "Call"
                        ],
                        [
                            "inputs.float()",
                            "Call"
                        ],
                        [
                            "batch['inputs'].to(device)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(inputs).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_81": {
                "variable": {
                    "value": "targets",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "targets",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "batch['targets'].to(device)",
                            "Call"
                        ],
                        [
                            "targets.float()",
                            "Call"
                        ],
                        [
                            "batch['targets'].to(device)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(targets).float()",
                            "Call"
                        ],
                        [
                            "batch['targets'].to(device)",
                            "Call"
                        ],
                        [
                            "targets.float()",
                            "Call"
                        ],
                        [
                            "batch['targets'].to(device)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(targets).float()",
                            "Call"
                        ],
                        [
                            "batch['targets'].to(device)",
                            "Call"
                        ],
                        [
                            "targets.float()",
                            "Call"
                        ],
                        [
                            "batch['targets'].to(device)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(targets).float()",
                            "Call"
                        ],
                        [
                            "batch['targets'].to(device)",
                            "Call"
                        ],
                        [
                            "targets.float()",
                            "Call"
                        ],
                        [
                            "batch['targets'].to(device)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(targets).float()",
                            "Call"
                        ],
                        [
                            "batch['targets'].to(device)",
                            "Call"
                        ],
                        [
                            "targets.float()",
                            "Call"
                        ],
                        [
                            "batch['targets'].to(device)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(targets).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_82": {
                "variable": {
                    "value": "departure_cameras",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "departure_cameras",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "batch['departure_cameras'].to(device)",
                            "Call"
                        ],
                        [
                            "batch['departure_cameras'].to(device)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(departure_cameras)",
                            "Call"
                        ],
                        [
                            "batch['departure_cameras'].to(device)",
                            "Call"
                        ],
                        [
                            "batch['departure_cameras'].to(device)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(departure_cameras)",
                            "Call"
                        ],
                        [
                            "batch['departure_cameras'].to(device)",
                            "Call"
                        ],
                        [
                            "batch['departure_cameras'].to(device)",
                            "Call"
                        ],
                        [
                            "batch['departure_cameras'].to(device)",
                            "Call"
                        ],
                        [
                            "batch['departure_cameras'].to(device)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(departure_cameras)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_212": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "squeeze_222": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "batch['inputs'].to(device)",
                            "Call"
                        ],
                        [
                            "inputs.float()",
                            "Call"
                        ],
                        [
                            "batch['inputs'].to(device)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(inputs).float()",
                            "Call"
                        ],
                        [
                            "batch['inputs'].to(device)",
                            "Call"
                        ],
                        [
                            "inputs.float()",
                            "Call"
                        ],
                        [
                            "batch['inputs'].to(device)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(inputs).float()",
                            "Call"
                        ],
                        [
                            "batch['inputs'].to(device)",
                            "Call"
                        ],
                        [
                            "inputs.float()",
                            "Call"
                        ],
                        [
                            "batch['inputs'].to(device)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(inputs).float()",
                            "Call"
                        ],
                        [
                            "batch['inputs'].to(device)",
                            "Call"
                        ],
                        [
                            "inputs.float()",
                            "Call"
                        ],
                        [
                            "batch['inputs'].to(device)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(inputs).float()",
                            "Call"
                        ],
                        [
                            "batch['inputs'].to(device)",
                            "Call"
                        ],
                        [
                            "inputs.float()",
                            "Call"
                        ],
                        [
                            "batch['inputs'].to(device)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(inputs).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_223": {
                "variable": {
                    "value": "targets",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "targets",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "batch['targets'].to(device)",
                            "Call"
                        ],
                        [
                            "targets.float()",
                            "Call"
                        ],
                        [
                            "batch['targets'].to(device)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(targets).float()",
                            "Call"
                        ],
                        [
                            "batch['targets'].to(device)",
                            "Call"
                        ],
                        [
                            "targets.float()",
                            "Call"
                        ],
                        [
                            "batch['targets'].to(device)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(targets).float()",
                            "Call"
                        ],
                        [
                            "batch['targets'].to(device)",
                            "Call"
                        ],
                        [
                            "targets.float()",
                            "Call"
                        ],
                        [
                            "batch['targets'].to(device)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(targets).float()",
                            "Call"
                        ],
                        [
                            "batch['targets'].to(device)",
                            "Call"
                        ],
                        [
                            "targets.float()",
                            "Call"
                        ],
                        [
                            "batch['targets'].to(device)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(targets).float()",
                            "Call"
                        ],
                        [
                            "batch['targets'].to(device)",
                            "Call"
                        ],
                        [
                            "targets.float()",
                            "Call"
                        ],
                        [
                            "batch['targets'].to(device)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(targets).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_224": {
                "variable": {
                    "value": "departure_cameras",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "departure_cameras",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "batch['departure_cameras'].to(device)",
                            "Call"
                        ],
                        [
                            "batch['departure_cameras'].to(device)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(departure_cameras)",
                            "Call"
                        ],
                        [
                            "batch['departure_cameras'].to(device)",
                            "Call"
                        ],
                        [
                            "batch['departure_cameras'].to(device)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(departure_cameras)",
                            "Call"
                        ],
                        [
                            "batch['departure_cameras'].to(device)",
                            "Call"
                        ],
                        [
                            "batch['departure_cameras'].to(device)",
                            "Call"
                        ],
                        [
                            "batch['departure_cameras'].to(device)",
                            "Call"
                        ],
                        [
                            "batch['departure_cameras'].to(device)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(departure_cameras)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_366": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "squeeze_376": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "batch['inputs'].to(device)",
                            "Call"
                        ],
                        [
                            "inputs.float()",
                            "Call"
                        ],
                        [
                            "batch['inputs'].to(device)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(inputs).float()",
                            "Call"
                        ],
                        [
                            "batch['inputs'].to(device)",
                            "Call"
                        ],
                        [
                            "inputs.float()",
                            "Call"
                        ],
                        [
                            "batch['inputs'].to(device)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(inputs).float()",
                            "Call"
                        ],
                        [
                            "batch['inputs'].to(device)",
                            "Call"
                        ],
                        [
                            "inputs.float()",
                            "Call"
                        ],
                        [
                            "batch['inputs'].to(device)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(inputs).float()",
                            "Call"
                        ],
                        [
                            "batch['inputs'].to(device)",
                            "Call"
                        ],
                        [
                            "inputs.float()",
                            "Call"
                        ],
                        [
                            "batch['inputs'].to(device)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(inputs).float()",
                            "Call"
                        ],
                        [
                            "batch['inputs'].to(device)",
                            "Call"
                        ],
                        [
                            "inputs.float()",
                            "Call"
                        ],
                        [
                            "batch['inputs'].to(device)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(inputs).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_377": {
                "variable": {
                    "value": "targets",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "targets",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "batch['targets'].to(device)",
                            "Call"
                        ],
                        [
                            "targets.float()",
                            "Call"
                        ],
                        [
                            "batch['targets'].to(device)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(targets).float()",
                            "Call"
                        ],
                        [
                            "batch['targets'].to(device)",
                            "Call"
                        ],
                        [
                            "targets.float()",
                            "Call"
                        ],
                        [
                            "batch['targets'].to(device)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(targets).float()",
                            "Call"
                        ],
                        [
                            "batch['targets'].to(device)",
                            "Call"
                        ],
                        [
                            "targets.float()",
                            "Call"
                        ],
                        [
                            "batch['targets'].to(device)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(targets).float()",
                            "Call"
                        ],
                        [
                            "batch['targets'].to(device)",
                            "Call"
                        ],
                        [
                            "targets.float()",
                            "Call"
                        ],
                        [
                            "batch['targets'].to(device)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(targets).float()",
                            "Call"
                        ],
                        [
                            "batch['targets'].to(device)",
                            "Call"
                        ],
                        [
                            "targets.float()",
                            "Call"
                        ],
                        [
                            "batch['targets'].to(device)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(targets).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_521": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "squeeze_531": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "batch['inputs'].to(device)",
                            "Call"
                        ],
                        [
                            "inputs.float()",
                            "Call"
                        ],
                        [
                            "batch['inputs'].to(device)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(inputs).float()",
                            "Call"
                        ],
                        [
                            "batch['inputs'].to(device)",
                            "Call"
                        ],
                        [
                            "inputs.float()",
                            "Call"
                        ],
                        [
                            "batch['inputs'].to(device)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(inputs).float()",
                            "Call"
                        ],
                        [
                            "batch['inputs'].to(device)",
                            "Call"
                        ],
                        [
                            "inputs.float()",
                            "Call"
                        ],
                        [
                            "batch['inputs'].to(device)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(inputs).float()",
                            "Call"
                        ],
                        [
                            "batch['inputs'].to(device)",
                            "Call"
                        ],
                        [
                            "inputs.float()",
                            "Call"
                        ],
                        [
                            "batch['inputs'].to(device)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(inputs).float()",
                            "Call"
                        ],
                        [
                            "batch['inputs'].to(device)",
                            "Call"
                        ],
                        [
                            "inputs.float()",
                            "Call"
                        ],
                        [
                            "batch['inputs'].to(device)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(inputs).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_532": {
                "variable": {
                    "value": "targets",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "targets",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "batch['targets'].to(device)",
                            "Call"
                        ],
                        [
                            "targets.float()",
                            "Call"
                        ],
                        [
                            "batch['targets'].to(device)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(targets).float()",
                            "Call"
                        ],
                        [
                            "batch['targets'].to(device)",
                            "Call"
                        ],
                        [
                            "targets.float()",
                            "Call"
                        ],
                        [
                            "batch['targets'].to(device)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(targets).float()",
                            "Call"
                        ],
                        [
                            "batch['targets'].to(device)",
                            "Call"
                        ],
                        [
                            "targets.float()",
                            "Call"
                        ],
                        [
                            "batch['targets'].to(device)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(targets).float()",
                            "Call"
                        ],
                        [
                            "batch['targets'].to(device)",
                            "Call"
                        ],
                        [
                            "targets.float()",
                            "Call"
                        ],
                        [
                            "batch['targets'].to(device)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(targets).float()",
                            "Call"
                        ],
                        [
                            "batch['targets'].to(device)",
                            "Call"
                        ],
                        [
                            "targets.float()",
                            "Call"
                        ],
                        [
                            "batch['targets'].to(device)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(targets).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_533": {
                "variable": {
                    "value": "departure_cameras",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "departure_cameras",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "batch['departure_cameras'].to(device)",
                            "Call"
                        ],
                        [
                            "batch['departure_cameras'].to(device)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(departure_cameras)",
                            "Call"
                        ],
                        [
                            "batch['departure_cameras'].to(device)",
                            "Call"
                        ],
                        [
                            "batch['departure_cameras'].to(device)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(departure_cameras)",
                            "Call"
                        ],
                        [
                            "batch['departure_cameras'].to(device)",
                            "Call"
                        ],
                        [
                            "batch['departure_cameras'].to(device)",
                            "Call"
                        ],
                        [
                            "batch['departure_cameras'].to(device)",
                            "Call"
                        ],
                        [
                            "batch['departure_cameras'].to(device)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(departure_cameras)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_676": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "squeeze_684": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "batch['inputs'].to(device)",
                            "Call"
                        ],
                        [
                            "inputs.float()",
                            "Call"
                        ],
                        [
                            "batch['inputs'].to(device)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(inputs).float()",
                            "Call"
                        ],
                        [
                            "batch['inputs'].to(device)",
                            "Call"
                        ],
                        [
                            "inputs.float()",
                            "Call"
                        ],
                        [
                            "batch['inputs'].to(device)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(inputs).float()",
                            "Call"
                        ],
                        [
                            "batch['inputs'].to(device)",
                            "Call"
                        ],
                        [
                            "inputs.float()",
                            "Call"
                        ],
                        [
                            "batch['inputs'].to(device)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(inputs).float()",
                            "Call"
                        ],
                        [
                            "batch['inputs'].to(device)",
                            "Call"
                        ],
                        [
                            "inputs.float()",
                            "Call"
                        ],
                        [
                            "batch['inputs'].to(device)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(inputs).float()",
                            "Call"
                        ],
                        [
                            "batch['inputs'].to(device)",
                            "Call"
                        ],
                        [
                            "inputs.float()",
                            "Call"
                        ],
                        [
                            "batch['inputs'].to(device)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(inputs).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_685": {
                "variable": {
                    "value": "targets",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "targets",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "batch['targets'].to(device)",
                            "Call"
                        ],
                        [
                            "targets.float()",
                            "Call"
                        ],
                        [
                            "batch['targets'].to(device)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(targets).float()",
                            "Call"
                        ],
                        [
                            "batch['targets'].to(device)",
                            "Call"
                        ],
                        [
                            "targets.float()",
                            "Call"
                        ],
                        [
                            "batch['targets'].to(device)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(targets).float()",
                            "Call"
                        ],
                        [
                            "batch['targets'].to(device)",
                            "Call"
                        ],
                        [
                            "targets.float()",
                            "Call"
                        ],
                        [
                            "batch['targets'].to(device)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(targets).float()",
                            "Call"
                        ],
                        [
                            "batch['targets'].to(device)",
                            "Call"
                        ],
                        [
                            "targets.float()",
                            "Call"
                        ],
                        [
                            "batch['targets'].to(device)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(targets).float()",
                            "Call"
                        ],
                        [
                            "batch['targets'].to(device)",
                            "Call"
                        ],
                        [
                            "targets.float()",
                            "Call"
                        ],
                        [
                            "batch['targets'].to(device)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(targets).float()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "experiments/datasets.py": {
        "torch": {
            "DataLoader_142": {
                "variable": {
                    "value": "dataset_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "MultiTargetCoordinateTrajectoryDataset(inputs_path, departure_cameras_path, targets_path, flatten_inputs, flatten_targets)",
                            "Call"
                        ],
                        [
                            "CoordinateTrajectoryDataset(inputs_path, departure_cameras_path, targets_path, flatten_inputs, flatten_targets)",
                            "Call"
                        ],
                        [
                            "MultiTargetTrajectoryTensorDataset(inputs_path, targets_path, heatmap_smoothing_sigma)",
                            "Call"
                        ],
                        [
                            "TrajectoryTensorDataset(inputs_path, targets_path, heatmap_smoothing_sigma)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "Variable",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_172": {
                "variable": {
                    "value": "dataset_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "MultiTargetCoordinateTrajectoryDataset(inputs_path, departure_cameras_path, targets_path, flatten_inputs, flatten_targets)",
                            "Call"
                        ],
                        [
                            "CoordinateTrajectoryDataset(inputs_path, departure_cameras_path, targets_path, flatten_inputs, flatten_targets)",
                            "Call"
                        ],
                        [
                            "MultiTargetTrajectoryTensorDataset(inputs_path, targets_path, heatmap_smoothing_sigma)",
                            "Call"
                        ],
                        [
                            "TrajectoryTensorDataset(inputs_path, targets_path, heatmap_smoothing_sigma)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "Variable",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/models.py": {
        "torch": {
            "Sigmoid_35": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_47": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "outputs + [output]",
                            "BinOp"
                        ],
                        [
                            "torch.stack(outputs, 0)",
                            "Call"
                        ],
                        [
                            "self.sigmoid(outputs)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(outputs, 0).squeeze()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(outputs, 0)",
                            "Call"
                        ],
                        [
                            "outputs.squeeze()",
                            "Call"
                        ],
                        [
                            "self.encoder(input)",
                            "Call"
                        ],
                        [
                            "self.decoder(input)",
                            "Call"
                        ],
                        [
                            "self.sigmoid(outputs)",
                            "Call"
                        ],
                        [
                            "self.decoder(input)",
                            "Call"
                        ],
                        [
                            "self.sigmoid(outputs)",
                            "Call"
                        ],
                        [
                            "self.encoder(input)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(outputs)",
                            "Call"
                        ],
                        [
                            "self.encoder(input)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(outputs)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(outputs, 2)",
                            "Call"
                        ],
                        [
                            "outputs.squeeze()",
                            "Call"
                        ],
                        [
                            "self.sigmoid(outputs)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(outputs, 0)",
                            "Call"
                        ],
                        [
                            "outputs.squeeze()",
                            "Call"
                        ],
                        [
                            "self.sigmoid(outputs)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(outputs, 2).squeeze()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(outputs, 2).squeeze()",
                            "Call"
                        ],
                        [
                            "self.decoder(input)",
                            "Call"
                        ],
                        [
                            "self.sigmoid(outputs)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(outputs, 2).squeeze()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(outputs, 0)",
                            "Call"
                        ],
                        [
                            "outputs.squeeze()",
                            "Call"
                        ],
                        [
                            "self.sigmoid(outputs)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_56": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_57": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "stack_113": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "outputs + [output]",
                            "BinOp"
                        ],
                        [
                            "torch.stack(outputs, 0)",
                            "Call"
                        ],
                        [
                            "self.sigmoid(outputs)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(outputs, 0).squeeze()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(outputs, 0)",
                            "Call"
                        ],
                        [
                            "outputs.squeeze()",
                            "Call"
                        ],
                        [
                            "self.encoder(input)",
                            "Call"
                        ],
                        [
                            "self.decoder(input)",
                            "Call"
                        ],
                        [
                            "self.sigmoid(outputs)",
                            "Call"
                        ],
                        [
                            "self.decoder(input)",
                            "Call"
                        ],
                        [
                            "self.sigmoid(outputs)",
                            "Call"
                        ],
                        [
                            "self.encoder(input)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(outputs)",
                            "Call"
                        ],
                        [
                            "self.encoder(input)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(outputs)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(outputs, 2)",
                            "Call"
                        ],
                        [
                            "outputs.squeeze()",
                            "Call"
                        ],
                        [
                            "self.sigmoid(outputs)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(outputs, 0)",
                            "Call"
                        ],
                        [
                            "outputs.squeeze()",
                            "Call"
                        ],
                        [
                            "self.sigmoid(outputs)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(outputs, 2).squeeze()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(outputs, 2).squeeze()",
                            "Call"
                        ],
                        [
                            "self.decoder(input)",
                            "Call"
                        ],
                        [
                            "self.sigmoid(outputs)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(outputs, 2).squeeze()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(outputs, 0)",
                            "Call"
                        ],
                        [
                            "outputs.squeeze()",
                            "Call"
                        ],
                        [
                            "self.sigmoid(outputs)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_113": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_135": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "outputs + [output]",
                            "BinOp"
                        ],
                        [
                            "torch.stack(outputs, 0)",
                            "Call"
                        ],
                        [
                            "self.sigmoid(outputs)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(outputs, 0).squeeze()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(outputs, 0)",
                            "Call"
                        ],
                        [
                            "outputs.squeeze()",
                            "Call"
                        ],
                        [
                            "self.encoder(input)",
                            "Call"
                        ],
                        [
                            "self.decoder(input)",
                            "Call"
                        ],
                        [
                            "self.sigmoid(outputs)",
                            "Call"
                        ],
                        [
                            "self.decoder(input)",
                            "Call"
                        ],
                        [
                            "self.sigmoid(outputs)",
                            "Call"
                        ],
                        [
                            "self.encoder(input)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(outputs)",
                            "Call"
                        ],
                        [
                            "self.encoder(input)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(outputs)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(outputs, 2)",
                            "Call"
                        ],
                        [
                            "outputs.squeeze()",
                            "Call"
                        ],
                        [
                            "self.sigmoid(outputs)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(outputs, 0)",
                            "Call"
                        ],
                        [
                            "outputs.squeeze()",
                            "Call"
                        ],
                        [
                            "self.sigmoid(outputs)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(outputs, 2).squeeze()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(outputs, 2).squeeze()",
                            "Call"
                        ],
                        [
                            "self.decoder(input)",
                            "Call"
                        ],
                        [
                            "self.sigmoid(outputs)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(outputs, 2).squeeze()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(outputs, 0)",
                            "Call"
                        ],
                        [
                            "outputs.squeeze()",
                            "Call"
                        ],
                        [
                            "self.sigmoid(outputs)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_161": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sigmoid_175": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "squeeze_197": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "outputs + [output]",
                            "BinOp"
                        ],
                        [
                            "torch.stack(outputs, 0)",
                            "Call"
                        ],
                        [
                            "self.sigmoid(outputs)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(outputs, 0).squeeze()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(outputs, 0)",
                            "Call"
                        ],
                        [
                            "outputs.squeeze()",
                            "Call"
                        ],
                        [
                            "self.encoder(input)",
                            "Call"
                        ],
                        [
                            "self.decoder(input)",
                            "Call"
                        ],
                        [
                            "self.sigmoid(outputs)",
                            "Call"
                        ],
                        [
                            "self.decoder(input)",
                            "Call"
                        ],
                        [
                            "self.sigmoid(outputs)",
                            "Call"
                        ],
                        [
                            "self.encoder(input)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(outputs)",
                            "Call"
                        ],
                        [
                            "self.encoder(input)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(outputs)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(outputs, 2)",
                            "Call"
                        ],
                        [
                            "outputs.squeeze()",
                            "Call"
                        ],
                        [
                            "self.sigmoid(outputs)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(outputs, 0)",
                            "Call"
                        ],
                        [
                            "outputs.squeeze()",
                            "Call"
                        ],
                        [
                            "self.sigmoid(outputs)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(outputs, 2).squeeze()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(outputs, 2).squeeze()",
                            "Call"
                        ],
                        [
                            "self.decoder(input)",
                            "Call"
                        ],
                        [
                            "self.sigmoid(outputs)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(outputs, 2).squeeze()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(outputs, 0)",
                            "Call"
                        ],
                        [
                            "outputs.squeeze()",
                            "Call"
                        ],
                        [
                            "self.sigmoid(outputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_214": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "outputs + [output]",
                            "BinOp"
                        ],
                        [
                            "torch.stack(outputs, 0)",
                            "Call"
                        ],
                        [
                            "self.sigmoid(outputs)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(outputs, 0).squeeze()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(outputs, 0)",
                            "Call"
                        ],
                        [
                            "outputs.squeeze()",
                            "Call"
                        ],
                        [
                            "self.encoder(input)",
                            "Call"
                        ],
                        [
                            "self.decoder(input)",
                            "Call"
                        ],
                        [
                            "self.sigmoid(outputs)",
                            "Call"
                        ],
                        [
                            "self.decoder(input)",
                            "Call"
                        ],
                        [
                            "self.sigmoid(outputs)",
                            "Call"
                        ],
                        [
                            "self.encoder(input)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(outputs)",
                            "Call"
                        ],
                        [
                            "self.encoder(input)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(outputs)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(outputs, 2)",
                            "Call"
                        ],
                        [
                            "outputs.squeeze()",
                            "Call"
                        ],
                        [
                            "self.sigmoid(outputs)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(outputs, 0)",
                            "Call"
                        ],
                        [
                            "outputs.squeeze()",
                            "Call"
                        ],
                        [
                            "self.sigmoid(outputs)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(outputs, 2).squeeze()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(outputs, 2).squeeze()",
                            "Call"
                        ],
                        [
                            "self.decoder(input)",
                            "Call"
                        ],
                        [
                            "self.sigmoid(outputs)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(outputs, 2).squeeze()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(outputs, 0)",
                            "Call"
                        ],
                        [
                            "outputs.squeeze()",
                            "Call"
                        ],
                        [
                            "self.sigmoid(outputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sigmoid_223": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_233": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "outputs + [output]",
                            "BinOp"
                        ],
                        [
                            "torch.stack(outputs, 0)",
                            "Call"
                        ],
                        [
                            "self.sigmoid(outputs)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(outputs, 0).squeeze()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(outputs, 0)",
                            "Call"
                        ],
                        [
                            "outputs.squeeze()",
                            "Call"
                        ],
                        [
                            "self.encoder(input)",
                            "Call"
                        ],
                        [
                            "self.decoder(input)",
                            "Call"
                        ],
                        [
                            "self.sigmoid(outputs)",
                            "Call"
                        ],
                        [
                            "self.decoder(input)",
                            "Call"
                        ],
                        [
                            "self.sigmoid(outputs)",
                            "Call"
                        ],
                        [
                            "self.encoder(input)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(outputs)",
                            "Call"
                        ],
                        [
                            "self.encoder(input)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(outputs)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(outputs, 2)",
                            "Call"
                        ],
                        [
                            "outputs.squeeze()",
                            "Call"
                        ],
                        [
                            "self.sigmoid(outputs)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(outputs, 0)",
                            "Call"
                        ],
                        [
                            "outputs.squeeze()",
                            "Call"
                        ],
                        [
                            "self.sigmoid(outputs)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(outputs, 2).squeeze()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(outputs, 2).squeeze()",
                            "Call"
                        ],
                        [
                            "self.decoder(input)",
                            "Call"
                        ],
                        [
                            "self.sigmoid(outputs)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(outputs, 2).squeeze()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(outputs, 0)",
                            "Call"
                        ],
                        [
                            "outputs.squeeze()",
                            "Call"
                        ],
                        [
                            "self.sigmoid(outputs)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "GRUCell_243": {
                "variable": {
                    "value": "self.gru",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "num_hidden_units",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_247": {
                "variable": {
                    "value": "hidden",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "self.num_hidden_units",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sigmoid_260": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_277": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "outputs + [output]",
                            "BinOp"
                        ],
                        [
                            "torch.stack(outputs, 0)",
                            "Call"
                        ],
                        [
                            "self.sigmoid(outputs)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(outputs, 0).squeeze()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(outputs, 0)",
                            "Call"
                        ],
                        [
                            "outputs.squeeze()",
                            "Call"
                        ],
                        [
                            "self.encoder(input)",
                            "Call"
                        ],
                        [
                            "self.decoder(input)",
                            "Call"
                        ],
                        [
                            "self.sigmoid(outputs)",
                            "Call"
                        ],
                        [
                            "self.decoder(input)",
                            "Call"
                        ],
                        [
                            "self.sigmoid(outputs)",
                            "Call"
                        ],
                        [
                            "self.encoder(input)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(outputs)",
                            "Call"
                        ],
                        [
                            "self.encoder(input)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(outputs)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(outputs, 2)",
                            "Call"
                        ],
                        [
                            "outputs.squeeze()",
                            "Call"
                        ],
                        [
                            "self.sigmoid(outputs)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(outputs, 0)",
                            "Call"
                        ],
                        [
                            "outputs.squeeze()",
                            "Call"
                        ],
                        [
                            "self.sigmoid(outputs)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(outputs, 2).squeeze()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(outputs, 2).squeeze()",
                            "Call"
                        ],
                        [
                            "self.decoder(input)",
                            "Call"
                        ],
                        [
                            "self.sigmoid(outputs)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(outputs, 2).squeeze()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(outputs, 0)",
                            "Call"
                        ],
                        [
                            "outputs.squeeze()",
                            "Call"
                        ],
                        [
                            "self.sigmoid(outputs)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_308": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_338": {
                "variable": {
                    "value": "all_outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(all_outputs, 0).squeeze()",
                            "Call"
                        ],
                        [
                            "all_outputs + [outputs]",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(all_outputs, 0).squeeze()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_338": {
                "variable": {
                    "value": "all_outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_385": {
                "variable": {
                    "value": "all_outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(all_outputs, 0).squeeze()",
                            "Call"
                        ],
                        [
                            "all_outputs + [outputs]",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(all_outputs, 0).squeeze()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_385": {
                "variable": {
                    "value": "all_outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sigmoid_393": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GRUCell_409": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_411": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_hidden_units",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Sigmoid_412": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_416": {
                "variable": {
                    "value": "hidden_unit",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "self.num_hidden_units",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_424": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "outputs + [output]",
                            "BinOp"
                        ],
                        [
                            "torch.stack(outputs, 0)",
                            "Call"
                        ],
                        [
                            "self.sigmoid(outputs)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(outputs, 0).squeeze()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(outputs, 0)",
                            "Call"
                        ],
                        [
                            "outputs.squeeze()",
                            "Call"
                        ],
                        [
                            "self.encoder(input)",
                            "Call"
                        ],
                        [
                            "self.decoder(input)",
                            "Call"
                        ],
                        [
                            "self.sigmoid(outputs)",
                            "Call"
                        ],
                        [
                            "self.decoder(input)",
                            "Call"
                        ],
                        [
                            "self.sigmoid(outputs)",
                            "Call"
                        ],
                        [
                            "self.encoder(input)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(outputs)",
                            "Call"
                        ],
                        [
                            "self.encoder(input)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(outputs)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(outputs, 2)",
                            "Call"
                        ],
                        [
                            "outputs.squeeze()",
                            "Call"
                        ],
                        [
                            "self.sigmoid(outputs)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(outputs, 0)",
                            "Call"
                        ],
                        [
                            "outputs.squeeze()",
                            "Call"
                        ],
                        [
                            "self.sigmoid(outputs)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(outputs, 2).squeeze()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(outputs, 2).squeeze()",
                            "Call"
                        ],
                        [
                            "self.decoder(input)",
                            "Call"
                        ],
                        [
                            "self.sigmoid(outputs)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(outputs, 2).squeeze()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(outputs, 0)",
                            "Call"
                        ],
                        [
                            "outputs.squeeze()",
                            "Call"
                        ],
                        [
                            "self.sigmoid(outputs)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_424": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sigmoid_433": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_447": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "outputs + [output]",
                            "BinOp"
                        ],
                        [
                            "torch.stack(outputs, 0)",
                            "Call"
                        ],
                        [
                            "self.sigmoid(outputs)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(outputs, 0).squeeze()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(outputs, 0)",
                            "Call"
                        ],
                        [
                            "outputs.squeeze()",
                            "Call"
                        ],
                        [
                            "self.encoder(input)",
                            "Call"
                        ],
                        [
                            "self.decoder(input)",
                            "Call"
                        ],
                        [
                            "self.sigmoid(outputs)",
                            "Call"
                        ],
                        [
                            "self.decoder(input)",
                            "Call"
                        ],
                        [
                            "self.sigmoid(outputs)",
                            "Call"
                        ],
                        [
                            "self.encoder(input)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(outputs)",
                            "Call"
                        ],
                        [
                            "self.encoder(input)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(outputs)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(outputs, 2)",
                            "Call"
                        ],
                        [
                            "outputs.squeeze()",
                            "Call"
                        ],
                        [
                            "self.sigmoid(outputs)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(outputs, 0)",
                            "Call"
                        ],
                        [
                            "outputs.squeeze()",
                            "Call"
                        ],
                        [
                            "self.sigmoid(outputs)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(outputs, 2).squeeze()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(outputs, 2).squeeze()",
                            "Call"
                        ],
                        [
                            "self.decoder(input)",
                            "Call"
                        ],
                        [
                            "self.sigmoid(outputs)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(outputs, 2).squeeze()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(outputs, 0)",
                            "Call"
                        ],
                        [
                            "outputs.squeeze()",
                            "Call"
                        ],
                        [
                            "self.sigmoid(outputs)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_93": {
                "variable": {
                    "value": "hidden_unit",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.num_hidden_units",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_316": {
                "variable": {
                    "value": "hidden_unit",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.input_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_336": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "outputs + [output]",
                            "BinOp"
                        ],
                        [
                            "torch.stack(outputs, 0)",
                            "Call"
                        ],
                        [
                            "self.sigmoid(outputs)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(outputs, 0).squeeze()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(outputs, 0)",
                            "Call"
                        ],
                        [
                            "outputs.squeeze()",
                            "Call"
                        ],
                        [
                            "self.encoder(input)",
                            "Call"
                        ],
                        [
                            "self.decoder(input)",
                            "Call"
                        ],
                        [
                            "self.sigmoid(outputs)",
                            "Call"
                        ],
                        [
                            "self.decoder(input)",
                            "Call"
                        ],
                        [
                            "self.sigmoid(outputs)",
                            "Call"
                        ],
                        [
                            "self.encoder(input)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(outputs)",
                            "Call"
                        ],
                        [
                            "self.encoder(input)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(outputs)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(outputs, 2)",
                            "Call"
                        ],
                        [
                            "outputs.squeeze()",
                            "Call"
                        ],
                        [
                            "self.sigmoid(outputs)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(outputs, 0)",
                            "Call"
                        ],
                        [
                            "outputs.squeeze()",
                            "Call"
                        ],
                        [
                            "self.sigmoid(outputs)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(outputs, 2).squeeze()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(outputs, 2).squeeze()",
                            "Call"
                        ],
                        [
                            "self.decoder(input)",
                            "Call"
                        ],
                        [
                            "self.sigmoid(outputs)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(outputs, 2).squeeze()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(outputs, 0)",
                            "Call"
                        ],
                        [
                            "outputs.squeeze()",
                            "Call"
                        ],
                        [
                            "self.sigmoid(outputs)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_336": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_367": {
                "variable": {
                    "value": "hidden_unit",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.input_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_383": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "outputs + [output]",
                            "BinOp"
                        ],
                        [
                            "torch.stack(outputs, 0)",
                            "Call"
                        ],
                        [
                            "self.sigmoid(outputs)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(outputs, 0).squeeze()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(outputs, 0)",
                            "Call"
                        ],
                        [
                            "outputs.squeeze()",
                            "Call"
                        ],
                        [
                            "self.encoder(input)",
                            "Call"
                        ],
                        [
                            "self.decoder(input)",
                            "Call"
                        ],
                        [
                            "self.sigmoid(outputs)",
                            "Call"
                        ],
                        [
                            "self.decoder(input)",
                            "Call"
                        ],
                        [
                            "self.sigmoid(outputs)",
                            "Call"
                        ],
                        [
                            "self.encoder(input)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(outputs)",
                            "Call"
                        ],
                        [
                            "self.encoder(input)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(outputs)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(outputs, 2)",
                            "Call"
                        ],
                        [
                            "outputs.squeeze()",
                            "Call"
                        ],
                        [
                            "self.sigmoid(outputs)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(outputs, 0)",
                            "Call"
                        ],
                        [
                            "outputs.squeeze()",
                            "Call"
                        ],
                        [
                            "self.sigmoid(outputs)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(outputs, 2).squeeze()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(outputs, 2).squeeze()",
                            "Call"
                        ],
                        [
                            "self.decoder(input)",
                            "Call"
                        ],
                        [
                            "self.sigmoid(outputs)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(outputs, 2).squeeze()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(outputs, 0)",
                            "Call"
                        ],
                        [
                            "outputs.squeeze()",
                            "Call"
                        ],
                        [
                            "self.sigmoid(outputs)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_383": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_37": {
                "in_features": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_103": {
                "variable": {
                    "value": "context_unit",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.num_hidden_units",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_326": {
                "variable": {
                    "value": "context_unit",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.input_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_375": {
                "variable": {
                    "value": "context_unit",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.input_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GRUCell_75": {
                "input_size": {
                    "value": "num_hidden_units",
                    "type": "Variable",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "num_hidden_units",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_76": {
                "in_features": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_hidden_units",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "GRUCell_294": {
                "input_size": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_295": {
                "in_features": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "GRUCell_352": {
                "input_size": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "LSTMCell_79": {
                "input_size": {
                    "value": "num_hidden_units",
                    "type": "Variable",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "num_hidden_units",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_80": {
                "in_features": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_hidden_units",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "LSTMCell_299": {
                "input_size": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_300": {
                "in_features": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "LSTMCell_356": {
                "input_size": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/network_components.py": {
        "torch": {
            "Sequential_9": {
                "variable": {
                    "value": "encoder",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv1d(input_size, 32, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_24": {
                "variable": {
                    "value": "decoder",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ConvTranspose1d(input_size, 128, 4, stride=2, padding=0, dilation=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_39": {
                "variable": {
                    "value": "decoder",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ConvTranspose1d(input_size, 128, 4, stride=2, padding=0, dilation=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_54": {
                "variable": {
                    "value": "encoder",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(15, 64, (3, 3, 3), stride=1, padding=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_69": {
                "variable": {
                    "value": "encoder",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(15, 64, (3, 3, 3), stride=1, padding=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_88": {
                "variable": {
                    "value": "encoder",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(15, 64, (1, 3, 3), stride=1, padding=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_111": {
                "variable": {
                    "value": "encoder",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(15, 64, (1, 3, 3), stride=1, padding=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_134": {
                "variable": {
                    "value": "encoder",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(15, 64, (1, 5, 5), stride=1, padding=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_157": {
                "variable": {
                    "value": "encoder",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(15, 32, (1, 5, 5), stride=1, padding=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_184": {
                "variable": {
                    "value": "encoder",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(15, 64, (1, 3, 3), stride=1, padding=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_199": {
                "variable": {
                    "value": "encoder",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(15, 64, (1, 5, 5), stride=1, padding=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_214": {
                "variable": {
                    "value": "encoder",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(15, 32, (1, 5, 5), stride=1, padding=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_233": {
                "variable": {
                    "value": "decoder",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ConvTranspose2d(feature_size, 256, (1, 3), stride=2, padding=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_247": {
                "variable": {
                    "value": "decoder",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.UpsamplingBilinear2d(size=(2, 3))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_261": {
                "variable": {
                    "value": "decoder",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.UpsamplingBilinear2d(size=(3, 3))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_275": {
                "variable": {
                    "value": "decoder",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.UpsamplingBilinear2d(size=(2, 3))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_298": {
                "variable": {
                    "value": "decoder",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ConvTranspose1d(input_size, 256, 5, stride=2, padding=0, dilation=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_313": {
                "variable": {
                    "value": "decoder",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ConvTranspose3d(input_size, 64, (1, 1, 3), stride=1, padding=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_324": {
                "variable": {
                    "value": "decoder",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ConvTranspose3d(feature_size, 256, (5, 1, 1), stride=2, padding=0, dilation=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_340": {
                "variable": {
                    "value": "decoder",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ConvTranspose3d(feature_size, 256, (7, 1, 1), stride=1, padding=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv1d_10": {
                "in_channels": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_11": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv1d_12": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_13": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv1d_14": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_15": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv1d_16": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "output_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_17": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose1d_25": {
                "in_channels": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_26": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose1d_27": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_28": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose1d_29": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose1d_31": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_32": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv1d_33": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "15",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose1d_40": {
                "in_channels": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose1d_42": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose1d_44": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_45": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose1d_46": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_47": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv1d_48": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv3d_55": {
                "in_channels": {
                    "value": "15",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_56": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool3d_57": {
                "kernel_size": {
                    "value": "(2, 2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm3d_58": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv3d_59": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "feature_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_60": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool3d_61": {
                "kernel_size": {
                    "value": "(2, 1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm3d_62": {
                "num_features": {
                    "value": "feature_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv3d_70": {
                "in_channels": {
                    "value": "15",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_71": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool3d_72": {
                "kernel_size": {
                    "value": "(1, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm3d_73": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv3d_74": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_75": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool3d_76": {
                "kernel_size": {
                    "value": "(2, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm3d_77": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv3d_78": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "feature_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_79": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool3d_80": {
                "kernel_size": {
                    "value": "(1, 1, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm3d_81": {
                "num_features": {
                    "value": "feature_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv3d_89": {
                "in_channels": {
                    "value": "15",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_90": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool3d_91": {
                "kernel_size": {
                    "value": "(1, 1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm3d_92": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv3d_93": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_94": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool3d_95": {
                "kernel_size": {
                    "value": "(1, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm3d_96": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv3d_97": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_98": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool3d_99": {
                "kernel_size": {
                    "value": "(2, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm3d_100": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv3d_101": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "feature_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_102": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool3d_103": {
                "kernel_size": {
                    "value": "(1, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm3d_104": {
                "num_features": {
                    "value": "feature_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv3d_113": {
                "in_channels": {
                    "value": "15",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_114": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool3d_115": {
                "kernel_size": {
                    "value": "(1, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm3d_116": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv3d_117": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_118": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool3d_119": {
                "kernel_size": {
                    "value": "(1, 2, 5)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm3d_120": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv3d_122": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(5, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_123": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool3d_124": {
                "kernel_size": {
                    "value": "(2, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm3d_125": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv3d_126": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "feature_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_127": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm3d_128": {
                "num_features": {
                    "value": "feature_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv3d_136": {
                "in_channels": {
                    "value": "15",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 5, 5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_137": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool3d_138": {
                "kernel_size": {
                    "value": "(1, 2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm3d_139": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv3d_140": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 3, 5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_141": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool3d_142": {
                "kernel_size": {
                    "value": "(1, 5, 5)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm3d_143": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv3d_145": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(5, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_146": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool3d_147": {
                "kernel_size": {
                    "value": "(2, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm3d_148": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv3d_149": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "feature_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_150": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm3d_151": {
                "num_features": {
                    "value": "feature_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv3d_159": {
                "in_channels": {
                    "value": "15",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 5, 5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_160": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool3d_161": {
                "kernel_size": {
                    "value": "(1, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm3d_162": {
                "num_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv3d_163": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_164": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool3d_165": {
                "kernel_size": {
                    "value": "(1, 2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm3d_166": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv3d_167": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_168": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool3d_169": {
                "kernel_size": {
                    "value": "(1, 2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm3d_170": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv3d_172": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(5, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_173": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool3d_174": {
                "kernel_size": {
                    "value": "(2, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm3d_175": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv3d_176": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "feature_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_177": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm3d_178": {
                "num_features": {
                    "value": "feature_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv3d_186": {
                "in_channels": {
                    "value": "15",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_187": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool3d_188": {
                "kernel_size": {
                    "value": "(1, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm3d_189": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv3d_190": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "feature_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_191": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool3d_192": {
                "kernel_size": {
                    "value": "(1, 2, 5)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm3d_193": {
                "num_features": {
                    "value": "feature_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv3d_201": {
                "in_channels": {
                    "value": "15",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 5, 5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_202": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool3d_203": {
                "kernel_size": {
                    "value": "(1, 2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm3d_204": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv3d_205": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "feature_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 3, 5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_206": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool3d_207": {
                "kernel_size": {
                    "value": "(1, 5, 5)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm3d_208": {
                "num_features": {
                    "value": "feature_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv3d_216": {
                "in_channels": {
                    "value": "15",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 5, 5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_217": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool3d_218": {
                "kernel_size": {
                    "value": "(1, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm3d_219": {
                "num_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv3d_220": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_221": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool3d_222": {
                "kernel_size": {
                    "value": "(1, 2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm3d_223": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv3d_224": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "feature_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_225": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool3d_226": {
                "kernel_size": {
                    "value": "(1, 2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm3d_227": {
                "num_features": {
                    "value": "feature_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_235": {
                "in_channels": {
                    "value": "feature_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_236": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_237": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_238": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(4, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_239": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_240": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_241": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "15",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "UpsamplingBilinear2d_249": {
                "size": {
                    "value": "(2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_250": {
                "in_channels": {
                    "value": "feature_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_251": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_252": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "UpsamplingBilinear2d_253": {
                "size": {
                    "value": "(7, 14)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_254": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "15",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_255": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "UpsamplingBilinear2d_263": {
                "size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_264": {
                "in_channels": {
                    "value": "feature_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_265": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_266": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "UpsamplingBilinear2d_267": {
                "size": {
                    "value": "(14, 28)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_268": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "15",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(5, 5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_269": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "UpsamplingBilinear2d_277": {
                "size": {
                    "value": "(2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_278": {
                "in_channels": {
                    "value": "feature_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_279": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_280": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "UpsamplingBilinear2d_281": {
                "size": {
                    "value": "(9, 20)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_282": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(5, 5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_283": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_284": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "UpsamplingBilinear2d_285": {
                "size": {
                    "value": "(23, 44)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_286": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "15",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(5, 5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_287": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose1d_299": {
                "in_channels": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_300": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose1d_301": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_302": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose1d_303": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_304": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose1d_305": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_306": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv1d_307": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "15",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose3d_314": {
                "in_channels": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_315": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose3d_316": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 4, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_317": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose3d_318": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "15",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 3, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose3d_325": {
                "in_channels": {
                    "value": "feature_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(5, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_326": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm3d_327": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose3d_328": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(5, 1, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_329": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm3d_330": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose3d_331": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(5, 4, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_332": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm3d_333": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose3d_334": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "15",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(4, 3, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose3d_342": {
                "in_channels": {
                    "value": "feature_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(7, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_343": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm3d_344": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose3d_345": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(7, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_346": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm3d_347": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose3d_348": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(6, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_349": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm3d_350": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose3d_352": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_353": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm3d_354": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose3d_355": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 4, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_356": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm3d_357": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose3d_358": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "15",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 3, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/when/neural_nets/1dcnn.py": {
        "torch": {
            "device_24": {
                "variable": {
                    "value": "DEVICE",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Adam_98": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "list(encoder.parameters()) + list(decoder.parameters())",
                            "BinOp"
                        ]
                    ]
                },
                "lr": {
                    "value": "LEARNING_RATE",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "WEIGHT_DECAY",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ]
                    ]
                }
            },
            "BCELoss_99": {
                "variable": {
                    "value": "loss_function",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_140": {
                "obj": {
                    "value": "best_encoder.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(MODEL_SAVE_PATH, encoder_save_name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_141": {
                "obj": {
                    "value": "best_decoder.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(MODEL_SAVE_PATH, decoder_save_name)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/when/neural_nets/classify_hand_crafted_features.py": {
        "torch": {
            "device_24": {
                "variable": {
                    "value": "DEVICE",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Adam_86": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "LEARNING_RATE",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "WEIGHT_DECAY",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ]
                    ]
                }
            },
            "BCELoss_87": {
                "variable": {
                    "value": "loss_function",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_122": {
                "obj": {
                    "value": "best_model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(MODEL_SAVE_PATH, model_save_name)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/when/neural_nets/gru.py": {
        "torch": {
            "device_24": {
                "variable": {
                    "value": "DEVICE",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Adam_105": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "list(encoder.parameters()) + list(decoder.parameters())",
                            "BinOp"
                        ]
                    ]
                },
                "lr": {
                    "value": "LEARNING_RATE",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "WEIGHT_DECAY",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ]
                    ]
                }
            },
            "BCELoss_106": {
                "variable": {
                    "value": "loss_function",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_147": {
                "obj": {
                    "value": "best_encoder.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(MODEL_SAVE_PATH, encoder_save_name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_148": {
                "obj": {
                    "value": "best_decoder.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(MODEL_SAVE_PATH, decoder_save_name)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/when/neural_nets/lstm.py": {
        "torch": {
            "device_24": {
                "variable": {
                    "value": "DEVICE",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Adam_105": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "list(encoder.parameters()) + list(decoder.parameters())",
                            "BinOp"
                        ]
                    ]
                },
                "lr": {
                    "value": "LEARNING_RATE",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "WEIGHT_DECAY",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ]
                    ]
                }
            },
            "BCELoss_106": {
                "variable": {
                    "value": "loss_function",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_147": {
                "obj": {
                    "value": "best_encoder.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(MODEL_SAVE_PATH, encoder_save_name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_148": {
                "obj": {
                    "value": "best_decoder.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(MODEL_SAVE_PATH, decoder_save_name)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/when/neural_nets/multi_target/1dcnn.py": {
        "torch": {
            "device_26": {
                "variable": {
                    "value": "DEVICE",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "BCELoss_77": {
                "variable": {
                    "value": "loss_function",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_74": {
                "f": {
                    "value": "os.path.join(MODEL_LOAD_PATH, 'encoder_fold_' + str(fold) + '.weights')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_75": {
                "f": {
                    "value": "os.path.join(MODEL_LOAD_PATH, 'decoder_fold_' + str(fold) + '.weights')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/when/neural_nets/multi_target/classify_hand_crafted_features.py": {
        "torch": {
            "device_26": {
                "variable": {
                    "value": "DEVICE",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Adam_65": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "LEARNING_RATE",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "WEIGHT_DECAY",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ]
                    ]
                }
            },
            "BCELoss_66": {
                "variable": {
                    "value": "loss_function",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_63": {
                "f": {
                    "value": "os.path.join(MODEL_LOAD_PATH, 'fold_' + str(fold) + '.weights')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/when/neural_nets/multi_target/gru.py": {
        "torch": {
            "device_27": {
                "variable": {
                    "value": "DEVICE",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "BCELoss_87": {
                "variable": {
                    "value": "loss_function",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_84": {
                "f": {
                    "value": "os.path.join(MODEL_LOAD_PATH, 'encoder_fold_' + str(fold) + '.weights')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_85": {
                "f": {
                    "value": "os.path.join(MODEL_LOAD_PATH, 'decoder_fold_' + str(fold) + '.weights')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/when/neural_nets/multi_target/lstm.py": {
        "torch": {
            "device_27": {
                "variable": {
                    "value": "DEVICE",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "BCELoss_87": {
                "variable": {
                    "value": "loss_function",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_84": {
                "f": {
                    "value": "os.path.join(MODEL_LOAD_PATH, 'encoder_fold_' + str(fold) + '.weights')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_85": {
                "f": {
                    "value": "os.path.join(MODEL_LOAD_PATH, 'decoder_fold_' + str(fold) + '.weights')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/when/trajectory_tensors/2d_1d_cnn_grid_search.py": {
        "torch": {
            "device_39": {
                "variable": {
                    "value": "DEVICE",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Adam_113": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "list(encoder.parameters()) + list(decoder.parameters())",
                            "BinOp"
                        ]
                    ]
                },
                "lr": {
                    "value": "LEARNING_RATE",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0001",
                            "Constant"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "WEIGHT_DECAY",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ]
                    ]
                }
            },
            "BCELoss_114": {
                "variable": {
                    "value": "loss_function",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_156": {
                "obj": {
                    "value": "best_encoder.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(MODEL_SAVE_PATH, encoder_save_name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_157": {
                "obj": {
                    "value": "best_decoder.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(MODEL_SAVE_PATH, decoder_save_name)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/when/trajectory_tensors/2d_1d_cnn_multi_vs_single.py": {
        "torch": {
            "device_30": {
                "variable": {
                    "value": "DEVICE",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Adam_116": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "list(encoder.parameters()) + list(decoder.parameters())",
                            "BinOp"
                        ]
                    ]
                },
                "lr": {
                    "value": "LEARNING_RATE",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0001",
                            "Constant"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "WEIGHT_DECAY",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ]
                    ]
                }
            },
            "BCELoss_117": {
                "variable": {
                    "value": "loss_function",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_159": {
                "obj": {
                    "value": "best_encoder.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(MODEL_SAVE_PATH, encoder_save_name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_160": {
                "obj": {
                    "value": "best_decoder.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(MODEL_SAVE_PATH, decoder_save_name)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/when/trajectory_tensors/3d_cnn_grid_search.py": {
        "torch": {
            "device_38": {
                "variable": {
                    "value": "DEVICE",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Adam_113": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "list(encoder.parameters()) + list(decoder.parameters())",
                            "BinOp"
                        ]
                    ]
                },
                "lr": {
                    "value": "LEARNING_RATE",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0001",
                            "Constant"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "WEIGHT_DECAY",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ]
                    ]
                }
            },
            "BCELoss_114": {
                "variable": {
                    "value": "loss_function",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_156": {
                "obj": {
                    "value": "best_encoder.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(MODEL_SAVE_PATH, encoder_save_name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_157": {
                "obj": {
                    "value": "best_decoder.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(MODEL_SAVE_PATH, decoder_save_name)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/when/trajectory_tensors/3d_cnn_multi_vs_single.py": {
        "torch": {
            "device_29": {
                "variable": {
                    "value": "DEVICE",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Adam_115": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "list(encoder.parameters()) + list(decoder.parameters())",
                            "BinOp"
                        ]
                    ]
                },
                "lr": {
                    "value": "LEARNING_RATE",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0001",
                            "Constant"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "WEIGHT_DECAY",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ]
                    ]
                }
            },
            "BCELoss_116": {
                "variable": {
                    "value": "loss_function",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_158": {
                "obj": {
                    "value": "best_encoder.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(MODEL_SAVE_PATH, encoder_save_name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_159": {
                "obj": {
                    "value": "best_decoder.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(MODEL_SAVE_PATH, decoder_save_name)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/when/trajectory_tensors/cnn_gru_grid_search.py": {
        "torch": {
            "device_41": {
                "variable": {
                    "value": "DEVICE",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Adam_138": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "list(encoder.parameters()) + list(decoder.parameters()) + list(embedder.parameters())",
                            "BinOp"
                        ]
                    ]
                },
                "lr": {
                    "value": "LEARNING_RATE",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0001",
                            "Constant"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "WEIGHT_DECAY",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ]
                    ]
                }
            },
            "BCELoss_139": {
                "variable": {
                    "value": "loss_function",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_134": {
                "f": {
                    "value": "embedder_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(CROSS_VALIDATION_MODELS_PATH_AUTOENCODER, multi_view, 'size_' + str(heatmap_size[0]), 'sigma_' + str(heatmap_smoothing_sigma), 'encoder_fold_' + str(fold) + '.weights')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_185": {
                "obj": {
                    "value": "best_encoder.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(MODEL_SAVE_PATH, encoder_save_name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_186": {
                "obj": {
                    "value": "best_decoder.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(MODEL_SAVE_PATH, decoder_save_name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_187": {
                "obj": {
                    "value": "best_embedder.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(MODEL_SAVE_PATH, embedder_save_name)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/when/trajectory_tensors/cnn_gru_multi_vs_single.py": {
        "torch": {
            "device_32": {
                "variable": {
                    "value": "DEVICE",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Adam_143": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "list(encoder.parameters()) + list(decoder.parameters()) + list(embedder.parameters())",
                            "BinOp"
                        ]
                    ]
                },
                "lr": {
                    "value": "LEARNING_RATE",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0001",
                            "Constant"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "WEIGHT_DECAY",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ]
                    ]
                }
            },
            "BCELoss_144": {
                "variable": {
                    "value": "loss_function",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_139": {
                "f": {
                    "value": "embedder_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(CROSS_VALIDATION_MODELS_PATH_AUTOENCODER, multi_view, 'size_' + str(heatmap_size[0]), 'sigma_' + str(heatmap_smoothing_sigma), 'encoder_fold_' + str(fold) + '.weights')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_188": {
                "obj": {
                    "value": "best_encoder.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(MODEL_SAVE_PATH, encoder_save_name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_189": {
                "obj": {
                    "value": "best_decoder.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(MODEL_SAVE_PATH, decoder_save_name)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/when/trajectory_tensors/multi_target/2d_1d_cnn_multi_target.py": {
        "torch": {
            "device_30": {
                "variable": {
                    "value": "DEVICE",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "BCELoss_81": {
                "variable": {
                    "value": "loss_function",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_76": {
                "f": {
                    "value": "os.path.join(MODEL_LOAD_PATH, 'encoder_fold_' + str(fold) + '.weights')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_77": {
                "f": {
                    "value": "os.path.join(MODEL_LOAD_PATH, 'decoder_fold_' + str(fold) + '.weights')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/when/trajectory_tensors/multi_target/3d_cnn_multi_target.py": {
        "torch": {
            "device_30": {
                "variable": {
                    "value": "DEVICE",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "BCELoss_83": {
                "variable": {
                    "value": "loss_function",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_78": {
                "f": {
                    "value": "os.path.join(MODEL_LOAD_PATH, 'encoder_fold_' + str(fold) + '.weights')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_79": {
                "f": {
                    "value": "os.path.join(MODEL_LOAD_PATH, 'decoder_fold_' + str(fold) + '.weights')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/when/trajectory_tensors/multi_target/cnn_gru_multi_target.py": {
        "torch": {
            "device_33": {
                "variable": {
                    "value": "DEVICE",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "BCELoss_103": {
                "variable": {
                    "value": "loss_function",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_89": {
                "f": {
                    "value": "os.path.join(MODEL_LOAD_PATH, 'encoder_fold_' + str(fold) + '.weights')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_90": {
                "f": {
                    "value": "os.path.join(MODEL_LOAD_PATH, 'decoder_fold_' + str(fold) + '.weights')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_99": {
                "f": {
                    "value": "embedder_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(CROSS_VALIDATION_MODELS_PATH_AUTOENCODER, 'multi_view', 'size_' + str(heatmap_size[0]), 'sigma_' + str(heatmap_smoothing_sigma), 'encoder_fold_' + str(fold) + '.weights')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "experiments/where/neural_nets/1dcnn.py": {
        "torch": {
            "device_25": {
                "variable": {
                    "value": "DEVICE",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Adam_104": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "list(encoder.parameters()) + list(temporal_decoder.parameters()) + list(spatial_decoder.parameters())",
                            "BinOp"
                        ]
                    ]
                },
                "lr": {
                    "value": "LEARNING_RATE",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0001",
                            "Constant"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "WEIGHT_DECAY",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ]
                    ]
                }
            },
            "BCELoss_105": {
                "variable": {
                    "value": "loss_function",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_150": {
                "obj": {
                    "value": "best_encoder.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(MODEL_SAVE_PATH, encoder_save_name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_151": {
                "obj": {
                    "value": "best_temporal_decoder.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(MODEL_SAVE_PATH, temporal_decoder_save_name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_154": {
                "obj": {
                    "value": "best_spatial_decoder.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(MODEL_SAVE_PATH, spatial_decoder_save_name)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/where/neural_nets/classify_hand_crafted_features.py": {
        "torch": {
            "device_25": {
                "variable": {
                    "value": "DEVICE",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Adam_87": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "LEARNING_RATE",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.01",
                            "Constant"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "WEIGHT_DECAY",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ]
                    ]
                }
            },
            "BCELoss_88": {
                "variable": {
                    "value": "loss_function",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_123": {
                "obj": {
                    "value": "best_model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(MODEL_SAVE_PATH, model_save_name)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/where/neural_nets/gru.py": {
        "torch": {
            "device_25": {
                "variable": {
                    "value": "DEVICE",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Adam_109": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "list(encoder.parameters()) + list(temporal_decoder.parameters()) + list(spatial_decoder.parameters())",
                            "BinOp"
                        ]
                    ]
                },
                "lr": {
                    "value": "LEARNING_RATE",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0001",
                            "Constant"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "WEIGHT_DECAY",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ]
                    ]
                }
            },
            "BCELoss_110": {
                "variable": {
                    "value": "loss_function",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_155": {
                "obj": {
                    "value": "best_encoder.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(MODEL_SAVE_PATH, encoder_save_name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_156": {
                "obj": {
                    "value": "best_temporal_decoder.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(MODEL_SAVE_PATH, temporal_decoder_save_name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_159": {
                "obj": {
                    "value": "best_spatial_decoder.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(MODEL_SAVE_PATH, spatial_decoder_save_name)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/where/neural_nets/lstm.py": {
        "torch": {
            "device_25": {
                "variable": {
                    "value": "DEVICE",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Adam_109": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "list(encoder.parameters()) + list(temporal_decoder.parameters()) + list(spatial_decoder.parameters())",
                            "BinOp"
                        ]
                    ]
                },
                "lr": {
                    "value": "LEARNING_RATE",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0001",
                            "Constant"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "WEIGHT_DECAY",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ]
                    ]
                }
            },
            "BCELoss_110": {
                "variable": {
                    "value": "loss_function",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_155": {
                "obj": {
                    "value": "best_encoder.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(MODEL_SAVE_PATH, encoder_save_name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_156": {
                "obj": {
                    "value": "best_temporal_decoder.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(MODEL_SAVE_PATH, temporal_decoder_save_name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_159": {
                "obj": {
                    "value": "best_spatial_decoder.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(MODEL_SAVE_PATH, spatial_decoder_save_name)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/where/neural_nets/multi_target/1dcnn.py": {
        "torch": {
            "device_26": {
                "variable": {
                    "value": "DEVICE",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "BCELoss_87": {
                "variable": {
                    "value": "loss_function",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_79": {
                "f": {
                    "value": "os.path.join(MODEL_LOAD_PATH, 'encoder_fold_' + str(fold) + '.weights')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_81": {
                "f": {
                    "value": "os.path.join(MODEL_LOAD_PATH, 'temporal_decoder_fold_' + str(fold) + '.weights')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_84": {
                "f": {
                    "value": "os.path.join(MODEL_LOAD_PATH, 'spatial_decoder_fold_' + str(fold) + '.weights')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/where/neural_nets/multi_target/classify_hand_crafted_features.py": {
        "torch": {
            "device_27": {
                "variable": {
                    "value": "DEVICE",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Adam_66": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "LEARNING_RATE",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "WEIGHT_DECAY",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ]
                    ]
                }
            },
            "BCELoss_67": {
                "variable": {
                    "value": "loss_function",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_64": {
                "f": {
                    "value": "os.path.join(MODEL_LOAD_PATH, 'fold_' + str(fold) + '.weights')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/where/neural_nets/multi_target/gru.py": {
        "torch": {
            "device_27": {
                "variable": {
                    "value": "DEVICE",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "BCELoss_94": {
                "variable": {
                    "value": "loss_function",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_86": {
                "f": {
                    "value": "os.path.join(MODEL_LOAD_PATH, 'encoder_fold_' + str(fold) + '.weights')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_88": {
                "f": {
                    "value": "os.path.join(MODEL_LOAD_PATH, 'temporal_decoder_fold_' + str(fold) + '.weights')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_91": {
                "f": {
                    "value": "os.path.join(MODEL_LOAD_PATH, 'spatial_decoder_fold_' + str(fold) + '.weights')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/where/neural_nets/multi_target/lstm.py": {
        "torch": {
            "device_27": {
                "variable": {
                    "value": "DEVICE",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "BCELoss_94": {
                "variable": {
                    "value": "loss_function",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_86": {
                "f": {
                    "value": "os.path.join(MODEL_LOAD_PATH, 'encoder_fold_' + str(fold) + '.weights')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_88": {
                "f": {
                    "value": "os.path.join(MODEL_LOAD_PATH, 'temporal_decoder_fold_' + str(fold) + '.weights')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_91": {
                "f": {
                    "value": "os.path.join(MODEL_LOAD_PATH, 'spatial_decoder_fold_' + str(fold) + '.weights')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/where/trajectory_tensors/2d_1d_cnn_grid_search.py": {
        "torch": {
            "device_40": {
                "variable": {
                    "value": "DEVICE",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Adam_116": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "list(encoder.parameters()) + list(decoder.parameters())",
                            "BinOp"
                        ]
                    ]
                },
                "lr": {
                    "value": "LEARNING_RATE",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0001",
                            "Constant"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "WEIGHT_DECAY",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ]
                    ]
                }
            },
            "BCELoss_117": {
                "variable": {
                    "value": "loss_function",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_163": {
                "obj": {
                    "value": "best_encoder.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(MODEL_SAVE_PATH, encoder_save_name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_164": {
                "obj": {
                    "value": "best_decoder.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(MODEL_SAVE_PATH, decoder_save_name)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/where/trajectory_tensors/2d_1d_cnn_multi_vs_single.py": {
        "torch": {
            "device_31": {
                "variable": {
                    "value": "DEVICE",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Adam_117": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "list(encoder.parameters()) + list(decoder.parameters())",
                            "BinOp"
                        ]
                    ]
                },
                "lr": {
                    "value": "LEARNING_RATE",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0001",
                            "Constant"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "WEIGHT_DECAY",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ]
                    ]
                }
            },
            "BCELoss_118": {
                "variable": {
                    "value": "loss_function",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_164": {
                "obj": {
                    "value": "best_encoder.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(MODEL_SAVE_PATH, encoder_save_name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_165": {
                "obj": {
                    "value": "best_decoder.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(MODEL_SAVE_PATH, decoder_save_name)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/where/trajectory_tensors/3d_cnn_grid_search.py": {
        "torch": {
            "device_40": {
                "variable": {
                    "value": "DEVICE",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Adam_115": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "list(encoder.parameters()) + list(decoder.parameters())",
                            "BinOp"
                        ]
                    ]
                },
                "lr": {
                    "value": "LEARNING_RATE",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0001",
                            "Constant"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "WEIGHT_DECAY",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ]
                    ]
                }
            },
            "BCELoss_116": {
                "variable": {
                    "value": "loss_function",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_162": {
                "obj": {
                    "value": "best_encoder.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(MODEL_SAVE_PATH, encoder_save_name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_163": {
                "obj": {
                    "value": "best_decoder.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(MODEL_SAVE_PATH, decoder_save_name)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/where/trajectory_tensors/3d_cnn_multi_vs_single.py": {
        "torch": {
            "device_29": {
                "variable": {
                    "value": "DEVICE",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Adam_115": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "list(encoder.parameters()) + list(decoder.parameters())",
                            "BinOp"
                        ]
                    ]
                },
                "lr": {
                    "value": "LEARNING_RATE",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0001",
                            "Constant"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "WEIGHT_DECAY",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ]
                    ]
                }
            },
            "BCELoss_116": {
                "variable": {
                    "value": "loss_function",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_161": {
                "obj": {
                    "value": "best_encoder.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(MODEL_SAVE_PATH, encoder_save_name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_162": {
                "obj": {
                    "value": "best_decoder.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(MODEL_SAVE_PATH, decoder_save_name)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/where/trajectory_tensors/cnn_gru_grid_search.py": {
        "torch": {
            "device_47": {
                "variable": {
                    "value": "DEVICE",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Adam_153": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "list(temporal_decoder.parameters()) + list(spatial_decoder.parameters()) + list(encoder.parameters()) + list(embedder.parameters())",
                            "BinOp"
                        ]
                    ]
                },
                "lr": {
                    "value": "LEARNING_RATE",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0001",
                            "Constant"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "WEIGHT_DECAY",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ]
                    ]
                }
            },
            "BCELoss_154": {
                "variable": {
                    "value": "loss_function",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_144": {
                "f": {
                    "value": "embedder_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(CROSS_VALIDATION_MODELS_PATH_AUTOENCODER, multi_view, 'size_' + str(heatmap_size[0]), 'sigma_' + str(heatmap_smoothing_sigma), 'encoder_fold_' + str(fold) + '.weights')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "experiments/where/trajectory_tensors/cnn_gru_multi_vs_single.py": {
        "torch": {
            "device_38": {
                "variable": {
                    "value": "DEVICE",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Adam_155": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "list(temporal_decoder.parameters()) + list(spatial_decoder.parameters()) + list(encoder.parameters()) + list(embedder.parameters())",
                            "BinOp"
                        ]
                    ]
                },
                "lr": {
                    "value": "LEARNING_RATE",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0001",
                            "Constant"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "WEIGHT_DECAY",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ]
                    ]
                }
            },
            "BCELoss_156": {
                "variable": {
                    "value": "loss_function",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_146": {
                "f": {
                    "value": "embedder_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(CROSS_VALIDATION_MODELS_PATH_AUTOENCODER, multi_view, 'size_' + str(heatmap_size[0]), 'sigma_' + str(heatmap_smoothing_sigma), 'encoder_fold_' + str(fold) + '.weights')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_210": {
                "obj": {
                    "value": "best_embedder.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(MODEL_SAVE_PATH, embedder_save_name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_211": {
                "obj": {
                    "value": "best_encoder.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(MODEL_SAVE_PATH, encoder_save_name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_212": {
                "obj": {
                    "value": "best_temporal_decoder.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(MODEL_SAVE_PATH, temporal_decoder_save_name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_216": {
                "obj": {
                    "value": "best_spatial_decoder.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(MODEL_SAVE_PATH, spatial_decoder_save_name)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/where/trajectory_tensors/multi_target/2d_1d_cnn_multi_target.py": {
        "torch": {
            "device_30": {
                "variable": {
                    "value": "DEVICE",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "BCELoss_81": {
                "variable": {
                    "value": "loss_function",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_76": {
                "f": {
                    "value": "os.path.join(MODEL_LOAD_PATH, 'encoder_fold_' + str(fold) + '.weights')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_77": {
                "f": {
                    "value": "os.path.join(MODEL_LOAD_PATH, 'decoder_fold_' + str(fold) + '.weights')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/where/trajectory_tensors/multi_target/3d_cnn_multi_target.py": {
        "torch": {
            "device_30": {
                "variable": {
                    "value": "DEVICE",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "BCELoss_83": {
                "variable": {
                    "value": "loss_function",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_78": {
                "f": {
                    "value": "os.path.join(MODEL_LOAD_PATH, 'encoder_fold_' + str(fold) + '.weights')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_79": {
                "f": {
                    "value": "os.path.join(MODEL_LOAD_PATH, 'decoder_fold_' + str(fold) + '.weights')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/where/trajectory_tensors/multi_target/cnn_gru_multi_target.py": {
        "torch": {
            "device_38": {
                "variable": {
                    "value": "DEVICE",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "BCELoss_121": {
                "variable": {
                    "value": "loss_function",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_97": {
                "f": {
                    "value": "os.path.join(MODEL_LOAD_PATH, 'encoder_fold_' + str(fold) + '.weights')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_99": {
                "f": {
                    "value": "os.path.join(MODEL_LOAD_PATH, 'temporal_decoder_fold_' + str(fold) + '.weights')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_102": {
                "f": {
                    "value": "os.path.join(MODEL_LOAD_PATH, 'spatial_decoder_fold_' + str(fold) + '.weights')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_112": {
                "f": {
                    "value": "embedder_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(CROSS_VALIDATION_MODELS_PATH_AUTOENCODER, 'multi_view', 'size_' + str(heatmap_size[0]), 'sigma_' + str(heatmap_smoothing_sigma), 'encoder_fold_' + str(fold) + '.weights')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "experiments/which/neural_nets/1dcnn.py": {
        "torch": {
            "device_23": {
                "variable": {
                    "value": "DEVICE",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Adam_92": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "list(encoder.parameters()) + list(decoder.parameters())",
                            "BinOp"
                        ]
                    ]
                },
                "lr": {
                    "value": "LEARNING_RATE",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "WEIGHT_DECAY",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ]
                    ]
                }
            },
            "BCELoss_93": {
                "variable": {
                    "value": "loss_function",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_132": {
                "obj": {
                    "value": "best_encoder.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(MODEL_SAVE_PATH, encoder_save_name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_133": {
                "obj": {
                    "value": "best_decoder.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(MODEL_SAVE_PATH, decoder_save_name)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/which/neural_nets/classify_hand_crafted_features.py": {
        "torch": {
            "device_23": {
                "variable": {
                    "value": "DEVICE",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Adam_81": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "LEARNING_RATE",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "WEIGHT_DECAY",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ]
                    ]
                }
            },
            "BCELoss_82": {
                "variable": {
                    "value": "loss_function",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_117": {
                "obj": {
                    "value": "best_model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(MODEL_SAVE_PATH, model_save_name)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/which/neural_nets/gru.py": {
        "torch": {
            "device_23": {
                "variable": {
                    "value": "DEVICE",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Adam_98": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "list(encoder.parameters()) + list(decoder.parameters())",
                            "BinOp"
                        ]
                    ]
                },
                "lr": {
                    "value": "LEARNING_RATE",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "WEIGHT_DECAY",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ]
                    ]
                }
            },
            "BCELoss_99": {
                "variable": {
                    "value": "loss_function",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_138": {
                "obj": {
                    "value": "best_encoder.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(MODEL_SAVE_PATH, encoder_save_name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_139": {
                "obj": {
                    "value": "best_decoder.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(MODEL_SAVE_PATH, decoder_save_name)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/which/neural_nets/lstm.py": {
        "torch": {
            "device_23": {
                "variable": {
                    "value": "DEVICE",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Adam_98": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "list(encoder.parameters()) + list(decoder.parameters())",
                            "BinOp"
                        ]
                    ]
                },
                "lr": {
                    "value": "LEARNING_RATE",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "WEIGHT_DECAY",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ]
                    ]
                }
            },
            "BCELoss_99": {
                "variable": {
                    "value": "loss_function",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_138": {
                "obj": {
                    "value": "best_encoder.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(MODEL_SAVE_PATH, encoder_save_name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_139": {
                "obj": {
                    "value": "best_decoder.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(MODEL_SAVE_PATH, decoder_save_name)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/which/neural_nets/multi_target/1dcnn.py": {
        "torch": {
            "device_26": {
                "variable": {
                    "value": "DEVICE",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "BCELoss_77": {
                "variable": {
                    "value": "loss_function",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_74": {
                "f": {
                    "value": "os.path.join(MODEL_LOAD_PATH, 'encoder_fold_' + str(fold) + '.weights')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_75": {
                "f": {
                    "value": "os.path.join(MODEL_LOAD_PATH, 'decoder_fold_' + str(fold) + '.weights')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/which/neural_nets/multi_target/classify_hand_crafted_features.py": {
        "torch": {
            "device_25": {
                "variable": {
                    "value": "DEVICE",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Adam_63": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "LEARNING_RATE",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "WEIGHT_DECAY",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ]
                    ]
                }
            },
            "BCELoss_64": {
                "variable": {
                    "value": "loss_function",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_61": {
                "f": {
                    "value": "os.path.join(MODEL_LOAD_PATH, 'fold_' + str(fold) + '.weights')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/which/neural_nets/multi_target/gru.py": {
        "torch": {
            "device_26": {
                "variable": {
                    "value": "DEVICE",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "BCELoss_83": {
                "variable": {
                    "value": "loss_function",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_80": {
                "f": {
                    "value": "os.path.join(MODEL_LOAD_PATH, 'encoder_fold_' + str(fold) + '.weights')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_81": {
                "f": {
                    "value": "os.path.join(MODEL_LOAD_PATH, 'decoder_fold_' + str(fold) + '.weights')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/which/neural_nets/multi_target/lstm.py": {
        "torch": {
            "device_26": {
                "variable": {
                    "value": "DEVICE",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "BCELoss_83": {
                "variable": {
                    "value": "loss_function",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_80": {
                "f": {
                    "value": "os.path.join(MODEL_LOAD_PATH, 'encoder_fold_' + str(fold) + '.weights')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_81": {
                "f": {
                    "value": "os.path.join(MODEL_LOAD_PATH, 'decoder_fold_' + str(fold) + '.weights')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/which/trajectory_tensors/2d_1d_grid_search.py": {
        "torch": {
            "device_29": {
                "variable": {
                    "value": "DEVICE",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Adam_103": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "list(encoder.parameters()) + list(decoder.parameters())",
                            "BinOp"
                        ]
                    ]
                },
                "lr": {
                    "value": "LEARNING_RATE",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0001",
                            "Constant"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "WEIGHT_DECAY",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ]
                    ]
                }
            },
            "BCELoss_104": {
                "variable": {
                    "value": "loss_function",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_148": {
                "obj": {
                    "value": "best_encoder.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(MODEL_SAVE_PATH, encoder_save_name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_149": {
                "obj": {
                    "value": "best_decoder.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(MODEL_SAVE_PATH, decoder_save_name)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/which/trajectory_tensors/2d_1d_multi_vs_single.py": {
        "torch": {
            "device_29": {
                "variable": {
                    "value": "DEVICE",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Adam_118": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "list(encoder.parameters()) + list(decoder.parameters())",
                            "BinOp"
                        ]
                    ]
                },
                "lr": {
                    "value": "LEARNING_RATE",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0001",
                            "Constant"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "WEIGHT_DECAY",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ]
                    ]
                }
            },
            "BCELoss_119": {
                "variable": {
                    "value": "loss_function",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_161": {
                "obj": {
                    "value": "best_encoder.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(MODEL_SAVE_PATH, encoder_save_name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_162": {
                "obj": {
                    "value": "best_decoder.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(MODEL_SAVE_PATH, decoder_save_name)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/which/trajectory_tensors/3d_cnn_multi_vs_single.py": {
        "torch": {
            "device_28": {
                "variable": {
                    "value": "DEVICE",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Adam_117": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "list(encoder.parameters()) + list(decoder.parameters())",
                            "BinOp"
                        ]
                    ]
                },
                "lr": {
                    "value": "LEARNING_RATE",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0001",
                            "Constant"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "WEIGHT_DECAY",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ]
                    ]
                }
            },
            "BCELoss_118": {
                "variable": {
                    "value": "loss_function",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_160": {
                "obj": {
                    "value": "best_encoder.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(MODEL_SAVE_PATH, encoder_save_name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_161": {
                "obj": {
                    "value": "best_decoder.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(MODEL_SAVE_PATH, decoder_save_name)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/which/trajectory_tensors/3dcnn_grid_search.py": {
        "torch": {
            "device_29": {
                "variable": {
                    "value": "DEVICE",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Adam_103": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "list(encoder.parameters()) + list(decoder.parameters())",
                            "BinOp"
                        ]
                    ]
                },
                "lr": {
                    "value": "LEARNING_RATE",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0001",
                            "Constant"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "WEIGHT_DECAY",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ]
                    ]
                }
            },
            "BCELoss_104": {
                "variable": {
                    "value": "loss_function",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_148": {
                "obj": {
                    "value": "best_encoder.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(MODEL_SAVE_PATH, encoder_save_name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_149": {
                "obj": {
                    "value": "best_decoder.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(MODEL_SAVE_PATH, decoder_save_name)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/which/trajectory_tensors/cnn_gru_grid_search.py": {
        "torch": {
            "device_29": {
                "variable": {
                    "value": "DEVICE",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Adam_120": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "list(embedder.parameters()) + list(encoder.parameters()) + list(decoder.parameters())",
                            "BinOp"
                        ]
                    ]
                },
                "lr": {
                    "value": "LEARNING_RATE",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0001",
                            "Constant"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "WEIGHT_DECAY",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ]
                    ]
                }
            },
            "BCELoss_121": {
                "variable": {
                    "value": "loss_function",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_116": {
                "f": {
                    "value": "embedder_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(CROSS_VALIDATION_MODELS_PATH_AUTOENCODER, multi_view, 'size_' + str(heatmap_size[0]), 'sigma_' + str(heatmap_smoothing_sigma), 'encoder_fold_' + str(fold) + '.weights')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_169": {
                "obj": {
                    "value": "best_embedder.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(MODEL_SAVE_PATH, embedder_save_name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_170": {
                "obj": {
                    "value": "best_encoder.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(MODEL_SAVE_PATH, encoder_save_name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_171": {
                "obj": {
                    "value": "best_decoder.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(MODEL_SAVE_PATH, decoder_save_name)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/which/trajectory_tensors/cnn_gru_single_vs_multi.py": {
        "torch": {
            "device_30": {
                "variable": {
                    "value": "DEVICE",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Adam_133": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "list(embedder.parameters()) + list(encoder.parameters()) + list(decoder.parameters())",
                            "BinOp"
                        ]
                    ]
                },
                "lr": {
                    "value": "LEARNING_RATE",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0001",
                            "Constant"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "WEIGHT_DECAY",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ]
                    ]
                }
            },
            "BCELoss_134": {
                "variable": {
                    "value": "loss_function",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_129": {
                "f": {
                    "value": "embedder_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(CROSS_VALIDATION_MODELS_PATH_AUTOENCODER, multi_view, 'size_' + str(heatmap_size[0]), 'sigma_' + str(heatmap_smoothing_sigma), 'encoder_fold_' + str(fold) + '.weights')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_180": {
                "obj": {
                    "value": "best_embedder.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(MODEL_SAVE_PATH, embedder_save_name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_181": {
                "obj": {
                    "value": "best_encoder.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(MODEL_SAVE_PATH, encoder_save_name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_182": {
                "obj": {
                    "value": "best_decoder.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(MODEL_SAVE_PATH, decoder_save_name)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/which/trajectory_tensors/multi_target/2d_1d_multi_target.py": {
        "torch": {
            "device_31": {
                "variable": {
                    "value": "DEVICE",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "BCELoss_83": {
                "variable": {
                    "value": "loss_function",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_78": {
                "f": {
                    "value": "os.path.join(MODEL_LOAD_PATH, 'encoder_fold_' + str(fold) + '.weights')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_79": {
                "f": {
                    "value": "os.path.join(MODEL_LOAD_PATH, 'decoder_fold_' + str(fold) + '.weights')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/which/trajectory_tensors/multi_target/3d_cnn_multi_target.py": {
        "torch": {
            "device_30": {
                "variable": {
                    "value": "DEVICE",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "BCELoss_83": {
                "variable": {
                    "value": "loss_function",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_78": {
                "f": {
                    "value": "os.path.join(MODEL_LOAD_PATH, 'encoder_fold_' + str(fold) + '.weights')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_79": {
                "f": {
                    "value": "os.path.join(MODEL_LOAD_PATH, 'decoder_fold_' + str(fold) + '.weights')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/which/trajectory_tensors/multi_target/cnn_gru_multi_target.py": {
        "torch": {
            "device_32": {
                "variable": {
                    "value": "DEVICE",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "BCELoss_94": {
                "variable": {
                    "value": "loss_function",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_80": {
                "f": {
                    "value": "os.path.join(MODEL_LOAD_PATH, 'encoder_fold_' + str(fold) + '.weights')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_81": {
                "f": {
                    "value": "os.path.join(MODEL_LOAD_PATH, 'decoder_fold_' + str(fold) + '.weights')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_90": {
                "f": {
                    "value": "embedder_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(CROSS_VALIDATION_MODELS_PATH_AUTOENCODER, 'multi_view', 'size_' + str(heatmap_size[0]), 'sigma_' + str(heatmap_smoothing_sigma), 'encoder_fold_' + str(fold) + '.weights')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}