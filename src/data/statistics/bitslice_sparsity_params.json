{
    "cifar/ResNet.py": {
        "torch": {
            "BatchNorm2d_81": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_83": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_85": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_170": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_174": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_177": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_178": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_245": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_246": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AvgPool2d_250": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_268": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nnf.Conv2d_fix(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False, nf_fix_params=self.conv2_fix_params)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_281": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "BatchNorm2d_272": {
                "num_features": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "cifar/finetune_bitslice.py": {
        "torch": {
            "load_176": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args.save_dir, 'checkpoint_{}.tar'.format(args.prefix))",
                            "Call"
                        ],
                        [
                            "'checkpoint.pth.tar'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataLoader_203": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.CIFAR10(root='../data/cifar10', train=True, transform=transforms.Compose([transforms.RandomHorizontalFlip(), transforms.RandomCrop(32, 4), transforms.ToTensor(), normalize]), download=True)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_223": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.CIFAR10(root='../data/cifar10', train=False, transform=transforms.Compose([transforms.ToTensor(), normalize]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_236": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_242": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_157": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_158": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_192": {
                "variable": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "new_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.where(abs(tensor) < threshold, 0, tensor)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_194": {
                "variable": {
                    "value": "masks[name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.where(abs(tensor) < threshold, 0.0, 1.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_493": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args.save_dir, 'checkpoint_{}.tar'.format(args.prefix))",
                            "Call"
                        ],
                        [
                            "'checkpoint.pth.tar'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "no_grad_421": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "cifar/finetune_l1.py": {
        "torch": {
            "load_176": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args.save_dir, 'checkpoint_{}.tar'.format(args.prefix))",
                            "Call"
                        ],
                        [
                            "'checkpoint.pth.tar'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataLoader_203": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.CIFAR10(root='../data/cifar10', train=True, transform=transforms.Compose([transforms.RandomHorizontalFlip(), transforms.RandomCrop(32, 4), transforms.ToTensor(), normalize]), download=True)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_223": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.CIFAR10(root='../data/cifar10', train=False, transform=transforms.Compose([transforms.ToTensor(), normalize]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_236": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_242": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_157": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_158": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_192": {
                "variable": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "new_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.where(abs(tensor) < threshold, 0, tensor)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_194": {
                "variable": {
                    "value": "masks[name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.where(abs(tensor) < threshold, 0.0, 1.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_462": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args.save_dir, 'checkpoint_{}.tar'.format(args.prefix))",
                            "Call"
                        ],
                        [
                            "'checkpoint.pth.tar'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "no_grad_390": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "norm_345": {
                "input": {
                    "value": "param",
                    "type": "variable",
                    "possible_values": []
                },
                "p": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_429": {
                "input": {
                    "value": "param",
                    "type": "variable",
                    "possible_values": []
                },
                "p": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "cifar/nics_fix_pt/__init__.py": {
        "torch": {}
    },
    "cifar/nics_fix_pt/fix_modules.py": {
        "torch": {
            "is_tensor_314": {
                "obj": {
                    "value": "ori_method",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fix_params[n]['method']",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "cifar/nics_fix_pt/nn_fix_inner.py": {
        "torch": {}
    },
    "cifar/nics_fix_pt/quant.py": {
        "torch": {
            "pow_19": {
                "variable": {
                    "value": "step",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.autograd.Variable(torch.FloatTensor([2.0]), requires_grad=False)",
                    "type": "Call",
                    "possible_values": []
                },
                "exponent": {
                    "value": "scale_f - bit_width.float()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "min_43": {
                "variable": {
                    "value": "new_data",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.max(StraightThroughRound.apply(data / step) * step, minimum)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pow_24": {
                "input": {
                    "value": "torch.autograd.Variable(torch.FloatTensor([2.0]), requires_grad=False)",
                    "type": "Call",
                    "possible_values": []
                },
                "exponent": {
                    "value": "scale_f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scale.float()",
                            "Call"
                        ]
                    ]
                }
            },
            "max_44": {
                "input": {
                    "value": "StraightThroughRound.apply(data / step) * step",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_tensor_128": {
                "obj": {
                    "value": "method",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_cfg.get('method', QuantizeMethod.FIX_NONE)",
                            "Call"
                        ],
                        [
                            "grad_cfg.get('method', QuantizeMethod.FIX_NONE)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_tensor_143": {
                "obj": {
                    "value": "method",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_cfg.get('method', QuantizeMethod.FIX_NONE)",
                            "Call"
                        ],
                        [
                            "grad_cfg.get('method', QuantizeMethod.FIX_NONE)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_tensor_57": {
                "obj": {
                    "value": "method",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_cfg.get('method', QuantizeMethod.FIX_NONE)",
                            "Call"
                        ],
                        [
                            "grad_cfg.get('method', QuantizeMethod.FIX_NONE)",
                            "Call"
                        ]
                    ]
                }
            },
            "ceil_70": {
                "variable": {
                    "value": "new_scale",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.log(torch.max(torch.max(torch.abs(data)), torch.tensor(EPS).float().to(data.device))) / np.log(2.0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_71": {
                "input": {
                    "value": "torch.max(torch.max(torch.abs(data)), torch.tensor(EPS).float().to(data.device))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_72": {
                "input": {
                    "value": "torch.max(torch.abs(data))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_73": {
                "input": {
                    "value": "torch.abs(data)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_74": {
                "data": {
                    "value": "EPS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-05",
                            "float"
                        ]
                    ]
                }
            },
            "abs_73": {
                "input": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "cifar/nics_fix_pt/utils.py": {
        "torch": {
            "is_tensor_26": {
                "obj": {
                    "value": "something",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "cifar/pretrain.py": {
        "torch": {
            "DataLoader_169": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.CIFAR10(root='../data/cifar10', train=True, transform=transforms.Compose([transforms.RandomHorizontalFlip(), transforms.RandomCrop(32, 4), transforms.ToTensor(), normalize]), download=True)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_189": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.CIFAR10(root='../data/cifar10', train=False, transform=transforms.Compose([transforms.ToTensor(), normalize]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_202": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_208": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_418": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'checkpoint.pth.tar'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "no_grad_346": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "norm_305": {
                "input": {
                    "value": "param",
                    "type": "variable",
                    "possible_values": []
                },
                "p": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_385": {
                "input": {
                    "value": "param",
                    "type": "variable",
                    "possible_values": []
                },
                "p": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "cifar/tests/conftest.py": {
        "torch": {
            "Parameter_11": {
                "variable": {
                    "value": "self.param",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, input_num)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linear_22": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.param",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "no_grad_16": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "cifar/tests/test_fix_bn.py": {
        "torch": {
            "BatchNorm1d_34": {
                "variable": {
                    "value": "bn",
                    "type": "variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "case['input_num']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "momentum": {
                    "value": "case['momentum']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_38": {
                "data": {
                    "value": "case['inputs']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_22": {
                "data": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_23": {
                "data": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_27": {
                "data": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_28": {
                "data": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_58": {
                "data": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_59": {
                "data": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_70": {
                "data": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_71": {
                "data": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "cifar/tests/test_fix_module.py": {
        "torch": {
            "SGD_111": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "module.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_39": {
                "variable": {
                    "value": "module.param[0, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "case['data']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_74": {
                "variable": {
                    "value": "module.param.data[0, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "case['data']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_110": {
                "variable": {
                    "value": "module.param.data[0, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "case['data']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "no_grad_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_75": {
                "data": {
                    "value": "case['inputs']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_112": {
                "data": {
                    "value": "case['inputs']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_41": {
                "data": {
                    "value": "case['inputs']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "cifar/tests/test_quant.py": {
        "torch": {
            "tensor_47": {
                "variable": {
                    "value": "scale_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[case['scale']]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Tensor_75": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_49": {
                "data": {
                    "value": "case['data']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_51": {
                "data": {
                    "value": "case['bitwidth']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_61": {
                "data": {
                    "value": "[1.1, 0.9]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_76": {
                "data": {
                    "value": "[1.1, 0.9]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_77": {
                "data": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_79": {
                "data": {
                    "value": "[0.5, 0.26]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "cifar/tests/test_utils.py": {
        "torch": {
            "tensor_39": {
                "data": {
                    "value": "[0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "cifar/vgg.py": {
        "torch": {
            "relu_126": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fix1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_127": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fix2(self.conv2(F.max_pool2d(x, **kwargs)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_128": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fix3(self.conv3_1(F.max_pool2d(x, **kwargs)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_129": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fix4(self.conv3_2(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_130": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fix5(self.conv4_1(F.max_pool2d(x, **kwargs)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_131": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fix6(self.conv4_2(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_132": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fix7(self.conv5_1(F.max_pool2d(x, **kwargs)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_133": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fix8(self.conv5_2(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_134": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fix9(self.fc1(F.dropout(F.max_pool2d(x, **kwargs).view(-1, 512))))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_137": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fix10(self.fc2(F.dropout(x)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_265": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_157": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Dropout()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_158": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_171": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_172": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_185": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_225": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool2d_127": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fix0(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fix1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.fix2(self.conv2(F.max_pool2d(x, **kwargs))))",
                            "Call"
                        ],
                        [
                            "F.relu(self.fix3(self.conv3_1(F.max_pool2d(x, **kwargs))))",
                            "Call"
                        ],
                        [
                            "F.relu(self.fix4(self.conv3_2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.fix5(self.conv4_1(F.max_pool2d(x, **kwargs))))",
                            "Call"
                        ],
                        [
                            "F.relu(self.fix6(self.conv4_2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.fix7(self.conv5_1(F.max_pool2d(x, **kwargs))))",
                            "Call"
                        ],
                        [
                            "F.relu(self.fix8(self.conv5_2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.fix9(self.fc1(F.dropout(F.max_pool2d(x, **kwargs).view(-1, 512)))))",
                            "Call"
                        ],
                        [
                            "F.relu(self.fix10(self.fc2(F.dropout(x))))",
                            "Call"
                        ],
                        [
                            "self.fix11(self.fc3(x))",
                            "Call"
                        ],
                        [
                            "activation(x)",
                            "Call"
                        ],
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.classifier(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_pool2d_128": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fix0(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fix1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.fix2(self.conv2(F.max_pool2d(x, **kwargs))))",
                            "Call"
                        ],
                        [
                            "F.relu(self.fix3(self.conv3_1(F.max_pool2d(x, **kwargs))))",
                            "Call"
                        ],
                        [
                            "F.relu(self.fix4(self.conv3_2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.fix5(self.conv4_1(F.max_pool2d(x, **kwargs))))",
                            "Call"
                        ],
                        [
                            "F.relu(self.fix6(self.conv4_2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.fix7(self.conv5_1(F.max_pool2d(x, **kwargs))))",
                            "Call"
                        ],
                        [
                            "F.relu(self.fix8(self.conv5_2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.fix9(self.fc1(F.dropout(F.max_pool2d(x, **kwargs).view(-1, 512)))))",
                            "Call"
                        ],
                        [
                            "F.relu(self.fix10(self.fc2(F.dropout(x))))",
                            "Call"
                        ],
                        [
                            "self.fix11(self.fc3(x))",
                            "Call"
                        ],
                        [
                            "activation(x)",
                            "Call"
                        ],
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.classifier(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_pool2d_130": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fix0(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fix1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.fix2(self.conv2(F.max_pool2d(x, **kwargs))))",
                            "Call"
                        ],
                        [
                            "F.relu(self.fix3(self.conv3_1(F.max_pool2d(x, **kwargs))))",
                            "Call"
                        ],
                        [
                            "F.relu(self.fix4(self.conv3_2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.fix5(self.conv4_1(F.max_pool2d(x, **kwargs))))",
                            "Call"
                        ],
                        [
                            "F.relu(self.fix6(self.conv4_2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.fix7(self.conv5_1(F.max_pool2d(x, **kwargs))))",
                            "Call"
                        ],
                        [
                            "F.relu(self.fix8(self.conv5_2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.fix9(self.fc1(F.dropout(F.max_pool2d(x, **kwargs).view(-1, 512)))))",
                            "Call"
                        ],
                        [
                            "F.relu(self.fix10(self.fc2(F.dropout(x))))",
                            "Call"
                        ],
                        [
                            "self.fix11(self.fc3(x))",
                            "Call"
                        ],
                        [
                            "activation(x)",
                            "Call"
                        ],
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.classifier(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_pool2d_132": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fix0(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fix1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.fix2(self.conv2(F.max_pool2d(x, **kwargs))))",
                            "Call"
                        ],
                        [
                            "F.relu(self.fix3(self.conv3_1(F.max_pool2d(x, **kwargs))))",
                            "Call"
                        ],
                        [
                            "F.relu(self.fix4(self.conv3_2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.fix5(self.conv4_1(F.max_pool2d(x, **kwargs))))",
                            "Call"
                        ],
                        [
                            "F.relu(self.fix6(self.conv4_2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.fix7(self.conv5_1(F.max_pool2d(x, **kwargs))))",
                            "Call"
                        ],
                        [
                            "F.relu(self.fix8(self.conv5_2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.fix9(self.fc1(F.dropout(F.max_pool2d(x, **kwargs).view(-1, 512)))))",
                            "Call"
                        ],
                        [
                            "F.relu(self.fix10(self.fc2(F.dropout(x))))",
                            "Call"
                        ],
                        [
                            "self.fix11(self.fc3(x))",
                            "Call"
                        ],
                        [
                            "activation(x)",
                            "Call"
                        ],
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.classifier(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_135": {
                "input": {
                    "value": "F.max_pool2d(x, **kwargs).view(-1, 512)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_137": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fix0(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fix1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.fix2(self.conv2(F.max_pool2d(x, **kwargs))))",
                            "Call"
                        ],
                        [
                            "F.relu(self.fix3(self.conv3_1(F.max_pool2d(x, **kwargs))))",
                            "Call"
                        ],
                        [
                            "F.relu(self.fix4(self.conv3_2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.fix5(self.conv4_1(F.max_pool2d(x, **kwargs))))",
                            "Call"
                        ],
                        [
                            "F.relu(self.fix6(self.conv4_2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.fix7(self.conv5_1(F.max_pool2d(x, **kwargs))))",
                            "Call"
                        ],
                        [
                            "F.relu(self.fix8(self.conv5_2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.fix9(self.fc1(F.dropout(F.max_pool2d(x, **kwargs).view(-1, 512)))))",
                            "Call"
                        ],
                        [
                            "F.relu(self.fix10(self.fc2(F.dropout(x))))",
                            "Call"
                        ],
                        [
                            "self.fix11(self.fc3(x))",
                            "Call"
                        ],
                        [
                            "activation(x)",
                            "Call"
                        ],
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.classifier(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "Dropout_227": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_pool2d_135": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fix0(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fix1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.fix2(self.conv2(F.max_pool2d(x, **kwargs))))",
                            "Call"
                        ],
                        [
                            "F.relu(self.fix3(self.conv3_1(F.max_pool2d(x, **kwargs))))",
                            "Call"
                        ],
                        [
                            "F.relu(self.fix4(self.conv3_2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.fix5(self.conv4_1(F.max_pool2d(x, **kwargs))))",
                            "Call"
                        ],
                        [
                            "F.relu(self.fix6(self.conv4_2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.fix7(self.conv5_1(F.max_pool2d(x, **kwargs))))",
                            "Call"
                        ],
                        [
                            "F.relu(self.fix8(self.conv5_2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.fix9(self.fc1(F.dropout(F.max_pool2d(x, **kwargs).view(-1, 512)))))",
                            "Call"
                        ],
                        [
                            "F.relu(self.fix10(self.fc2(F.dropout(x))))",
                            "Call"
                        ],
                        [
                            "self.fix11(self.fc3(x))",
                            "Call"
                        ],
                        [
                            "activation(x)",
                            "Call"
                        ],
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.classifier(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "ReLU_241": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_259": {
                "num_features": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg",
                            "variable"
                        ]
                    ]
                }
            },
            "ReLU_259": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_261": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "mnist/finetune_bitslice.py": {
        "torch": {
            "DataLoader_103": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.MNIST('../data', train=True, download=True, transform=transforms.Compose([transforms.ToTensor(), transforms.Normalize((0.1307,), (0.3081,))]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_116": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.MNIST('../data', train=False, transform=transforms.Compose([transforms.ToTensor(), transforms.Normalize((0.1307,), (0.3081,))]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SGD_348": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_98": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_357": {
                "variable": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "new_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.where(abs(tensor) < threshold, 0, tensor)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_359": {
                "variable": {
                    "value": "masks[name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.where(abs(tensor) < threshold, 0.0, 1.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_96": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_100": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_180": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fix1(self.fc1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "nll_loss_239": {
                "variable": {
                    "value": "loss_",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(data)",
                            "Call"
                        ],
                        [
                            "model(data)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_339": {
                "variable": {
                    "value": "module.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "temp_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.load(weight_dir + '/{}_weight.npy'.format(name))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_342": {
                "variable": {
                    "value": "module.bias.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "temp_b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.load(weight_dir + '/{}_bias.npy'.format(name))",
                            "Call"
                        ]
                    ]
                }
            },
            "log_softmax_183": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Round.apply(weights.abs() / 2 ** (scale - 8))",
                            "Call"
                        ],
                        [
                            "self.fix0(x.view(-1, 784))",
                            "Call"
                        ],
                        [
                            "F.relu(self.fix1(self.fc1(x)))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "no_grad_285": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_396": {
                "obj": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'epoch': epoch, 'state_dict': model.state_dict(), 'best_acc': best_acc, 'best_zero_ratio': best_zero, 'prune_acc': acc_prune, 'prune_zero_ratio': zero_prune, 'fix_cfg': fix_cfg}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "'save_finetune/bitslice_{}.tar'.format(args.th)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "nll_loss_291": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(data)",
                            "Call"
                        ],
                        [
                            "model(data)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "size_average": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "mnist/finetune_l1.py": {
        "torch": {
            "DataLoader_103": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.MNIST('../data', train=True, download=True, transform=transforms.Compose([transforms.ToTensor(), transforms.Normalize((0.1307,), (0.3081,))]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_116": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.MNIST('../data', train=False, transform=transforms.Compose([transforms.ToTensor(), transforms.Normalize((0.1307,), (0.3081,))]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SGD_337": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_98": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_346": {
                "variable": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "new_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.where(abs(tensor) < threshold, 0, tensor)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_348": {
                "variable": {
                    "value": "masks[name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.where(abs(tensor) < threshold, 0.0, 1.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_96": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_100": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_175": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fix1(self.fc1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "nll_loss_228": {
                "variable": {
                    "value": "loss_",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(data)",
                            "Call"
                        ],
                        [
                            "model(data)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_328": {
                "variable": {
                    "value": "module.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "temp_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.load(weight_dir + '/{}_weight.npy'.format(name))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_331": {
                "variable": {
                    "value": "module.bias.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "temp_b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.load(weight_dir + '/{}_bias.npy'.format(name))",
                            "Call"
                        ]
                    ]
                }
            },
            "log_softmax_178": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fix0(x.view(-1, 784))",
                            "Call"
                        ],
                        [
                            "F.relu(self.fix1(self.fc1(x)))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "no_grad_274": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_387": {
                "obj": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'epoch': epoch, 'state_dict': model.state_dict(), 'best_acc': best_acc, 'best_zero_ratio': best_zero, 'prune_acc': acc_prune, 'prune_zero_ratio': zero_prune, 'fix_cfg': fix_cfg}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "'save_finetune/l1_{}.tar'.format(args.th)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "norm_238": {
                "input": {
                    "value": "param",
                    "type": "variable",
                    "possible_values": []
                },
                "p": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_296": {
                "input": {
                    "value": "param",
                    "type": "variable",
                    "possible_values": []
                },
                "p": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "nll_loss_280": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(data)",
                            "Call"
                        ],
                        [
                            "model(data)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "size_average": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "mnist/nics_fix_pt/__init__.py": {
        "torch": {}
    },
    "mnist/nics_fix_pt/fix_modules.py": {
        "torch": {
            "is_tensor_314": {
                "obj": {
                    "value": "ori_method",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fix_params[n]['method']",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "mnist/nics_fix_pt/nn_fix_inner.py": {
        "torch": {}
    },
    "mnist/nics_fix_pt/quant.py": {
        "torch": {
            "pow_19": {
                "variable": {
                    "value": "step",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.autograd.Variable(torch.FloatTensor([2.0]), requires_grad=False)",
                    "type": "Call",
                    "possible_values": []
                },
                "exponent": {
                    "value": "scale_f - bit_width.float()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "min_43": {
                "variable": {
                    "value": "new_data",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.max(StraightThroughRound.apply(data / step) * step, minimum)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pow_24": {
                "input": {
                    "value": "torch.autograd.Variable(torch.FloatTensor([2.0]), requires_grad=False)",
                    "type": "Call",
                    "possible_values": []
                },
                "exponent": {
                    "value": "scale_f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scale.float()",
                            "Call"
                        ]
                    ]
                }
            },
            "max_44": {
                "input": {
                    "value": "StraightThroughRound.apply(data / step) * step",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_tensor_128": {
                "obj": {
                    "value": "method",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_cfg.get('method', QuantizeMethod.FIX_NONE)",
                            "Call"
                        ],
                        [
                            "grad_cfg.get('method', QuantizeMethod.FIX_NONE)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_tensor_143": {
                "obj": {
                    "value": "method",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_cfg.get('method', QuantizeMethod.FIX_NONE)",
                            "Call"
                        ],
                        [
                            "grad_cfg.get('method', QuantizeMethod.FIX_NONE)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_tensor_57": {
                "obj": {
                    "value": "method",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_cfg.get('method', QuantizeMethod.FIX_NONE)",
                            "Call"
                        ],
                        [
                            "grad_cfg.get('method', QuantizeMethod.FIX_NONE)",
                            "Call"
                        ]
                    ]
                }
            },
            "ceil_70": {
                "variable": {
                    "value": "new_scale",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.log(torch.max(torch.max(torch.abs(data)), torch.tensor(EPS).float().to(data.device))) / np.log(2.0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_71": {
                "input": {
                    "value": "torch.max(torch.max(torch.abs(data)), torch.tensor(EPS).float().to(data.device))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_72": {
                "input": {
                    "value": "torch.max(torch.abs(data))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_73": {
                "input": {
                    "value": "torch.abs(data)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_74": {
                "data": {
                    "value": "EPS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-05",
                            "float"
                        ]
                    ]
                }
            },
            "abs_73": {
                "input": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "mnist/nics_fix_pt/utils.py": {
        "torch": {
            "is_tensor_26": {
                "obj": {
                    "value": "something",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "mnist/pretrain.py": {
        "torch": {
            "DataLoader_85": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.MNIST('../data', train=True, download=True, transform=transforms.Compose([transforms.ToTensor(), transforms.Normalize((0.1307,), (0.3081,))]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_98": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.MNIST('../data', train=False, transform=transforms.Compose([transforms.ToTensor(), transforms.Normalize((0.1307,), (0.3081,))]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SGD_167": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_80": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_78": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_82": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_157": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fix1(self.fc1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "nll_loss_215": {
                "variable": {
                    "value": "loss_",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(data)",
                            "Call"
                        ],
                        [
                            "model(data)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "log_softmax_160": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fix0(x.view(-1, 784))",
                            "Call"
                        ],
                        [
                            "F.relu(self.fix1(self.fc1(x)))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "no_grad_251": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "norm_225": {
                "input": {
                    "value": "param",
                    "type": "variable",
                    "possible_values": []
                },
                "p": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_274": {
                "input": {
                    "value": "param",
                    "type": "variable",
                    "possible_values": []
                },
                "p": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "nll_loss_257": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(data)",
                            "Call"
                        ],
                        [
                            "model(data)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "size_average": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "mnist/tests/conftest.py": {
        "torch": {
            "Parameter_11": {
                "variable": {
                    "value": "self.param",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, input_num)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linear_22": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.param",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "no_grad_16": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "mnist/tests/test_fix_bn.py": {
        "torch": {
            "BatchNorm1d_34": {
                "variable": {
                    "value": "bn",
                    "type": "variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "case['input_num']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "momentum": {
                    "value": "case['momentum']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_38": {
                "data": {
                    "value": "case['inputs']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_22": {
                "data": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_23": {
                "data": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_27": {
                "data": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_28": {
                "data": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_58": {
                "data": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_59": {
                "data": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_70": {
                "data": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_71": {
                "data": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "mnist/tests/test_fix_module.py": {
        "torch": {
            "SGD_111": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "module.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_39": {
                "variable": {
                    "value": "module.param[0, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "case['data']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_74": {
                "variable": {
                    "value": "module.param.data[0, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "case['data']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_110": {
                "variable": {
                    "value": "module.param.data[0, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "case['data']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "no_grad_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_75": {
                "data": {
                    "value": "case['inputs']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_112": {
                "data": {
                    "value": "case['inputs']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_41": {
                "data": {
                    "value": "case['inputs']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "mnist/tests/test_quant.py": {
        "torch": {
            "tensor_47": {
                "variable": {
                    "value": "scale_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[case['scale']]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Tensor_75": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_49": {
                "data": {
                    "value": "case['data']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_51": {
                "data": {
                    "value": "case['bitwidth']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_61": {
                "data": {
                    "value": "[1.1, 0.9]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_76": {
                "data": {
                    "value": "[1.1, 0.9]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_77": {
                "data": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_79": {
                "data": {
                    "value": "[0.5, 0.26]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "mnist/tests/test_utils.py": {
        "torch": {
            "tensor_39": {
                "data": {
                    "value": "[0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    }
}