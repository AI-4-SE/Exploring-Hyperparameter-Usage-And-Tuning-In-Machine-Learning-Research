{
    "null_task_distribution.py": {
        "torch": {
            "from_numpy_43": {
                "variable": {
                    "value": "M",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.random.choice([0, 1], size=S * S * batch_size, replace=True).reshape((batch_size, S * S))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_65": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BCELoss_66": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_10": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "S * S",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "S * S",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_11": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "S * S",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "S * S",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_12": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "S * S",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "S * S",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_14": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_15": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_80": {
                "variable": {
                    "value": "masked",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "true.copy()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_82": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "true",
                    "type": "Name",
                    "possible_values": [
                        [
                            "configurations.copy()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_83": {
                "variable": {
                    "value": "tensor_idxs",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "change_idxs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.zeros(true.shape).astype('bool')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_97": {
                "obj": {
                    "value": "net.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "task_generator.pt",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_17": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_21": {
                "f": {
                    "value": "task_generator.pt",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_33": {
                "variable": {
                    "value": "masked",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "M_eval",
                    "type": "Call",
                    "possible_values": [
                        [
                            "M.copy()",
                            "Call"
                        ],
                        [
                            "M.clone().detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_51": {
                "variable": {
                    "value": "r",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "500",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    }
}