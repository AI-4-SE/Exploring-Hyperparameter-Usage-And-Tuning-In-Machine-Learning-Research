{
    "Dataset.py": {
        "tensorflow": {
            "read_file_64": {
                "variable": {
                    "value": "content",
                    "type": "variable",
                    "possible_values": []
                },
                "filename": {
                    "value": "input_queue",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "decode_jpeg_65": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "content",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.read_file(input_queue)",
                            "Call"
                        ]
                    ]
                },
                "channels": {
                    "value": "self.channel",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_66": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.decode_jpeg(content, channels=self.channel)",
                            "Call"
                        ],
                        [
                            "tf.cast(img, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(img)",
                            "Call"
                        ],
                        [
                            "tf.image.crop_to_bounding_box(img, 20, 0, 178, 178)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(img, (self.height, self.width))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "random_flip_left_right_67": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.decode_jpeg(content, channels=self.channel)",
                            "Call"
                        ],
                        [
                            "tf.cast(img, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(img)",
                            "Call"
                        ],
                        [
                            "tf.image.crop_to_bounding_box(img, 20, 0, 178, 178)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(img, (self.height, self.width))",
                            "Call"
                        ]
                    ]
                }
            },
            "crop_to_bounding_box_68": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.decode_jpeg(content, channels=self.channel)",
                            "Call"
                        ],
                        [
                            "tf.cast(img, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(img)",
                            "Call"
                        ],
                        [
                            "tf.image.crop_to_bounding_box(img, 20, 0, 178, 178)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(img, (self.height, self.width))",
                            "Call"
                        ]
                    ]
                },
                "offset_height": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "offset_width": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "target_height": {
                    "value": "178",
                    "type": "int",
                    "possible_values": []
                },
                "target_width": {
                    "value": "178",
                    "type": "int",
                    "possible_values": []
                }
            },
            "convert_to_tensor_90": {
                "variable": {
                    "value": "train_images",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self.train_images_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_91": {
                "variable": {
                    "value": "train_label",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self.train_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "slice_input_producer_92": {
                "variable": {
                    "value": "train_queue",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor_list": {
                    "value": "[train_images, train_label]",
                    "type": "List",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "convert_to_tensor_96": {
                "variable": {
                    "value": "test_images",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self.test_images_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_97": {
                "variable": {
                    "value": "test_label",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self.test_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "slice_input_producer_98": {
                "variable": {
                    "value": "test_queue",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor_list": {
                    "value": "[test_images, test_label]",
                    "type": "List",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "shuffle_batch_102": {
                "variable": {
                    "value": "(batch_image1, batch_label1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[train_images_queue, train_label_queue]",
                    "type": "List",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "capacity": {
                    "value": "self.capacity",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_threads": {
                    "value": "self.num_threads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "min_after_dequeue": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "batch_108": {
                "variable": {
                    "value": "(batch_image2, batch_label2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[test_images_queue, test_label_queue]",
                    "type": "List",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "capacity": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "num_threads": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "SGGAN.py": {
        "tensorflow": {
            "placeholder_24": {
                "variable": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.opt.batch_size, self.opt.img_size, self.opt.img_size, self.opt.input_nc]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_25": {
                "variable": {
                    "value": "self.label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.opt.batch_size, self.opt.n_att]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_26": {
                "variable": {
                    "value": "self.lr_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "lr_decay",
                    "type": "str",
                    "possible_values": []
                }
            },
            "split_31": {
                "variable": {
                    "value": "self._x_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self._x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "self.opt.n_att",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "split_46": {
                "variable": {
                    "value": "_x_list",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "_x",
                    "type": "variable",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "split_49": {
                "value": {
                    "value": "__x0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.G(_x_list[0])",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "self.opt.n_att",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "split_52": {
                "value": {
                    "value": "__x1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.G(_x_list[1])",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "self.opt.n_att",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_61": {
                "variable": {
                    "value": "d_att_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "multi_class_labels": {
                    "value": "_t_label(i)[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits_att[:, i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_62": {
                "variable": {
                    "value": "g_att_lossl",
                    "type": "variable",
                    "possible_values": []
                },
                "multi_class_labels": {
                    "value": "_t_label(i)[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "logits": {
                    "value": "_logits_att_l[:, i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_63": {
                "variable": {
                    "value": "g_att_lossr",
                    "type": "variable",
                    "possible_values": []
                },
                "multi_class_labels": {
                    "value": "_t_label(i)[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "logits": {
                    "value": "_logits_att_r[:, i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "trainable_variables_79": {
                "variable": {
                    "value": "self.t_vars",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_85": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdamOptimizer_86": {
                "variable": {
                    "value": "opti_D",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.opt.lr_d * self.lr_decay",
                    "type": "BinOp",
                    "possible_values": []
                },
                "beta1": {
                    "value": "self.opt.beta1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "beta2": {
                    "value": "self.opt.beta2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_88": {
                "variable": {
                    "value": "opti_G",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.opt.lr_g * self.lr_decay",
                    "type": "BinOp",
                    "possible_values": []
                },
                "beta1": {
                    "value": "self.opt.beta1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "beta2": {
                    "value": "self.opt.beta2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_91": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConfigProto_92": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_168": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_169": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConfigProto_170": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "unstack_43": {
                "variable": {
                    "value": "label_list",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self.label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num": {
                    "value": "self.opt.n_att",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "get_checkpoint_state_98": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "self.opt.checkpoints_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Coordinator_110": {
                "variable": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "start_queue_runners_111": {
                "variable": {
                    "value": "threads",
                    "type": "variable",
                    "possible_values": []
                },
                "sess": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "coord": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ],
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ]
                    ]
                }
            },
            "get_checkpoint_state_176": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "self.opt.checkpoints_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Coordinator_184": {
                "variable": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "start_queue_runners_185": {
                "variable": {
                    "value": "threads",
                    "type": "variable",
                    "possible_values": []
                },
                "sess": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "coord": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ],
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_224": {
                "variable": {
                    "value": "logit_gan",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv2d_gan(x, scope='dgan')",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_225": {
                "variable": {
                    "value": "logit_att",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv2d_att(x, scope='datt')",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_240": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "In(conv2d_first(x, output_dim=self.opt.ngf, scope='conv'), scope='In')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_255": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "In(conv2d_Dec(x, output_dim=c_dim * self.opt.n_att * 2, scope='conv_dec'), scope='de_In')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "split_258": {
                "variable": {
                    "value": "x_list",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lre(conv2d_first(x, scope='d_first'))",
                            "Call"
                        ],
                        [
                            "lre(conv2d_base(x, output_dim=dim, scope='d{}'.format(i)))",
                            "Call"
                        ],
                        [
                            "x_init",
                            "Name"
                        ],
                        [
                            "tf.nn.relu(In(conv2d_first(x, output_dim=self.opt.ngf, scope='conv'), scope='In'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(In(conv2d_Enc(x, output_dim=c_dim, scope='conv{}'.format(i)), scope='In{}'.format(i)))",
                            "Call"
                        ],
                        [
                            "Resblock(x, o_dim=c_dim, ds=False, scope='r{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(In(conv2d_Dec(x, output_dim=c_dim, scope='conv_dec{}'.format(i)), scope='de_In{}'.format(i)))",
                            "Call"
                        ],
                        [
                            "upscale(x, 2)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(In(conv2d_Dec(x, output_dim=c_dim * self.opt.n_att * 2, scope='conv_dec'), scope='de_In'))",
                            "Call"
                        ],
                        [
                            "upscale(x, 2)",
                            "Call"
                        ],
                        [
                            "tf.concat([x_list[i], x_init], axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "self.opt.n_att * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_264": {
                "variable": {
                    "value": "x_results",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "x_results",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(x_results, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "add_n_34": {
                "inputs": {
                    "value": "loss_array_d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[self.Overall_loss(item, i)[0] for (i, item) in enumerate(self._x_list)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "add_n_35": {
                "inputs": {
                    "value": "loss_array_g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[self.Overall_loss(item, i)[1] for (i, item) in enumerate(self._x_list)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "Session_95": {
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ],
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_173": {
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ],
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_218": {
                "name_or_scope": {
                    "value": "D",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_237": {
                "name_or_scope": {
                    "value": "G",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_243": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "In(conv2d_Enc(x, output_dim=c_dim, scope='conv{}'.format(i)), scope='In{}'.format(i))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_251": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "In(conv2d_Dec(x, output_dim=c_dim, scope='conv_dec{}'.format(i)), scope='de_In{}'.format(i))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_261": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[x_list[i], x_init]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tanh_265": {
                "x": {
                    "value": "x_results",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(x_results, axis=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_44": {
                "input": {
                    "value": "label_list[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_like_44": {
                "input": {
                    "value": "label_list[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "tfLib/advloss.py": {
        "tensorflow": {
            "reduce_mean_22": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.relu(1.0 - d_real_logits)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_35": {
                "variable": {
                    "value": "l1",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.softplus(-d_real_logits)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_36": {
                "variable": {
                    "value": "l2",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.softplus(d_fake_logits)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_59": {
                "variable": {
                    "value": "f_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "f_logit",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_mean_12": {
                "input_tensor": {
                    "value": "r_loss + f_loss",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_16": {
                "input_tensor": {
                    "value": "f_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bce(labels=tf.zeros_like(f_logit), logits=f_logit)",
                            "Call"
                        ],
                        [
                            "bce(labels=tf.ones_like(f_logit), logits=f_logit)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(f_logit)",
                            "Call"
                        ],
                        [
                            "-tf.reduce_mean(f_logit)",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "reduce_mean_23": {
                "input_tensor": {
                    "value": "tf.nn.relu(1.0 + d_fake_logits)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_40": {
                "input_tensor": {
                    "value": "tf.nn.softplus(-d_fake_logits)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_51": {
                "input_tensor": {
                    "value": "(d_fake_logits - 0.9) * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_22": {
                "features": {
                    "value": "1.0 - d_real_logits",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_23": {
                "features": {
                    "value": "1.0 + d_fake_logits",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_27": {
                "input_tensor": {
                    "value": "d_fake_logits",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "softplus_35": {
                "features": {
                    "value": "-d_real_logits",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softplus_36": {
                "features": {
                    "value": "d_fake_logits",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "softplus_40": {
                "features": {
                    "value": "-d_fake_logits",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_mean_47": {
                "input_tensor": {
                    "value": "(d_real_logits - 0.9) * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_48": {
                "input_tensor": {
                    "value": "d_fake_logits * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_58": {
                "input_tensor": {
                    "value": "r_logit",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_mean_63": {
                "input_tensor": {
                    "value": "f_logit",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_like_10": {
                "input": {
                    "value": "r_logit",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_like_11": {
                "input": {
                    "value": "f_logit",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_like_15": {
                "input": {
                    "value": "f_logit",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "tfLib/flowfield.py": {
        "tensorflow": {
            "reshape_17": {
                "variable": {
                    "value": "flow",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.transpose(flow, [0, 3, 1, 2])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, fC, fH * fW]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "add_20": {
                "variable": {
                    "value": "transformed_grid",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "flow",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.transpose(flow, [0, 3, 1, 2]), [-1, fC, fH * fW])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "indices_grid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "meshgrid(iH, iW)",
                            "Call"
                        ],
                        [
                            "tf.stack([x_coordinates, y_coordinates], axis=0)",
                            "Call"
                        ],
                        [
                            "tf.stack([x_coordinates, y_coordinates, tf.ones_like(x_coordinates)], axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "slice_21": {
                "variable": {
                    "value": "x_s",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "transformed_grid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.add(flow, indices_grid)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_22": {
                "variable": {
                    "value": "y_s",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "transformed_grid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.add(flow, indices_grid)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 1, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_24": {
                "variable": {
                    "value": "x_s_flatten",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(transformed_grid, [0, 0, 0], [-1, 1, -1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_25": {
                "variable": {
                    "value": "y_s_flatten",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(transformed_grid, [0, 1, 0], [-1, 1, -1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_28": {
                "variable": {
                    "value": "transformed_image",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "transformed_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "interpolate(input, x_s_flatten, y_s_flatten, iH, iW, 'interpolate')",
                            "Call"
                        ],
                        [
                            "tf.reshape(transformed_image, [N, iH, iW, iC])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[N, iH, iW, iC]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "linspace_35": {
                "variable": {
                    "value": "y_linspace",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "stop": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "num": {
                    "value": "height",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "linspace_36": {
                "variable": {
                    "value": "x_linspace",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "stop": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "num": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "meshgrid_37": {
                "variable": {
                    "value": "(x_coordinates, y_coordinates)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*args": {
                    "value": "x_linspace",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.linspace(-1.0, 1.0, width)",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "y_linspace",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.linspace(-1.0, 1.0, height)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_38": {
                "variable": {
                    "value": "x_coordinates",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x_coordinates",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x_coordinates, shape=[-1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_39": {
                "variable": {
                    "value": "y_coordinates",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y_coordinates",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(y_coordinates, shape=[-1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_55": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(x, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "(x + 1.0) * (W_f - 1) * 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(tf.reshape(x, (-1, 1)), rep)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_56": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(y, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "(y + 1.0) * (H_f - 1) * 0.5",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_57": {
                "variable": {
                    "value": "H_f",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_58": {
                "variable": {
                    "value": "W_f",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_64": {
                "variable": {
                    "value": "x0",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.floor(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_66": {
                "variable": {
                    "value": "y0",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.floor(y)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_70": {
                "variable": {
                    "value": "max_y",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "H - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_71": {
                "variable": {
                    "value": "max_x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "W - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_72": {
                "variable": {
                    "value": "zero",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_value_74": {
                "variable": {
                    "value": "x0",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "x0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.floor(x), tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x0, zero, max_x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x0, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "zero",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([0], shape=(1,), dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_max": {
                    "value": "max_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(W - 1, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_value_75": {
                "variable": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x0 + 1",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x1, zero, max_x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x1, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "zero",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([0], shape=(1,), dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_max": {
                    "value": "max_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(W - 1, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_value_76": {
                "variable": {
                    "value": "y0",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "y0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.floor(y), tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(y0, zero, max_y)",
                            "Call"
                        ],
                        [
                            "tf.cast(y0, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "zero",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([0], shape=(1,), dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_max": {
                    "value": "max_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(H - 1, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_value_77": {
                "variable": {
                    "value": "y1",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "y1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y0 + 1",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(y1, zero, max_y)",
                            "Call"
                        ],
                        [
                            "tf.cast(y1, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "zero",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([0], shape=(1,), dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_max": {
                    "value": "max_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(H - 1, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_99": {
                "variable": {
                    "value": "flat_image",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, C)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cast_100": {
                "variable": {
                    "value": "flat_image",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "flat_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(input, shape=(-1, C))",
                            "Call"
                        ],
                        [
                            "tf.cast(flat_image, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_102": {
                "variable": {
                    "value": "pixel_values_a",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "flat_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(input, shape=(-1, C))",
                            "Call"
                        ],
                        [
                            "tf.cast(flat_image, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "indices_a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "base_y0 + x0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "gather_103": {
                "variable": {
                    "value": "pixel_values_b",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "flat_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(input, shape=(-1, C))",
                            "Call"
                        ],
                        [
                            "tf.cast(flat_image, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "indices_b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "base_y1 + x0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "gather_104": {
                "variable": {
                    "value": "pixel_values_c",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "flat_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(input, shape=(-1, C))",
                            "Call"
                        ],
                        [
                            "tf.cast(flat_image, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "indices_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "base_y0 + x1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "gather_105": {
                "variable": {
                    "value": "pixel_values_d",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "flat_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(input, shape=(-1, C))",
                            "Call"
                        ],
                        [
                            "tf.cast(flat_image, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "indices_d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "base_y1 + x1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cast_107": {
                "variable": {
                    "value": "x0",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.floor(x), tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x0, zero, max_x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x0, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_108": {
                "variable": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x0 + 1",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x1, zero, max_x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x1, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_109": {
                "variable": {
                    "value": "y0",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.floor(y), tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(y0, zero, max_y)",
                            "Call"
                        ],
                        [
                            "tf.cast(y0, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_110": {
                "variable": {
                    "value": "y1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y0 + 1",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(y1, zero, max_y)",
                            "Call"
                        ],
                        [
                            "tf.cast(y1, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_112": {
                "variable": {
                    "value": "area_a",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(x1 - x) * (y1 - y)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_113": {
                "variable": {
                    "value": "area_b",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(x1 - x) * (y - y0)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_114": {
                "variable": {
                    "value": "area_c",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(x - x0) * (y1 - y)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_115": {
                "variable": {
                    "value": "area_d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(x - x0) * (y - y0)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_n_117": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[area_a * pixel_values_a, area_b * pixel_values_b, area_c * pixel_values_c, area_d * pixel_values_d]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_131": {
                "variable": {
                    "value": "rep",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.ones(shape=tf.stack([n_repeats]), dtype=tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, n_repeats)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "matmul_133": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.reshape(x, (-1, 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "rep",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.ones(shape=tf.stack([n_repeats]), dtype=tf.int32), (1, n_repeats))",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_11": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_34": {
                "name_or_scope": {
                    "value": "meshgrid",
                    "type": "str",
                    "possible_values": []
                }
            },
            "stack_41": {
                "variable": {
                    "value": "indices_grid",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[x_coordinates, y_coordinates]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_43": {
                "variable": {
                    "value": "indices_grid",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[x_coordinates, y_coordinates, tf.ones_like(x_coordinates)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_52": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_130": {
                "name_or_scope": {
                    "value": "_repeat",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_137": {
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(x, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "(x + 1.0) * (W_f - 1) * 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(tf.reshape(x, (-1, 1)), rep)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_17": {
                "a": {
                    "value": "flow",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.transpose(flow, [0, 3, 1, 2]), [-1, fC, fH * fW])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "floor_64": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(x, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "(x + 1.0) * (W_f - 1) * 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(tf.reshape(x, (-1, 1)), rep)",
                            "Call"
                        ]
                    ]
                }
            },
            "floor_66": {
                "x": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(y, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "(y + 1.0) * (H_f - 1) * 0.5",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_131": {
                "shape": {
                    "value": "tf.stack([n_repeats])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_133": {
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(x, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "(x + 1.0) * (W_f - 1) * 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(tf.reshape(x, (-1, 1)), rep)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_like_43": {
                "input": {
                    "value": "x_coordinates",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x_coordinates, shape=[-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_131": {
                "values": {
                    "value": "[n_repeats]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "tfLib/gp.py": {
        "tensorflow": {
            "norm_21": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.reshape(grad, [tf.shape(grad)[0], -1])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_mean_22": {
                "variable": {
                    "value": "gp",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "(norm - 1.0) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "constant_27": {
                "variable": {
                    "value": "gp",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "real.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gradients_20": {
                "ys": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f(x)",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "[x]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_21": {
                "tensor": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gradients(pred, [x])[0]",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "[tf.shape(grad)[0], -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_21": {
                "input": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gradients(pred, [x])[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "shape_11": {
                "input": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "tfLib/loss.py": {
        "tensorflow": {
            "reduce_mean_12": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sparse_softmax_cross_entropy_with_logits(labels=labels, logits=logits)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_16": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.softmax_cross_entropy_with_logits(labels=labels, logits=logits)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "l2_normalize_21": {
                "variable": {
                    "value": "f1_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "f1",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "l2_normalize_22": {
                "variable": {
                    "value": "f2_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "f2",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_8": {
                "input_tensor": {
                    "value": "tf.abs(tf.reduce_mean(feature1, axis=[1, 2]) - tf.reduce_mean(feature2, axis=[1, 2]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cosine_distance_23": {
                "labels": {
                    "value": "f1_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(f1, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "predictions": {
                    "value": "f2_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(f2, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_26": {
                "input_tensor": {
                    "value": "tf.square(i1 - i2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_29": {
                "input_tensor": {
                    "value": "tf.abs(i1 - i2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_8": {
                "x": {
                    "value": "tf.reduce_mean(feature1, axis=[1, 2]) - tf.reduce_mean(feature2, axis=[1, 2])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_with_logits_12": {
                "labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_16": {
                "labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "square_26": {
                "x": {
                    "value": "i1 - i2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_29": {
                "x": {
                    "value": "i1 - i2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_33": {
                "input_tensor": {
                    "value": "tf.image.total_variation(i1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "total_variation_33": {
                "images": {
                    "value": "i1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_mean_9": {
                "input_tensor": {
                    "value": "feature2",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "tfLib/ops.py": {
        "tensorflow": {
            "reduce_max_12": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Adaptive_instance_norm(x_init, beta=beta, gamma=gamma, scope='AdaIn1')",
                            "Call"
                        ],
                        [
                            "lrelu(x)",
                            "Call"
                        ],
                        [
                            "upscale(x, scale=2)",
                            "Call"
                        ],
                        [
                            "conv2d(x, o_dim, k=3, s=1, padding='SAME')",
                            "Call"
                        ],
                        [
                            "Adaptive_instance_norm(x, beta=beta, gamma=gamma, scope='AdaIn2')",
                            "Call"
                        ],
                        [
                            "lrelu(x)",
                            "Call"
                        ],
                        [
                            "conv2d(x, o_dim, k=3, s=1, padding='SAME')",
                            "Call"
                        ],
                        [
                            "upscale(x, scale=2)",
                            "Call"
                        ],
                        [
                            "conv2d(x, output_dim=o_dim, k=1, s=1, scope='conv', use_bias=False)",
                            "Call"
                        ],
                        [
                            "conv1(relu(relu_type)(In(x_init, scope='bn1')), padding='SAME', scope='c1')",
                            "Call"
                        ],
                        [
                            "conv1(relu(relu_type)(x_init), padding='SAME', scope='c1')",
                            "Call"
                        ],
                        [
                            "avgpool2d(x, k=2)",
                            "Call"
                        ],
                        [
                            "conv2(relu(relu_type)(In(x, scope='bn2')), padding='SAME', scope='c2')",
                            "Call"
                        ],
                        [
                            "avgpool2d(x, k=2)",
                            "Call"
                        ],
                        [
                            "conv2(relu(relu_type)(x), padding='SAME', scope='c2')",
                            "Call"
                        ],
                        [
                            "conv2d(x, output_dim=o_dim, k=1, s=1, scope='conv', use_bias=False)",
                            "Call"
                        ],
                        [
                            "avgpool2d(x, k=2)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_size)",
                            "Call"
                        ]
                    ]
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "resize_nearest_neighbor_193": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Adaptive_instance_norm(x_init, beta=beta, gamma=gamma, scope='AdaIn1')",
                            "Call"
                        ],
                        [
                            "lrelu(x)",
                            "Call"
                        ],
                        [
                            "upscale(x, scale=2)",
                            "Call"
                        ],
                        [
                            "conv2d(x, o_dim, k=3, s=1, padding='SAME')",
                            "Call"
                        ],
                        [
                            "Adaptive_instance_norm(x, beta=beta, gamma=gamma, scope='AdaIn2')",
                            "Call"
                        ],
                        [
                            "lrelu(x)",
                            "Call"
                        ],
                        [
                            "conv2d(x, o_dim, k=3, s=1, padding='SAME')",
                            "Call"
                        ],
                        [
                            "upscale(x, scale=2)",
                            "Call"
                        ],
                        [
                            "conv2d(x, output_dim=o_dim, k=1, s=1, scope='conv', use_bias=False)",
                            "Call"
                        ],
                        [
                            "conv1(relu(relu_type)(In(x_init, scope='bn1')), padding='SAME', scope='c1')",
                            "Call"
                        ],
                        [
                            "conv1(relu(relu_type)(x_init), padding='SAME', scope='c1')",
                            "Call"
                        ],
                        [
                            "avgpool2d(x, k=2)",
                            "Call"
                        ],
                        [
                            "conv2(relu(relu_type)(In(x, scope='bn2')), padding='SAME', scope='c2')",
                            "Call"
                        ],
                        [
                            "avgpool2d(x, k=2)",
                            "Call"
                        ],
                        [
                            "conv2(relu(relu_type)(x), padding='SAME', scope='c2')",
                            "Call"
                        ],
                        [
                            "conv2d(x, output_dim=o_dim, k=1, s=1, scope='conv', use_bias=False)",
                            "Call"
                        ],
                        [
                            "avgpool2d(x, k=2)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_size)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "new_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reshape_200": {
                "variable": {
                    "value": "y_reshaped",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[y_shapes[0], 1, 1, y_shapes[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_22": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[k, k, input_.get_shape()[-1], output_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.variance_scaling_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "l2_regularizer(scale=0.0001)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_40": {
                "variable": {
                    "value": "matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "Matrix",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[shape[1], output_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.variance_scaling_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "l2_regularizer(0.0001)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_42": {
                "variable": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bias",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[output_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(bias_start)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "moments_64": {
                "variable": {
                    "value": "(mean, variance)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "axes": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "rsqrt_65": {
                "variable": {
                    "value": "inv",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "variance + epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_67": {
                "variable": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(beta, shape=[-1, 1, 1, ch])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1, 1, ch]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_68": {
                "variable": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(gamma, shape=[-1, 1, 1, ch])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1, 1, ch]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_154": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[k_h, k_w, output_dim[-1], input_.get_shape()[-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.variance_scaling_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_163": {
                "variable": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[output_dim[-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_164": {
                "variable": {
                    "value": "deconv",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.nn.bias_add(deconv, biases)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "deconv.get_shape()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "avg_pool_172": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Adaptive_instance_norm(x_init, beta=beta, gamma=gamma, scope='AdaIn1')",
                            "Call"
                        ],
                        [
                            "lrelu(x)",
                            "Call"
                        ],
                        [
                            "upscale(x, scale=2)",
                            "Call"
                        ],
                        [
                            "conv2d(x, o_dim, k=3, s=1, padding='SAME')",
                            "Call"
                        ],
                        [
                            "Adaptive_instance_norm(x, beta=beta, gamma=gamma, scope='AdaIn2')",
                            "Call"
                        ],
                        [
                            "lrelu(x)",
                            "Call"
                        ],
                        [
                            "conv2d(x, o_dim, k=3, s=1, padding='SAME')",
                            "Call"
                        ],
                        [
                            "upscale(x, scale=2)",
                            "Call"
                        ],
                        [
                            "conv2d(x, output_dim=o_dim, k=1, s=1, scope='conv', use_bias=False)",
                            "Call"
                        ],
                        [
                            "conv1(relu(relu_type)(In(x_init, scope='bn1')), padding='SAME', scope='c1')",
                            "Call"
                        ],
                        [
                            "conv1(relu(relu_type)(x_init), padding='SAME', scope='c1')",
                            "Call"
                        ],
                        [
                            "avgpool2d(x, k=2)",
                            "Call"
                        ],
                        [
                            "conv2(relu(relu_type)(In(x, scope='bn2')), padding='SAME', scope='c2')",
                            "Call"
                        ],
                        [
                            "avgpool2d(x, k=2)",
                            "Call"
                        ],
                        [
                            "conv2(relu(relu_type)(x), padding='SAME', scope='c2')",
                            "Call"
                        ],
                        [
                            "conv2d(x, output_dim=o_dim, k=1, s=1, scope='conv', use_bias=False)",
                            "Call"
                        ],
                        [
                            "avgpool2d(x, k=2)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_size)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, k, k, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, k, k, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "avg_pool_178": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Adaptive_instance_norm(x_init, beta=beta, gamma=gamma, scope='AdaIn1')",
                            "Call"
                        ],
                        [
                            "lrelu(x)",
                            "Call"
                        ],
                        [
                            "upscale(x, scale=2)",
                            "Call"
                        ],
                        [
                            "conv2d(x, o_dim, k=3, s=1, padding='SAME')",
                            "Call"
                        ],
                        [
                            "Adaptive_instance_norm(x, beta=beta, gamma=gamma, scope='AdaIn2')",
                            "Call"
                        ],
                        [
                            "lrelu(x)",
                            "Call"
                        ],
                        [
                            "conv2d(x, o_dim, k=3, s=1, padding='SAME')",
                            "Call"
                        ],
                        [
                            "upscale(x, scale=2)",
                            "Call"
                        ],
                        [
                            "conv2d(x, output_dim=o_dim, k=1, s=1, scope='conv', use_bias=False)",
                            "Call"
                        ],
                        [
                            "conv1(relu(relu_type)(In(x_init, scope='bn1')), padding='SAME', scope='c1')",
                            "Call"
                        ],
                        [
                            "conv1(relu(relu_type)(x_init), padding='SAME', scope='c1')",
                            "Call"
                        ],
                        [
                            "avgpool2d(x, k=2)",
                            "Call"
                        ],
                        [
                            "conv2(relu(relu_type)(In(x, scope='bn2')), padding='SAME', scope='c2')",
                            "Call"
                        ],
                        [
                            "avgpool2d(x, k=2)",
                            "Call"
                        ],
                        [
                            "conv2(relu(relu_type)(x), padding='SAME', scope='c2')",
                            "Call"
                        ],
                        [
                            "conv2d(x, output_dim=o_dim, k=1, s=1, scope='conv', use_bias=False)",
                            "Call"
                        ],
                        [
                            "avgpool2d(x, k=2)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_size)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, kernel_size, kernel_size, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, kernel_size, kernel_size, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_201": {
                "values": {
                    "value": "[x, y_reshaped * tf.ones([x_shapes[0], x_shapes[1], x_shapes[2], y_shapes[-1]])]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_max_212": {
                "variable": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.abs(W)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_219": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name + '_u'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "(_W.shape.as_list()[-1], shape[0])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collections": {
                    "value": "collections",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "stop_gradient_231": {
                "variable": {
                    "value": "_u",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "_u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "u",
                            "Name"
                        ],
                        [
                            "tf.nn.l2_normalize(tf.matmul(_v, tf.transpose(_W)), 1)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(_u)",
                            "Call"
                        ]
                    ]
                }
            },
            "stop_gradient_232": {
                "variable": {
                    "value": "_v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "_v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(tf.matmul(_u, _W), 1)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(_v)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_233": {
                "variable": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reduce_sum(_u * tf.transpose(tf.matmul(_W, tf.transpose(_v))), 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "assign_234": {
                "variable": {
                    "value": "update_u_op",
                    "type": "variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name=name + '_u', shape=(_W.shape.as_list()[-1], shape[0]), initializer=tf.random_normal_initializer, collections=collections, trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "_u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "u",
                            "Name"
                        ],
                        [
                            "tf.nn.l2_normalize(tf.matmul(_v, tf.transpose(_W)), 1)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(_u)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_n_244": {
                "inputs": {
                    "value": "tf.get_collection(tf.GraphKeys.REGULARIZATION_LOSSES, scope=scope)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_13": {
                "x": {
                    "value": "tf.reduce_sum(tf.exp(x - m), axis=axis)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_16": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'LeakyReLU'",
                            "MethodArgument"
                        ],
                        [
                            "'sn'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "maximum_17": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Adaptive_instance_norm(x_init, beta=beta, gamma=gamma, scope='AdaIn1')",
                            "Call"
                        ],
                        [
                            "lrelu(x)",
                            "Call"
                        ],
                        [
                            "upscale(x, scale=2)",
                            "Call"
                        ],
                        [
                            "conv2d(x, o_dim, k=3, s=1, padding='SAME')",
                            "Call"
                        ],
                        [
                            "Adaptive_instance_norm(x, beta=beta, gamma=gamma, scope='AdaIn2')",
                            "Call"
                        ],
                        [
                            "lrelu(x)",
                            "Call"
                        ],
                        [
                            "conv2d(x, o_dim, k=3, s=1, padding='SAME')",
                            "Call"
                        ],
                        [
                            "upscale(x, scale=2)",
                            "Call"
                        ],
                        [
                            "conv2d(x, output_dim=o_dim, k=1, s=1, scope='conv', use_bias=False)",
                            "Call"
                        ],
                        [
                            "conv1(relu(relu_type)(In(x_init, scope='bn1')), padding='SAME', scope='c1')",
                            "Call"
                        ],
                        [
                            "conv1(relu(relu_type)(x_init), padding='SAME', scope='c1')",
                            "Call"
                        ],
                        [
                            "avgpool2d(x, k=2)",
                            "Call"
                        ],
                        [
                            "conv2(relu(relu_type)(In(x, scope='bn2')), padding='SAME', scope='c2')",
                            "Call"
                        ],
                        [
                            "avgpool2d(x, k=2)",
                            "Call"
                        ],
                        [
                            "conv2(relu(relu_type)(x), padding='SAME', scope='c2')",
                            "Call"
                        ],
                        [
                            "conv2d(x, output_dim=o_dim, k=1, s=1, scope='conv', use_bias=False)",
                            "Call"
                        ],
                        [
                            "avgpool2d(x, k=2)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_size)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "alpha * x",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_20": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'conv2d'",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'instance_norm'",
                            "MethodArgument"
                        ],
                        [
                            "'adaptive_instance_norm'",
                            "MethodArgument"
                        ],
                        [
                            "'resblock'",
                            "MethodArgument"
                        ],
                        [
                            "'resblock'",
                            "MethodArgument"
                        ],
                        [
                            "'deconv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'scope'",
                            "MethodArgument"
                        ],
                        [
                            "'discriminator'",
                            "MethodArgument"
                        ],
                        [
                            "'discriminator'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "conv2d_26": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "spectral_norm(w)",
                    "type": "Call",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, s, s, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'SAME'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "conv2d_28": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('w', [k, k, input_.get_shape()[-1], output_dim], initializer=tf.contrib.layers.variance_scaling_initializer(), regularizer=l2_regularizer(scale=0.0001))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('w', [k_h, k_w, output_dim[-1], input_.get_shape()[-1]], dtype=tf.float32, initializer=tf.contrib.layers.variance_scaling_initializer())",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, s, s, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'SAME'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_variable_30": {
                "variable": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[output_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_31": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.nn.bias_add(conv, biases)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "tf.shape(conv)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_39": {
                "name_or_scope": {
                    "value": "scope or 'Linear'",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "matmul_45": {
                "variable": {
                    "value": "mul",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "input_",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "spectral_norm(matrix)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_47": {
                "variable": {
                    "value": "mul",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "input_",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('Matrix', [shape[1], output_dim], tf.float32, initializer=tf.contrib.layers.variance_scaling_initializer(), regularizer=l2_regularizer(0.0001))",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_62": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'conv2d'",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'instance_norm'",
                            "MethodArgument"
                        ],
                        [
                            "'adaptive_instance_norm'",
                            "MethodArgument"
                        ],
                        [
                            "'resblock'",
                            "MethodArgument"
                        ],
                        [
                            "'resblock'",
                            "MethodArgument"
                        ],
                        [
                            "'deconv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'scope'",
                            "MethodArgument"
                        ],
                        [
                            "'discriminator'",
                            "MethodArgument"
                        ],
                        [
                            "'discriminator'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_78": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'conv2d'",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'instance_norm'",
                            "MethodArgument"
                        ],
                        [
                            "'adaptive_instance_norm'",
                            "MethodArgument"
                        ],
                        [
                            "'resblock'",
                            "MethodArgument"
                        ],
                        [
                            "'resblock'",
                            "MethodArgument"
                        ],
                        [
                            "'deconv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'scope'",
                            "MethodArgument"
                        ],
                        [
                            "'discriminator'",
                            "MethodArgument"
                        ],
                        [
                            "'discriminator'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_116": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'conv2d'",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'instance_norm'",
                            "MethodArgument"
                        ],
                        [
                            "'adaptive_instance_norm'",
                            "MethodArgument"
                        ],
                        [
                            "'resblock'",
                            "MethodArgument"
                        ],
                        [
                            "'resblock'",
                            "MethodArgument"
                        ],
                        [
                            "'deconv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'scope'",
                            "MethodArgument"
                        ],
                        [
                            "'discriminator'",
                            "MethodArgument"
                        ],
                        [
                            "'discriminator'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_152": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'conv2d'",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'instance_norm'",
                            "MethodArgument"
                        ],
                        [
                            "'adaptive_instance_norm'",
                            "MethodArgument"
                        ],
                        [
                            "'resblock'",
                            "MethodArgument"
                        ],
                        [
                            "'resblock'",
                            "MethodArgument"
                        ],
                        [
                            "'deconv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'scope'",
                            "MethodArgument"
                        ],
                        [
                            "'discriminator'",
                            "MethodArgument"
                        ],
                        [
                            "'discriminator'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "conv2d_transpose_157": {
                "variable": {
                    "value": "deconv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "spectral_norm(w)",
                    "type": "Call",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, d_h, d_w, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_transpose_160": {
                "variable": {
                    "value": "deconv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('w', [k, k, input_.get_shape()[-1], output_dim], initializer=tf.contrib.layers.variance_scaling_initializer(), regularizer=l2_regularizer(scale=0.0001))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('w', [k_h, k_w, output_dim[-1], input_.get_shape()[-1]], dtype=tf.float32, initializer=tf.contrib.layers.variance_scaling_initializer())",
                            "Call"
                        ]
                    ]
                },
                "output_shape": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, d_h, d_w, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_215": {
                "variable": {
                    "value": "_W",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, shape[3])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "l2_normalize_229": {
                "variable": {
                    "value": "_v",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(_u, _W)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "l2_normalize_230": {
                "variable": {
                    "value": "_u",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(_v, tf.transpose(_W))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "identity_236": {
                "variable": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_max(tf.abs(W))",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.reduce_sum(_u * tf.transpose(tf.matmul(_W, tf.transpose(_v))), 1))",
                            "Call"
                        ],
                        [
                            "tf.identity(sigma)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_collection_244": {
                "key": {
                    "value": "tf.GraphKeys.REGULARIZATION_LOSSES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'conv2d'",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'instance_norm'",
                            "MethodArgument"
                        ],
                        [
                            "'adaptive_instance_norm'",
                            "MethodArgument"
                        ],
                        [
                            "'resblock'",
                            "MethodArgument"
                        ],
                        [
                            "'resblock'",
                            "MethodArgument"
                        ],
                        [
                            "'deconv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'scope'",
                            "MethodArgument"
                        ],
                        [
                            "'discriminator'",
                            "MethodArgument"
                        ],
                        [
                            "'discriminator'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reduce_sum_13": {
                "input_tensor": {
                    "value": "tf.exp(x - m)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_87": {
                "name_or_scope": {
                    "value": "res1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_96": {
                "name_or_scope": {
                    "value": "res2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sqrt_106": {
                "x": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "sqrt_146": {
                "x": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "bias_add_164": {
                "value": {
                    "value": "deconv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d_transpose(input_, spectral_norm(w), output_shape=output_dim, strides=[1, d_h, d_w, 1])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(input_, w, output_shape=output_dim, strides=[1, d_h, d_w, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.nn.bias_add(deconv, biases), deconv.get_shape())",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('biases', [output_dim], initializer=tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('biases', [output_dim[-1]], tf.float32, initializer=tf.constant_initializer(0.0))",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_212": {
                "x": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_sum_233": {
                "input_tensor": {
                    "value": "_u * tf.transpose(tf.matmul(_W, tf.transpose(_v)))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "control_dependencies_235": {
                "control_inputs": {
                    "value": "[update_u_op]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "exp_13": {
                "x": {
                    "value": "x - m",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "bias_add_31": {
                "value": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(input_, spectral_norm(w), strides=[1, s, s, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(input_, w, strides=[1, s, s, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.nn.bias_add(conv, biases), tf.shape(conv))",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('biases', [output_dim], initializer=tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('biases', [output_dim[-1]], tf.float32, initializer=tf.constant_initializer(0.0))",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_31": {
                "input": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(input_, spectral_norm(w), strides=[1, s, s, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(input_, w, strides=[1, s, s, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.nn.bias_add(conv, biases), tf.shape(conv))",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_initializer_43": {
                "value": {
                    "value": "bias_start",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "constant_initializer_163": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ones_201": {
                "shape": {
                    "value": "[x_shapes[0], x_shapes[1], x_shapes[2], y_shapes[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_207": {
                "input_tensor": {
                    "value": "v ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_229": {
                "a": {
                    "value": "_u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "u",
                            "Name"
                        ],
                        [
                            "tf.nn.l2_normalize(tf.matmul(_v, tf.transpose(_W)), 1)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(_u)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "_W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(W, (-1, shape[3]))",
                            "Call"
                        ],
                        [
                            "W",
                            "Name"
                        ]
                    ]
                }
            },
            "matmul_230": {
                "a": {
                    "value": "_v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(tf.matmul(_u, _W), 1)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(_v)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.transpose(_W)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_initializer_30": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "transpose_230": {
                "a": {
                    "value": "_W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(W, (-1, shape[3]))",
                            "Call"
                        ],
                        [
                            "W",
                            "Name"
                        ]
                    ]
                }
            },
            "transpose_233": {
                "a": {
                    "value": "_v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(tf.matmul(_u, _W), 1)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(_v)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_233": {
                "a": {
                    "value": "_W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(W, (-1, shape[3]))",
                            "Call"
                        ],
                        [
                            "W",
                            "Name"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.transpose(_v)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    }
}