{
    "exp_FPB.py": {
        "torch": {
            "is_available_99": {
                "variable": {
                    "value": "cfg.use_gpu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_143": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torchreid.models.build_model(name=cfg.model.name, num_classes=datamanager.num_train_pids, loss=cfg.loss.name, pretrained=cfg.model.pretrained, use_gpu=cfg.use_gpu)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model).cuda()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "torchreid/data/datamanager.py": {
        "torch": {
            "DataLoader_155": {
                "variable": {
                    "value": "self.trainloader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "sum(trainset)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "sum(trainset)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "sum(trainset)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "build_train_sampler(trainset.train, train_sampler, batch_size=batch_size_train, num_instances=num_instances)",
                            "Call"
                        ],
                        [
                            "build_train_sampler(trainset.train, train_sampler, batch_size=batch_size_train, num_instances=num_instances)",
                            "Call"
                        ],
                        [
                            "''",
                            "MethodArgument"
                        ],
                        [
                            "''",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size_train",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "workers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "self.use_gpu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_272": {
                "variable": {
                    "value": "self.trainloader1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "sum(trainset)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "sum(trainset)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "sum(trainset)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "build_train_sampler(trainset.train, train_sampler_1, batch_size=batch_size_train, num_instances=num_instances)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size_train",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "workers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "self.use_gpu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_289": {
                "variable": {
                    "value": "self.trainloader2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "sum(trainset)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "sum(trainset)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "sum(trainset)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "build_train_sampler(trainset.train, train_sampler_2, batch_size=batch_size_train, num_instances=num_instances)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size_train",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "workers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "self.use_gpu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_451": {
                "variable": {
                    "value": "self.trainloader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "sum(trainset)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "sum(trainset)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "sum(trainset)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "build_train_sampler(trainset.train, train_sampler, batch_size=batch_size_train, num_instances=num_instances)",
                            "Call"
                        ],
                        [
                            "build_train_sampler(trainset.train, train_sampler, batch_size=batch_size_train, num_instances=num_instances)",
                            "Call"
                        ],
                        [
                            "''",
                            "MethodArgument"
                        ],
                        [
                            "''",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size_train",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "workers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "self.use_gpu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_182": {
                "variable": {
                    "value": "self.testloader[name][query]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dataset": {
                    "value": "queryset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "init_image_dataset(name, transform=self.transform_te, mode='query', combineall=combineall, root=root, split_id=split_id, cuhk03_labeled=cuhk03_labeled, cuhk03_classic_split=cuhk03_classic_split, market1501_500k=market1501_500k)",
                            "Call"
                        ],
                        [
                            "init_image_dataset(name, transform=self.transform_te, mode='query', combineall=combineall, root=root, split_id=split_id, cuhk03_labeled=cuhk03_labeled, cuhk03_classic_split=cuhk03_classic_split, market1501_500k=market1501_500k)",
                            "Call"
                        ],
                        [
                            "init_video_dataset(name, transform=self.transform_te, mode='query', combineall=combineall, root=root, split_id=split_id, seq_len=seq_len, sample_method=sample_method)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size_test",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "workers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "self.use_gpu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_204": {
                "variable": {
                    "value": "self.testloader[name][gallery]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dataset": {
                    "value": "galleryset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "init_image_dataset(name, transform=self.transform_te, mode='gallery', combineall=combineall, verbose=False, root=root, split_id=split_id, cuhk03_labeled=cuhk03_labeled, cuhk03_classic_split=cuhk03_classic_split, market1501_500k=market1501_500k)",
                            "Call"
                        ],
                        [
                            "init_image_dataset(name, transform=self.transform_te, mode='gallery', combineall=combineall, verbose=False, root=root, split_id=split_id, cuhk03_labeled=cuhk03_labeled, cuhk03_classic_split=cuhk03_classic_split, market1501_500k=market1501_500k)",
                            "Call"
                        ],
                        [
                            "init_video_dataset(name, transform=self.transform_te, mode='gallery', combineall=combineall, verbose=False, root=root, split_id=split_id, seq_len=seq_len, sample_method=sample_method)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size_test",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "workers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "self.use_gpu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_316": {
                "variable": {
                    "value": "self.testloader[name][query]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dataset": {
                    "value": "queryset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "init_image_dataset(name, transform=self.transform_te, mode='query', combineall=combineall, root=root, split_id=split_id, cuhk03_labeled=cuhk03_labeled, cuhk03_classic_split=cuhk03_classic_split, market1501_500k=market1501_500k)",
                            "Call"
                        ],
                        [
                            "init_image_dataset(name, transform=self.transform_te, mode='query', combineall=combineall, root=root, split_id=split_id, cuhk03_labeled=cuhk03_labeled, cuhk03_classic_split=cuhk03_classic_split, market1501_500k=market1501_500k)",
                            "Call"
                        ],
                        [
                            "init_video_dataset(name, transform=self.transform_te, mode='query', combineall=combineall, root=root, split_id=split_id, seq_len=seq_len, sample_method=sample_method)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size_test",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "workers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "self.use_gpu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_338": {
                "variable": {
                    "value": "self.testloader[name][gallery]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dataset": {
                    "value": "galleryset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "init_image_dataset(name, transform=self.transform_te, mode='gallery', combineall=combineall, verbose=False, root=root, split_id=split_id, cuhk03_labeled=cuhk03_labeled, cuhk03_classic_split=cuhk03_classic_split, market1501_500k=market1501_500k)",
                            "Call"
                        ],
                        [
                            "init_image_dataset(name, transform=self.transform_te, mode='gallery', combineall=combineall, verbose=False, root=root, split_id=split_id, cuhk03_labeled=cuhk03_labeled, cuhk03_classic_split=cuhk03_classic_split, market1501_500k=market1501_500k)",
                            "Call"
                        ],
                        [
                            "init_video_dataset(name, transform=self.transform_te, mode='gallery', combineall=combineall, verbose=False, root=root, split_id=split_id, seq_len=seq_len, sample_method=sample_method)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size_test",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "workers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "self.use_gpu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_477": {
                "variable": {
                    "value": "self.testloader[name][query]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dataset": {
                    "value": "queryset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "init_image_dataset(name, transform=self.transform_te, mode='query', combineall=combineall, root=root, split_id=split_id, cuhk03_labeled=cuhk03_labeled, cuhk03_classic_split=cuhk03_classic_split, market1501_500k=market1501_500k)",
                            "Call"
                        ],
                        [
                            "init_image_dataset(name, transform=self.transform_te, mode='query', combineall=combineall, root=root, split_id=split_id, cuhk03_labeled=cuhk03_labeled, cuhk03_classic_split=cuhk03_classic_split, market1501_500k=market1501_500k)",
                            "Call"
                        ],
                        [
                            "init_video_dataset(name, transform=self.transform_te, mode='query', combineall=combineall, root=root, split_id=split_id, seq_len=seq_len, sample_method=sample_method)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size_test",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "workers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "self.use_gpu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_498": {
                "variable": {
                    "value": "self.testloader[name][gallery]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dataset": {
                    "value": "galleryset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "init_image_dataset(name, transform=self.transform_te, mode='gallery', combineall=combineall, verbose=False, root=root, split_id=split_id, cuhk03_labeled=cuhk03_labeled, cuhk03_classic_split=cuhk03_classic_split, market1501_500k=market1501_500k)",
                            "Call"
                        ],
                        [
                            "init_image_dataset(name, transform=self.transform_te, mode='gallery', combineall=combineall, verbose=False, root=root, split_id=split_id, cuhk03_labeled=cuhk03_labeled, cuhk03_classic_split=cuhk03_classic_split, market1501_500k=market1501_500k)",
                            "Call"
                        ],
                        [
                            "init_video_dataset(name, transform=self.transform_te, mode='gallery', combineall=combineall, verbose=False, root=root, split_id=split_id, seq_len=seq_len, sample_method=sample_method)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size_test",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "workers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "self.use_gpu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "is_available_52": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "torchreid/data/datasets/dataset.py": {
        "torch": {
            "cat_326": {
                "variable": {
                    "value": "imgs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "imgs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(imgs, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "torchreid/data/sampler.py": {
        "torch": {
            "RandomSampler_178": {
                "variable": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "data_source",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "torchreid/data/transforms.py": {
        "torch": {
            "Tensor_116": {
                "variable": {
                    "value": "self.eig_vec",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tensor_121": {
                "variable": {
                    "value": "self.eig_val",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mm_130": {
                "variable": {
                    "value": "quatity",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.eig_val * alpha",
                    "type": "BinOp",
                    "possible_values": []
                },
                "mat2": {
                    "value": "self.eig_vec",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "normal_129": {
                "mean": {
                    "value": "torch.zeros_like(self.eig_val)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_129": {
                "input": {
                    "value": "self.eig_val",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "torchreid/engine/engine.py": {
        "torch": {
            "cat_285": {
                "variable": {
                    "value": "qf",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "qf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat(qf, 0)",
                            "Call"
                        ],
                        [
                            "F.normalize(qf, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat(qf, 0)",
                            "Call"
                        ],
                        [
                            "F.normalize(qf, p=2, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_305": {
                "variable": {
                    "value": "gf",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "gf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat(gf, 0)",
                            "Call"
                        ],
                        [
                            "F.normalize(gf, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat(gf, 0)",
                            "Call"
                        ],
                        [
                            "F.normalize(gf, p=2, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_258": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_377": {
                "variable": {
                    "value": "qf",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "qf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat(qf, 0)",
                            "Call"
                        ],
                        [
                            "F.normalize(qf, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat(qf, 0)",
                            "Call"
                        ],
                        [
                            "F.normalize(qf, p=2, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_396": {
                "variable": {
                    "value": "gf",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "gf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat(gf, 0)",
                            "Call"
                        ],
                        [
                            "F.normalize(gf, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat(gf, 0)",
                            "Call"
                        ],
                        [
                            "F.normalize(gf, p=2, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_348": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_450": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SummaryWriter_129": {
                "variable": {
                    "value": "self.writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "save_dir",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'log'",
                            "MethodArgument"
                        ],
                        [
                            "''",
                            "MethodArgument"
                        ],
                        [
                            "''",
                            "MethodArgument"
                        ],
                        [
                            "''",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "normalize_314": {
                "variable": {
                    "value": "qf",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "qf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat(qf, 0)",
                            "Call"
                        ],
                        [
                            "F.normalize(qf, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat(qf, 0)",
                            "Call"
                        ],
                        [
                            "F.normalize(qf, p=2, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_315": {
                "variable": {
                    "value": "gf",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat(gf, 0)",
                            "Call"
                        ],
                        [
                            "F.normalize(gf, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat(gf, 0)",
                            "Call"
                        ],
                        [
                            "F.normalize(gf, p=2, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_405": {
                "variable": {
                    "value": "qf",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "qf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat(qf, 0)",
                            "Call"
                        ],
                        [
                            "F.normalize(qf, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat(qf, 0)",
                            "Call"
                        ],
                        [
                            "F.normalize(qf, p=2, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_406": {
                "variable": {
                    "value": "gf",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat(gf, 0)",
                            "Call"
                        ],
                        [
                            "F.normalize(gf, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat(gf, 0)",
                            "Call"
                        ],
                        [
                            "F.normalize(gf, p=2, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_49": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "normalize_496": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.model(imgs, return_featuremaps=True)",
                            "Call"
                        ],
                        [
                            "(outputs ** 2).sum(1)",
                            "Call"
                        ],
                        [
                            "outputs.view(b, h * w)",
                            "Call"
                        ],
                        [
                            "F.normalize(outputs, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "outputs.view(b, h, w)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "torchreid/engine/engine_vis.py": {
        "torch": {
            "cat_285": {
                "variable": {
                    "value": "qf",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "qf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat(qf, 0)",
                            "Call"
                        ],
                        [
                            "F.normalize(qf, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat(qf, 0)",
                            "Call"
                        ],
                        [
                            "F.normalize(qf, p=2, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_305": {
                "variable": {
                    "value": "gf",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "gf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat(gf, 0)",
                            "Call"
                        ],
                        [
                            "F.normalize(gf, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat(gf, 0)",
                            "Call"
                        ],
                        [
                            "F.normalize(gf, p=2, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_258": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_377": {
                "variable": {
                    "value": "qf",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "qf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat(qf, 0)",
                            "Call"
                        ],
                        [
                            "F.normalize(qf, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat(qf, 0)",
                            "Call"
                        ],
                        [
                            "F.normalize(qf, p=2, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_396": {
                "variable": {
                    "value": "gf",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "gf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat(gf, 0)",
                            "Call"
                        ],
                        [
                            "F.normalize(gf, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat(gf, 0)",
                            "Call"
                        ],
                        [
                            "F.normalize(gf, p=2, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_348": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_450": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SummaryWriter_129": {
                "variable": {
                    "value": "self.writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "save_dir",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'log'",
                            "MethodArgument"
                        ],
                        [
                            "''",
                            "MethodArgument"
                        ],
                        [
                            "''",
                            "MethodArgument"
                        ],
                        [
                            "''",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "normalize_314": {
                "variable": {
                    "value": "qf",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "qf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat(qf, 0)",
                            "Call"
                        ],
                        [
                            "F.normalize(qf, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat(qf, 0)",
                            "Call"
                        ],
                        [
                            "F.normalize(qf, p=2, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_315": {
                "variable": {
                    "value": "gf",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat(gf, 0)",
                            "Call"
                        ],
                        [
                            "F.normalize(gf, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat(gf, 0)",
                            "Call"
                        ],
                        [
                            "F.normalize(gf, p=2, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_405": {
                "variable": {
                    "value": "qf",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "qf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat(qf, 0)",
                            "Call"
                        ],
                        [
                            "F.normalize(qf, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat(qf, 0)",
                            "Call"
                        ],
                        [
                            "F.normalize(qf, p=2, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_406": {
                "variable": {
                    "value": "gf",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat(gf, 0)",
                            "Call"
                        ],
                        [
                            "F.normalize(gf, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat(gf, 0)",
                            "Call"
                        ],
                        [
                            "F.normalize(gf, p=2, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_49": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "normalize_497": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.model(imgs)",
                            "Call"
                        ],
                        [
                            "(outputs ** 2).sum(1)",
                            "Call"
                        ],
                        [
                            "outputs.view(b, h * w)",
                            "Call"
                        ],
                        [
                            "F.normalize(outputs, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "outputs.view(b, h, w)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "torchreid/engine/image/engine_FPB.py": {
        "torch": {}
    },
    "torchreid/engine/image/softmax.py": {
        "torch": {}
    },
    "torchreid/engine/image/triplet.py": {
        "torch": {}
    },
    "torchreid/engine/video/softmax.py": {
        "torch": {
            "mean_100": {
                "variable": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.model(input)",
                            "Call"
                        ],
                        [
                            "features.view(b, s, -1)",
                            "Call"
                        ],
                        [
                            "torch.mean(features, 1)",
                            "Call"
                        ],
                        [
                            "torch.max(features, 1)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_102": {
                "input": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.model(input)",
                            "Call"
                        ],
                        [
                            "features.view(b, s, -1)",
                            "Call"
                        ],
                        [
                            "torch.mean(features, 1)",
                            "Call"
                        ],
                        [
                            "torch.max(features, 1)[0]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "torchreid/engine/video/triplet.py": {
        "torch": {}
    },
    "torchreid/losses/center_loss.py": {
        "torch": {
            "arange_43": {
                "variable": {
                    "value": "classes",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_53": {
                "variable": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(dist)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_28": {
                "variable": {
                    "value": "self.centers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(self.num_classes, self.feat_dim).cuda()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_30": {
                "variable": {
                    "value": "self.centers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(self.num_classes, self.feat_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pow_39": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_39": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pow_40": {
                "input": {
                    "value": "self.centers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_40": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "t_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_28": {
                "*size": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.feat_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_30": {
                "*size": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.feat_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "torchreid/losses/cross_entropy_loss.py": {
        "torch": {
            "LogSoftmax_36": {
                "variable": {
                    "value": "self.logsoftmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_47": {
                "variable": {
                    "value": "targets",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "log_probs.size()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "torchreid/losses/hard_mine_triplet_loss.py": {
        "torch": {
            "pow_37": {
                "variable": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_37": {
                "variable": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_48": {
                "variable": {
                    "value": "dist_ap",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "dist_ap",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat(dist_ap)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_49": {
                "variable": {
                    "value": "dist_an",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "dist_an",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat(dist_an)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_52": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dist_an",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat(dist_an)",
                            "Call"
                        ]
                    ]
                }
            },
            "SoftMarginLoss_24": {
                "variable": {
                    "value": "self.ranking_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MarginRankingLoss_26": {
                "variable": {
                    "value": "self.ranking_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "margin": {
                    "value": "margin",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.3",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "torchreid/losses/ranked_loss.py": {
        "torch": {
            "pow_23": {
                "variable": {
                    "value": "xx",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1.0 * x / (torch.norm(x, 2, axis, keepdim=True).expand_as(x) + 1e-12)",
                            "BinOp"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_23": {
                "variable": {
                    "value": "xx",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pow_24": {
                "variable": {
                    "value": "yy",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_24": {
                "variable": {
                    "value": "yy",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "t_24": {
                "variable": {
                    "value": "yy",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clamp_50": {
                "variable": {
                    "value": "ap_is_pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.add(dist_ap, margin - alpha)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "sum_52": {
                "variable": {
                    "value": "ap_pos_val_sum",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ap_is_pos",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.clamp(torch.add(dist_ap, margin - alpha), min=0.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "div_53": {
                "variable": {
                    "value": "loss_ap",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ap_pos_val_sum",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sum(ap_is_pos)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "float(ap_pos_num)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "lt_55": {
                "variable": {
                    "value": "an_is_pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dist_an",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dist_mat[ind][is_neg]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "exp_57": {
                "variable": {
                    "value": "an_weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tval * (-1 * an_less_alpha + alpha)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_60": {
                "variable": {
                    "value": "an_ln_sum",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mul(an_dist_lm, an_weight)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "div_61": {
                "variable": {
                    "value": "loss_an",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "an_ln_sum",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sum(torch.mul(an_dist_lm, an_weight))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "an_weight_sum",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sum(an_weight) + 1e-05",
                            "BinOp"
                        ]
                    ]
                }
            },
            "norm_11": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1.0 * x / (torch.norm(x, 2, axis, keepdim=True).expand_as(x) + 1e-12)",
                            "BinOp"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "axis",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "add_50": {
                "input": {
                    "value": "dist_ap",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dist_mat[ind][is_pos]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "margin - alpha",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_58": {
                "input": {
                    "value": "an_weight",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.exp(tval * (-1 * an_less_alpha + alpha))",
                            "Call"
                        ]
                    ]
                }
            },
            "mul_60": {
                "input": {
                    "value": "an_dist_lm",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "alpha - an_less_alpha",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "an_weight",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.exp(tval * (-1 * an_less_alpha + alpha))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "torchreid/metrics/distance.py": {
        "torch": {
            "normalize_77": {
                "variable": {
                    "value": "input1_normed",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input1",
                    "type": "Variable",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_78": {
                "variable": {
                    "value": "input2_normed",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input2",
                    "type": "Variable",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_61": {
                "input": {
                    "value": "input1",
                    "type": "Variable",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_61": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pow_62": {
                "input": {
                    "value": "input2",
                    "type": "Variable",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_62": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "t_62": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mm_79": {
                "input": {
                    "value": "input1_normed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.normalize(input1, p=2, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "input2_normed.t()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "torchreid/models/__init__.py": {
        "torch": {}
    },
    "torchreid/models/fpb.py": {
        "torch": {
            "ModuleList_21": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_22": {
                "variable": {
                    "value": "self.downsamples",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_69": {
                "variable": {
                    "value": "self.lateral_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_77": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_108": {
                "variable": {
                    "value": "self.layer0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "resnet_.conv1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_116": {
                "variable": {
                    "value": "layer4",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "Bottleneck(1024, 512, downsample=nn.Sequential(nn.Conv2d(1024, 2048, 1, bias=False), nn.BatchNorm2d(2048)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_127": {
                "variable": {
                    "value": "self.global_avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_128": {
                "variable": {
                    "value": "self.bn_l4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_129": {
                "variable": {
                    "value": "self.classifier_l4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_134": {
                "variable": {
                    "value": "self.part_pools",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(self.num_parts, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ModuleList_136": {
                "variable": {
                    "value": "self.classifiers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(256, num_classes) for _ in range(self.num_parts)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "max_pool2d_170": {
                "variable": {
                    "value": "x[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "x[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_172": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_28": {
                "variable": {
                    "value": "downsample",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.num_channels, self.num_channels, 1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_195": {
                "variable": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(f, 1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(f, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_220": {
                "variable": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(f, 1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(f, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_28": {
                "in_channels": {
                    "value": "self.num_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_28": {
                "num_features": {
                    "value": "self.num_channels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_28": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_54": {
                "input": {
                    "value": "y[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Linear_136": {
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "normalize_192": {
                "input": {
                    "value": "f_l4",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.bn_l4(f_l4_train).view(bs, -1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_193": {
                "input": {
                    "value": "f_parts",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.part_pools(f_branch)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool2d_56": {
                "input": {
                    "value": "y[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_119": {
                "*args": {
                    "value": "nn.Conv2d(1024, 2048, 1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "normalize_217": {
                "input": {
                    "value": "f_l4_train",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.global_avgpool(fs[0])",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_218": {
                "input": {
                    "value": "f_parts",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.part_pools(f_branch)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_120": {
                "in_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_121": {
                "num_features": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "torchreid/models/nn_utils.py": {
        "torch": {
            "Sequential_79": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "BatchNorm2d_92": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_c",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_123": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "B",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "N",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "bmm_128": {
                "variable": {
                    "value": "numerator",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.bmm(A, x).view(B, 1, N)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.randn(B, N, 1, device='cuda')",
                            "Call"
                        ],
                        [
                            "torch.bmm(A, x)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_128": {
                "variable": {
                    "value": "numerator",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "bmm_137": {
                "variable": {
                    "value": "AAT",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "A",
                    "type": "Variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "A.permute(0, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eye_141": {
                "variable": {
                    "value": "I",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "N",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2d_89": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_c",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_c",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_91": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_c",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_c",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "relu_109": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(y)",
                            "Call"
                        ],
                        [
                            "F.relu(y)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_126": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "A",
                    "type": "Variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.randn(B, N, 1, device='cuda')",
                            "Call"
                        ],
                        [
                            "torch.bmm(A, x)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_69": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_75": {
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_77": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "bmm_129": {
                "input": {
                    "value": "A",
                    "type": "Variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.randn(B, N, 1, device='cuda')",
                            "Call"
                        ],
                        [
                            "torch.bmm(A, x)",
                            "Call"
                        ]
                    ]
                }
            },
            "norm_132": {
                "input": {
                    "value": "x.view(B, N)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "torchreid/models/pc.py": {
        "torch": {
            "AdaptiveAvgPool2d_25": {
                "variable": {
                    "value": "self.gap",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_76": {
                "variable": {
                    "value": "self.fc_q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "in_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_77": {
                "variable": {
                    "value": "self.fc_k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "in_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_78": {
                "variable": {
                    "value": "self.fc_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "in_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sqrt_79": {
                "variable": {
                    "value": "self.scale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.FloatTensor([self.head_dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_81": {
                "variable": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm2d_82": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "softmax_116": {
                "variable": {
                    "value": "attention",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "energy",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.matmul(Q, K.permute(0, 1, 3, 2)) / self.scale.to(x.device)",
                            "BinOp"
                        ],
                        [
                            "torch.bmm(proj_query, proj_key)",
                            "Call"
                        ],
                        [
                            "torch.bmm(proj_query, proj_key)",
                            "Call"
                        ],
                        [
                            "torch.bmm(proj_query, proj_key)",
                            "Call"
                        ],
                        [
                            "torch.bmm(proj_query, proj_key)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Conv2d_154": {
                "variable": {
                    "value": "self.query_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.channel_in_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.channel_in_y // self.num_heads",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_155": {
                "variable": {
                    "value": "self.key_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.channel_in_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.channel_in_y // self.num_heads",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_156": {
                "variable": {
                    "value": "self.value_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.channel_in_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.channel_in_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_158": {
                "variable": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Softmax_160": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "BatchNorm2d_161": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.channel_in_x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bmm_195": {
                "variable": {
                    "value": "energy",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "proj_query",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.query_conv(y).view(m_batchsize, -1, size_y).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "self.query_conv(x_proj).view(m_batchsize, -1, C)",
                            "Call"
                        ],
                        [
                            "self.query_conv(x).view(m_batchsize, -1, width * height).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "y.view(m_batchsize, C_y, -1)",
                            "Call"
                        ],
                        [
                            "x.view(m_batchsize, C, -1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "proj_key",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.key_conv(y).view(m_batchsize, -1, size_y)",
                            "Call"
                        ],
                        [
                            "self.key_conv(x_proj).view(m_batchsize, -1, C).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "self.key_conv(x).view(m_batchsize, -1, width * height)",
                            "Call"
                        ],
                        [
                            "y.view(m_batchsize, C_y, -1).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "x.view(m_batchsize, C, -1).permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "interpolate_197": {
                "variable": {
                    "value": "attention",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.softmax(energy, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.softmax(energy).view(m_batchsize, 1, size_y, size_y)",
                            "Call"
                        ],
                        [
                            "F.interpolate(attention, scale_factor=scale_factor, mode='nearest').view(m_batchsize, size_x, size_x)",
                            "Call"
                        ],
                        [
                            "attention.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "self.softmax(energy)",
                            "Call"
                        ],
                        [
                            "self.softmax(energy_new).view(m_batchsize, 1, C_y, C_y)",
                            "Call"
                        ],
                        [
                            "F.interpolate(attention, scale_factor=scale_factor, mode='nearest').view(m_batchsize, C_x, C_x)",
                            "Call"
                        ],
                        [
                            "self.softmax(energy_new)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "scale_factor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "size_x / size_y",
                            "BinOp"
                        ],
                        [
                            "C_x / C_y",
                            "BinOp"
                        ]
                    ]
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2d_255": {
                "variable": {
                    "value": "self.value_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_258": {
                "variable": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Softmax_261": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "BatchNorm2d_262": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "bmm_311": {
                "variable": {
                    "value": "energy",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "proj_query",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.query_conv(y).view(m_batchsize, -1, size_y).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "self.query_conv(x_proj).view(m_batchsize, -1, C)",
                            "Call"
                        ],
                        [
                            "self.query_conv(x).view(m_batchsize, -1, width * height).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "y.view(m_batchsize, C_y, -1)",
                            "Call"
                        ],
                        [
                            "x.view(m_batchsize, C, -1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "proj_key",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.key_conv(y).view(m_batchsize, -1, size_y)",
                            "Call"
                        ],
                        [
                            "self.key_conv(x_proj).view(m_batchsize, -1, C).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "self.key_conv(x).view(m_batchsize, -1, width * height)",
                            "Call"
                        ],
                        [
                            "y.view(m_batchsize, C_y, -1).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "x.view(m_batchsize, C, -1).permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_369": {
                "variable": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Softmax_371": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "BatchNorm2d_372": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_dim_x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "bmm_387": {
                "variable": {
                    "value": "energy",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "proj_query",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.query_conv(y).view(m_batchsize, -1, size_y).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "self.query_conv(x_proj).view(m_batchsize, -1, C)",
                            "Call"
                        ],
                        [
                            "self.query_conv(x).view(m_batchsize, -1, width * height).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "y.view(m_batchsize, C_y, -1)",
                            "Call"
                        ],
                        [
                            "x.view(m_batchsize, C, -1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "proj_key",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.key_conv(y).view(m_batchsize, -1, size_y)",
                            "Call"
                        ],
                        [
                            "self.key_conv(x_proj).view(m_batchsize, -1, C).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "self.key_conv(x).view(m_batchsize, -1, width * height)",
                            "Call"
                        ],
                        [
                            "y.view(m_batchsize, C_y, -1).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "x.view(m_batchsize, C, -1).permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "interpolate_391": {
                "variable": {
                    "value": "attention",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.softmax(energy, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.softmax(energy).view(m_batchsize, 1, size_y, size_y)",
                            "Call"
                        ],
                        [
                            "F.interpolate(attention, scale_factor=scale_factor, mode='nearest').view(m_batchsize, size_x, size_x)",
                            "Call"
                        ],
                        [
                            "attention.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "self.softmax(energy)",
                            "Call"
                        ],
                        [
                            "self.softmax(energy_new).view(m_batchsize, 1, C_y, C_y)",
                            "Call"
                        ],
                        [
                            "F.interpolate(attention, scale_factor=scale_factor, mode='nearest').view(m_batchsize, C_x, C_x)",
                            "Call"
                        ],
                        [
                            "self.softmax(energy_new)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "scale_factor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "size_x / size_y",
                            "BinOp"
                        ],
                        [
                            "C_x / C_y",
                            "BinOp"
                        ]
                    ]
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "bmm_393": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.softmax(energy, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.softmax(energy).view(m_batchsize, 1, size_y, size_y)",
                            "Call"
                        ],
                        [
                            "F.interpolate(attention, scale_factor=scale_factor, mode='nearest').view(m_batchsize, size_x, size_x)",
                            "Call"
                        ],
                        [
                            "attention.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "self.softmax(energy)",
                            "Call"
                        ],
                        [
                            "self.softmax(energy_new).view(m_batchsize, 1, C_y, C_y)",
                            "Call"
                        ],
                        [
                            "F.interpolate(attention, scale_factor=scale_factor, mode='nearest').view(m_batchsize, C_x, C_x)",
                            "Call"
                        ],
                        [
                            "self.softmax(energy_new)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "proj_value",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.value_conv(x)",
                            "Call"
                        ],
                        [
                            "self.value_conv(x)",
                            "Call"
                        ],
                        [
                            "x.view(m_batchsize, C_x, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_422": {
                "variable": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Softmax_425": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "BatchNorm2d_426": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "bmm_443": {
                "variable": {
                    "value": "energy",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "proj_query",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.query_conv(y).view(m_batchsize, -1, size_y).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "self.query_conv(x_proj).view(m_batchsize, -1, C)",
                            "Call"
                        ],
                        [
                            "self.query_conv(x).view(m_batchsize, -1, width * height).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "y.view(m_batchsize, C_y, -1)",
                            "Call"
                        ],
                        [
                            "x.view(m_batchsize, C, -1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "proj_key",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.key_conv(y).view(m_batchsize, -1, size_y)",
                            "Call"
                        ],
                        [
                            "self.key_conv(x_proj).view(m_batchsize, -1, C).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "self.key_conv(x).view(m_batchsize, -1, width * height)",
                            "Call"
                        ],
                        [
                            "y.view(m_batchsize, C_y, -1).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "x.view(m_batchsize, C, -1).permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_448": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.softmax(energy, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.softmax(energy).view(m_batchsize, 1, size_y, size_y)",
                            "Call"
                        ],
                        [
                            "F.interpolate(attention, scale_factor=scale_factor, mode='nearest').view(m_batchsize, size_x, size_x)",
                            "Call"
                        ],
                        [
                            "attention.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "self.softmax(energy)",
                            "Call"
                        ],
                        [
                            "self.softmax(energy_new).view(m_batchsize, 1, C_y, C_y)",
                            "Call"
                        ],
                        [
                            "F.interpolate(attention, scale_factor=scale_factor, mode='nearest').view(m_batchsize, C_x, C_x)",
                            "Call"
                        ],
                        [
                            "self.softmax(energy_new)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "proj_query",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.query_conv(y).view(m_batchsize, -1, size_y).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "self.query_conv(x_proj).view(m_batchsize, -1, C)",
                            "Call"
                        ],
                        [
                            "self.query_conv(x).view(m_batchsize, -1, width * height).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "y.view(m_batchsize, C_y, -1)",
                            "Call"
                        ],
                        [
                            "x.view(m_batchsize, C, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Dropout_85": {
                "variable": {
                    "value": "self.dropout_attention",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dropout_86": {
                "variable": {
                    "value": "self.dropout_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "matmul_118": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.dropout_attention(attention)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "V",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.fc_v(input)",
                            "Call"
                        ],
                        [
                            "V.view(m_batchsize, -1, self.n_heads, self.head_dim).permute(0, 2, 1, 3)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_120": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.softmax(energy, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.softmax(energy).view(m_batchsize, 1, size_y, size_y)",
                            "Call"
                        ],
                        [
                            "F.interpolate(attention, scale_factor=scale_factor, mode='nearest').view(m_batchsize, size_x, size_x)",
                            "Call"
                        ],
                        [
                            "attention.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "self.softmax(energy)",
                            "Call"
                        ],
                        [
                            "self.softmax(energy_new).view(m_batchsize, 1, C_y, C_y)",
                            "Call"
                        ],
                        [
                            "F.interpolate(attention, scale_factor=scale_factor, mode='nearest').view(m_batchsize, C_x, C_x)",
                            "Call"
                        ],
                        [
                            "self.softmax(energy_new)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "V",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.fc_v(input)",
                            "Call"
                        ],
                        [
                            "V.view(m_batchsize, -1, self.n_heads, self.head_dim).permute(0, 2, 1, 3)",
                            "Call"
                        ]
                    ]
                }
            },
            "Dropout_164": {
                "variable": {
                    "value": "self.dropout_attention",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dropout_165": {
                "variable": {
                    "value": "self.dropout_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "bmm_203": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_view",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "proj_value.view(m_batchsize, -1, size_x)",
                            "Call"
                        ],
                        [
                            "proj_value.view(m_batchsize, -1, width * height)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self.dropout_attention(attention)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_205": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_view",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "proj_value.view(m_batchsize, -1, size_x)",
                            "Call"
                        ],
                        [
                            "proj_value.view(m_batchsize, -1, width * height)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "attention",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.softmax(energy, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.softmax(energy).view(m_batchsize, 1, size_y, size_y)",
                            "Call"
                        ],
                        [
                            "F.interpolate(attention, scale_factor=scale_factor, mode='nearest').view(m_batchsize, size_x, size_x)",
                            "Call"
                        ],
                        [
                            "attention.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "self.softmax(energy)",
                            "Call"
                        ],
                        [
                            "self.softmax(energy_new).view(m_batchsize, 1, C_y, C_y)",
                            "Call"
                        ],
                        [
                            "F.interpolate(attention, scale_factor=scale_factor, mode='nearest').view(m_batchsize, C_x, C_x)",
                            "Call"
                        ],
                        [
                            "self.softmax(energy_new)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv1d_248": {
                "variable": {
                    "value": "self.query_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "int(self.k / 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv1d_249": {
                "variable": {
                    "value": "self.key_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "int(self.k / 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_252": {
                "variable": {
                    "value": "self.query_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_dim // 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_253": {
                "variable": {
                    "value": "self.key_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_dim // 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_266": {
                "variable": {
                    "value": "self.dropout_attention",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dropout_267": {
                "variable": {
                    "value": "self.dropout_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "bmm_326": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_view",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "proj_value.view(m_batchsize, -1, size_x)",
                            "Call"
                        ],
                        [
                            "proj_value.view(m_batchsize, -1, width * height)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self.dropout_attention(attention.permute(0, 2, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_329": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_view",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "proj_value.view(m_batchsize, -1, size_x)",
                            "Call"
                        ],
                        [
                            "proj_value.view(m_batchsize, -1, width * height)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "attention.permute(0, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_81": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_114": {
                "input": {
                    "value": "Q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.fc_q(input)",
                            "Call"
                        ],
                        [
                            "Q.view(m_batchsize, -1, self.n_heads, self.head_dim).permute(0, 2, 1, 3)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "K.permute(0, 1, 3, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_158": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_258": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_369": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_422": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_388": {
                "input": {
                    "value": "energy",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.matmul(Q, K.permute(0, 1, 3, 2)) / self.scale.to(x.device)",
                            "BinOp"
                        ],
                        [
                            "torch.bmm(proj_query, proj_key)",
                            "Call"
                        ],
                        [
                            "torch.bmm(proj_query, proj_key)",
                            "Call"
                        ],
                        [
                            "torch.bmm(proj_query, proj_key)",
                            "Call"
                        ],
                        [
                            "torch.bmm(proj_query, proj_key)",
                            "Call"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_444": {
                "input": {
                    "value": "energy",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.matmul(Q, K.permute(0, 1, 3, 2)) / self.scale.to(x.device)",
                            "BinOp"
                        ],
                        [
                            "torch.bmm(proj_query, proj_key)",
                            "Call"
                        ],
                        [
                            "torch.bmm(proj_query, proj_key)",
                            "Call"
                        ],
                        [
                            "torch.bmm(proj_query, proj_key)",
                            "Call"
                        ],
                        [
                            "torch.bmm(proj_query, proj_key)",
                            "Call"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "torchreid/optim/lr_scheduler.py": {
        "torch": {
            "StepLR_46": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "step_size": {
                    "value": "stepsize",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "stepsize[-1]",
                            "Subscript"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "gamma": {
                    "value": "gamma",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "MultiStepLR_57": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "milestones": {
                    "value": "stepsize",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "stepsize[-1]",
                            "Subscript"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "gamma": {
                    "value": "gamma",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "CosineAnnealingLR_62": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "T_max": {
                    "value": "float(max_epoch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MultiStepLR_67": {
                "variable": {
                    "value": "scheduler_multistep",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "milestones": {
                    "value": "stepsize",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "stepsize[-1]",
                            "Subscript"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "gamma": {
                    "value": "gamma",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "torchreid/optim/optimizer.py": {
        "torch": {
            "Adam_103": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "param_groups",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model.parameters()",
                            "Call"
                        ],
                        [
                            "[{'params': base_params, 'lr': lr * base_lr_mult}, {'params': new_params}]",
                            "List"
                        ]
                    ]
                },
                "lr": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0003",
                            "MethodArgument"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "weight_decay",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0005",
                            "MethodArgument"
                        ]
                    ]
                },
                "betas": {
                    "value": "(adam_beta1, adam_beta2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_111": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "param_groups",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model.parameters()",
                            "Call"
                        ],
                        [
                            "[{'params': base_params, 'lr': lr * base_lr_mult}, {'params': new_params}]",
                            "List"
                        ]
                    ]
                },
                "lr": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0003",
                            "MethodArgument"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "weight_decay",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0005",
                            "MethodArgument"
                        ]
                    ]
                },
                "betas": {
                    "value": "(adam_beta1, adam_beta2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "amsgrad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SGD_120": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "param_groups",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model.parameters()",
                            "Call"
                        ],
                        [
                            "[{'params': base_params, 'lr': lr * base_lr_mult}, {'params': new_params}]",
                            "List"
                        ]
                    ]
                },
                "lr": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0003",
                            "MethodArgument"
                        ]
                    ]
                },
                "momentum": {
                    "value": "momentum",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.9",
                            "MethodArgument"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "weight_decay",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0005",
                            "MethodArgument"
                        ]
                    ]
                },
                "dampening": {
                    "value": "sgd_dampening",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "nesterov": {
                    "value": "sgd_nesterov",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "RMSprop_130": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "param_groups",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model.parameters()",
                            "Call"
                        ],
                        [
                            "[{'params': base_params, 'lr': lr * base_lr_mult}, {'params': new_params}]",
                            "List"
                        ]
                    ]
                },
                "lr": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0003",
                            "MethodArgument"
                        ]
                    ]
                },
                "momentum": {
                    "value": "momentum",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.9",
                            "MethodArgument"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "weight_decay",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0005",
                            "MethodArgument"
                        ]
                    ]
                },
                "alpha": {
                    "value": "rmsprop_alpha",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.99",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "torchreid/optim/warm_up.py": {
        "torch": {}
    },
    "torchreid/utils/model_complexity.py": {
        "torch": {
            "prod_33": {
                "variable": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.Tensor(m.kernel_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "prod_53": {
                "variable": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.Tensor(k)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "prod_62": {
                "variable": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.Tensor(k)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "prod_76": {
                "variable": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.Tensor(k)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "prod_84": {
                "variable": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.Tensor(k)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "prod_103": {
                "variable": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.ceil(k)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "prod_113": {
                "variable": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.ceil(k)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "prod_132": {
                "variable": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.ceil(k)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "prod_142": {
                "variable": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.ceil(k)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "rand_313": {
                "variable": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ceil_103": {
                "input": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.prod(torch.Tensor(m.kernel_size)).item()",
                            "Call"
                        ],
                        [
                            "_pair(m.kernel_size)",
                            "Call"
                        ],
                        [
                            "torch.prod(torch.Tensor(k)).item()",
                            "Call"
                        ],
                        [
                            "_triple(m.kernel_size)",
                            "Call"
                        ],
                        [
                            "torch.prod(torch.Tensor(k)).item()",
                            "Call"
                        ],
                        [
                            "_pair(m.kernel_size)",
                            "Call"
                        ],
                        [
                            "torch.prod(torch.Tensor(k)).item()",
                            "Call"
                        ],
                        [
                            "_triple(m.kernel_size)",
                            "Call"
                        ],
                        [
                            "torch.prod(torch.Tensor(k)).item()",
                            "Call"
                        ],
                        [
                            "math.ceil(x.size(2) / out_size)",
                            "Call"
                        ],
                        [
                            "torch.Tensor(list(x.size()[2:])) / torch.Tensor(out_size)",
                            "BinOp"
                        ],
                        [
                            "torch.prod(torch.ceil(k)).item()",
                            "Call"
                        ],
                        [
                            "torch.Tensor(list(x.size()[2:])) / torch.Tensor(out_size)",
                            "BinOp"
                        ],
                        [
                            "torch.prod(torch.ceil(k)).item()",
                            "Call"
                        ],
                        [
                            "math.ceil(x.size(2) / out_size)",
                            "Call"
                        ],
                        [
                            "torch.Tensor(list(x.size()[2:])) / torch.Tensor(out_size)",
                            "BinOp"
                        ],
                        [
                            "torch.prod(torch.ceil(k)).item()",
                            "Call"
                        ],
                        [
                            "torch.Tensor(list(x.size()[2:])) / torch.Tensor(out_size)",
                            "BinOp"
                        ],
                        [
                            "torch.prod(torch.ceil(k)).item()",
                            "Call"
                        ]
                    ]
                }
            },
            "ceil_113": {
                "input": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.prod(torch.Tensor(m.kernel_size)).item()",
                            "Call"
                        ],
                        [
                            "_pair(m.kernel_size)",
                            "Call"
                        ],
                        [
                            "torch.prod(torch.Tensor(k)).item()",
                            "Call"
                        ],
                        [
                            "_triple(m.kernel_size)",
                            "Call"
                        ],
                        [
                            "torch.prod(torch.Tensor(k)).item()",
                            "Call"
                        ],
                        [
                            "_pair(m.kernel_size)",
                            "Call"
                        ],
                        [
                            "torch.prod(torch.Tensor(k)).item()",
                            "Call"
                        ],
                        [
                            "_triple(m.kernel_size)",
                            "Call"
                        ],
                        [
                            "torch.prod(torch.Tensor(k)).item()",
                            "Call"
                        ],
                        [
                            "math.ceil(x.size(2) / out_size)",
                            "Call"
                        ],
                        [
                            "torch.Tensor(list(x.size()[2:])) / torch.Tensor(out_size)",
                            "BinOp"
                        ],
                        [
                            "torch.prod(torch.ceil(k)).item()",
                            "Call"
                        ],
                        [
                            "torch.Tensor(list(x.size()[2:])) / torch.Tensor(out_size)",
                            "BinOp"
                        ],
                        [
                            "torch.prod(torch.ceil(k)).item()",
                            "Call"
                        ],
                        [
                            "math.ceil(x.size(2) / out_size)",
                            "Call"
                        ],
                        [
                            "torch.Tensor(list(x.size()[2:])) / torch.Tensor(out_size)",
                            "BinOp"
                        ],
                        [
                            "torch.prod(torch.ceil(k)).item()",
                            "Call"
                        ],
                        [
                            "torch.Tensor(list(x.size()[2:])) / torch.Tensor(out_size)",
                            "BinOp"
                        ],
                        [
                            "torch.prod(torch.ceil(k)).item()",
                            "Call"
                        ]
                    ]
                }
            },
            "ceil_132": {
                "input": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.prod(torch.Tensor(m.kernel_size)).item()",
                            "Call"
                        ],
                        [
                            "_pair(m.kernel_size)",
                            "Call"
                        ],
                        [
                            "torch.prod(torch.Tensor(k)).item()",
                            "Call"
                        ],
                        [
                            "_triple(m.kernel_size)",
                            "Call"
                        ],
                        [
                            "torch.prod(torch.Tensor(k)).item()",
                            "Call"
                        ],
                        [
                            "_pair(m.kernel_size)",
                            "Call"
                        ],
                        [
                            "torch.prod(torch.Tensor(k)).item()",
                            "Call"
                        ],
                        [
                            "_triple(m.kernel_size)",
                            "Call"
                        ],
                        [
                            "torch.prod(torch.Tensor(k)).item()",
                            "Call"
                        ],
                        [
                            "math.ceil(x.size(2) / out_size)",
                            "Call"
                        ],
                        [
                            "torch.Tensor(list(x.size()[2:])) / torch.Tensor(out_size)",
                            "BinOp"
                        ],
                        [
                            "torch.prod(torch.ceil(k)).item()",
                            "Call"
                        ],
                        [
                            "torch.Tensor(list(x.size()[2:])) / torch.Tensor(out_size)",
                            "BinOp"
                        ],
                        [
                            "torch.prod(torch.ceil(k)).item()",
                            "Call"
                        ],
                        [
                            "math.ceil(x.size(2) / out_size)",
                            "Call"
                        ],
                        [
                            "torch.Tensor(list(x.size()[2:])) / torch.Tensor(out_size)",
                            "BinOp"
                        ],
                        [
                            "torch.prod(torch.ceil(k)).item()",
                            "Call"
                        ],
                        [
                            "torch.Tensor(list(x.size()[2:])) / torch.Tensor(out_size)",
                            "BinOp"
                        ],
                        [
                            "torch.prod(torch.ceil(k)).item()",
                            "Call"
                        ]
                    ]
                }
            },
            "ceil_142": {
                "input": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.prod(torch.Tensor(m.kernel_size)).item()",
                            "Call"
                        ],
                        [
                            "_pair(m.kernel_size)",
                            "Call"
                        ],
                        [
                            "torch.prod(torch.Tensor(k)).item()",
                            "Call"
                        ],
                        [
                            "_triple(m.kernel_size)",
                            "Call"
                        ],
                        [
                            "torch.prod(torch.Tensor(k)).item()",
                            "Call"
                        ],
                        [
                            "_pair(m.kernel_size)",
                            "Call"
                        ],
                        [
                            "torch.prod(torch.Tensor(k)).item()",
                            "Call"
                        ],
                        [
                            "_triple(m.kernel_size)",
                            "Call"
                        ],
                        [
                            "torch.prod(torch.Tensor(k)).item()",
                            "Call"
                        ],
                        [
                            "math.ceil(x.size(2) / out_size)",
                            "Call"
                        ],
                        [
                            "torch.Tensor(list(x.size()[2:])) / torch.Tensor(out_size)",
                            "BinOp"
                        ],
                        [
                            "torch.prod(torch.ceil(k)).item()",
                            "Call"
                        ],
                        [
                            "torch.Tensor(list(x.size()[2:])) / torch.Tensor(out_size)",
                            "BinOp"
                        ],
                        [
                            "torch.prod(torch.ceil(k)).item()",
                            "Call"
                        ],
                        [
                            "math.ceil(x.size(2) / out_size)",
                            "Call"
                        ],
                        [
                            "torch.Tensor(list(x.size()[2:])) / torch.Tensor(out_size)",
                            "BinOp"
                        ],
                        [
                            "torch.prod(torch.ceil(k)).item()",
                            "Call"
                        ],
                        [
                            "torch.Tensor(list(x.size()[2:])) / torch.Tensor(out_size)",
                            "BinOp"
                        ],
                        [
                            "torch.prod(torch.ceil(k)).item()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "torchreid/utils/tools.py": {
        "torch": {
            "manual_seed_66": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "manual_seed_all_67": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "torchreid/utils/torchtools.py": {
        "torch": {
            "save_56": {
                "obj": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "fpath",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "osp.join(save_dir, 'model.pth.tar-' + str(epoch))",
                            "Call"
                        ]
                    ]
                }
            },
            "load_85": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "fpath",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "osp.join(save_dir, 'model.pth.tar-' + str(epoch))",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "map_location",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None if torch.cuda.is_available() else 'cpu'",
                            "IfExp"
                        ]
                    ]
                }
            },
            "is_available_83": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_89": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "fpath",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "osp.join(save_dir, 'model.pth.tar-' + str(epoch))",
                            "Call"
                        ]
                    ]
                },
                "pickle_module": {
                    "value": "pickle",
                    "type": "Variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "map_location",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None if torch.cuda.is_available() else 'cpu'",
                            "IfExp"
                        ]
                    ]
                }
            }
        }
    }
}