{
    "allennlp/allennlp/training/metrics/auc.py": {
        "sklearn": {
            "roc_curve_90": {
                "variable": {
                    "value": "(false_positive_rates, true_positive_rates, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "self._all_gold_labels.numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_score": {
                    "value": "self._all_predictions.numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "pos_label": {
                    "value": "self._positive_label",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "auc_95": {
                "variable": {
                    "value": "auc",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "false_positive_rates",
                    "type": "Name",
                    "possible_values": []
                },
                "y": {
                    "value": "true_positive_rates",
                    "type": "Name",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "unique_59": {
                "variable": {
                    "value": "unique_gold_labels",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "gold_labels",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "cat_78": {
                "variable": {
                    "value": "self._all_predictions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self._all_predictions, torch.masked_select(predictions, mask).float()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_82": {
                "variable": {
                    "value": "self._all_gold_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self._all_gold_labels, torch.masked_select(gold_labels, mask).long()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_75": {
                "variable": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "gold_labels.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "masked_select_79": {
                "input": {
                    "value": "predictions",
                    "type": "Name",
                    "possible_values": []
                },
                "mask": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.ones(batch_size)",
                            "Call"
                        ],
                        [
                            "mask.to(dtype=torch.bool)",
                            "Call"
                        ]
                    ]
                }
            },
            "masked_select_83": {
                "input": {
                    "value": "gold_labels",
                    "type": "Name",
                    "possible_values": []
                },
                "mask": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.ones(batch_size)",
                            "Call"
                        ],
                        [
                            "mask.to(dtype=torch.bool)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "build_dgl_graph.py": {
        "sklearn": {
            "Normalizer_870": {
                "variable": {
                    "value": "self.normalizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "f1_score_355": {
                "y_true": {
                    "value": "graph_y.detach().float().cpu().numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "graph_logits.detach().cpu().numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "average": {
                    "value": "binary",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "f1_score_381": {
                "y_true": {
                    "value": "nodes_y.detach().float().cpu().numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "nodes_logits.detach().cpu().numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "average": {
                    "value": "binary",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "device_44": {
                "variable": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Adam_151": {
                "variable": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "itertools.chain(G_encoder.parameters(), clf.parameters())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "StepLR_152": {
                "variable": {
                    "value": "scheduler",
                    "type": "Name",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Adam(itertools.chain(G_encoder.parameters(), clf.parameters()))",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.7",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MSELoss_892": {
                "variable": {
                    "value": "criterion",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_123": {
                "obj": {
                    "value": "{'clf_state_dict': clf.state_dict(), 'clfNodes': clfNodes.state_dict(), 'G_encoder_state_dict': G_encoder.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(config['reward_serialization_dir'], '{}_{}.th'.format(args.model_name, args.encoder_type))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "L1Loss_143": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Embedding_505": {
                "variable": {
                    "value": "self.node_type_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "len(K.id2node_type)",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.node_type_embedding_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_509": {
                "variable": {
                    "value": "self.projection_layer_node_init",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.node_type_embedding_size + self.text_rep_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.node_hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_512": {
                "variable": {
                    "value": "self.edge_type_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "len(K.id2edge_type)",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.edge_type_embedding_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_688": {
                "variable": {
                    "value": "self.lin1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "config['node_hidden_size']",
                            "Subscript"
                        ],
                        [
                            "input_dim * 3",
                            "BinOp"
                        ],
                        [
                            "200",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "int(input_dim / 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_689": {
                "variable": {
                    "value": "self.lin2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "int(input_dim / 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "is_available_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_73": {
                "tensors": {
                    "value": "batch",
                    "type": "Name",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "elem.new(storage)",
                            "Call"
                        ]
                    ]
                }
            },
            "eq_350": {
                "input": {
                    "value": "graph_logits.detach().cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "graph_y.detach().float().cpu()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_350": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tensor_533": {
                "variable": {
                    "value": "text_encoding",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "unsqueeze_533": {
                "variable": {
                    "value": "text_encoding",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_535": {
                "variable": {
                    "value": "init_vector",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[type_embedding, text_encoding]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Tensor_739": {
                "variable": {
                    "value": "nodes_Y",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Tensor_850": {
                "variable": {
                    "value": "nodes_Y",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "DataLoader_157": {
                "dataset": {
                    "value": "train_data",
                    "type": "Name",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "eq_376": {
                "input": {
                    "value": "nodes_logits.detach().cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "nodes_y.detach().float().cpu()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_376": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_692": {
                "input": {
                    "value": "self.lin1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Tensor_741": {
                "variable": {
                    "value": "nodes_Y",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Tensor_852": {
                "variable": {
                    "value": "nodes_Y",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "tensor_89": {
                "data": {
                    "value": "batch",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_163": {
                "dataset": {
                    "value": "train_dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "CombinedDataset(G_encoder, train_data, neg_class, epoch, init_num_perturb_actions)",
                            "Call"
                        ],
                        [
                            "GraphDataset(G_encoder, train_data, neg_class, epoch, init_num_perturb_actions)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "my_collate",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "DataLoader_173": {
                "dataset": {
                    "value": "train_dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "CombinedDataset(G_encoder, train_data, neg_class, epoch, init_num_perturb_actions)",
                            "Call"
                        ],
                        [
                            "GraphDataset(G_encoder, train_data, neg_class, epoch, init_num_perturb_actions)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_178": {
                "dataset": {
                    "value": "val_data",
                    "type": "Name",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "as_tensor_87": {
                "data": {
                    "value": "batch",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "tensor_91": {
                "data": {
                    "value": "batch",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "DataLoader_185": {
                "dataset": {
                    "value": "CombinedDataset(G_encoder, val_data, neg_class, decay_factor, init_num_perturb_actions)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "my_collate",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "DataLoader_205": {
                "dataset": {
                    "value": "GraphDataset(G_encoder, val_data, neg_class, decay_factor, init_num_perturb_actions)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "as_tensor_85": {
                "data": {
                    "value": "b",
                    "type": "Name",
                    "possible_values": []
                }
            }
        }
    },
    "dgi.py": {
        "sklearn": {
            "LogisticRegression_253": {
                "variable": {
                    "value": "clf",
                    "type": "Name",
                    "possible_values": []
                },
                "penalty": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                },
                "solver": {
                    "value": "solver",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'lbfgs'",
                            "MethodArgument"
                        ]
                    ]
                },
                "multi_class": {
                    "value": "multi_class",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'auto'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "accuracy_score_257": {
                "variable": {
                    "value": "acc",
                    "type": "Name",
                    "possible_values": []
                },
                "y_true": {
                    "value": "test_y.detach().cpu().numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "preds",
                    "type": "Name",
                    "possible_values": [
                        [
                            "clf.predict(test_z.detach().cpu().numpy())",
                            "Call"
                        ]
                    ]
                }
            },
            "f1_score_258": {
                "variable": {
                    "value": "f1",
                    "type": "Name",
                    "possible_values": []
                },
                "y_true": {
                    "value": "test_y.detach().cpu().numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "preds",
                    "type": "Name",
                    "possible_values": [
                        [
                            "clf.predict(test_z.detach().cpu().numpy())",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "f1_average",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'binary'",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "device_28": {
                "variable": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "manual_seed_32": {
                "seed": {
                    "value": "42",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_59": {
                "variable": {
                    "value": "dummy_span",
                    "type": "Name",
                    "possible_values": []
                },
                "data": {
                    "value": "np.zeros_like(graph.span_embeddings[0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_99": {
                "variable": {
                    "value": "span_reps",
                    "type": "Name",
                    "possible_values": []
                },
                "data": {
                    "value": "np.stack(span_reps)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_100": {
                "variable": {
                    "value": "type_features",
                    "type": "Name",
                    "possible_values": []
                },
                "data": {
                    "value": "np.stack(type_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_104": {
                "variable": {
                    "value": "edge_index",
                    "type": "Name",
                    "possible_values": []
                },
                "data": {
                    "value": "edges",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "permute_104": {
                "variable": {
                    "value": "edge_index",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_105": {
                "variable": {
                    "value": "edge_attr",
                    "type": "Name",
                    "possible_values": []
                },
                "data": {
                    "value": "[1 if e == 'cor' else 0 for e in edge_types]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_278": {
                "variable": {
                    "value": "train_z",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "train_z",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat(train_z, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat(train_z, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_279": {
                "variable": {
                    "value": "train_y",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "train_y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat(train_y, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat(train_y, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_280": {
                "variable": {
                    "value": "dev_z",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "dev_z",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat(dev_z, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat(dev_z, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_281": {
                "variable": {
                    "value": "dev_y",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "dev_y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat(dev_y, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat(dev_y, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_289": {
                "variable": {
                    "value": "pos_class",
                    "type": "Name",
                    "possible_values": []
                },
                "data": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_290": {
                "variable": {
                    "value": "neg_class",
                    "type": "Name",
                    "possible_values": []
                },
                "data": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_312": {
                "variable": {
                    "value": "train_z",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "train_z",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat(train_z, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat(train_z, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_313": {
                "variable": {
                    "value": "train_y",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "train_y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat(train_y, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat(train_y, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_314": {
                "variable": {
                    "value": "dev_z",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "dev_z",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat(dev_z, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat(dev_z, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_315": {
                "variable": {
                    "value": "dev_y",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "dev_y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat(dev_y, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat(dev_y, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "PReLU_180": {
                "variable": {
                    "value": "self.prelu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_parameters": {
                    "value": "hidden_channels",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Embedding_182": {
                "variable": {
                    "value": "self.node_type_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "len(K.id2node_type)",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.node_type_embedding_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_199": {
                "variable": {
                    "value": "xs",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[span_reps, node_type_embeddings]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sigmoid_222": {
                "input": {
                    "value": "z.mean(dim=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_331": {
                "obj": {
                    "value": "blob",
                    "type": "Name",
                    "possible_values": [
                        [
                            "{'encoder_state': encoder_state, 'classifier_state': pickle.dumps(clf), 'training_state': optimizer_state}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "save_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(config['reward_serialization_dir'], 'best_dgi_with_decay_{}_model.th'.format(perturbation_type))",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_355": {
                "variable": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0003",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "is_available_28": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_115": {
                "data": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "finetune.py": {
        "sklearn": {},
        "torch": {
            "device_54": {
                "variable": {
                    "value": "CPU",
                    "type": "Name",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_55": {
                "variable": {
                    "value": "GPU",
                    "type": "Name",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "manual_seed_58": {
                "seed": {
                    "value": "42",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_235": {
                "variable": {
                    "value": "state_dicts",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "mpath",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(serialization_dir, 'best_dgi_with_decay_{}_model.th'.format(model_name))",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "CPU",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.device('cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_55": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_379": {
                "variable": {
                    "value": "span_embeddings",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[co['endpoint_span_embeddings'], co['attended_span_embeddings']]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "squeeze_379": {
                "variable": {
                    "value": "span_embeddings",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_344": {
                "obj": {
                    "value": "best_state_dict",
                    "type": "Name",
                    "possible_values": [
                        [
                            "ft_model.state_dict()",
                            "Call"
                        ],
                        [
                            "copy.deepcopy(ft_model.state_dict())",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(args.serialization_dir, 'best_finetuned_dgi_{}_{}.th'.format(to_finetune, finetune_dataset))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Tensor_410": {
                "variable": {
                    "value": "reward",
                    "type": "Name",
                    "possible_values": []
                }
            }
        }
    },
    "hmtl/training/metrics/f1_score.py": {
        "sklearn": {
            "f1_score_25": {
                "y_true": {
                    "value": "labels.cpu().numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "logits.cpu().numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "average": {
                    "value": "binary",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        },
        "torch": {}
    },
    "allennlp/allennlp/__init__.py": {
        "torch": {}
    },
    "allennlp/allennlp/commands/elmo.py": {
        "torch": {
            "cat_253": {
                "variable": {
                    "value": "activations",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[ele[0].unsqueeze(1) for ele in without_bos_eos]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_449": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/commands/train.py": {
        "torch": {
            "set_device_430": {
                "device": {
                    "value": "int(gpu_id)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/common/checks.py": {
        "torch": {
            "device_count_108": {
                "variable": {
                    "value": "num_devices_available",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/common/testing/model_test_case.py": {
        "torch": {
            "zeros_212": {
                "variable": {
                    "value": "zeros",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "parameter.size()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/common/util.py": {
        "torch": {
            "manual_seed_244": {
                "seed": {
                    "value": "torch_seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "params.pop_int('pytorch_seed', 133)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_246": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_617": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_617": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_644": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_644": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_all_247": {
                "seed": {
                    "value": "torch_seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "params.pop_int('pytorch_seed', 133)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "allennlp/allennlp/data/batch.py": {
        "torch": {}
    },
    "allennlp/allennlp/data/dataset_readers/multiprocess_dataset_reader.py": {
        "torch": {}
    },
    "allennlp/allennlp/data/fields/adjacency_field.py": {
        "torch": {
            "ones_124": {
                "*size": {
                    "value": "desired_num_tokens",
                    "type": "Name",
                    "possible_values": [
                        [
                            "padding_lengths['num_tokens']",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "desired_num_tokens",
                    "type": "Name",
                    "possible_values": [
                        [
                            "padding_lengths['num_tokens']",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "allennlp/allennlp/data/fields/array_field.py": {
        "torch": {
            "from_numpy_57": {
                "variable": {
                    "value": "tensor",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "return_array",
                    "type": "Name",
                    "possible_values": [
                        [
                            "numpy.asarray(numpy.ones(max_shape, dtype=self.dtype) * self.padding_value, dtype=self.dtype)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "allennlp/allennlp/data/fields/field.py": {
        "torch": {
            "stack_117": {
                "tensors": {
                    "value": "tensor_list",
                    "type": "Name",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/data/fields/index_field.py": {
        "torch": {}
    },
    "allennlp/allennlp/data/fields/label_field.py": {
        "torch": {
            "tensor_105": {
                "variable": {
                    "value": "tensor",
                    "type": "Name",
                    "possible_values": []
                },
                "data": {
                    "value": "self._label_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/data/fields/multilabel_field.py": {
        "torch": {
            "zeros_125": {
                "variable": {
                    "value": "tensor",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "self._num_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/data/fields/namespace_swapping_field.py": {
        "torch": {}
    },
    "allennlp/allennlp/data/fields/sequence_label_field.py": {
        "torch": {}
    },
    "allennlp/allennlp/data/fields/span_field.py": {
        "torch": {}
    },
    "allennlp/allennlp/data/fields/text_field.py": {
        "torch": {}
    },
    "allennlp/allennlp/data/iterators/data_iterator.py": {
        "torch": {}
    },
    "allennlp/allennlp/data/iterators/multiprocess_iterator.py": {
        "torch": {}
    },
    "allennlp/allennlp/data/token_indexers/elmo_indexer.py": {
        "torch": {}
    },
    "allennlp/allennlp/data/token_indexers/pretrained_transformer_indexer.py": {
        "torch": {}
    },
    "allennlp/allennlp/data/token_indexers/pretrained_transformer_mismatched_indexer.py": {
        "torch": {}
    },
    "allennlp/allennlp/data/token_indexers/spacy_indexer.py": {
        "torch": {}
    },
    "allennlp/allennlp/data/token_indexers/token_characters_indexer.py": {
        "torch": {}
    },
    "allennlp/allennlp/data/token_indexers/token_indexer.py": {
        "torch": {}
    },
    "allennlp/allennlp/interpret/attackers/hotflip.py": {
        "torch": {
            "einsum_382": {
                "variable": {
                    "value": "new_embed_dot_grad",
                    "type": "Name",
                    "possible_values": []
                },
                "equation": {
                    "value": "bij,kj->bik",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(grad, self.embedding_matrix)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "einsum_383": {
                "variable": {
                    "value": "prev_embed_dot_grad",
                    "type": "Name",
                    "possible_values": []
                },
                "equation": {
                    "value": "bij,bij->bi",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(grad, word_embedding)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "unsqueeze_383": {
                "variable": {
                    "value": "prev_embed_dot_grad",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "embedding_375": {
                "variable": {
                    "value": "word_embedding",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "util.move_to_device(torch.LongTensor([token_idx]), self.cuda_device)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.embedding_matrix",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_365": {
                "ndarray": {
                    "value": "grad",
                    "type": "Name",
                    "possible_values": [
                        [
                            "grads[grad_input_field][0]",
                            "Subscript"
                        ],
                        [
                            "util.move_to_device(torch.from_numpy(grad), self.cuda_device)",
                            "Call"
                        ],
                        [
                            "grad.unsqueeze(0).unsqueeze(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_140": {
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_155": {
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_167": {
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/interpret/attackers/input_reduction.py": {
        "torch": {}
    },
    "allennlp/allennlp/interpret/saliency_interpreters/smooth_gradient.py": {
        "torch": {
            "randn_61": {
                "*size": {
                    "value": "output.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/models/archival.py": {
        "torch": {}
    },
    "allennlp/allennlp/models/basic_classifier.py": {
        "torch": {
            "Linear_92": {
                "variable": {
                    "value": "self._classification_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self._classifier_input_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self._num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_96": {
                "variable": {
                    "value": "self._loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_139": {
                "variable": {
                    "value": "probs",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self._classification_layer(embedded_text)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Dropout_83": {
                "variable": {
                    "value": "self._dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Name",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/models/bert_for_classification.py": {
        "torch": {
            "Dropout_78": {
                "variable": {
                    "value": "self._dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Linear_80": {
                "variable": {
                    "value": "self._classification_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.bert_model.config.hidden_size",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "num_labels",
                            "Name"
                        ],
                        [
                            "vocab.get_vocab_size(namespace=self._label_namespace)",
                            "Call"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_82": {
                "variable": {
                    "value": "self._loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_127": {
                "variable": {
                    "value": "probs",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self._classification_layer(pooled)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/models/biaffine_dependency_parser.py": {
        "torch": {
            "Bilinear_126": {
                "variable": {
                    "value": "self.tag_bilinear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in1_features": {
                    "value": "tag_representation_dim",
                    "type": "Name",
                    "possible_values": []
                },
                "in2_features": {
                    "value": "tag_representation_dim",
                    "type": "Name",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.vocab.get_vocab_size('head_tags')",
                            "Call"
                        ]
                    ]
                }
            },
            "Dropout_132": {
                "variable": {
                    "value": "self._input_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "input_dropout",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Parameter_133": {
                "variable": {
                    "value": "self._head_sentinel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn([1, 1, encoder.get_output_dim()])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_318": {
                "variable": {
                    "value": "encoded_text",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[head_sentinel, encoded_text]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_319": {
                "variable": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mask.new_ones(batch_size, 1), mask]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_softmax_592": {
                "variable": {
                    "value": "normalized_pairwise_head_logits",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "pairwise_head_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.tag_bilinear(head_tag_representation, child_tag_representation)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "permute_592": {
                "variable": {
                    "value": "normalized_pairwise_head_logits",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dims": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_softmax_604": {
                "variable": {
                    "value": "normalized_arc_logits",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "attended_arcs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.arc_attention(head_arc_representation, child_arc_representation)",
                            "Call"
                        ],
                        [
                            "attended_arcs + minus_mask.unsqueeze(2) + minus_mask.unsqueeze(1)",
                            "BinOp"
                        ],
                        [
                            "attended_arcs + torch.diag(attended_arcs.new(mask.size(1)).fill_(-numpy.inf))",
                            "BinOp"
                        ],
                        [
                            "attended_arcs + minus_mask.unsqueeze(2) + minus_mask.unsqueeze(1)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_604": {
                "variable": {
                    "value": "normalized_arc_logits",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim0": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_610": {
                "variable": {
                    "value": "batch_energy",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "normalized_arc_logits.unsqueeze(1) + normalized_pairwise_head_logits",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_238": {
                "variable": {
                    "value": "embedded_text_input",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[embedded_text_input, embedded_pos_tags]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_321": {
                "variable": {
                    "value": "head_indices",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[head_indices.new_zeros(batch_size, 1), head_indices]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_325": {
                "variable": {
                    "value": "head_tags",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[head_tags.new_zeros(batch_size, 1), head_tags]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_134": {
                "*size": {
                    "value": "[1, 1, encoder.get_output_dim()]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "diag_504": {
                "input": {
                    "value": "attended_arcs.new(mask.size(1)).fill_(-numpy.inf)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_644": {
                "ndarray": {
                    "value": "numpy.stack(heads)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_645": {
                "ndarray": {
                    "value": "numpy.stack(head_tags)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/models/biaffine_dependency_parser_multilang.py": {
        "torch": {
            "cat_145": {
                "variable": {
                    "value": "embedded_text_input",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[embedded_text_input, embedded_pos_tags]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/models/biattentive_classification_network.py": {
        "torch": {
            "Dropout_103": {
                "variable": {
                    "value": "self._embedding_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "embedding_dropout",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Dropout_109": {
                "variable": {
                    "value": "self._integrator_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "integrator_dropout",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Linear_151": {
                "variable": {
                    "value": "self._self_attentive_pooling_projection",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self._combined_integrator_output_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_209": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_284": {
                "variable": {
                    "value": "integrator_input",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[encoded_tokens, encoded_tokens - encoded_text, encoded_tokens * encoded_text]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_322": {
                "variable": {
                    "value": "pooled_representations",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[max_pool, min_pool, mean_pool, self_attentive_pool]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_330": {
                "variable": {
                    "value": "class_probabilities",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self._output_layer(pooled_representations_dropped)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_296": {
                "variable": {
                    "value": "integrated_encodings",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[integrated_encodings, integrator_output_elmo]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_268": {
                "variable": {
                    "value": "embedded_text",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[embedded_text, input_elmo]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "max_304": {
                "input": {
                    "value": "max_masked_integrated_encodings",
                    "type": "Name",
                    "possible_values": [
                        [
                            "util.replace_masked_values(integrated_encodings, text_mask.unsqueeze(2), -10000000.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "min_308": {
                "input": {
                    "value": "min_masked_integrated_encodings",
                    "type": "Name",
                    "possible_values": [
                        [
                            "util.replace_masked_values(integrated_encodings, text_mask.unsqueeze(2), +10000000.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_309": {
                "input": {
                    "value": "text_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "util.get_text_field_mask(tokens).float()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/models/bimpm.py": {
        "torch": {
            "Dropout_115": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_119": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_228": {
                "variable": {
                    "value": "probs",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.classifier_feedforward(torch.cat([aggregated_premise, aggregated_hypothesis], dim=-1))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_210": {
                "tensors": {
                    "value": "matching_vector_premise",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_213": {
                "tensors": {
                    "value": "matching_vector_hypothesis",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_226": {
                "tensors": {
                    "value": "[aggregated_premise, aggregated_hypothesis]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/models/constituency_parser.py": {
        "torch": {
            "cat_206": {
                "variable": {
                    "value": "embedded_text_input",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[embedded_text_input, embedded_pos_tags]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_110": {
                "in_features": {
                    "value": "output_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "feedforward.get_output_dim()",
                            "Call"
                        ],
                        [
                            "span_extractor.get_output_dim()",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_350": {
                "variable": {
                    "value": "(label_prob, label_index)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "prediction",
                    "type": "Name",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/models/coreference_resolution/coref.py": {
        "torch": {
            "Sequential_85": {
                "variable": {
                    "value": "feedforward_scorer",
                    "type": "Name",
                    "possible_values": []
                },
                "*args": {
                    "value": "TimeDistributed(mention_feedforward)",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_183": {
                "variable": {
                    "value": "spans",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "spans.float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_197": {
                "variable": {
                    "value": "span_embeddings",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[endpoint_span_embeddings, attended_span_embeddings]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "relu_505": {
                "variable": {
                    "value": "valid_antecedent_indices",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "raw_antecedent_indices.float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_570": {
                "variable": {
                    "value": "span_pair_embeddings",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[target_embeddings, antecedent_embeddings, antecedent_embeddings * target_embeddings, antecedent_distance_embeddings]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_619": {
                "variable": {
                    "value": "pairwise_labels_with_dummy_label",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[dummy_labels, pairwise_labels]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_673": {
                "variable": {
                    "value": "coreference_scores",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[dummy_scores, antecedent_scores]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Dropout_116": {
                "variable": {
                    "value": "self._lexical_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "lexical_dropout",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Linear_91": {
                "in_features": {
                    "value": "antecedent_feedforward.get_output_dim()",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_87": {
                "in_features": {
                    "value": "mention_feedforward.get_output_dim()",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/models/crf_tagger.py": {
        "torch": {
            "Dropout_96": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Linear_105": {
                "in_features": {
                    "value": "output_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "feedforward.get_output_dim()",
                            "Call"
                        ],
                        [
                            "self.encoder.get_output_dim()",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.num_tags",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/models/decomposable_attention.py": {
        "torch": {
            "CrossEntropyLoss_108": {
                "variable": {
                    "value": "self._loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_176": {
                "variable": {
                    "value": "premise_compare_input",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[embedded_premise, attended_hypothesis]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_179": {
                "variable": {
                    "value": "hypothesis_compare_input",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[embedded_hypothesis, attended_premise]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_193": {
                "variable": {
                    "value": "aggregate_input",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[compared_premise, compared_hypothesis]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_195": {
                "variable": {
                    "value": "label_probs",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "label_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self._aggregate_feedforward(aggregate_input)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/models/encoder_decoders/composed_seq2seq.py": {
        "torch": {}
    },
    "allennlp/allennlp/models/encoder_decoders/copynet_seq2seq.py": {
        "torch": {
            "Linear_144": {
                "variable": {
                    "value": "self._input_projection_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "target_embedding_dim + self.encoder_output_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.decoder_input_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LSTMCell_150": {
                "variable": {
                    "value": "self._decoder_cell",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "self.decoder_input_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "self.decoder_output_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_154": {
                "variable": {
                    "value": "self._output_generation_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.decoder_output_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "target_vocab_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.vocab.get_vocab_size(self._target_namespace)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_161": {
                "variable": {
                    "value": "self._output_copying_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.encoder_output_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.decoder_output_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_368": {
                "variable": {
                    "value": "decoder_input",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(embedded_input, attentive_read, selective_read)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tanh_386": {
                "variable": {
                    "value": "copy_projection",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "copy_projection",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self._output_copying_layer(trimmed_encoder_outputs)",
                            "Call"
                        ],
                        [
                            "torch.tanh(copy_projection)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_432": {
                "variable": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(generation_scores_mask, copy_mask)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_434": {
                "variable": {
                    "value": "all_scores",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(generation_scores, copy_scores)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_468": {
                "variable": {
                    "value": "combined_gen_and_copy",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(generation_log_probs, copy_log_probs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_560": {
                "variable": {
                    "value": "log_likelihoods",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "step_log_likelihoods",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_793": {
                "variable": {
                    "value": "modified_log_probs",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "modified_log_probs_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_868": {
                "variable": {
                    "value": "all_scores",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(generation_scores, copy_scores)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_872": {
                "variable": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(generation_scores.new_full(generation_scores.size(), 1.0), copy_mask)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_766": {
                "variable": {
                    "value": "combined",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(copy_log_probs_slice.unsqueeze(-1), future_copy_log_probs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_744": {
                "tensors": {
                    "value": "(selected_generation_log_probs, copy_log_probs_to_add)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/models/encoder_decoders/simple_seq2seq.py": {
        "torch": {
            "LSTMCell_160": {
                "variable": {
                    "value": "self._decoder_cell",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "self._decoder_input_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "self._decoder_output_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_164": {
                "variable": {
                    "value": "self._output_projection_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self._decoder_output_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.vocab.get_vocab_size(self._target_namespace)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_softmax_205": {
                "variable": {
                    "value": "class_log_probabilities",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "output_projections",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self._output_projection_layer(decoder_hidden)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_387": {
                "variable": {
                    "value": "predictions",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "step_predictions",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_376": {
                "variable": {
                    "value": "class_probabilities",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "output_projections",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self._output_projection_layer(decoder_hidden)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "max_379": {
                "variable": {
                    "value": "(_, predicted_classes)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "class_probabilities",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.softmax(output_projections, dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_393": {
                "variable": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "step_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_455": {
                "variable": {
                    "value": "decoder_input",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(attended_input, embedded_input)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "rand_355": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/models/ensemble.py": {
        "torch": {
            "ModuleList_31": {
                "variable": {
                    "value": "self.submodels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "submodels",
                    "type": "Name",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/models/esim.py": {
        "torch": {
            "CrossEntropyLoss_111": {
                "variable": {
                    "value": "self._loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_179": {
                "variable": {
                    "value": "premise_enhanced",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[encoded_premise, attended_hypothesis, encoded_premise - attended_hypothesis, encoded_premise * attended_hypothesis]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_188": {
                "variable": {
                    "value": "hypothesis_enhanced",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[encoded_hypothesis, attended_premise, encoded_hypothesis - attended_premise, encoded_hypothesis * attended_premise]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_234": {
                "variable": {
                    "value": "v_all",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[v_a_avg, v_a_max, v_b_avg, v_b_max]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_242": {
                "variable": {
                    "value": "label_probs",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "label_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self._output_logit(output_hidden)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Dropout_80": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "sum_225": {
                "input": {
                    "value": "premise_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "get_text_field_mask(premise).float()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_228": {
                "input": {
                    "value": "hypothesis_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "get_text_field_mask(hypothesis).float()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/models/event2mind.py": {
        "torch": {
            "Dropout_80": {
                "variable": {
                    "value": "self._embedding_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "embedding_dropout",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "ModuleDict_104": {
                "variable": {
                    "value": "self._states",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_256": {
                "variable": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "step_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_299": {
                "variable": {
                    "value": "all_predictions",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[ps.unsqueeze(1) for ps in predictions]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "GRUCell_398": {
                "variable": {
                    "value": "self.decoder_cell",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "input_dim",
                    "type": "Name",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "output_dim",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Linear_399": {
                "variable": {
                    "value": "self.output_projection_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "output_dim",
                    "type": "Name",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.vocab.get_vocab_size(self._target_namespace)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_softmax_410": {
                "variable": {
                    "value": "class_log_probabilities",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "output_projections",
                    "type": "Name",
                    "possible_values": [
                        [
                            "output_projection_layer(decoder_hidden)",
                            "Call"
                        ],
                        [
                            "output_projection_layer(decoder_hidden)",
                            "Call"
                        ],
                        [
                            "self.output_projection_layer(decoder_hidden)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_296": {
                "variable": {
                    "value": "class_probabilities",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "output_projections",
                    "type": "Name",
                    "possible_values": [
                        [
                            "output_projection_layer(decoder_hidden)",
                            "Call"
                        ],
                        [
                            "output_projection_layer(decoder_hidden)",
                            "Call"
                        ],
                        [
                            "self.output_projection_layer(decoder_hidden)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "max_297": {
                "variable": {
                    "value": "(_, predicted_classes)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "class_probabilities",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.softmax(output_projections, dim=-1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "allennlp/allennlp/models/graph_parser.py": {
        "torch": {
            "Dropout_118": {
                "variable": {
                    "value": "self._input_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "input_dropout",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_144": {
                "variable": {
                    "value": "self._arc_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_145": {
                "variable": {
                    "value": "self._tag_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "diag_374": {
                "variable": {
                    "value": "inf_diagonal_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "arc_scores.new(mask.size(1)).fill_(-numpy.inf)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_385": {
                "variable": {
                    "value": "arc_tag_probs",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "arc_tag_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.tag_bilinear(head_tag_representation, child_tag_representation)",
                            "Call"
                        ],
                        [
                            "arc_tag_logits.permute(0, 2, 3, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "arc_tag_logits + inf_diagonal_mask.unsqueeze(0).unsqueeze(-1)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_179": {
                "variable": {
                    "value": "embedded_text_input",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[embedded_text_input, embedded_pos_tags]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_250": {
                "tensors": {
                    "value": "[one_minus_arc_probs, arc_probs]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/models/language_model.py": {
        "torch": {
            "Parameter_30": {
                "variable": {
                    "value": "self.softmax_w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(embedding_dim, num_words) / np.sqrt(embedding_dim)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_33": {
                "variable": {
                    "value": "self.softmax_b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(num_words)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_softmax_40": {
                "variable": {
                    "value": "probs",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.matmul(embeddings, self.softmax_w) + self.softmax_b",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "nll_loss_44": {
                "input": {
                    "value": "probs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.nn.functional.log_softmax(torch.matmul(embeddings, self.softmax_w) + self.softmax_b, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "targets.long()",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_143": {
                "variable": {
                    "value": "self._dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "cat_157": {
                "variable": {
                    "value": "shifted_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[zero_col, mask[:, 0:-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_159": {
                "variable": {
                    "value": "shifted_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mask[:, 1:], zero_col]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_like_303": {
                "variable": {
                    "value": "forward_targets",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "token_ids",
                    "type": "Name",
                    "possible_values": [
                        [
                            "token_id_dict['tokens']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sum_323": {
                "variable": {
                    "value": "num_targets",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "(forward_targets > 0).long()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_33": {
                "*size": {
                    "value": "num_words",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "zeros_138": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_like_307": {
                "variable": {
                    "value": "backward_targets",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "token_ids",
                    "type": "Name",
                    "possible_values": [
                        [
                            "token_id_dict['tokens']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "tensor_332": {
                "variable": {
                    "value": "average_loss",
                    "type": "Name",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_31": {
                "*size": {
                    "value": "embedding_dim",
                    "type": "Name",
                    "possible_values": []
                },
                "out": {
                    "value": "num_words",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "matmul_41": {
                "input": {
                    "value": "embeddings",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self._text_field_embedder(source)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.softmax_w",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/models/masked_language_model.py": {
        "torch": {
            "Dropout_69": {
                "variable": {
                    "value": "self._dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "arange_123": {
                "variable": {
                    "value": "batch_index",
                    "type": "Name",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "unsqueeze_123": {
                "variable": {
                    "value": "batch_index",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_129": {
                "variable": {
                    "value": "probs",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "target_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self._language_model_head(self._dropout(mask_embeddings))",
                            "Call"
                        ],
                        [
                            "target_logits.view(batch_size * num_masks, vocab_size)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cross_entropy_140": {
                "variable": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "target_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self._language_model_head(self._dropout(mask_embeddings))",
                            "Call"
                        ],
                        [
                            "target_logits.view(batch_size * num_masks, vocab_size)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "targets",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "target_ids['bert']['token_ids']",
                            "Subscript"
                        ],
                        [
                            "list(target_ids.values())[0]['tokens']",
                            "Subscript"
                        ],
                        [
                            "targets.view(batch_size * num_masks)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "allennlp/allennlp/models/model.py": {
        "torch": {
            "load_302": {
                "variable": {
                    "value": "model_state",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "weights_file",
                    "type": "Name",
                    "possible_values": [
                        [
                            "weights_file or os.path.join(serialization_dir, _DEFAULT_WEIGHTS)",
                            "BoolOp"
                        ]
                    ]
                },
                "map_location": {
                    "value": "util.device_mapping(cuda_device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_159": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/models/next_token_lm.py": {
        "torch": {
            "Dropout_70": {
                "variable": {
                    "value": "self._dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "softmax_96": {
                "variable": {
                    "value": "probs",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "target_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self._language_model_head(self._dropout(final_embeddings))",
                            "Call"
                        ],
                        [
                            "target_logits.view(batch_size, vocab_size)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cross_entropy_109": {
                "variable": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "target_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self._language_model_head(self._dropout(final_embeddings))",
                            "Call"
                        ],
                        [
                            "target_logits.view(batch_size, vocab_size)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "targets",
                    "type": "Name",
                    "possible_values": [
                        [
                            "util.get_token_ids_from_text_field_tensors(target_ids).view(batch_size)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "allennlp/allennlp/models/semantic_role_labeler.py": {
        "torch": {
            "Dropout_96": {
                "variable": {
                    "value": "self.embedding_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "embedding_dropout",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "cat_157": {
                "variable": {
                    "value": "embedded_text_with_verb_indicator",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[embedded_text_input, embedded_verb_indicator]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_166": {
                "variable": {
                    "value": "class_probabilities",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "reshaped_log_probs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "logits.view(-1, self.num_classes)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_283": {
                "variable": {
                    "value": "transition_matrix",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "[num_labels, num_labels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_307": {
                "variable": {
                    "value": "start_transitions",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "len(all_labels)",
                            "Call"
                        ],
                        [
                            "len(all_labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_94": {
                "in_features": {
                    "value": "self.encoder.get_output_dim()",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/models/simple_tagger.py": {
        "torch": {
            "softmax_150": {
                "variable": {
                    "value": "class_probabilities",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "reshaped_log_probs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "logits.view(-1, self.num_classes)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_73": {
                "in_features": {
                    "value": "self.encoder.get_output_dim()",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/models/srl_bert.py": {
        "torch": {
            "Linear_67": {
                "variable": {
                    "value": "self.tag_projection_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.bert_model.config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_71": {
                "variable": {
                    "value": "self.embedding_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "embedding_dropout",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "softmax_127": {
                "variable": {
                    "value": "class_probabilities",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "reshaped_log_probs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "logits.view(-1, self.num_classes)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_266": {
                "variable": {
                    "value": "transition_matrix",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "[num_labels, num_labels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_290": {
                "variable": {
                    "value": "start_transitions",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "len(all_labels)",
                            "Call"
                        ],
                        [
                            "len(all_labels)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "allennlp/allennlp/modules/attention/additive_attention.py": {
        "torch": {
            "Parameter_37": {
                "variable": {
                    "value": "self._w_matrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(vector_dim, vector_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_38": {
                "variable": {
                    "value": "self._u_matrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(matrix_dim, vector_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_39": {
                "variable": {
                    "value": "self._v_vector",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(vector_dim, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_54": {
                "variable": {
                    "value": "intermediate",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "intermediate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "vector.matmul(self._w_matrix).unsqueeze(1) + matrix.matmul(self._u_matrix)",
                            "BinOp"
                        ],
                        [
                            "torch.tanh(intermediate)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "allennlp/allennlp/modules/attention/attention.py": {
        "torch": {}
    },
    "allennlp/allennlp/modules/attention/bilinear_attention.py": {
        "torch": {
            "Parameter_42": {
                "variable": {
                    "value": "self._weight_matrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(vector_dim, matrix_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_43": {
                "variable": {
                    "value": "self._bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/modules/attention/cosine_attention.py": {
        "torch": {
            "bmm_18": {
                "input": {
                    "value": "a_norm.unsqueeze(dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "b_norm.transpose(-1, -2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_18": {
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/modules/attention/dot_product_attention.py": {
        "torch": {}
    },
    "allennlp/allennlp/modules/attention/legacy_attention.py": {
        "torch": {}
    },
    "allennlp/allennlp/modules/attention/linear_attention.py": {
        "torch": {
            "Parameter_58": {
                "variable": {
                    "value": "self._weight_vector",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(combined_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_59": {
                "variable": {
                    "value": "self._bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/modules/augmented_lstm.py": {
        "torch": {
            "pad_packed_sequence_143": {
                "variable": {
                    "value": "(sequence_tensor, batch_lengths)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_257": {
                "variable": {
                    "value": "output_accumulator",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "output_accumulator",
                    "type": "Name",
                    "possible_values": [
                        [
                            "sequence_tensor.new_zeros(batch_size, total_timesteps, self.hidden_size)",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(output_accumulator, batch_lengths, batch_first=True)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "batch_lengths",
                    "type": "Name",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_83": {
                "variable": {
                    "value": "self.input_linearity",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "Name",
                    "possible_values": []
                },
                "out_features": {
                    "value": "6 * hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_input_projection_bias",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Linear_86": {
                "variable": {
                    "value": "self.state_linearity",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Name",
                    "possible_values": []
                },
                "out_features": {
                    "value": "5 * hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_90": {
                "variable": {
                    "value": "self.input_linearity",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "Name",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4 * hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_input_projection_bias",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Linear_93": {
                "variable": {
                    "value": "self.state_linearity",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Name",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4 * hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_216": {
                "variable": {
                    "value": "input_gate",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "projected_input[:, 0 * self.hidden_size:1 * self.hidden_size] + projected_state[:, 0 * self.hidden_size:1 * self.hidden_size]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_220": {
                "variable": {
                    "value": "forget_gate",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "projected_input[:, 1 * self.hidden_size:2 * self.hidden_size] + projected_state[:, 1 * self.hidden_size:2 * self.hidden_size]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_224": {
                "variable": {
                    "value": "memory_init",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "projected_input[:, 2 * self.hidden_size:3 * self.hidden_size] + projected_state[:, 2 * self.hidden_size:3 * self.hidden_size]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_228": {
                "variable": {
                    "value": "output_gate",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "projected_input[:, 3 * self.hidden_size:4 * self.hidden_size] + projected_state[:, 3 * self.hidden_size:4 * self.hidden_size]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_236": {
                "variable": {
                    "value": "highway_gate",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "projected_input[:, 4 * self.hidden_size:5 * self.hidden_size] + projected_state[:, 4 * self.hidden_size:5 * self.hidden_size]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_233": {
                "input": {
                    "value": "memory",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input_gate * memory_init + forget_gate * previous_memory",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "allennlp/allennlp/modules/bimpm_matching.py": {
        "torch": {
            "cosine_similarity_47": {
                "variable": {
                    "value": "similarity_single",
                    "type": "Name",
                    "possible_values": []
                },
                "x1": {
                    "value": "vector1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "weight * vector1.unsqueeze(2)",
                            "BinOp"
                        ],
                        [
                            "weight * vector1.unsqueeze(1).expand(-1, num_perspectives, -1, -1)",
                            "BinOp"
                        ]
                    ]
                },
                "x2": {
                    "value": "vector2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "weight * vector2.unsqueeze(2)",
                            "BinOp"
                        ],
                        [
                            "weight * vector2.unsqueeze(1).expand(-1, num_perspectives, -1, -1)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_47": {
                "variable": {
                    "value": "similarity_single",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cosine_similarity_56": {
                "variable": {
                    "value": "similarity_multi",
                    "type": "Name",
                    "possible_values": []
                },
                "x1": {
                    "value": "vector1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "weight * vector1.unsqueeze(2)",
                            "BinOp"
                        ],
                        [
                            "weight * vector1.unsqueeze(1).expand(-1, num_perspectives, -1, -1)",
                            "BinOp"
                        ]
                    ]
                },
                "x2": {
                    "value": "vector2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "weight * vector2.unsqueeze(2)",
                            "BinOp"
                        ],
                        [
                            "weight * vector2.unsqueeze(1).expand(-1, num_perspectives, -1, -1)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_101": {
                "variable": {
                    "value": "mul_result",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "vector1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "weight * vector1.unsqueeze(2)",
                            "BinOp"
                        ],
                        [
                            "weight * vector1.unsqueeze(1).expand(-1, num_perspectives, -1, -1)",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "vector2.transpose(2, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cosine_similarity_272": {
                "variable": {
                    "value": "cosine_sim",
                    "type": "Name",
                    "possible_values": []
                },
                "x1": {
                    "value": "context_1.unsqueeze(-2)",
                    "type": "Call",
                    "possible_values": []
                },
                "x2": {
                    "value": "context_2.unsqueeze(-3)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_171": {
                "variable": {
                    "value": "param",
                    "type": "Name",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(num_perspectives, hidden_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_171": {
                "*size": {
                    "value": "num_perspectives",
                    "type": "Name",
                    "possible_values": [
                        [
                            "weight.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "hidden_dim",
                    "type": "Name",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/modules/conditional_random_field.py": {
        "torch": {
            "Parameter_198": {
                "variable": {
                    "value": "self.transitions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(num_tags, num_tags)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_210": {
                "variable": {
                    "value": "self._constraint_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "constraint_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.Tensor(num_tags + 2, num_tags + 2).fill_(1.0)",
                            "Call"
                        ],
                        [
                            "torch.Tensor(num_tags + 2, num_tags + 2).fill_(0.0)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Tensor_206": {
                "variable": {
                    "value": "constraint_mask",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Parameter_215": {
                "variable": {
                    "value": "self.start_transitions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(num_tags)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_216": {
                "variable": {
                    "value": "self.end_transitions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(num_tags)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_339": {
                "variable": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "*tags.size()",
                    "type": "Starred",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_344": {
                "input": {
                    "value": "log_numerator - log_denominator",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_361": {
                "variable": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "*logits.shape[:2]",
                    "type": "Starred",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "logits.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "index_select_414": {
                "variable": {
                    "value": "masked_prediction",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "prediction",
                    "type": "Name",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "mask_indices",
                    "type": "Name",
                    "possible_values": [
                        [
                            "prediction_mask.nonzero().squeeze()",
                            "Call"
                        ]
                    ]
                }
            },
            "Tensor_198": {},
            "Tensor_215": {},
            "Tensor_216": {}
        }
    },
    "allennlp/allennlp/modules/elmo.py": {
        "torch": {
            "Dropout_127": {
                "variable": {
                    "value": "self._dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "from_numpy_313": {
                "variable": {
                    "value": "self._beginning_of_sentence_characters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "numpy.array(ELMoCharacterMapper.beginning_of_sentence_characters) + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_316": {
                "variable": {
                    "value": "self._end_of_sentence_characters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "numpy.array(ELMoCharacterMapper.end_of_sentence_characters) + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "embedding_355": {
                "variable": {
                    "value": "character_embedding",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "character_ids_with_bos_eos.view(-1, max_chars_per_token)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "self._char_embedding_weights",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_370": {
                "variable": {
                    "value": "character_embedding",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "character_embedding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.nn.functional.embedding(character_ids_with_bos_eos.view(-1, max_chars_per_token), self._char_embedding_weights)",
                            "Call"
                        ],
                        [
                            "torch.transpose(character_embedding, 1, 2)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_381": {
                "variable": {
                    "value": "token_embedding",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "convs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Parameter_413": {
                "variable": {
                    "value": "self._char_embedding_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(weights)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "self.requires_grad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_489": {
                "variable": {
                    "value": "self._projection",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_filters",
                    "type": "Name",
                    "possible_values": [
                        [
                            "sum((f[1] for f in filters))",
                            "Call"
                        ],
                        [
                            "sum((f[1] for f in filters))",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.output_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_686": {
                "variable": {
                    "value": "full_embedding",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_embeddings",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_376": {
                "variable": {
                    "value": "(convolved, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "convolved",
                    "type": "Name",
                    "possible_values": [
                        [
                            "conv(character_embedding)",
                            "Call"
                        ],
                        [
                            "activation(convolved)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Conv1d_424": {
                "variable": {
                    "value": "conv",
                    "type": "Name",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "char_embed_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cnn_options['embedding']['dim']",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "width",
                    "type": "Name",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "chunk_638": {
                "input": {
                    "value": "lstm_outputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self._elmo_lstm(type_representation, mask)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "lstm_outputs.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_635": {
                "tensors": {
                    "value": "[type_representation, type_representation]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/modules/elmo_lstm.py": {
        "torch": {
            "pad_packed_sequence_213": {
                "variable": {
                    "value": "(inputs, batch_lengths)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_144": {
                "variable": {
                    "value": "stacked_sequence_output",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[stacked_sequence_output, zeros]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_166": {
                "variable": {
                    "value": "stacked_sequence_output",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[stacked_sequence_output, zeros]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_262": {
                "tensors": {
                    "value": "sequence_outputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cat_268": {
                "tensors": {
                    "value": "final_hidden_states",
                    "type": "Name",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_269": {
                "tensors": {
                    "value": "final_memory_states",
                    "type": "Name",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_251": {
                "tensors": {
                    "value": "[forward_output_sequence, backward_output_sequence]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_151": {
                "tensors": {
                    "value": "[state, zeros]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_257": {
                "tensors": {
                    "value": "[forward_state[0], backward_state[0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_258": {
                "tensors": {
                    "value": "[forward_state[1], backward_state[1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/modules/encoder_base.py": {
        "torch": {
            "sum_97": {
                "variable": {
                    "value": "num_valid",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "mask[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_108": {
                "variable": {
                    "value": "packed_sequence_input",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "sorted_inputs[:num_valid, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "lengths": {
                    "value": "sorted_sequence_lengths[:num_valid].data.tolist()",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_198": {
                "tensors": {
                    "value": "[state, zeros]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/modules/feedforward.py": {
        "torch": {
            "ModuleList_72": {
                "variable": {
                    "value": "self._linear_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "linear_layers",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "ModuleList_74": {
                "variable": {
                    "value": "self._dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "dropout_layers",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[torch.nn.Dropout(p=value) for value in dropout]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "Dropout_73": {
                "p": {
                    "value": "value",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Linear_71": {
                "in_features": {
                    "value": "layer_input_dim",
                    "type": "Name",
                    "possible_values": []
                },
                "out_features": {
                    "value": "layer_output_dim",
                    "type": "Name",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/modules/gated_sum.py": {
        "torch": {
            "Linear_25": {
                "variable": {
                    "value": "self._gate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sigmoid_21": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_39": {
                "tensors": {
                    "value": "[input_a, input_b]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/modules/highway.py": {
        "torch": {
            "ModuleList_41": {
                "variable": {
                    "value": "self._layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[torch.nn.Linear(input_dim, input_dim * 2) for _ in range(num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "sigmoid_62": {
                "variable": {
                    "value": "gate",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "gate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.sigmoid(gate)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_42": {
                "in_features": {
                    "value": "input_dim",
                    "type": "Name",
                    "possible_values": []
                },
                "out_features": {
                    "value": "input_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/modules/input_variational_dropout.py": {
        "torch": {
            "dropout_31": {
                "variable": {
                    "value": "dropout_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "ones",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input_tensor.data.new_ones(input_tensor.shape[0], input_tensor.shape[-1])",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.p",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/modules/language_model_heads/bert.py": {
        "torch": {}
    },
    "allennlp/allennlp/modules/language_model_heads/gpt2.py": {
        "torch": {}
    },
    "allennlp/allennlp/modules/language_model_heads/language_model_head.py": {
        "torch": {}
    },
    "allennlp/allennlp/modules/layer_norm.py": {
        "torch": {
            "Parameter_30": {
                "variable": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(dimension)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_31": {
                "variable": {
                    "value": "self.beta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(dimension)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_30": {
                "*size": {
                    "value": "dimension",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "zeros_31": {
                "*size": {
                    "value": "dimension",
                    "type": "Name",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/modules/lstm_cell_with_projection.py": {
        "torch": {
            "Linear_79": {
                "variable": {
                    "value": "self.input_linearity",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "Name",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4 * cell_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_80": {
                "variable": {
                    "value": "self.state_linearity",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Name",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4 * cell_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_83": {
                "variable": {
                    "value": "self.state_projection",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "cell_size",
                    "type": "Name",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Name",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_200": {
                "variable": {
                    "value": "input_gate",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "projected_input[:, 0 * self.cell_size:1 * self.cell_size] + projected_state[:, 0 * self.cell_size:1 * self.cell_size]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_204": {
                "variable": {
                    "value": "forget_gate",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "projected_input[:, 1 * self.cell_size:2 * self.cell_size] + projected_state[:, 1 * self.cell_size:2 * self.cell_size]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_208": {
                "variable": {
                    "value": "memory_init",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "projected_input[:, 2 * self.cell_size:3 * self.cell_size] + projected_state[:, 2 * self.cell_size:3 * self.cell_size]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_212": {
                "variable": {
                    "value": "output_gate",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "projected_input[:, 3 * self.cell_size:4 * self.cell_size] + projected_state[:, 3 * self.cell_size:4 * self.cell_size]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clamp_224": {
                "variable": {
                    "value": "memory",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "memory",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input_gate * memory_init + forget_gate * previous_memory",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(memory, -self.memory_cell_clip_value, self.memory_cell_clip_value)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "-self.memory_cell_clip_value",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "self.memory_cell_clip_value",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clamp_235": {
                "variable": {
                    "value": "timestep_output",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "timestep_output",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.state_projection(pre_projection_timestep_output)",
                            "Call"
                        ],
                        [
                            "torch.clamp(timestep_output, -self.state_projection_clip_value, self.state_projection_clip_value)",
                            "Call"
                        ],
                        [
                            "timestep_output * dropout_mask[0:current_length_index + 1]",
                            "BinOp"
                        ]
                    ]
                },
                "min": {
                    "value": "-self.state_projection_clip_value",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "self.state_projection_clip_value",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tanh_229": {
                "input": {
                    "value": "memory",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input_gate * memory_init + forget_gate * previous_memory",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(memory, -self.memory_cell_clip_value, self.memory_cell_clip_value)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "allennlp/allennlp/modules/masked_layer_norm.py": {
        "torch": {
            "Parameter_13": {
                "variable": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(1, 1, size) * gamma0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_14": {
                "variable": {
                    "value": "self.beta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, 1, size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_24": {
                "variable": {
                    "value": "std",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "(masked_centered * masked_centered).sum() / num_elements + self.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_14": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "size",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "ones_13": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "size",
                    "type": "Name",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/modules/matrix_attention/bilinear_matrix_attention.py": {
        "torch": {
            "Parameter_59": {
                "variable": {
                    "value": "self._bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_81": {
                "variable": {
                    "value": "intermediate",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "matrix_1.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "weight",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self._weight_matrix",
                            "Attribute"
                        ],
                        [
                            "weight.unsqueeze(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_82": {
                "variable": {
                    "value": "final",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "intermediate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.matmul(matrix_1.unsqueeze(1), weight)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "matrix_2.unsqueeze(1).transpose(2, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_53": {
                "variable": {
                    "value": "self._weight_matrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(matrix_1_dim, matrix_2_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_55": {
                "variable": {
                    "value": "self._weight_matrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(label_dim, matrix_1_dim, matrix_2_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_75": {
                "variable": {
                    "value": "matrix_1",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[matrix_1, bias1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_76": {
                "variable": {
                    "value": "matrix_2",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[matrix_2, bias2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/modules/matrix_attention/cosine_matrix_attention.py": {
        "torch": {
            "bmm_18": {
                "input": {
                    "value": "a_norm",
                    "type": "Name",
                    "possible_values": [
                        [
                            "matrix_1 / (matrix_1.norm(p=2, dim=-1, keepdim=True) + 1e-13)",
                            "BinOp"
                        ]
                    ]
                },
                "mat2": {
                    "value": "b_norm.transpose(-1, -2)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/modules/matrix_attention/dot_product_matrix_attention.py": {
        "torch": {}
    },
    "allennlp/allennlp/modules/matrix_attention/legacy_matrix_attention.py": {
        "torch": {}
    },
    "allennlp/allennlp/modules/matrix_attention/linear_matrix_attention.py": {
        "torch": {
            "Parameter_58": {
                "variable": {
                    "value": "self._weight_vector",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(combined_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_59": {
                "variable": {
                    "value": "self._bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/modules/matrix_attention/matrix_attention.py": {
        "torch": {}
    },
    "allennlp/allennlp/modules/maxout.py": {
        "torch": {
            "ModuleList_74": {
                "variable": {
                    "value": "self._linear_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "linear_layers",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "ModuleList_76": {
                "variable": {
                    "value": "self._dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "dropout_layers",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[torch.nn.Dropout(p=value) for value in dropout]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "Dropout_75": {
                "p": {
                    "value": "value",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Linear_72": {
                "in_features": {
                    "value": "layer_input_dim",
                    "type": "Name",
                    "possible_values": []
                },
                "out_features": {
                    "value": "layer_output_dim * pool_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_99": {
                "input": {
                    "value": "affine_output.view(*shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/modules/pruner.py": {
        "torch": {
            "where_115": {
                "variable": {
                    "value": "top_indices",
                    "type": "Name",
                    "possible_values": []
                },
                "condition": {
                    "value": "top_indices_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "util.get_mask_from_sequence_lengths(num_items_to_keep, max_items_to_keep)",
                            "Call"
                        ],
                        [
                            "top_indices_mask.byte()",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "top_indices",
                    "type": "Name",
                    "possible_values": [
                        [
                            "top_indices.squeeze(-1)",
                            "Call"
                        ],
                        [
                            "torch.where(top_indices_mask, top_indices, fill_value)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "fill_value",
                    "type": "Name",
                    "possible_values": [
                        [
                            "fill_value.unsqueeze(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sort_120": {
                "variable": {
                    "value": "(top_indices, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "top_indices",
                    "type": "Name",
                    "possible_values": [
                        [
                            "top_indices.squeeze(-1)",
                            "Call"
                        ],
                        [
                            "torch.where(top_indices_mask, top_indices, fill_value)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_76": {
                "*size": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "mask.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/modules/residual_with_layer_dropout.py": {
        "torch": {
            "rand_61": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/modules/sampled_softmax_loss.py": {
        "torch": {
            "cat_188": {
                "variable": {
                    "value": "all_ids",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[long_targets, sampled_ids]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_232": {
                "variable": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[true_logits.unsqueeze(1), masked_sampled_logits]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_softmax_235": {
                "variable": {
                    "value": "log_softmax",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat([true_logits.unsqueeze(1), masked_sampled_logits], dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_softmax_255": {
                "variable": {
                    "value": "log_softmax",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.matmul(embeddings, w.t()) + b",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "from_numpy_284": {
                "variable": {
                    "value": "sampled_ids",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np_sampled_ids",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Embedding_99": {
                "variable": {
                    "value": "self.softmax_w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_words",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.softmax_w.weight.size(0)",
                            "Call"
                        ],
                        [
                            "self.softmax_w.size(0)",
                            "Call"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "embedding_dim",
                    "type": "Name",
                    "possible_values": []
                },
                "sparse": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Embedding_103": {
                "variable": {
                    "value": "self.softmax_b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_words",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.softmax_w.weight.size(0)",
                            "Call"
                        ],
                        [
                            "self.softmax_w.size(0)",
                            "Call"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "sparse": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_108": {
                "variable": {
                    "value": "self.softmax_w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(num_words, embedding_dim) / np.sqrt(embedding_dim)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_111": {
                "variable": {
                    "value": "self.softmax_b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(num_words)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "embedding_195": {
                "variable": {
                    "value": "all_w",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "all_ids",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat([long_targets, sampled_ids], dim=0)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.softmax_w",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_198": {
                "variable": {
                    "value": "all_b",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "all_ids",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat([long_targets, sampled_ids], dim=0)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.softmax_b.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_198": {
                "variable": {
                    "value": "all_b",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "nll_loss_262": {
                "input": {
                    "value": "log_softmax",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.nn.functional.log_softmax(logits, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.log_softmax(torch.matmul(embeddings, w.t()) + b, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "targets_.long()",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_153": {
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_213": {
                "input": {
                    "value": "target_expected_count + 1e-07",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_219": {
                "input": {
                    "value": "sampled_expected_count + 1e-07",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_289": {
                "input": {
                    "value": "(targets.float() + 2.0) / (targets.float() + 1.0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_296": {
                "input": {
                    "value": "(sampled_ids.float() + 2.0) / (sampled_ids.float() + 1.0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_111": {
                "*size": {
                    "value": "num_words",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.softmax_w.weight.size(0)",
                            "Call"
                        ],
                        [
                            "self.softmax_w.size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_217": {
                "input": {
                    "value": "embeddings",
                    "type": "Name",
                    "possible_values": []
                },
                "other": {
                    "value": "sampled_w.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_256": {
                "input": {
                    "value": "embeddings",
                    "type": "Name",
                    "possible_values": []
                },
                "other": {
                    "value": "w.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_293": {
                "input": {
                    "value": "num_tries * torch.log1p(-target_probs)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_300": {
                "input": {
                    "value": "num_tries * torch.log1p(-sampled_probs)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_109": {
                "*size": {
                    "value": "num_words",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.softmax_w.weight.size(0)",
                            "Call"
                        ],
                        [
                            "self.softmax_w.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "embedding_dim",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "log1p_293": {
                "input": {
                    "value": "-target_probs",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log1p_300": {
                "input": {
                    "value": "-sampled_probs",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/modules/scalar_mix.py": {
        "torch": {
            "ParameterList_37": {
                "variable": {
                    "value": "self.scalar_parameters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "parameters": {
                    "value": "[Parameter(torch.FloatTensor([initial_scalar_parameters[i]]), requires_grad=trainable) for i in range(mixture_size)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Parameter_46": {
                "variable": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor([1.0])",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "trainable",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "softmax_77": {
                "variable": {
                    "value": "normed_weights",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat([parameter for parameter in self.scalar_parameters])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "split_80": {
                "variable": {
                    "value": "normed_weights",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "normed_weights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.nn.functional.softmax(torch.cat([parameter for parameter in self.scalar_parameters]), dim=0)",
                            "Call"
                        ],
                        [
                            "torch.split(normed_weights, split_size_or_sections=1)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_78": {
                "tensors": {
                    "value": "[parameter for parameter in self.scalar_parameters]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Parameter_39": {
                "data": {
                    "value": "torch.FloatTensor([initial_scalar_parameters[i]])",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "trainable",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "sum_70": {
                "input": {
                    "value": "tensor_masked",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tensor * broadcast_mask",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_72": {
                "input": {
                    "value": "((tensor_masked - mean) * broadcast_mask) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_75": {
                "input": {
                    "value": "variance + 1e-12",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_92": {
                "input": {
                    "value": "mask_float",
                    "type": "Name",
                    "possible_values": [
                        [
                            "mask.float()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "allennlp/allennlp/modules/seq2seq_decoders/auto_regressive_seq_decoder.py": {
        "torch": {
            "Linear_107": {
                "variable": {
                    "value": "self._output_projection_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self._decoder_net.get_output_dim()",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "target_vocab_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self._vocab.get_vocab_size(self._target_namespace)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_softmax_417": {
                "variable": {
                    "value": "class_log_probabilities",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "output_projections",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self._output_projection_layer(decoder_output)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Tensor_203": {
                "variable": {
                    "value": "steps_embeddings",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "cat_262": {
                "variable": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "step_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_308": {
                "variable": {
                    "value": "previous_steps_predictions",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[previous_steps_predictions, last_predictions_embeddings]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_240": {
                "variable": {
                    "value": "(_, predicted_classes)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "output_projections",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self._output_projection_layer(decoder_output)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_257": {
                "variable": {
                    "value": "steps_embeddings",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[steps_embeddings, last_predictions_embeddings]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Tensor_224": {
                "variable": {
                    "value": "state[previous_steps_predictions]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "rand_210": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/modules/seq2seq_decoders/decoder_net.py": {
        "torch": {}
    },
    "allennlp/allennlp/modules/seq2seq_decoders/lstm_cell_decoder_net.py": {
        "torch": {
            "LSTMCell_59": {
                "variable": {
                    "value": "self._decoder_cell",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "decoder_input_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.target_embedding_dim",
                            "Attribute"
                        ],
                        [
                            "decoder_input_dim + decoding_dim",
                            "BinOp"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "self.decoding_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_130": {
                "variable": {
                    "value": "decoder_input",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(attended_input, last_predictions_embedding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/modules/seq2seq_decoders/seq_decoder.py": {
        "torch": {}
    },
    "allennlp/allennlp/modules/seq2seq_decoders/stacked_self_attention_decoder_net.py": {
        "torch": {
            "Dropout_87": {
                "variable": {
                    "value": "self._dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout_prob",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "ModuleList_142": {
                "modules": {
                    "value": "[copy.deepcopy(module) for _ in range(num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/modules/seq2seq_encoders/__init__.py": {
        "torch": {}
    },
    "allennlp/allennlp/modules/seq2seq_encoders/bidirectional_language_model_transformer.py": {
        "torch": {
            "softmax_36": {
                "variable": {
                    "value": "p_attn",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.matmul(query, key.transpose(-2, -1)) / math.sqrt(d_k)",
                            "BinOp"
                        ],
                        [
                            "scores.masked_fill(mask == 0, -1000000000.0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tril_44": {
                "variable": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.ones(size, size, device=device, dtype=torch.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_44": {
                "variable": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_57": {
                "variable": {
                    "value": "positional_encoding",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "max_len",
                    "type": "Name",
                    "possible_values": []
                },
                "out": {
                    "value": "input_dim",
                    "type": "Name",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "arange_58": {
                "variable": {
                    "value": "position",
                    "type": "Name",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "max_len",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "unsqueeze_58": {
                "variable": {
                    "value": "position",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_59": {
                "variable": {
                    "value": "div_term",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.arange(0, input_dim, 2).float() * -(math.log(10000.0) / input_dim)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_62": {
                "variable": {
                    "value": "positional_encoding[:, 0::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "position * div_term",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_63": {
                "variable": {
                    "value": "positional_encoding[:, 1::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "position * div_term",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_77": {
                "variable": {
                    "value": "self.w_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dim",
                    "type": "Name",
                    "possible_values": []
                },
                "out_features": {
                    "value": "ff_dim",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Linear_78": {
                "variable": {
                    "value": "self.w_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "ff_dim",
                    "type": "Name",
                    "possible_values": []
                },
                "out_features": {
                    "value": "input_dim",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Dropout_79": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Dropout_120": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Dropout_161": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "matmul_33": {
                "input": {
                    "value": "query",
                    "type": "Name",
                    "possible_values": []
                },
                "other": {
                    "value": "key.transpose(-2, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_39": {
                "input": {
                    "value": "p_attn",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.softmax(scores, dim=-1)",
                            "Call"
                        ],
                        [
                            "dropout(p_attn)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "value",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Dropout_260": {
                "variable": {
                    "value": "self._dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "input_dropout",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "cat_304": {
                "tensors": {
                    "value": "[forward_output, backward_output]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_160": {
                "in_features": {
                    "value": "input_dim",
                    "type": "Name",
                    "possible_values": []
                },
                "out_features": {
                    "value": "input_dim",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "ones_45": {
                "*size": {
                    "value": "size",
                    "type": "Name",
                    "possible_values": []
                },
                "out": {
                    "value": "size",
                    "type": "Name",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "mask.device",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_60": {
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "input_dim",
                    "type": "Name",
                    "possible_values": []
                },
                "step": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_83": {
                "input": {
                    "value": "self.w_1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_301": {
                "tensors": {
                    "value": "[forward, backward]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/modules/seq2seq_encoders/compose_encoder.py": {
        "torch": {}
    },
    "allennlp/allennlp/modules/seq2seq_encoders/feedforward_encoder.py": {
        "torch": {}
    },
    "allennlp/allennlp/modules/seq2seq_encoders/gated_cnn_encoder.py": {
        "torch": {
            "ModuleList_22": {
                "variable": {
                    "value": "self._convolutions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_168": {
                "variable": {
                    "value": "self._forward_residual_blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_169": {
                "variable": {
                    "value": "self._backward_residual_blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "transpose_186": {
                "variable": {
                    "value": "transposed_embeddings",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "token_embeddings",
                    "type": "Name",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "glu_105": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "conv_out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "convolution(out)",
                            "Call"
                        ],
                        [
                            "conv_out.narrow(2, 0, timesteps)",
                            "Call"
                        ],
                        [
                            "conv_out.narrow(2, dims_to_remove, timesteps)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv1d_30": {
                "variable": {
                    "value": "conv",
                    "type": "Name",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "last_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input_dim",
                            "Name"
                        ],
                        [
                            "layer[1]",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "layer[1] * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "layer[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "layer[0] - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "weight_norm_70": {
                "variable": {
                    "value": "conv",
                    "type": "Name",
                    "possible_values": []
                },
                "module": {
                    "value": "conv",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.nn.Conv1d(last_dim, layer[1] * 2, layer[0], stride=1, padding=layer[0] - 1, bias=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.Conv1d(last_dim, layer[1] * 2, layer[0], stride=1, padding=layer[2], dilation=layer[2], bias=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.weight_norm(conv, name='weight', dim=0)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "weight",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dropout_90": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "torch.nn.functional.dropout(out, self.dropout, self.training)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.glu(conv_out, dim=1)",
                            "Call"
                        ],
                        [
                            "transposed_embeddings",
                            "Name"
                        ],
                        [
                            "block(out.masked_fill(mask_for_fill, 0.0))",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_220": {
                "tensors": {
                    "value": "outputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_220": {
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim0": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv1d_41": {
                "variable": {
                    "value": "conv",
                    "type": "Name",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "last_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input_dim",
                            "Name"
                        ],
                        [
                            "layer[1]",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "layer[1] * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "layer[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "layer[2]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "layers",
                            "Name"
                        ]
                    ]
                },
                "dilation": {
                    "value": "layer[2]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "layers",
                            "Name"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_215": {
                "tensors": {
                    "value": "[fwd, bwd]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_215": {
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim0": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/modules/seq2seq_encoders/intra_sentence_attention.py": {
        "torch": {
            "Linear_69": {
                "variable": {
                    "value": "self._projection",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dim",
                    "type": "Name",
                    "possible_values": []
                },
                "out_features": {
                    "value": "projection_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input_dim",
                            "Name"
                        ]
                    ]
                }
            },
            "Linear_94": {
                "variable": {
                    "value": "self._output_projection",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "combined_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "util.get_combined_dim(combination, [input_dim, projection_dim])",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "Name",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/modules/seq2seq_encoders/multi_head_self_attention.py": {
        "torch": {
            "Linear_70": {
                "variable": {
                    "value": "self._combined_projection",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dim",
                    "type": "Name",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2 * attention_dim + values_dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_73": {
                "variable": {
                    "value": "self._output_projection",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "values_dim",
                    "type": "Name",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self._output_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_74": {
                "variable": {
                    "value": "self._attention_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "attention_dropout_prob",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "cat_117": {
                "variable": {
                    "value": "values",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "values",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat(values, -1).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "bmm_146": {
                "variable": {
                    "value": "scaled_similarities",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "queries_per_head / self._scale",
                    "type": "BinOp",
                    "possible_values": []
                },
                "mat2": {
                    "value": "keys_per_head.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/modules/seq2seq_encoders/pass_through_encoder.py": {
        "torch": {}
    },
    "allennlp/allennlp/modules/seq2seq_encoders/pytorch_seq2seq_wrapper.py": {
        "torch": {
            "pad_packed_sequence_93": {
                "variable": {
                    "value": "(unpacked_sequence_tensor, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "packed_sequence_output",
                    "type": "Name",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_109": {
                "variable": {
                    "value": "unpacked_sequence_tensor",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[unpacked_sequence_tensor, zeros]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_135": {
                "variable": {
                    "value": "unpacked_sequence_tensor",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[unpacked_sequence_tensor, zeros]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_119": {
                "tensors": {
                    "value": "[state, zeros]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/modules/seq2seq_encoders/qanet_encoder.py": {
        "torch": {
            "ModuleList_81": {
                "variable": {
                    "value": "self._encoder_blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_190": {
                "variable": {
                    "value": "self._conv_norm_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[LayerNorm(hidden_dim) for _ in range(num_convs)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_193": {
                "variable": {
                    "value": "self._conv_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LayerNorm_211": {
                "variable": {
                    "value": "self.attention_norm_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "hidden_dim",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "LayerNorm_219": {
                "variable": {
                    "value": "self.feedforward_norm_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "hidden_dim",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Dropout_228": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout_prob",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Linear_77": {
                "variable": {
                    "value": "self._input_projection_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dim",
                    "type": "Name",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "ConstantPad1d_195": {
                "variable": {
                    "value": "padding",
                    "type": "Name",
                    "possible_values": []
                },
                "padding": {
                    "value": "(conv_kernel_size // 2, (conv_kernel_size - 1) // 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv1d_198": {
                "variable": {
                    "value": "depthwise_conv",
                    "type": "Name",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "hidden_dim",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "hidden_dim",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "conv_kernel_size",
                    "type": "Name",
                    "possible_values": []
                },
                "groups": {
                    "value": "hidden_dim",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Conv1d_201": {
                "variable": {
                    "value": "pointwise_conv",
                    "type": "Name",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "hidden_dim",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "hidden_dim",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LayerNorm_191": {
                "normalized_shape": {
                    "value": "hidden_dim",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Sequential_203": {
                "*args": {
                    "value": "padding",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/modules/seq2seq_encoders/stacked_self_attention.py": {
        "torch": {
            "Dropout_124": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "residual_dropout_prob",
                    "type": "Name",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/modules/seq2vec_encoders/__init__.py": {
        "torch": {}
    },
    "allennlp/allennlp/modules/seq2vec_encoders/bert_pooler.py": {
        "torch": {
            "Dropout_52": {
                "variable": {
                    "value": "self._dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Name",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/modules/seq2vec_encoders/boe_encoder.py": {
        "torch": {
            "max_53": {
                "variable": {
                    "value": "lengths",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "lengths",
                    "type": "Name",
                    "possible_values": [
                        [
                            "get_lengths_from_binary_sequence_mask(mask)",
                            "Call"
                        ],
                        [
                            "torch.max(lengths, lengths.new_ones(1))",
                            "Call"
                        ],
                        [
                            "tokens.new_full((1,), fill_value=tokens.size(1))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "allennlp/allennlp/modules/seq2vec_encoders/cnn_encoder.py": {
        "torch": {
            "transpose_100": {
                "variable": {
                    "value": "tokens",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "tokens",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tokens * mask.unsqueeze(-1).float()",
                            "BinOp"
                        ],
                        [
                            "torch.transpose(tokens, 1, 2)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_79": {
                "variable": {
                    "value": "self.projection_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "maxpool_output_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self._num_filters * len(self._ngram_filter_sizes)",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self._output_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv1d_67": {
                "in_channels": {
                    "value": "self._embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self._num_filters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "ngram_size",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "cat_118": {
                "tensors": {
                    "value": "filter_outputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/modules/seq2vec_encoders/cnn_highway_encoder.py": {
        "torch": {
            "Linear_98": {
                "variable": {
                    "value": "self._projection",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_filters",
                    "type": "Name",
                    "possible_values": [
                        [
                            "sum((num for (_, num) in filters))",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "projection_dim",
                    "type": "Name",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_142": {
                "variable": {
                    "value": "token_embedding",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "convolutions",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Conv1d_69": {
                "variable": {
                    "value": "conv",
                    "type": "Name",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "embedding_dim",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "width",
                    "type": "Name",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_137": {
                "variable": {
                    "value": "(convolved, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "convolved",
                    "type": "Name",
                    "possible_values": [
                        [
                            "char_conv_i(inputs)",
                            "Call"
                        ],
                        [
                            "self._activation(convolved)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/modules/seq2vec_encoders/pytorch_seq2vec_wrapper.py": {
        "torch": {
            "cat_94": {
                "variable": {
                    "value": "state",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[state, zeros]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/modules/similarity_functions/bilinear.py": {
        "torch": {
            "Parameter_35": {
                "variable": {
                    "value": "self._weight_matrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(tensor_1_dim, tensor_2_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_36": {
                "variable": {
                    "value": "self._bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_46": {
                "variable": {
                    "value": "intermediate",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor_1",
                    "type": "Name",
                    "possible_values": []
                },
                "other": {
                    "value": "self._weight_matrix",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/modules/similarity_functions/cosine.py": {
        "torch": {}
    },
    "allennlp/allennlp/modules/similarity_functions/dot_product.py": {
        "torch": {}
    },
    "allennlp/allennlp/modules/similarity_functions/linear.py": {
        "torch": {
            "Parameter_56": {
                "variable": {
                    "value": "self._weight_vector",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(combined_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_57": {
                "variable": {
                    "value": "self._bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_69": {
                "variable": {
                    "value": "dot_product",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "combined_tensors",
                    "type": "Name",
                    "possible_values": [
                        [
                            "util.combine_tensors(self._combination, [tensor_1, tensor_2])",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self._weight_vector",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/modules/similarity_functions/multiheaded.py": {
        "torch": {
            "Parameter_74": {
                "variable": {
                    "value": "self._tensor_1_projection",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(tensor_1_dim, tensor_1_projected_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_77": {
                "variable": {
                    "value": "self._tensor_2_projection",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(tensor_2_dim, tensor_2_projected_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_88": {
                "variable": {
                    "value": "projected_tensor_1",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor_1",
                    "type": "Name",
                    "possible_values": []
                },
                "other": {
                    "value": "self._tensor_1_projection",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_89": {
                "variable": {
                    "value": "projected_tensor_2",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor_2",
                    "type": "Name",
                    "possible_values": []
                },
                "other": {
                    "value": "self._tensor_2_projection",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/modules/similarity_functions/similarity_function.py": {
        "torch": {}
    },
    "allennlp/allennlp/modules/span_extractors/bidirectional_endpoint_span_extractor.py": {
        "torch": {
            "cat_247": {
                "variable": {
                    "value": "span_embeddings",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[forward_spans, backward_spans]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Parameter_105": {
                "variable": {
                    "value": "self._start_sentinel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn([1, 1, int(input_dim / 2)])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_106": {
                "variable": {
                    "value": "self._end_sentinel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn([1, 1, int(input_dim / 2)])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_260": {
                "tensors": {
                    "value": "[span_embeddings, span_width_embeddings]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "randn_105": {
                "*size": {
                    "value": "[1, 1, int(input_dim / 2)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "randn_106": {
                "*size": {
                    "value": "[1, 1, int(input_dim / 2)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_like_168": {
                "input": {
                    "value": "sequence_tensor[:, 0, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/modules/span_extractors/endpoint_span_extractor.py": {
        "torch": {
            "Parameter_69": {
                "variable": {
                    "value": "self._start_sentinel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn([1, 1, int(input_dim)])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_170": {
                "variable": {
                    "value": "combined_tensors",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[combined_tensors, span_width_embeddings]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "randn_69": {
                "*size": {
                    "value": "[1, 1, int(input_dim)]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/modules/span_extractors/self_attentive_span_extractor.py": {
        "torch": {
            "cat_56": {
                "variable": {
                    "value": "concat_tensor",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sequence_tensor, global_attention_logits]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_37": {
                "in_features": {
                    "value": "input_dim",
                    "type": "Name",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/modules/span_extractors/span_extractor.py": {
        "torch": {}
    },
    "allennlp/allennlp/modules/stacked_alternating_lstm.py": {
        "torch": {
            "cat_122": {
                "tensors": {
                    "value": "state_list",
                    "type": "Name",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/modules/stacked_bidirectional_lstm.py": {
        "torch": {
            "cat_151": {
                "variable": {
                    "value": "final_h",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "final_h",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(final_h, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_152": {
                "variable": {
                    "value": "final_c",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "final_c",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(final_c, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_134": {
                "variable": {
                    "value": "(forward_output, lengths)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "forward_output",
                    "type": "Name",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_137": {
                "variable": {
                    "value": "(backward_output, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "backward_output",
                    "type": "Name",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_139": {
                "variable": {
                    "value": "output_sequence",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[forward_output, backward_output]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_144": {
                "variable": {
                    "value": "output_sequence",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "output_sequence",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "torch.cat([forward_output, backward_output], -1)",
                            "Call"
                        ],
                        [
                            "self.layer_dropout(output_sequence)",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(output_sequence, lengths, batch_first=True)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "lengths",
                    "type": "Name",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/modules/text_field_embedders/basic_text_field_embedder.py": {
        "torch": {
            "cat_94": {
                "tensors": {
                    "value": "embedded_representations",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/modules/text_field_embedders/text_field_embedder.py": {
        "torch": {}
    },
    "allennlp/allennlp/modules/time_distributed.py": {
        "torch": {}
    },
    "allennlp/allennlp/modules/token_embedders/bag_of_word_counts_token_embedder.py": {
        "torch": {
            "cat_86": {
                "variable": {
                    "value": "bag_of_words_output",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "bag_of_words_vectors",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_43": {
                "variable": {
                    "value": "self._projection",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "projection_dim",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "masked_select_82": {
                "variable": {
                    "value": "document",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "document",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.masked_select(document, doc_mask.to(dtype=torch.bool))",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "doc_mask.to(dtype=torch.bool)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bincount_83": {
                "variable": {
                    "value": "vec",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "document",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.masked_select(document, doc_mask.to(dtype=torch.bool))",
                            "Call"
                        ]
                    ]
                },
                "minlength": {
                    "value": "self.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/modules/token_embedders/bert_token_embedder.py": {
        "torch": {
            "stack_200": {
                "variable": {
                    "value": "all_encoder_layers",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_encoder_layers",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.stack(all_encoder_layers)",
                            "Call"
                        ]
                    ]
                }
            },
            "pad_167": {
                "variable": {
                    "value": "split_input_ids[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "split_input_ids[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "pad": {
                    "value": "[0, padding_amount]",
                    "type": "List",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_172": {
                "variable": {
                    "value": "input_ids",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "split_input_ids",
                    "type": "Name",
                    "possible_values": [
                        [
                            "list(input_ids.split(self.max_pieces, dim=-1))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_like_189": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "input_ids",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat(split_input_ids, dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "split_204": {
                "variable": {
                    "value": "unpacked_embeddings",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "all_encoder_layers",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.stack(all_encoder_layers)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_205": {
                "variable": {
                    "value": "unpacked_embeddings",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "unpacked_embeddings",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.split(all_encoder_layers, batch_size, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat(unpacked_embeddings, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pad_182": {
                "variable": {
                    "value": "split_token_type_ids[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "split_token_type_ids[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "pad": {
                    "value": "[0, padding_amount]",
                    "type": "List",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_186": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "split_token_type_ids",
                    "type": "Name",
                    "possible_values": [
                        [
                            "list(token_type_ids.split(self.max_pieces, dim=-1))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/modules/token_embedders/elmo_token_embedder.py": {
        "torch": {
            "Linear_74": {
                "variable": {
                    "value": "self._projection",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self._elmo.get_output_dim()",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "projection_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "params.pop_int('projection_dim', None)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "allennlp/allennlp/modules/token_embedders/elmo_token_embedder_multilang.py": {
        "torch": {
            "Linear_99": {
                "variable": {
                    "value": "self._projection",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "output_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "output_dim_tmp",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "projection_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "params.pop_int('projection_dim', None)",
                            "Call"
                        ]
                    ]
                }
            },
            "eye_106": {
                "variable": {
                    "value": "aligning_matrix",
                    "type": "Name",
                    "possible_values": []
                },
                "n": {
                    "value": "output_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "output_dim_tmp",
                            "Name"
                        ]
                    ]
                }
            },
            "Linear_111": {
                "variable": {
                    "value": "aligning",
                    "type": "Name",
                    "possible_values": []
                },
                "in_features": {
                    "value": "output_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "output_dim_tmp",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "output_dim_tmp",
                            "Name"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_112": {
                "variable": {
                    "value": "aligning.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "aligning_matrix",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.eye(output_dim)",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(torch.load(aligninig_path))",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_109": {
                "f": {
                    "value": "aligninig_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cached_path(aligning_files[lang])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "allennlp/allennlp/modules/token_embedders/embedding.py": {
        "torch": {
            "embedding_151": {
                "variable": {
                    "value": "embedded",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "tokens",
                    "type": "Name",
                    "possible_values": [
                        [
                            "util.combine_initial_dims(tokens)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "self.padding_index",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.max_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "norm_type": {
                    "value": "self.norm_type",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_grad_by_freq": {
                    "value": "self.scale_grad_by_freq",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sparse": {
                    "value": "self.sparse",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_277": {
                "variable": {
                    "value": "extended_weight",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.weight.data, extra_weight.to(device)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_278": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "extended_weight",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat([self.weight.data, extra_weight.to(device)], dim=0)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "self.weight.requires_grad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_121": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "weight",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.FloatTensor(num_embeddings, embedding_dim)",
                            "Call"
                        ],
                        [
                            "_read_pretrained_embeddings_file(pretrained_file, embedding_dim, vocab, vocab_namespace)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "trainable",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Parameter_128": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "weight",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.FloatTensor(num_embeddings, embedding_dim)",
                            "Call"
                        ],
                        [
                            "_read_pretrained_embeddings_file(pretrained_file, embedding_dim, vocab, vocab_namespace)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "trainable",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Linear_134": {
                "variable": {
                    "value": "self._projection",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embedding_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.weight.data.shape[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "projection_dim",
                    "type": "Name",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/modules/token_embedders/empty_embedder.py": {
        "torch": {}
    },
    "allennlp/allennlp/modules/token_embedders/language_model_token_embedder.py": {
        "torch": {
            "cat_189": {
                "variable": {
                    "value": "duplicated_character_embeddings",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[noncontextual_token_embeddings] * self._character_embedding_duplication_count",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Dropout_120": {
                "variable": {
                    "value": "self._dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Name",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/modules/token_embedders/pass_through_token_embedder.py": {
        "torch": {}
    },
    "allennlp/allennlp/modules/token_embedders/pretrained_transformer_embedder.py": {
        "torch": {
            "cat_287": {
                "variable": {
                    "value": "embeddings",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[embeddings, torch.zeros_like(end_token_embeddings)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_297": {
                "variable": {
                    "value": "embeddings",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[start_token_embeddings, embeddings]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pad_180": {
                "variable": {
                    "value": "tensor",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.pad(tensor, [0, length_to_pad], value=0)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "[0, length_to_pad]",
                    "type": "List",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "arange_227": {
                "start": {
                    "value": "max_len",
                    "type": "Name",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "embeddings.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "arange_257": {
                "start": {
                    "value": "self._num_added_end_tokens",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "embeddings.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_like_287": {
                "input": {
                    "value": "end_token_embeddings",
                    "type": "Name",
                    "possible_values": [
                        [
                            "batched_index_select(embeddings, end_token_indices)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "allennlp/allennlp/modules/token_embedders/pretrained_transformer_mismatched_embedder.py": {
        "torch": {}
    },
    "allennlp/allennlp/modules/token_embedders/token_characters_encoder.py": {
        "torch": {
            "Dropout_28": {
                "variable": {
                    "value": "self._dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Name",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/modules/token_embedders/token_embedder.py": {
        "torch": {}
    },
    "allennlp/allennlp/nn/activations.py": {
        "torch": {
            "tanh_61": {
                "input": {
                    "value": "torch.nn.functional.softplus(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_62": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "softplus_61": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/nn/beam_search.py": {
        "torch": {
            "cat_296": {
                "variable": {
                    "value": "all_predictions",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "list(reversed(reconstructed_predictions))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "where_188": {
                "variable": {
                    "value": "cleaned_log_probabilities",
                    "type": "Name",
                    "possible_values": []
                },
                "condition": {
                    "value": "last_predictions_expanded == self._end_index",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "log_probs_after_end",
                    "type": "Name",
                    "possible_values": [
                        [
                            "start_class_log_probabilities.new_full((batch_size * self.beam_size, num_classes), float('-inf'))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "class_log_probabilities",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "isfinite_266": {
                "input": {
                    "value": "last_log_probabilities",
                    "type": "Name",
                    "possible_values": [
                        [
                            "start_top_log_probabilities",
                            "Name"
                        ],
                        [
                            "restricted_beam_log_probs",
                            "Name"
                        ]
                    ]
                }
            },
            "all_266": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/nn/initializers.py": {
        "torch": {
            "load_270": {
                "f": {
                    "value": "weights_file_path",
                    "type": "Name",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/nn/regularizers/regularizer.py": {
        "torch": {}
    },
    "allennlp/allennlp/nn/regularizers/regularizer_applicator.py": {
        "torch": {}
    },
    "allennlp/allennlp/nn/regularizers/regularizers.py": {
        "torch": {
            "sum_14": {
                "input": {
                    "value": "torch.abs(parameter)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_25": {
                "input": {
                    "value": "torch.pow(parameter, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_14": {
                "input": {
                    "value": "parameter",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "pow_25": {
                "input": {
                    "value": "parameter",
                    "type": "Name",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/nn/util.py": {
        "torch": {
            "arange_181": {
                "variable": {
                    "value": "index_range",
                    "type": "Name",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "len(sequence_lengths)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "sequence_lengths.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_405": {
                "variable": {
                    "value": "value_sum",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "replaced_vector",
                    "type": "Name",
                    "possible_values": [
                        [
                            "vector.masked_fill(one_minus_mask, min_val)",
                            "Call"
                        ],
                        [
                            "vector.masked_fill(one_minus_mask, 0.0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "keepdim",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "sum_406": {
                "variable": {
                    "value": "value_count",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "mask.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "keepdim",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "flip_432": {
                "variable": {
                    "value": "flipped_padded_sequence",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "padded_sequence",
                    "type": "Name",
                    "possible_values": []
                },
                "dims": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "topk_599": {
                "variable": {
                    "value": "(viterbi_scores, best_paths)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "path_scores_v",
                    "type": "Name",
                    "possible_values": [
                        [
                            "path_scores[-1].view(-1)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "max_k",
                    "type": "Name",
                    "possible_values": [
                        [
                            "min(summed_potentials.size()[0], top_k)",
                            "Call"
                        ],
                        [
                            "min(path_scores_v.size()[0], top_k)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_softmax_816": {
                "variable": {
                    "value": "log_probs_flat",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "logits_flat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "logits.view(-1, logits.size(-1))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "relu_1397": {
                "variable": {
                    "value": "span_indices",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "raw_span_indices.float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_1649": {
                "variable": {
                    "value": "sinusoids",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.sin(scaled_time), torch.cos(scaled_time)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_96": {
                "variable": {
                    "value": "batched_tensor",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tensor_list",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "cat_227": {
                "variable": {
                    "value": "final_encoder_output",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[final_forward_output, final_backward_output]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_288": {
                "variable": {
                    "value": "result",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "vector",
                    "type": "Name",
                    "possible_values": [
                        [
                            "vector + (mask + 1e-45).log()",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "log_softmax_339": {
                "input": {
                    "value": "vector",
                    "type": "Name",
                    "possible_values": [
                        [
                            "vector + (mask + 1e-45).log()",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "pad_sequence_437": {
                "sequences": {
                    "value": "sequences",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[flipped_padded_sequence[i, num_timesteps - length:] for (i, length) in enumerate(sequence_lengths)]",
                            "ListComp"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_514": {
                "variable": {
                    "value": "new_transition_matrix",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_tags",
                    "type": "Name",
                    "possible_values": [
                        [
                            "num_tags + 2",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "num_tags",
                    "type": "Name",
                    "possible_values": [
                        [
                            "num_tags + 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_519": {
                "variable": {
                    "value": "allowed_start_transitions",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[allowed_start_transitions, torch.tensor([-math.inf, -math.inf])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_522": {
                "variable": {
                    "value": "allowed_end_transitions",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[allowed_end_transitions, torch.tensor([-math.inf, -math.inf])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_550": {
                "variable": {
                    "value": "zero_sentinel",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "num_tags",
                    "type": "Name",
                    "possible_values": [
                        [
                            "num_tags + 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_552": {
                "variable": {
                    "value": "tag_sequence",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[tag_sequence, extra_tags_sentinel]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_553": {
                "variable": {
                    "value": "tag_sequence",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[zero_sentinel, tag_sequence, zero_sentinel]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_560": {
                "variable": {
                    "value": "one_hot",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_tags",
                    "type": "Name",
                    "possible_values": [
                        [
                            "num_tags + 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "topk_574": {
                "variable": {
                    "value": "(scores, paths)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "summed_potentials",
                    "type": "Name",
                    "possible_values": [
                        [
                            "path_scores[timestep - 1].unsqueeze(2) + transition_matrix",
                            "BinOp"
                        ],
                        [
                            "summed_potentials.view(-1, num_tags)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "max_k",
                    "type": "Name",
                    "possible_values": [
                        [
                            "min(summed_potentials.size()[0], top_k)",
                            "Call"
                        ],
                        [
                            "min(path_scores_v.size()[0], top_k)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gather_824": {
                "variable": {
                    "value": "probs_flat",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "probs_flat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "log_probs_flat.exp()",
                            "Call"
                        ],
                        [
                            "torch.gather(probs_flat, dim=1, index=targets_flat)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "targets_flat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "targets.view(-1, 1).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_861": {
                "variable": {
                    "value": "alpha_factor",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "alpha_factor",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.tensor([1.0 - float(alpha), float(alpha)], dtype=weights.dtype, device=weights.device)",
                            "Call"
                        ],
                        [
                            "torch.gather(alpha_factor, dim=0, index=targets_flat.view(-1)).view(*targets.size())",
                            "Call"
                        ],
                        [
                            "torch.tensor(alpha, dtype=weights.dtype, device=weights.device)",
                            "Call"
                        ],
                        [
                            "alpha_factor.view(1)",
                            "Call"
                        ],
                        [
                            "torch.cat([1 - alpha_factor, alpha_factor])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "targets_flat.view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_870": {
                "variable": {
                    "value": "one_hot_targets",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "log_probs_flat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.nn.functional.log_softmax(logits_flat, dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_1015": {
                "tensors": {
                    "value": "to_concatenate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[_get_combination(piece, tensors) for piece in combination.split(',')]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_1654": {
                "variable": {
                    "value": "sinusoids",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sinusoids, sinusoids.new_zeros(timesteps, 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ModuleList_1660": {
                "modules": {
                    "value": "[copy.deepcopy(module) for _ in range(num_copies)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "softmax_295": {
                "variable": {
                    "value": "result",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "vector * mask",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "softmax_302": {
                "variable": {
                    "value": "result",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "masked_vector",
                    "type": "Name",
                    "possible_values": [
                        [
                            "vector.masked_fill((1 - mask).to(dtype=torch.bool), mask_fill_value)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "zeros_509": {
                "variable": {
                    "value": "allowed_end_transitions",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_tags",
                    "type": "Name",
                    "possible_values": [
                        [
                            "num_tags + 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_511": {
                "variable": {
                    "value": "allowed_start_transitions",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_tags",
                    "type": "Name",
                    "possible_values": [
                        [
                            "num_tags + 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_589": {
                "variable": {
                    "value": "one_hot",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_tags",
                    "type": "Name",
                    "possible_values": [
                        [
                            "num_tags + 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tensor_836": {
                "variable": {
                    "value": "alpha_factor",
                    "type": "Name",
                    "possible_values": []
                },
                "data": {
                    "value": "[1.0 - float(alpha), float(alpha)]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "weights.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "weights.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_1106": {
                "input": {
                    "value": "tensors[index]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "weight",
                    "type": "Name",
                    "possible_values": [
                        [
                            "weights[dims_so_far:dims_so_far + combination_dim]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "matmul_1124": {
                "variable": {
                    "value": "result",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "intermediate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "attention.unsqueeze(-1).expand_as(matrix) * matrix",
                            "BinOp"
                        ],
                        [
                            "first_tensor * weight",
                            "BinOp"
                        ],
                        [
                            "first_tensor * weight",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "second_tensor.transpose(-1, -2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_1450": {
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "size",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_1642": {
                "input": {
                    "value": "timescale_range * -log_timescale_increments",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_551": {
                "*size": {
                    "value": "sequence_length",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tag_sequence.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_845": {
                "variable": {
                    "value": "alpha_factor",
                    "type": "Name",
                    "possible_values": []
                },
                "data": {
                    "value": "alpha",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "weights.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "weights.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_883": {
                "input": {
                    "value": "log_probs_flat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.nn.functional.log_softmax(logits_flat, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "targets_flat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "targets.view(-1, 1).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_1139": {
                "variable": {
                    "value": "result",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "intermediate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "attention.unsqueeze(-1).expand_as(matrix) * matrix",
                            "BinOp"
                        ],
                        [
                            "first_tensor * weight",
                            "BinOp"
                        ],
                        [
                            "first_tensor * weight",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "second_tensor.pow(-1).transpose(-1, -2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_1264": {
                "input": {
                    "value": "indices",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "min_1264": {
                "input": {
                    "value": "indices",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "cumsum_1448": {
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sin_1649": {
                "input": {
                    "value": "scaled_time",
                    "type": "Name",
                    "possible_values": [
                        [
                            "timestep_range.unsqueeze(1) * inverse_timescales.unsqueeze(0)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cos_1649": {
                "input": {
                    "value": "scaled_time",
                    "type": "Name",
                    "possible_values": [
                        [
                            "timestep_range.unsqueeze(1) * inverse_timescales.unsqueeze(0)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "rand_253": {
                "*size": {
                    "value": "tensor_for_masking.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_520": {
                "data": {
                    "value": "[-math.inf, -math.inf]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_523": {
                "data": {
                    "value": "[-math.inf, -math.inf]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_853": {
                "variable": {
                    "value": "alpha_factor",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[1 - alpha_factor, alpha_factor]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_1144": {
                "input": {
                    "value": "second_tensor",
                    "type": "Name",
                    "possible_values": [
                        [
                            "_get_combination(combination[2], tensors)",
                            "Call"
                        ],
                        [
                            "_get_combination(combination[2], tensors)",
                            "Call"
                        ],
                        [
                            "second_tensor.squeeze(expanded_dim)",
                            "Call"
                        ],
                        [
                            "second_tensor.squeeze(expanded_dim)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "weight",
                    "type": "Name",
                    "possible_values": [
                        [
                            "weights[dims_so_far:dims_so_far + combination_dim]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "min_1266": {
                "input": {
                    "value": "indices",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "max_1266": {
                "input": {
                    "value": "indices",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "matmul_1148": {
                "input": {
                    "value": "second_tensor",
                    "type": "Name",
                    "possible_values": [
                        [
                            "_get_combination(combination[2], tensors)",
                            "Call"
                        ],
                        [
                            "_get_combination(combination[2], tensors)",
                            "Call"
                        ],
                        [
                            "second_tensor.squeeze(expanded_dim)",
                            "Call"
                        ],
                        [
                            "second_tensor.squeeze(expanded_dim)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "weight",
                    "type": "Name",
                    "possible_values": [
                        [
                            "weights[dims_so_far:dims_so_far + combination_dim]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "allennlp/allennlp/predictors/predictor.py": {
        "torch": {}
    },
    "allennlp/allennlp/tools/create_elmo_embeddings_from_vocab.py": {
        "torch": {
            "cat_85": {
                "variable": {
                    "value": "embedding_weight",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_embeddings",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_68": {
                "variable": {
                    "value": "batch",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "sentences[i * batch_size:(i + 1) * batch_size]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/training/callback_trainer.py": {
        "torch": {
            "DistributedDataParallel_157": {
                "variable": {
                    "value": "self._pytorch_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "[self._rank]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "isnan_213": {
                "input": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "output_dict['loss']",
                            "Subscript"
                        ],
                        [
                            "loss + self.model.get_regularization_penalty()",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "self.batch_loss(batch, for_training=True)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "allennlp/allennlp/training/callbacks/log_to_tensorboard.py": {
        "torch": {
            "norm_102": {
                "variable": {
                    "value": "update_norm",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.param_updates[name].view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "norm_103": {
                "variable": {
                    "value": "param_norm",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "param.view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/training/callbacks/update_learning_rate.py": {
        "torch": {}
    },
    "allennlp/allennlp/training/callbacks/update_momentum.py": {
        "torch": {}
    },
    "allennlp/allennlp/training/callbacks/validate.py": {
        "torch": {
            "no_grad_62": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/training/checkpointer.py": {
        "torch": {
            "load_169": {
                "variable": {
                    "value": "model_state",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(self._serialization_dir, 'model_state_epoch_{}.th'.format(epoch))",
                            "Call"
                        ],
                        [
                            "os.path.join(self._serialization_dir, 'model_state_epoch_{}.th'.format(epoch_to_load))",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "nn_util.device_mapping(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_170": {
                "variable": {
                    "value": "training_state",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "training_state_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(self._serialization_dir, 'training_state_epoch_{}.th'.format(epoch_to_load))",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "nn_util.device_mapping(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_52": {
                "obj": {
                    "value": "model_state",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.load(model_path, map_location=nn_util.device_mapping(-1))",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "model_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(self._serialization_dir, 'model_state_epoch_{}.th'.format(epoch))",
                            "Call"
                        ],
                        [
                            "os.path.join(self._serialization_dir, 'model_state_epoch_{}.th'.format(epoch_to_load))",
                            "Call"
                        ]
                    ]
                }
            },
            "save_56": {
                "obj": {
                    "value": "{**training_states, 'epoch': epoch}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "training_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(self._serialization_dir, 'training_state_epoch_{}.th'.format(epoch))",
                            "Call"
                        ]
                    ]
                }
            },
            "load_179": {
                "f": {
                    "value": "best_model_state_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(self._serialization_dir, 'best.th')",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "nn_util.device_mapping(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/training/learning_rate_schedulers/cosine.py": {
        "torch": {}
    },
    "allennlp/allennlp/training/learning_rate_schedulers/learning_rate_scheduler.py": {
        "torch": {}
    },
    "allennlp/allennlp/training/learning_rate_schedulers/noam.py": {
        "torch": {}
    },
    "allennlp/allennlp/training/learning_rate_schedulers/slanted_triangular.py": {
        "torch": {}
    },
    "allennlp/allennlp/training/metrics/attachment_scores.py": {
        "torch": {}
    },
    "allennlp/allennlp/training/metrics/bleu.py": {
        "torch": {
            "ones_113": {
                "variable": {
                    "value": "valid_tokens_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "tensor.size()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/training/metrics/boolean_accuracy.py": {
        "torch": {
            "ones_74": {
                "variable": {
                    "value": "keep",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "predictions.size(0)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "allennlp/allennlp/training/metrics/categorical_accuracy.py": {
        "torch": {
            "arange_85": {
                "start": {
                    "value": "gold_labels.numel()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/training/metrics/conll_coref_scores.py": {
        "torch": {}
    },
    "allennlp/allennlp/training/metrics/covariance.py": {
        "torch": {
            "sum_64": {
                "variable": {
                    "value": "num_batch_items",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "mask.view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_94": {
                "variable": {
                    "value": "batch_co_moment",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_coresiduals * mask",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_96": {
                "variable": {
                    "value": "batch_co_moment",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_coresiduals",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(predictions - batch_mean_prediction) * (gold_labels - batch_mean_label)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_76": {
                "input": {
                    "value": "predictions",
                    "type": "Name",
                    "possible_values": [
                        [
                            "predictions.view(-1)",
                            "Call"
                        ],
                        [
                            "predictions * mask",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_83": {
                "input": {
                    "value": "gold_labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "gold_labels.view(-1)",
                            "Call"
                        ],
                        [
                            "gold_labels * mask",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "allennlp/allennlp/training/metrics/entropy.py": {
        "torch": {
            "log_softmax_34": {
                "variable": {
                    "value": "log_probs",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_32": {
                "variable": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "logits.size()[:-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "exp_35": {
                "input": {
                    "value": "log_probs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.nn.functional.log_softmax(logits, dim=-1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "allennlp/allennlp/training/metrics/fbeta_measure.py": {
        "torch": {
            "zeros_122": {
                "variable": {
                    "value": "self._true_positive_sum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "predictions.size(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_123": {
                "variable": {
                    "value": "self._true_sum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "predictions.size(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_124": {
                "variable": {
                    "value": "self._pred_sum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "predictions.size(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_125": {
                "variable": {
                    "value": "self._total_sum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "predictions.size(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_128": {
                "variable": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "gold_labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "gold_labels.float()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_139": {
                "variable": {
                    "value": "true_positive_sum",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "predictions.size(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "bincount_141": {
                "variable": {
                    "value": "true_positive_sum",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "true_positives_bins.long()",
                    "type": "Call",
                    "possible_values": []
                },
                "minlength": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "predictions.size(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "bincount_149": {
                "variable": {
                    "value": "pred_sum",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_bins",
                    "type": "Name",
                    "possible_values": [
                        [
                            "argmax_predictions[mask].long()",
                            "Call"
                        ]
                    ]
                },
                "minlength": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "predictions.size(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_151": {
                "variable": {
                    "value": "pred_sum",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "predictions.size(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "bincount_155": {
                "variable": {
                    "value": "true_sum",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "gold_labels_bins",
                    "type": "Name",
                    "possible_values": [
                        [
                            "gold_labels[mask].long()",
                            "Call"
                        ]
                    ]
                },
                "minlength": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "predictions.size(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_157": {
                "variable": {
                    "value": "true_sum",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "predictions.size(-1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "allennlp/allennlp/training/metrics/mean_absolute_error.py": {
        "torch": {
            "abs_39": {
                "variable": {
                    "value": "absolute_errors",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "predictions - gold_labels",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_45": {
                "input": {
                    "value": "absolute_errors",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.abs(predictions - gold_labels)",
                            "Call"
                        ],
                        [
                            "absolute_errors * mask",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_42": {
                "input": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/training/metrics/mention_recall.py": {
        "torch": {}
    },
    "allennlp/allennlp/training/metrics/metric.py": {
        "torch": {}
    },
    "allennlp/allennlp/training/metrics/pearson_correlation.py": {
        "torch": {}
    },
    "allennlp/allennlp/training/metrics/perplexity.py": {
        "torch": {
            "exp_32": {
                "input": {
                    "value": "average_loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "super().get_metric(reset)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "allennlp/allennlp/training/metrics/sequence_accuracy.py": {
        "torch": {}
    },
    "allennlp/allennlp/training/metrics/span_based_f1_measure.py": {
        "torch": {
            "ones_like_128": {
                "variable": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "gold_labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.gather(prediction_map, 1, gold_labels.long())",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_145": {
                "variable": {
                    "value": "argmax_predictions",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "prediction_map",
                    "type": "Name",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "argmax_predictions",
                    "type": "Name",
                    "possible_values": [
                        [
                            "predictions.max(-1)[1]",
                            "Subscript"
                        ],
                        [
                            "torch.gather(prediction_map, 1, argmax_predictions)",
                            "Call"
                        ],
                        [
                            "argmax_predictions.float()",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_146": {
                "variable": {
                    "value": "gold_labels",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "prediction_map",
                    "type": "Name",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "gold_labels.long()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/training/metrics/spearman_correlation.py": {
        "torch": {
            "zeros_24": {
                "variable": {
                    "value": "self.total_predictions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_25": {
                "variable": {
                    "value": "self.total_gold_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_82": {
                "variable": {
                    "value": "self.total_predictions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_83": {
                "variable": {
                    "value": "self.total_gold_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_54": {
                "variable": {
                    "value": "self.total_predictions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.total_predictions, predictions * mask)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_57": {
                "variable": {
                    "value": "self.total_gold_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.total_gold_labels, gold_labels * mask)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_61": {
                "variable": {
                    "value": "self.total_predictions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.total_predictions, predictions)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_62": {
                "variable": {
                    "value": "self.total_gold_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.total_gold_labels, gold_labels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/training/metrics/unigram_recall.py": {
        "torch": {}
    },
    "allennlp/allennlp/training/momentum_schedulers/inverted_triangular.py": {
        "torch": {}
    },
    "allennlp/allennlp/training/momentum_schedulers/momentum_scheduler.py": {
        "torch": {}
    },
    "allennlp/allennlp/training/moving_average.py": {
        "torch": {}
    },
    "allennlp/allennlp/training/optimizers.py": {
        "torch": {
            "zeros_like_445": {
                "variable": {
                    "value": "state[exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_447": {
                "variable": {
                    "value": "state[exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/training/scheduler.py": {
        "torch": {}
    },
    "allennlp/allennlp/training/tensorboard_writer.py": {
        "torch": {
            "prod_121": {
                "input": {
                    "value": "torch.tensor(grad_data.shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_121": {
                "data": {
                    "value": "grad_data.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/training/trainer.py": {
        "torch": {
            "DistributedDataParallel_289": {
                "variable": {
                    "value": "self._pytorch_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "[self.cuda_device]",
                    "type": "List",
                    "possible_values": []
                },
                "find_unused_parameters": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "isnan_379": {
                "input": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "output_dict['loss']",
                            "Subscript"
                        ],
                        [
                            "loss + self.model.get_regularization_penalty()",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "self.batch_loss(batch, for_training=True)",
                            "Call"
                        ],
                        [
                            "loss / len(batch_group)",
                            "BinOp"
                        ],
                        [
                            "self.batch_loss(batch, for_training=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "norm_405": {
                "variable": {
                    "value": "update_norm",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "param_updates[name].view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "norm_406": {
                "variable": {
                    "value": "param_norm",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "param.view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_586": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/training/util.py": {
        "torch": {
            "no_grad_368": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_347": {
                "variable": {
                    "value": "metric_tensor",
                    "type": "Name",
                    "possible_values": []
                },
                "data": {
                    "value": "metric_val",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "tensor_351": {
                "variable": {
                    "value": "metric_tensor",
                    "type": "Name",
                    "possible_values": []
                },
                "data": {
                    "value": "metric_val",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "device_348": {
                "type": {
                    "value": "cuda_device[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "device_351": {
                "type": {
                    "value": "cuda_device",
                    "type": "Name",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/scripts/write_srl_predictions_to_conll_format.py": {
        "torch": {
            "no_grad_72": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "evaluate.py": {
        "torch": {
            "is_available_54": {
                "variable": {
                    "value": "run_on_gpu",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_282": {
                "variable": {
                    "value": "best_model_state",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "best_model_state_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(args.serialization_dir, 'best_{}.th'.format(args.task))",
                            "Call"
                        ],
                        [
                            "os.path.join(args.serialization_dir, 'best_finetuned_dgi_{}_{}.th'.format(args.task, args.data))",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cuda if run_on_gpu else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "no_grad_88": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "graph_util/graph_aggregate.py": {
        "torch": {
            "is_available_5": {
                "variable": {
                    "value": "use_cuda",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_6": {
                "variable": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if use_cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Sequential_17": {
                "variable": {
                    "value": "self.node_gating",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(node_hidden_size, 1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_18": {
                "variable": {
                    "value": "self.node_to_graph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "node_hidden_size",
                    "type": "Name",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.graph_hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_23": {
                "variable": {
                    "value": "self.W_verbs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "node_hidden_size",
                    "type": "Name",
                    "possible_values": []
                },
                "out_features": {
                    "value": "node_hidden_size",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Linear_24": {
                "variable": {
                    "value": "self.W_nodes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "node_hidden_size",
                    "type": "Name",
                    "possible_values": []
                },
                "out_features": {
                    "value": "node_hidden_size",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Linear_25": {
                "variable": {
                    "value": "self.W_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "node_hidden_size",
                    "type": "Name",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Tanh_26": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Softmax_27": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_17": {
                "in_features": {
                    "value": "node_hidden_size",
                    "type": "Name",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sigmoid_17": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_58": {
                "variable": {
                    "value": "graph_rep",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "weighted_nodes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "node_weights * hvs",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "graph_util/graph_encoder_gat.py": {
        "torch": {
            "Linear_24": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_dim",
                    "type": "Name",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "Name",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_26": {
                "variable": {
                    "value": "self.attn_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * out_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_30": {
                "variable": {
                    "value": "z2",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[edges.src['z'], edges.dst['z']]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_41": {
                "variable": {
                    "value": "alpha",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "nodes.mailbox['e']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_43": {
                "variable": {
                    "value": "h",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "alpha * nodes.mailbox['z']",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ModuleList_60": {
                "variable": {
                    "value": "self.heads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "elu_101": {
                "variable": {
                    "value": "h",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.sum(alpha * nodes.mailbox['z'], dim=1)",
                            "Call"
                        ],
                        [
                            "self.layer1(g, h)",
                            "Call"
                        ],
                        [
                            "F.elu(h)",
                            "Call"
                        ],
                        [
                            "self.layer2(g, h)",
                            "Call"
                        ]
                    ]
                }
            },
            "leaky_relu_32": {
                "input": {
                    "value": "a",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.attn_fc(z2)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_69": {
                "tensors": {
                    "value": "head_outs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[attn_head(g, h) for attn_head in self.heads]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_72": {
                "variable": {
                    "value": "(max_pooled, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.stack(head_outs)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_72": {
                "tensors": {
                    "value": "head_outs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[attn_head(g, h) for attn_head in self.heads]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "mean_76": {
                "input": {
                    "value": "torch.stack(head_outs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_76": {
                "tensors": {
                    "value": "head_outs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[attn_head(g, h) for attn_head in self.heads]",
                            "ListComp"
                        ]
                    ]
                }
            }
        }
    },
    "graph_util/graph_encoder_gcn.py": {
        "torch": {
            "ModuleList_14": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_22": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "ModuleList_48": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_56": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Name",
                    "possible_values": []
                }
            }
        }
    },
    "hmtl/models/coref_base.py": {
        "torch": {
            "Sequential_84": {
                "variable": {
                    "value": "feedforward_scorer",
                    "type": "Name",
                    "possible_values": []
                },
                "*args": {
                    "value": "TimeDistributed(mention_feedforward)",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_182": {
                "variable": {
                    "value": "spans",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "spans.float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_196": {
                "variable": {
                    "value": "span_embeddings",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[endpoint_span_embeddings, attended_span_embeddings]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "relu_504": {
                "variable": {
                    "value": "valid_antecedent_indices",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "raw_antecedent_indices.float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_569": {
                "variable": {
                    "value": "span_pair_embeddings",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[target_embeddings, antecedent_embeddings, antecedent_embeddings * target_embeddings, antecedent_distance_embeddings]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_618": {
                "variable": {
                    "value": "pairwise_labels_with_dummy_label",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[dummy_labels, pairwise_labels]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_672": {
                "variable": {
                    "value": "coreference_scores",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[dummy_scores, antecedent_scores]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Dropout_115": {
                "variable": {
                    "value": "self._lexical_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "lexical_dropout",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Linear_90": {
                "in_features": {
                    "value": "antecedent_feedforward.get_output_dim()",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_86": {
                "in_features": {
                    "value": "mention_feedforward.get_output_dim()",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "hmtl/models/coref_custom.py": {
        "torch": {
            "relu_136": {
                "variable": {
                    "value": "spans",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "spans.float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_151": {
                "variable": {
                    "value": "span_embeddings",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[endpoint_span_embeddings, attended_span_embeddings]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_125": {
                "variable": {
                    "value": "gm",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "s",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[torch.as_tensor(pair, dtype=torch.long, device=device) for cluster in metadata[0]['clusters'] for pair in cluster]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_125": {
                "variable": {
                    "value": "gm",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Categorical_217": {
                "variable": {
                    "value": "probs",
                    "type": "Name",
                    "possible_values": []
                },
                "probs": {
                    "value": "F.softmax(coreference_scores, dim=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_116": {
                "variable": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_118": {
                "variable": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "as_tensor_121": {
                "data": {
                    "value": "pair",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_217": {
                "input": {
                    "value": "coreference_scores",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self._compute_coreference_scores(span_pair_embeddings, top_span_mention_scores, candidate_antecedent_mention_scores, valid_antecedent_log_mask)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "hmtl/models/layerCoref.py": {
        "torch": {}
    },
    "hmtl/models/layerCorefSrl.py": {
        "torch": {}
    },
    "hmtl/models/layerCorefSrlBert.py": {
        "torch": {}
    },
    "hmtl/models/layerSrl.py": {
        "torch": {}
    },
    "hmtl/models/srl_custom.py": {
        "torch": {
            "Dropout_97": {
                "variable": {
                    "value": "self.embedding_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "embedding_dropout",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "cat_128": {
                "variable": {
                    "value": "encoded_text_with_verb_indicator",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[encoded_text, embedded_verb_indicator]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_139": {
                "variable": {
                    "value": "secondary_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "secondary_mask_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[encoded_text_with_verb_indicator.size(0), encoded_text_with_verb_indicator.size(1)]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "'cpu' if d < 0 else d",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "softmax_165": {
                "variable": {
                    "value": "class_probabilities",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "reshaped_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "logits.view(-1, self.num_classes)",
                            "Call"
                        ],
                        [
                            "reshaped_logits * scaler",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_287": {
                "variable": {
                    "value": "transition_matrix",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "[num_labels, num_labels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_310": {
                "variable": {
                    "value": "start_transitions",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "len(all_labels)",
                            "Call"
                        ],
                        [
                            "len(all_labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "Categorical_153": {
                "variable": {
                    "value": "probs",
                    "type": "Name",
                    "possible_values": []
                },
                "probs": {
                    "value": "F.softmax(reshaped_logits, dim=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_like_158": {
                "variable": {
                    "value": "scaler",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "reshaped_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "logits.view(-1, self.num_classes)",
                            "Call"
                        ],
                        [
                            "reshaped_logits * scaler",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Linear_95": {
                "in_features": {
                    "value": "self.secondary_encoder.get_output_dim()",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_153": {
                "input": {
                    "value": "reshaped_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "logits.view(-1, self.num_classes)",
                            "Call"
                        ],
                        [
                            "reshaped_logits * scaler",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "arange_159": {
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "scaler.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "hmtl/models/srl_custom_bert.py": {
        "torch": {
            "Linear_75": {
                "variable": {
                    "value": "self.tag_projection_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.bert_model.config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_79": {
                "variable": {
                    "value": "self.embedding_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "embedding_dropout",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "softmax_161": {
                "variable": {
                    "value": "class_probabilities",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "reshaped_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "logits.view(-1, self.num_classes)",
                            "Call"
                        ],
                        [
                            "reshaped_logits * scaler",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_307": {
                "variable": {
                    "value": "transition_matrix",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "[num_labels, num_labels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_331": {
                "variable": {
                    "value": "start_transitions",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "len(all_labels)",
                            "Call"
                        ],
                        [
                            "len(all_labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "Categorical_147": {
                "variable": {
                    "value": "probs",
                    "type": "Name",
                    "possible_values": []
                },
                "probs": {
                    "value": "F.softmax(reshaped_logits, dim=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_like_152": {
                "variable": {
                    "value": "scaler",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "reshaped_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "logits.view(-1, self.num_classes)",
                            "Call"
                        ],
                        [
                            "reshaped_logits * scaler",
                            "BinOp"
                        ]
                    ]
                }
            },
            "softmax_147": {
                "input": {
                    "value": "reshaped_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "logits.view(-1, self.num_classes)",
                            "Call"
                        ],
                        [
                            "reshaped_logits * scaler",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "arange_154": {
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "scaler.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "hmtl/modules/seq2seq_encoders/stacked_gru.py": {
        "torch": {
            "GRU_76": {
                "variable": {
                    "value": "gru_layer",
                    "type": "Name",
                    "possible_values": []
                },
                "input_size": {
                    "value": "input_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self._input_dim if k == 0 else self._hidden_sizes[k - 1]",
                            "IfExp"
                        ],
                        [
                            "input_size * 2",
                            "BinOp"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "self._hidden_sizes[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dropout": {
                    "value": "self._dropouts[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "self._bidirectional",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "hmtl/modules/text_field_embedders/shortcut_connect_text_field_embedder.py": {
        "torch": {
            "cat_64": {
                "variable": {
                    "value": "text_field_embeddings",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[base_representation, text_field_embeddings]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_68": {
                "tensors": {
                    "value": "[text_field_embeddings]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "hmtl/training/loss/hinge_loss.py": {
        "torch": {
            "sum_13": {
                "input": {
                    "value": "hinge_loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.margin - torch.mul(output, target)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mul_11": {
                "input": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": []
                },
                "other": {
                    "value": "target",
                    "type": "Name",
                    "possible_values": []
                }
            }
        }
    },
    "hmtl/training/metrics/accuracy.py": {
        "torch": {
            "eq_24": {
                "input": {
                    "value": "logits.cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "labels.cpu()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_24": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "hmtl/training/metrics/relation_f1_measure.py": {
        "torch": {
            "stack_63": {
                "variable": {
                    "value": "squared_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[e.view(padded_document_length, 1) * e for e in mask]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_like_46": {
                "variable": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "gold_labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "gold_labels.cpu()",
                            "Call"
                        ],
                        [
                            "gold_labels * squared_mask",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "hmtl/training/multi_task_trainer.py": {
        "torch": {
            "load_374": {
                "variable": {
                    "value": "model_state",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(self._serialization_dir, 'model_state.th')",
                            "Call"
                        ],
                        [
                            "os.path.join(self._serialization_dir, 'model_state.th')",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "device_mapping(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_375": {
                "variable": {
                    "value": "training_state",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "training_state_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(self._serialization_dir, 'training_state.th')",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "device_mapping(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_287": {
                "obj": {
                    "value": "training_state",
                    "type": "Name",
                    "possible_values": [
                        [
                            "{'epoch': epoch, 'should_stop': should_stop, 'metric_infos': self._metric_infos, 'task_infos': self._task_infos, 'schedulers': {}, 'optimizers': {}}",
                            "Dict"
                        ],
                        [
                            "torch.load(training_state_path, map_location=device_mapping(-1))",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "training_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(self._serialization_dir, 'training_state.th')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_294": {
                "obj": {
                    "value": "model_state",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self._model.state_dict()",
                            "Call"
                        ],
                        [
                            "torch.load(model_path, map_location=device_mapping(-1))",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "model_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(self._serialization_dir, 'model_state.th')",
                            "Call"
                        ],
                        [
                            "os.path.join(self._serialization_dir, 'model_state.th')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "hmtl/utils/builder.py": {
        "torch": {
            "load_74": {
                "variable": {
                    "value": "state",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(serialization_dir, best_model)",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "is_available_29": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_97": {
                "variable": {
                    "value": "zeros",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "list(batch['spans'].shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_128": {
                "variable": {
                    "value": "input_ids",
                    "type": "Name",
                    "possible_values": []
                },
                "data": {
                    "value": "input_ids",
                    "type": "Name",
                    "possible_values": [
                        [
                            "roberta_tokenizer.encode([token for sentence in sentences for token in sentence], add_special_tokens=False)",
                            "Call"
                        ],
                        [
                            "input_ids + [roberta_tokenizer.pad_token_id] * to_fill",
                            "BinOp"
                        ],
                        [
                            "torch.tensor(input_ids).view(-1, 512)",
                            "Call"
                        ],
                        [
                            "torch.tensor(input_ids).unsqueeze(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_130": {
                "variable": {
                    "value": "input_ids",
                    "type": "Name",
                    "possible_values": []
                },
                "data": {
                    "value": "input_ids",
                    "type": "Name",
                    "possible_values": [
                        [
                            "roberta_tokenizer.encode([token for sentence in sentences for token in sentence], add_special_tokens=False)",
                            "Call"
                        ],
                        [
                            "input_ids + [roberta_tokenizer.pad_token_id] * to_fill",
                            "BinOp"
                        ],
                        [
                            "torch.tensor(input_ids).view(-1, 512)",
                            "Call"
                        ],
                        [
                            "torch.tensor(input_ids).unsqueeze(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_130": {
                "variable": {
                    "value": "input_ids",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_135": {
                "variable": {
                    "value": "(pooled, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "last_hidden_states[0][start:end + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_137": {
                "tensors": {
                    "value": "reps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "{'original_text': batch['metadata'][0]['original_text'], 'all_spans': output['all_spans'], 'endpoint_span_embeddings': output['endpoint_span_embeddings'], 'attended_span_embeddings': output['attended_span_embeddings']}",
                            "Dict"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "unsqueeze_137": {
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_30": {
                "type": {
                    "value": "cuda:0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_32": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_131": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "hmtl/utils/embs.py": {
        "torch": {
            "cat_28": {
                "variable": {
                    "value": "span_embeddings",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[endpoint_span_embeddings, attended_span_embeddings]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "predictor.py": {
        "torch": {
            "device_25": {
                "variable": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "load_43": {
                "variable": {
                    "value": "state",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.serialization_dir, best_model)",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "load_169": {
                "variable": {
                    "value": "best_model_state",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "best_model_state_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(serialization_dir, 'best_{}.th'.format(task._name))",
                            "Call"
                        ]
                    ]
                }
            },
            "set_default_dtype_234": {
                "d": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}