{
    "metrics.py": {
        "sklearn": {
            "f1_score_13": {
                "variable": {
                    "value": "micro",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "labels.cpu().detach().numpy()",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "preds",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "output.max(1)[1].type_as(labels)",
                            "Call"
                        ],
                        [
                            "output.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "preds.cpu().detach().numpy()",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "micro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "f1_score_14": {
                "variable": {
                    "value": "macro",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "labels.cpu().detach().numpy()",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "preds",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "output.max(1)[1].type_as(labels)",
                            "Call"
                        ],
                        [
                            "output.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "preds.cpu().detach().numpy()",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "raw_feats_citation.py": {
        "sklearn": {},
        "torch": {}
    },
    "synthetic_data.py": {
        "sklearn": {
            "NearestNeighbors_9": {
                "variable": {
                    "value": "nbrs",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_neighbors": {
                    "value": "n_neighbors",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                },
                "algorithm": {
                    "value": "algo",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'ball_tree'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "make_circles_21": {
                "variable": {
                    "value": "(X, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "n_samples": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "4000",
                            "MethodArgument"
                        ],
                        [
                            "2000",
                            "MethodArgument"
                        ]
                    ]
                },
                "noise": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "factor": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "StandardScaler_23": {
                "variable": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ShuffleSplit_24": {
                "variable": {
                    "value": "sss",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "test_size": {
                    "value": "test_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.92",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "utils.py": {
        "sklearn": {
            "train_test_split_124": {
                "variable": {
                    "value": "(idx_train_and_val, idx_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "random_state",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "train_size": {
                    "value": "train_size + val_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "test_size": {
                    "value": "test_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.2",
                            "MethodArgument"
                        ],
                        [
                            "0.92",
                            "MethodArgument"
                        ]
                    ]
                },
                "stratify": {
                    "value": "stratify",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "stratify[idx_train_and_val]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "train_test_split_131": {
                "variable": {
                    "value": "(idx_train, idx_val)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "idx_train_and_val",
                    "type": "Variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "random_state",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "train_size": {
                    "value": "train_size / (train_size + val_size)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "test_size": {
                    "value": "val_size / (train_size + val_size)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "stratify": {
                    "value": "stratify",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "stratify[idx_train_and_val]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "from_numpy_49": {
                "variable": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.vstack((sparse_mx.row, sparse_mx.col)).astype(np.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_51": {
                "variable": {
                    "value": "values",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "sparse_mx.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_275": {
                "variable": {
                    "value": "trainLoader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "LowHighFreqData(X_train_low, X_train_high, y_train)",
                            "Call"
                        ],
                        [
                            "FeaturesData(X_train, y_train)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_278": {
                "variable": {
                    "value": "valLoader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_set",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "LowHighFreqData(X_val_low, X_val_high, y_val)",
                            "Call"
                        ],
                        [
                            "FeaturesData(X_val, y_val)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_287": {
                "variable": {
                    "value": "trainLoader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "LowHighFreqData(X_train_low, X_train_high, y_train)",
                            "Call"
                        ],
                        [
                            "FeaturesData(X_train, y_train)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_288": {
                "variable": {
                    "value": "valLoader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_set",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "LowHighFreqData(X_val_low, X_val_high, y_val)",
                            "Call"
                        ],
                        [
                            "FeaturesData(X_val, y_val)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "manual_seed_208": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "manual_seed_209": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "args.py": {
        "torch": {
            "is_available_79": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_136": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_166": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "citation.py": {
        "torch": {}
    },
    "exp_gap.py": {
        "torch": {}
    },
    "gfnn.py": {
        "torch": {}
    },
    "models.py": {
        "torch": {
            "Parameter_18": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(in_features, out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_32": {
                "variable": {
                    "value": "support",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_57": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.gc1(x, adj)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_58": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.relu(self.gc1(x, adj))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.gc2(x, adj)",
                            "Call"
                        ],
                        [
                            "self.act(self.W1(x))",
                            "Call"
                        ],
                        [
                            "nn.Dropout(p=self.dp)(x)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_70": {
                "variable": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "nhidden",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "nclass",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "relu_74": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.Wx(x, adj)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_88": {
                "variable": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "nfeat",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "nclass",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_100": {
                "variable": {
                    "value": "self.W1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "nfeat",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "nhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_101": {
                "variable": {
                    "value": "self.W2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "nhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "nclass",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "PReLU_103": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_121": {
                "variable": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "nfeat",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "nclass",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Parameter_20": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_softmax_60": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.relu(self.gc1(x, adj))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.gc2(x, adj)",
                            "Call"
                        ],
                        [
                            "self.act(self.W1(x))",
                            "Call"
                        ],
                        [
                            "nn.Dropout(p=self.dp)(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_108": {
                "p": {
                    "value": "self.dp",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_124": {
                "p": {
                    "value": "self.dp",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "normalization.py": {
        "torch": {}
    },
    "reddit.py": {
        "torch": {
            "Adam_60": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "5e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "LBFGS_83": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cross_entropy_88": {
                "variable": {
                    "value": "loss_train",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model(feats)",
                            "Call"
                        ],
                        [
                            "model(train_features)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "train_labels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cross_entropy_75": {
                "variable": {
                    "value": "loss_train",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model(feats)",
                            "Call"
                        ],
                        [
                            "model(train_features)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "synthetic.py": {
        "torch": {}
    },
    "train.py": {
        "torch": {
            "Adam_21": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "weight_decay",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Adam_60": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "weight_decay",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_72": {
                "variable": {
                    "value": "loss_func",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_129": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "weight_decay",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Adam_167": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "weight_decay",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Adam_207": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "weight_decay",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "softmax_232": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "model(features, adj)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cross_entropy_138": {
                "variable": {
                    "value": "loss_train",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model(feats)",
                            "Call"
                        ],
                        [
                            "model(val_features)",
                            "Call"
                        ],
                        [
                            "model(xl)",
                            "Call"
                        ],
                        [
                            "model(xl)",
                            "Call"
                        ],
                        [
                            "model(xl)",
                            "Call"
                        ],
                        [
                            "model(train_features)",
                            "Call"
                        ],
                        [
                            "model(val_features)",
                            "Call"
                        ],
                        [
                            "model(features, adj)",
                            "Call"
                        ],
                        [
                            "model(features, adj)",
                            "Call"
                        ],
                        [
                            "model(features, adj)",
                            "Call"
                        ],
                        [
                            "model(features, adj)",
                            "Call"
                        ],
                        [
                            "model(features, adj)",
                            "Call"
                        ],
                        [
                            "F.softmax(model(features, adj), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "train_labels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "nll_loss_176": {
                "variable": {
                    "value": "loss_train",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output[idx_train]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "labels[idx_train]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cross_entropy_216": {
                "variable": {
                    "value": "loss_train",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output[idx_train]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "labels[idx_train]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cross_entropy_36": {
                "variable": {
                    "value": "loss_train",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model(feats)",
                            "Call"
                        ],
                        [
                            "model(val_features)",
                            "Call"
                        ],
                        [
                            "model(xl)",
                            "Call"
                        ],
                        [
                            "model(xl)",
                            "Call"
                        ],
                        [
                            "model(xl)",
                            "Call"
                        ],
                        [
                            "model(train_features)",
                            "Call"
                        ],
                        [
                            "model(val_features)",
                            "Call"
                        ],
                        [
                            "model(features, adj)",
                            "Call"
                        ],
                        [
                            "model(features, adj)",
                            "Call"
                        ],
                        [
                            "model(features, adj)",
                            "Call"
                        ],
                        [
                            "model(features, adj)",
                            "Call"
                        ],
                        [
                            "model(features, adj)",
                            "Call"
                        ],
                        [
                            "F.softmax(model(features, adj), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "no_grad_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_106": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_144": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_182": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_222": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_85": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_99": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "best_gfnn.pkl",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_108": {
                "f": {
                    "value": "best_gfnn.pkl",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "tuning.py": {
        "torch": {}
    }
}