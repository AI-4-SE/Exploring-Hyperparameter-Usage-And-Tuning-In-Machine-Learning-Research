{
    "custom_criteria.py": {
        "torch": {
            "gradcheck_92": {
                "variable": {
                    "value": "test",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "GemanMcclureLoss.apply",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(Variable(torch.randn(20, 2).double(), requires_grad=True), Variable(torch.randn(20, 2).double(), requires_grad=False))",
                            "Tuple"
                        ],
                        [
                            "(Variable(torch.randn(3, 2, 10, 10).double(), requires_grad=True), Variable(torch.randn(3, 2, 10, 10).double(), requires_grad=False))",
                            "Tuple"
                        ]
                    ]
                },
                "eps": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                },
                "atol": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "raise_exception": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "gradcheck_98": {
                "variable": {
                    "value": "test",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "EPELoss.apply",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(Variable(torch.randn(20, 2).double(), requires_grad=True), Variable(torch.randn(20, 2).double(), requires_grad=False))",
                            "Tuple"
                        ],
                        [
                            "(Variable(torch.randn(3, 2, 10, 10).double(), requires_grad=True), Variable(torch.randn(3, 2, 10, 10).double(), requires_grad=False))",
                            "Tuple"
                        ]
                    ]
                },
                "eps": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                },
                "atol": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "raise_exception": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_68": {
                "variable": {
                    "value": "df_stacked",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(df, df)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_82": {
                "*size": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_96": {
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_97": {
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "custom_transforms.py": {
        "torch": {
            "from_numpy_42": {
                "ndarray": {
                    "value": "im",
                    "type": "variable",
                    "possible_values": [
                        [
                            "images",
                            "variable"
                        ],
                        [
                            "np.transpose(im, (2, 0, 1))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "datasets/sequence_folders.py": {
        "torch": {}
    },
    "datasets/validation_flow.py": {
        "torch": {
            "zeros_54": {
                "variable": {
                    "value": "ref_img_past",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "tgt_img.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_64": {
                "variable": {
                    "value": "gtFlow",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(3, he, wi)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_72": {
                "variable": {
                    "value": "gtDisp",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(he, wi, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "datasets/validation_folders.py": {
        "torch": {}
    },
    "flowutils/flow_viz.py": {
        "torch": {
            "zeros_6": {
                "variable": {
                    "value": "flow_im",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "uv.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "uv.size(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "layout": {
                    "value": "uv.size(3)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "flowutils/flowlib.py": {
        "torch": {
            "zeros_32": {
                "variable": {
                    "value": "flow_im",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "uv.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "uv.size(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "layout": {
                    "value": "uv.size(3)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "losses.py": {
        "torch": {
            "upsample_9": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.functional.upsample(pred, size=(h_gt, w_gt), mode='bilinear')",
                            "Call"
                        ],
                        [
                            "nn.functional.upsample(pred, size=(h_gt, w_gt), mode='bilinear')",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(h_gt, w_gt)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sqrt_13": {
                "variable": {
                    "value": "epe",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.pow(u_gt - u_pred, 2) + torch.pow(v_gt - v_pred, 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "upsample_31": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.functional.upsample(pred, size=(h_gt, w_gt), mode='bilinear')",
                            "Call"
                        ],
                        [
                            "nn.functional.upsample(pred, size=(h_gt, w_gt), mode='bilinear')",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(h_gt, w_gt)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cosine_similarity_35": {
                "variable": {
                    "value": "similarity",
                    "type": "variable",
                    "possible_values": []
                },
                "x1": {
                    "value": "gt[:, :2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x2": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.functional.upsample(pred, size=(h_gt, w_gt), mode='bilinear')",
                            "Call"
                        ],
                        [
                            "nn.functional.upsample(pred, size=(h_gt, w_gt), mode='bilinear')",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_13": {
                "input": {
                    "value": "v_gt - v_pred",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cosine_similarity_52": {
                "x1": {
                    "value": "_gt",
                    "type": "variable",
                    "possible_values": []
                },
                "x2": {
                    "value": "_pred",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "mean_52": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "main.py": {
        "torch": {
            "DataLoader_133": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SequenceFolder(args.data, transform=train_transform, seed=args.seed, train=True, sequence_length=3)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_136": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ValidationFlowKitti2015(root=args.kitti_data, transform=valid_transform)",
                            "Call"
                        ],
                        [
                            "ValidationFlowKitti2012(root=args.kitti_data, transform=valid_transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "manual_seed_94": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mul_264": {
                "variable": {
                    "value": "masked_patch_var",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_var",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "patch_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "patch_var - torch.clamp(0.5 * args.lr * (adv_tgt_img_grad + adv_ref_future_img_grad), -2, 2)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "l1_loss_340": {
                "variable": {
                    "value": "loss_reg",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mul(mask_var, just_the_patch)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "torch.mul(mask_var, patch_init_var)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_365": {
                "variable": {
                    "value": "adv_tgt_img_var",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adv_tgt_img_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mul(1 - mask_var, tgt_img_var) + torch.mul(mask_var, patch_var)",
                            "BinOp"
                        ],
                        [
                            "Variable(adv_tgt_img_var.data, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "torch.mul(1 - mask_var, tgt_img_var) + torch.mul(mask_var, patch_var)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(adv_tgt_img_var, -1, 1)",
                            "Call"
                        ],
                        [
                            "torch.mul(1 - mask_var, tgt_img_var) + torch.mul(mask_var, patch_var)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(adv_tgt_img_var, -1, 1)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_368": {
                "variable": {
                    "value": "adv_ref_future_img_var",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adv_ref_future_img_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mul(1 - mask_var, ref_future_img_var) + torch.mul(mask_var, patch_var)",
                            "BinOp"
                        ],
                        [
                            "Variable(adv_ref_future_img_var.data, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "torch.mul(1 - mask_var, ref_future_img_var) + torch.mul(mask_var, patch_var)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(adv_ref_future_img_var, -1, 1)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_418": {
                "variable": {
                    "value": "adv_tgt_img_var",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adv_tgt_img_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mul(1 - mask_var, tgt_img_var) + torch.mul(mask_var, patch_var)",
                            "BinOp"
                        ],
                        [
                            "Variable(adv_tgt_img_var.data, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "torch.mul(1 - mask_var, tgt_img_var) + torch.mul(mask_var, patch_var)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(adv_tgt_img_var, -1, 1)",
                            "Call"
                        ],
                        [
                            "torch.mul(1 - mask_var, tgt_img_var) + torch.mul(mask_var, patch_var)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(adv_tgt_img_var, -1, 1)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_421": {
                "variable": {
                    "value": "adv_ref_img_future_var",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adv_ref_img_future_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mul(1 - mask_var, ref_img_future_var) + torch.mul(mask_var, patch_var)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(adv_ref_img_future_var, -1, 1)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_158": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "pretrained/FlowNet2-C_checkpoint.pth.tar",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_219": {
                "obj": {
                    "value": "patch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "masked_patch_var.data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "new_patch",
                            "variable"
                        ],
                        [
                            "zoom(patch, zoom=(1, 1, patch_shape_orig[2] / patch_shape[2], patch_shape_orig[3] / patch_shape[3]), order=1)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "args.save_path / 'patch_epoch_{}'.format(str(epoch))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mul_317": {
                "input": {
                    "value": "mask_var",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "patch_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "patch_var - torch.clamp(0.5 * args.lr * (adv_tgt_img_grad + adv_ref_future_img_grad), -2, 2)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mul_320": {
                "input": {
                    "value": "mask_var",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "patch_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "patch_var - torch.clamp(0.5 * args.lr * (adv_tgt_img_grad + adv_ref_future_img_grad), -2, 2)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "clamp_367": {
                "variable": {
                    "value": "adv_ref_past_img_var",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adv_ref_past_img_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mul(1 - mask_var, ref_past_img_var) + torch.mul(mask_var, patch_var)",
                            "BinOp"
                        ],
                        [
                            "Variable(adv_ref_past_img_var.data, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "torch.mul(1 - mask_var, ref_past_img_var) + torch.mul(mask_var, patch_var)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(adv_ref_past_img_var, -1, 1)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_420": {
                "variable": {
                    "value": "adv_ref_img_past_var",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adv_ref_img_past_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mul(1 - mask_var, ref_img_past_var) + torch.mul(mask_var, patch_var)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(adv_ref_img_past_var, -1, 1)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_162": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "pretrained/flownets.pth.tar",
                    "type": "str",
                    "possible_values": []
                }
            },
            "mul_319": {
                "input": {
                    "value": "mask_var",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "patch_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "patch_var - torch.clamp(0.5 * args.lr * (adv_tgt_img_grad + adv_ref_future_img_grad), -2, 2)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mul_340": {
                "input": {
                    "value": "mask_var",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "patch_init_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(patch_init).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_356": {
                "input": {
                    "value": "0.5 * args.lr * (adv_tgt_img_grad + adv_ref_future_img_grad + adv_ref_past_img_grad)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_358": {
                "input": {
                    "value": "0.5 * args.lr * (adv_tgt_img_grad + adv_ref_future_img_grad)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mul_360": {
                "input": {
                    "value": "mask_var",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "patch_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "patch_var - torch.clamp(0.5 * args.lr * (adv_tgt_img_grad + adv_ref_future_img_grad), -2, 2)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mul_363": {
                "input": {
                    "value": "mask_var",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "patch_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "patch_var - torch.clamp(0.5 * args.lr * (adv_tgt_img_grad + adv_ref_future_img_grad), -2, 2)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mul_413": {
                "input": {
                    "value": "mask_var",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "patch_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "patch_var - torch.clamp(0.5 * args.lr * (adv_tgt_img_grad + adv_ref_future_img_grad), -2, 2)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mul_416": {
                "input": {
                    "value": "mask_var",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "patch_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "patch_var - torch.clamp(0.5 * args.lr * (adv_tgt_img_grad + adv_ref_future_img_grad), -2, 2)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "load_166": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "pretrained/FlowNet2_checkpoint.pth.tar",
                    "type": "str",
                    "possible_values": []
                }
            },
            "mul_362": {
                "input": {
                    "value": "mask_var",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "patch_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "patch_var - torch.clamp(0.5 * args.lr * (adv_tgt_img_grad + adv_ref_future_img_grad), -2, 2)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mul_415": {
                "input": {
                    "value": "mask_var",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "patch_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "patch_var - torch.clamp(0.5 * args.lr * (adv_tgt_img_grad + adv_ref_future_img_grad), -2, 2)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cosine_similarity_339": {
                "x1": {
                    "value": "adv_flow_out_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "flow_net(adv_ref_past_img_var, adv_tgt_img_var, adv_ref_future_img_var)",
                            "Call"
                        ],
                        [
                            "flow_net(adv_tgt_img_var, adv_ref_future_img_var)",
                            "Call"
                        ]
                    ]
                },
                "x2": {
                    "value": "target_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(-1 * flow_pred_var.data.clone(), requires_grad=True).cuda()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "models/FlowNet2S.py": {
        "torch": {
            "ConvTranspose2d_42": {
                "variable": {
                    "value": "self.upsampled_flow6_to_5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_43": {
                "variable": {
                    "value": "self.upsampled_flow5_to_4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_44": {
                "variable": {
                    "value": "self.upsampled_flow4_to_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_45": {
                "variable": {
                    "value": "self.upsampled_flow3_to_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Upsample_58": {
                "variable": {
                    "value": "self.upsample1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_61": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x1, x2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_74": {
                "variable": {
                    "value": "concat5",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out_conv5, out_deconv5, flow6_up)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_79": {
                "variable": {
                    "value": "concat4",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out_conv4, out_deconv4, flow5_up)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_84": {
                "variable": {
                    "value": "concat3",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out_conv3, out_deconv3, flow4_up)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_89": {
                "variable": {
                    "value": "concat2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out_conv2, out_deconv2, flow3_up)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "models/FlowNetC.py": {
        "torch": {
            "LeakyReLU_26": {
                "variable": {
                    "value": "self.corr_activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_46": {
                "variable": {
                    "value": "self.upsampled_flow6_to_5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_47": {
                "variable": {
                    "value": "self.upsampled_flow5_to_4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_48": {
                "variable": {
                    "value": "self.upsampled_flow4_to_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_49": {
                "variable": {
                    "value": "self.upsampled_flow3_to_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Upsample_62": {
                "variable": {
                    "value": "self.upsample1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_98": {
                "variable": {
                    "value": "in_conv3_1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out_conv_redir, out_corr)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_112": {
                "variable": {
                    "value": "concat5",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out_conv5, out_deconv5, flow6_up)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_117": {
                "variable": {
                    "value": "concat4",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out_conv4, out_deconv4, flow5_up)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_122": {
                "variable": {
                    "value": "concat3",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out_conv3_1, out_deconv3, flow4_up)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_127": {
                "variable": {
                    "value": "concat2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out_conv2a, out_deconv2, flow3_up)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "models/FlowNetFusion.py": {
        "torch": {
            "ConvTranspose2d_32": {
                "variable": {
                    "value": "self.upsampled_flow2_to_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_33": {
                "variable": {
                    "value": "self.upsampled_flow1_to_0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_56": {
                "variable": {
                    "value": "concat1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out_conv1, out_deconv1, flow2_up)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_62": {
                "variable": {
                    "value": "concat0",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out_conv0, out_deconv0, flow1_up)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "models/FlowNetS.py": {
        "torch": {
            "Conv2d_25": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_29": {
                "*args": {
                    "value": "nn.ConvTranspose2d(in_planes, out_planes, kernel_size=4, stride=2, padding=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_71": {
                "variable": {
                    "value": "self.upsampled_flow6_to_5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_72": {
                "variable": {
                    "value": "self.upsampled_flow5_to_4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_73": {
                "variable": {
                    "value": "self.upsampled_flow4_to_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_74": {
                "variable": {
                    "value": "self.upsampled_flow3_to_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_86": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x1, x2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_97": {
                "variable": {
                    "value": "concat5",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out_conv5, out_deconv5, flow6_up)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_102": {
                "variable": {
                    "value": "concat4",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out_conv4, out_deconv4, flow5_up)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_107": {
                "variable": {
                    "value": "concat3",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out_conv3, out_deconv3, flow4_up)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_112": {
                "variable": {
                    "value": "concat2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out_conv2, out_deconv2, flow3_up)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_12": {
                "*args": {
                    "value": "nn.Conv2d(in_planes, out_planes, kernel_size=kernel_size, stride=stride, padding=(kernel_size - 1) // 2, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_18": {
                "*args": {
                    "value": "nn.Conv2d(in_planes, out_planes, kernel_size=kernel_size, stride=stride, padding=(kernel_size - 1) // 2, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_30": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_31": {
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_13": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "(kernel_size - 1) // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_14": {
                "num_features": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LeakyReLU_15": {
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_19": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "(kernel_size - 1) // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_20": {
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "models/FlowNetSD.py": {
        "torch": {
            "ConvTranspose2d_46": {
                "variable": {
                    "value": "self.upsampled_flow6_to_5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_47": {
                "variable": {
                    "value": "self.upsampled_flow5_to_4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_48": {
                "variable": {
                    "value": "self.upsampled_flow4_to_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_49": {
                "variable": {
                    "value": "self.upsampled_flow3_to_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Upsample_62": {
                "variable": {
                    "value": "self.upsample1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_80": {
                "variable": {
                    "value": "concat5",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out_conv5, out_deconv5, flow6_up)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_87": {
                "variable": {
                    "value": "concat4",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out_conv4, out_deconv4, flow5_up)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_93": {
                "variable": {
                    "value": "concat3",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out_conv3, out_deconv3, flow4_up)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_99": {
                "variable": {
                    "value": "concat2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out_conv2, out_deconv2, flow3_up)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "models/PWCNet.py": {
        "torch": {
            "Sequential_24": {
                "*args": {
                    "value": "nn.Conv2d(int(in_planes), int(out_planes), kernel_size=kernel_size, stride=stride, padding=padding, dilation=dilation, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_30": {
                "in_channels": {
                    "value": "int(in_planes)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_33": {
                "in_channels": {
                    "value": "int(in_planes)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "int(out_planes)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Upsample_59": {
                "variable": {
                    "value": "self.upsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "LeakyReLU_82": {
                "variable": {
                    "value": "self.leakyRELU",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "arange_163": {
                "variable": {
                    "value": "xx",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "arange_164": {
                "variable": {
                    "value": "yy",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_167": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(xx, yy)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grid_sample_180": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((self.conv6_0(corr6), corr6), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv6_1(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv6_2(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv6_3(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv6_4(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((corr5, c15, up_flow6, up_feat6), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv5_0(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv5_1(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv5_2(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv5_3(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv5_4(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((corr4, c14, up_flow5, up_feat5), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv4_0(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv4_1(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv4_2(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv4_3(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv4_4(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((corr3, c13, up_flow4, up_feat4), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv3_0(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv3_1(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv3_2(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv3_3(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv3_4(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((corr2, c12, up_flow3, up_feat3), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv2_0(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv2_1(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv2_2(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv2_3(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv2_4(x), x), 1)",
                            "Call"
                        ],
                        [
                            "self.dc_conv4(self.dc_conv3(self.dc_conv2(self.dc_conv1(x))))",
                            "Call"
                        ]
                    ]
                },
                "grid": {
                    "value": "vgrid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(grid) + flo",
                            "BinOp"
                        ],
                        [
                            "vgrid.permute(0, 2, 3, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "grid_sample_182": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.autograd.Variable(torch.ones(x.size())).cuda()",
                            "Call"
                        ],
                        [
                            "nn.functional.grid_sample(mask, vgrid)",
                            "Call"
                        ],
                        [
                            "(mask >= 0.0001).float()",
                            "Call"
                        ]
                    ]
                },
                "grid": {
                    "value": "vgrid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(grid) + flo",
                            "BinOp"
                        ],
                        [
                            "vgrid.permute(0, 2, 3, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_219": {
                "variable": {
                    "value": "im1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(im1[:, 2, :, :], im1[:, 1, :, :], im1[:, 0, :, :])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_220": {
                "variable": {
                    "value": "im2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(im2[:, 2, :, :], im2[:, 1, :, :], im2[:, 0, :, :])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_240": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.conv6_0(corr6), corr6)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_241": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.conv6_1(x), x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_242": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.conv6_2(x), x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_243": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.conv6_3(x), x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_244": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.conv6_4(x), x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_253": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(corr5, c15, up_flow6, up_feat6)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_254": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.conv5_0(x), x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_255": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.conv5_1(x), x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_256": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.conv5_2(x), x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_257": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.conv5_3(x), x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_258": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.conv5_4(x), x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_267": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(corr4, c14, up_flow5, up_feat5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_268": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.conv4_0(x), x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_269": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.conv4_1(x), x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_270": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.conv4_2(x), x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_271": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.conv4_3(x), x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_272": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.conv4_4(x), x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_283": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(corr3, c13, up_flow4, up_feat4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_284": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.conv3_0(x), x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_285": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.conv3_1(x), x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_286": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.conv3_2(x), x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_287": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.conv3_3(x), x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_288": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.conv3_4(x), x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_297": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(corr2, c12, up_flow3, up_feat3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_298": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.conv2_0(x), x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_299": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.conv2_1(x), x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_300": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.conv2_2(x), x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_301": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.conv2_3(x), x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_302": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.conv2_4(x), x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_333": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_347": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_25": {
                "in_channels": {
                    "value": "int(in_planes)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "int(out_planes)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_27": {
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ones_181": {
                "*size": {
                    "value": "x.size()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "models/back2future.py": {
        "torch": {
            "Sequential_15": {
                "*args": {
                    "value": "nn.Conv2d(nIn, nOut, kernel_size=3, stride=2, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_23": {
                "*args": {
                    "value": "nn.Conv2d(nIn, 128, kernel_size=3, stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Upsample_57": {
                "variable": {
                    "value": "self.upsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Softmax2d_58": {
                "variable": {
                    "value": "self.softmax2d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_184": {
                "variable": {
                    "value": "corr6",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(corr6_fwd, corr6_bwd)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_193": {
                "variable": {
                    "value": "occ6_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(corr6, feat6a)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_200": {
                "variable": {
                    "value": "corr5",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(corr5_fwd, corr5_bwd)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_202": {
                "variable": {
                    "value": "upfeat5_fwd",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(corr5, feat5a, flow6_fwd_up)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_205": {
                "variable": {
                    "value": "upfeat5_bwd",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(corr5, feat5a, flow6_bwd_up)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_217": {
                "variable": {
                    "value": "corr4",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(corr4_fwd, corr4_bwd)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_219": {
                "variable": {
                    "value": "upfeat4_fwd",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(corr4, feat4a, flow5_fwd_up)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_222": {
                "variable": {
                    "value": "upfeat4_bwd",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(corr4, feat4a, flow5_bwd_up)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_234": {
                "variable": {
                    "value": "corr3",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(corr3_fwd, corr3_bwd)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_236": {
                "variable": {
                    "value": "upfeat3_fwd",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(corr3, feat3a, flow4_fwd_up)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_239": {
                "variable": {
                    "value": "upfeat3_bwd",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(corr3, feat3a, flow4_bwd_up)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_251": {
                "variable": {
                    "value": "corr2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(corr2_fwd, corr2_bwd)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_253": {
                "variable": {
                    "value": "upfeat2_fwd",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(corr2, feat2a, flow3_fwd_up)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_256": {
                "variable": {
                    "value": "upfeat2_bwd",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(corr2, feat2a, flow3_bwd_up)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_297": {
                "variable": {
                    "value": "xx",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "arange_298": {
                "variable": {
                    "value": "yy",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_301": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(xx, yy)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grid_sample_312": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "grid": {
                    "value": "vgrid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(grid) + flo",
                            "BinOp"
                        ],
                        [
                            "vgrid.permute(0, 2, 3, 1)",
                            "Call"
                        ]
                    ]
                },
                "padding_mode": {
                    "value": "border",
                    "type": "str",
                    "possible_values": []
                }
            },
            "grid_sample_314": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.autograd.Variable(torch.ones(x.size()), requires_grad=False).cuda()",
                            "Call"
                        ],
                        [
                            "nn.functional.grid_sample(mask, vgrid)",
                            "Call"
                        ]
                    ]
                },
                "grid": {
                    "value": "vgrid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(grid) + flo",
                            "BinOp"
                        ],
                        [
                            "vgrid.permute(0, 2, 3, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_16": {
                "in_channels": {
                    "value": "nIn",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nOut",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_17": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_18": {
                "in_channels": {
                    "value": "nOut",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nOut",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_19": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_24": {
                "in_channels": {
                    "value": "nIn",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_25": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_26": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_27": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_28": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "96",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_29": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_30": {
                "in_channels": {
                    "value": "96",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_31": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_32": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_33": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_34": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "upsample_275": {
                "variable": {
                    "value": "occ2_fullres",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "occ2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.softmax2d(self.decoder_occ2(upfeat2_fwd))",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "upsample_276": {
                "variable": {
                    "value": "occ3_fullres",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "occ3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.softmax2d(self.decoder_occ3(upfeat3_fwd))",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "upsample_277": {
                "variable": {
                    "value": "occ4_fullres",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "occ4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.softmax2d(self.decoder_occ4(upfeat4_fwd))",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "upsample_278": {
                "variable": {
                    "value": "occ5_fullres",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "occ5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.softmax2d(self.decoder_occ5(upfeat5_fwd))",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "upsample_279": {
                "variable": {
                    "value": "occ6_fullres",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "occ6",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.softmax2d(self.decoder_occ6(occ6_feat))",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_104": {
                "f": {
                    "value": "pretrained",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_313": {
                "*size": {
                    "value": "x.size()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "models/channelnorm_package/channelnorm.py": {
        "torch": {}
    },
    "models/channelnorm_package/setup.py": {
        "torch": {}
    },
    "models/flownet2/FlowNetC.py": {
        "torch": {
            "LeakyReLU_31": {
                "variable": {
                    "value": "self.corr_activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_51": {
                "variable": {
                    "value": "self.upsampled_flow6_to_5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_52": {
                "variable": {
                    "value": "self.upsampled_flow5_to_4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_53": {
                "variable": {
                    "value": "self.upsampled_flow4_to_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_54": {
                "variable": {
                    "value": "self.upsampled_flow3_to_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Upsample_67": {
                "variable": {
                    "value": "self.upsample1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_90": {
                "variable": {
                    "value": "in_conv3_1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out_conv_redir, out_corr)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_104": {
                "variable": {
                    "value": "concat5",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out_conv5, out_deconv5, flow6_up)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_109": {
                "variable": {
                    "value": "concat4",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out_conv4, out_deconv4, flow5_up)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_114": {
                "variable": {
                    "value": "concat3",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out_conv3_1, out_deconv3, flow4_up)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_119": {
                "variable": {
                    "value": "concat2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out_conv2a, out_deconv2, flow3_up)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "models/flownet2/FlowNetFusion.py": {
        "torch": {
            "ConvTranspose2d_32": {
                "variable": {
                    "value": "self.upsampled_flow2_to_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_33": {
                "variable": {
                    "value": "self.upsampled_flow1_to_0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_56": {
                "variable": {
                    "value": "concat1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out_conv1, out_deconv1, flow2_up)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_62": {
                "variable": {
                    "value": "concat0",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out_conv0, out_deconv0, flow1_up)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "models/flownet2/FlowNetS.py": {
        "torch": {
            "ConvTranspose2d_42": {
                "variable": {
                    "value": "self.upsampled_flow6_to_5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_43": {
                "variable": {
                    "value": "self.upsampled_flow5_to_4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_44": {
                "variable": {
                    "value": "self.upsampled_flow4_to_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_45": {
                "variable": {
                    "value": "self.upsampled_flow3_to_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Upsample_58": {
                "variable": {
                    "value": "self.upsample1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_73": {
                "variable": {
                    "value": "concat5",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out_conv5, out_deconv5, flow6_up)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_78": {
                "variable": {
                    "value": "concat4",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out_conv4, out_deconv4, flow5_up)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_83": {
                "variable": {
                    "value": "concat3",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out_conv3, out_deconv3, flow4_up)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_88": {
                "variable": {
                    "value": "concat2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out_conv2, out_deconv2, flow3_up)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "models/flownet2/FlowNetSD.py": {
        "torch": {
            "ConvTranspose2d_46": {
                "variable": {
                    "value": "self.upsampled_flow6_to_5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_47": {
                "variable": {
                    "value": "self.upsampled_flow5_to_4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_48": {
                "variable": {
                    "value": "self.upsampled_flow4_to_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_49": {
                "variable": {
                    "value": "self.upsampled_flow3_to_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Upsample_62": {
                "variable": {
                    "value": "self.upsample1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_80": {
                "variable": {
                    "value": "concat5",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out_conv5, out_deconv5, flow6_up)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_87": {
                "variable": {
                    "value": "concat4",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out_conv4, out_deconv4, flow5_up)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_93": {
                "variable": {
                    "value": "concat3",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out_conv3, out_deconv3, flow4_up)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_99": {
                "variable": {
                    "value": "concat2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out_conv2, out_deconv2, flow3_up)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "models/flownet2_models.py": {
        "torch": {
            "Upsample_33": {
                "variable": {
                    "value": "self.upsample1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Upsample_45": {
                "variable": {
                    "value": "self.upsample2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Upsample_60": {
                "variable": {
                    "value": "self.upsample3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Upsample_61": {
                "variable": {
                    "value": "self.upsample4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_123": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x1, x2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_135": {
                "variable": {
                    "value": "concat1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, resampled_img1, flownetc_flow / self.div_flow, norm_diff_img0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_147": {
                "variable": {
                    "value": "concat2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, resampled_img1, flownets1_flow / self.div_flow, norm_diff_img0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_176": {
                "variable": {
                    "value": "concat3",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x[:, :3, :, :], flownetsd_flow, flownets2_flow, norm_flownetsd_flow, norm_flownets2_flow, diff_flownetsd_img1, diff_flownets2_img1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_214": {
                "variable": {
                    "value": "in_conv3_1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out_conv_redir, out_corr)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_228": {
                "variable": {
                    "value": "concat5",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out_conv5, out_deconv5, flow6_up)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_233": {
                "variable": {
                    "value": "concat4",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out_conv4, out_deconv4, flow5_up)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_238": {
                "variable": {
                    "value": "concat3",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out_conv3_1, out_deconv3, flow4_up)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_243": {
                "variable": {
                    "value": "concat2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out_conv2a, out_deconv2, flow3_up)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_261": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x[:, :, 0, :, :], x[:, :, 1, :, :])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_275": {
                "variable": {
                    "value": "concat5",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out_conv5, out_deconv5, flow6_up)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_280": {
                "variable": {
                    "value": "concat4",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out_conv4, out_deconv4, flow5_up)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_285": {
                "variable": {
                    "value": "concat3",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out_conv3, out_deconv3, flow4_up)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_290": {
                "variable": {
                    "value": "concat2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out_conv2, out_deconv2, flow3_up)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_307": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x[:, :, 0, :, :], x[:, :, 1, :, :])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_322": {
                "variable": {
                    "value": "concat5",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out_conv5, out_deconv5, flow6_up)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_329": {
                "variable": {
                    "value": "concat4",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out_conv4, out_deconv4, flow5_up)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_335": {
                "variable": {
                    "value": "concat3",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out_conv3, out_deconv3, flow4_up)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_341": {
                "variable": {
                    "value": "concat2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out_conv2, out_deconv2, flow3_up)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Upsample_363": {
                "variable": {
                    "value": "self.upsample1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Upsample_375": {
                "variable": {
                    "value": "self.upsample2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_395": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x1, x2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_407": {
                "variable": {
                    "value": "concat1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, resampled_img1, flownetc_flow / self.div_flow, norm_diff_img0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Upsample_428": {
                "variable": {
                    "value": "self.upsample1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Upsample_440": {
                "variable": {
                    "value": "self.upsample2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Upsample_452": {
                "variable": {
                    "value": "self.upsample3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_472": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x1, x2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_484": {
                "variable": {
                    "value": "concat1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, resampled_img1, flownetc_flow / self.div_flow, norm_diff_img0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_496": {
                "variable": {
                    "value": "concat2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, resampled_img1, flownets1_flow / self.div_flow, norm_diff_img0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_107": {
                "variable": {
                    "value": "weight.data[i, i, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "bilinear",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros([heigh, width])",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_366": {
                "variable": {
                    "value": "self.resample1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "tofp32()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_431": {
                "variable": {
                    "value": "self.resample1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "tofp32()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_442": {
                "variable": {
                    "value": "self.resample2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "tofp32()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "models/resample2d_package/resample2d.py": {
        "torch": {}
    },
    "models/resample2d_package/setup.py": {
        "torch": {}
    },
    "models/spynet.py": {
        "torch": {
            "Sequential_57": {
                "variable": {
                    "value": "self.moduleBasic",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Conv2d(in_channels=8, out_channels=32, kernel_size=7, stride=1, padding=3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_92": {
                "variable": {
                    "value": "variableFlow",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[variableFlow[:, 0:1, :, :] / ((variableInput.size(3) - 1.0) / 2.0), variableFlow[:, 1:2, :, :] / ((variableInput.size(2) - 1.0) / 2.0)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_113": {
                "variable": {
                    "value": "self.moduleBasic",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[Basic(intLevel, strmodel) for intLevel in range(nlevels)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_50": {
                "tensors": {
                    "value": "[variableRed, variableGreen, variableBlue]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "linspace_86": {
                "variable": {
                    "value": "torchHorizontal",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "steps": {
                    "value": "variableInput.size(3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linspace_87": {
                "variable": {
                    "value": "torchVertical",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "steps": {
                    "value": "variableInput.size(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_89": {
                "variable": {
                    "value": "self.tensorGrid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torchHorizontal, torchVertical]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grid_sample_96": {
                "input": {
                    "value": "variableInput",
                    "type": "variable",
                    "possible_values": []
                },
                "grid": {
                    "value": "variableGrid.clamp(-1.0, 1.0).permute(0, 2, 3, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2d_58": {
                "in_channels": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_59": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_60": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_61": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_62": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_63": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_64": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_65": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_66": {
                "in_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_143": {
                "variable": {
                    "value": "variableUpsampled",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "variableUpsampled",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.upsample(input=variableFlow, scale_factor=2, mode='bilinear') * 2.0",
                            "BinOp"
                        ],
                        [
                            "torch.nn.functional.pad(variableUpsampled, [0, 0, 0, 1], 'replicate')",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(variableUpsampled, [0, 1, 0, 0], 'replicate')",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "[0, 0, 0, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "replicate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_144": {
                "variable": {
                    "value": "variableUpsampled",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "variableUpsampled",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.upsample(input=variableFlow, scale_factor=2, mode='bilinear') * 2.0",
                            "BinOp"
                        ],
                        [
                            "torch.nn.functional.pad(variableUpsampled, [0, 0, 0, 1], 'replicate')",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(variableUpsampled, [0, 1, 0, 0], 'replicate')",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "[0, 1, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "replicate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_74": {
                "f": {
                    "value": "models/spynet_models/modelL + str(intLevel + 1) + _ + arguments_strModel + - + str(intConv + 1) + -weight.pth.tar",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_75": {
                "f": {
                    "value": "models/spynet_models/modelL + str(intLevel + 1) + _ + arguments_strModel + - + str(intConv + 1) + -bias.pth.tar",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "avg_pool2d_133": {
                "input": {
                    "value": "variableFirst[0]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[self.modulePreprocess(variableFirst)]",
                            "List"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "avg_pool2d_134": {
                "input": {
                    "value": "variableSecond[0]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[self.modulePreprocess(variableSecond)]",
                            "List"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_138": {
                "*size": {
                    "value": "variableFirst[0].size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int(math.floor(variableFirst[0].size(2) / 2.0))",
                    "type": "Call",
                    "possible_values": []
                },
                "layout": {
                    "value": "int(math.floor(variableFirst[0].size(3) / 2.0))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "upsample_141": {
                "input": {
                    "value": "variableFlow",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([variableFlow[:, 0:1, :, :] / ((variableInput.size(3) - 1.0) / 2.0), variableFlow[:, 1:2, :, :] / ((variableInput.size(2) - 1.0) / 2.0)], 1)",
                            "Call"
                        ],
                        [
                            "torch.autograd.Variable(data=torch.zeros(variableFirst[0].size(0), 2, int(math.floor(variableFirst[0].size(2) / 2.0)), int(math.floor(variableFirst[0].size(3) / 2.0))).cuda())",
                            "Call"
                        ],
                        [
                            "self.moduleBasic[intLevel](torch.cat([variableFirst[intLevel], self.moduleBackward(variableSecond[intLevel], variableUpsampled), variableUpsampled], 1)) + variableUpsampled",
                            "BinOp"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_146": {
                "tensors": {
                    "value": "[variableFirst[intLevel], self.moduleBackward(variableSecond[intLevel], variableUpsampled), variableUpsampled]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "models/spynet_models/convert2pth.py": {
        "torch": {}
    },
    "models/submodules.py": {
        "torch": {
            "Conv2d_39": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_42": {
                "*args": {
                    "value": "nn.ConvTranspose2d(in_planes, out_planes, kernel_size=4, stride=2, padding=1, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_16": {
                "*args": {
                    "value": "nn.Conv2d(in_planes, out_planes, kernel_size=kernel_size, stride=stride, padding=(kernel_size - 1) // 2, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_22": {
                "*args": {
                    "value": "nn.Conv2d(in_planes, out_planes, kernel_size=kernel_size, stride=stride, padding=(kernel_size - 1) // 2, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_29": {
                "*args": {
                    "value": "nn.Conv2d(in_planes, out_planes, kernel_size=kernel_size, stride=stride, padding=(kernel_size - 1) // 2, bias=bias)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_34": {
                "*args": {
                    "value": "nn.Conv2d(in_planes, out_planes, kernel_size=kernel_size, stride=stride, padding=(kernel_size - 1) // 2, bias=bias)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_43": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_44": {
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "from_numpy_76": {
                "variable": {
                    "value": "weight.data[i, j, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "bilinear",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros([heigh, width])",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_17": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "(kernel_size - 1) // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_18": {
                "num_features": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LeakyReLU_19": {
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_23": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "(kernel_size - 1) // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_24": {
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_30": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "(kernel_size - 1) // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_31": {
                "num_features": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_35": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "(kernel_size - 1) // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "print_patch.py": {
        "torch": {
            "Tensor_20": {
                "variable": {
                    "value": "patch",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "clamp_21": {
                "variable": {
                    "value": "patch_clamped",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "patch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Tensor(torch.load(args.patch_path))",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "load_20": {
                "f": {
                    "value": "args.patch_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "test_patch.py": {
        "torch": {
            "DataLoader_99": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ValidationFlowKitti2015(root='/ps/project/datasets/AllFlowData/kitti/kitti2015', transform=valid_transform, compression=args.compression, raw_root='/is/rg/avg/jjanai/data/Kitti_2012_2015/Raw', example=args.example, true_motion=args.true_motion)",
                            "Call"
                        ],
                        [
                            "ValidationFlowKitti2012(root='/ps/project/datasets/AllFlowData/kitti/kitti2012', transform=valid_transform, compression=args.compression, raw_root='/is/rg/avg/jjanai/data/Kitti_2012_2015/Raw')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_140": {
                "variable": {
                    "value": "patch",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.patch_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clamp_328": {
                "variable": {
                    "value": "adv_tgt_img_var",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adv_tgt_img_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mul(1 - mask_var, tgt_img_var) + torch.mul(mask_var, patch_var)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(adv_tgt_img_var, -1, 1)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_329": {
                "variable": {
                    "value": "adv_ref_past_img_var",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adv_ref_past_img_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mul(1 - mask_var_past, ref_past_img_var) + torch.mul(mask_var_past, patch_var_past)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(adv_ref_past_img_var, -1, 1)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_330": {
                "variable": {
                    "value": "adv_ref_img_var",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adv_ref_img_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mul(1 - mask_var_future, ref_img_var) + torch.mul(mask_var_future, patch_var_future)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(adv_ref_img_var, -1, 1)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "upsample_338": {
                "variable": {
                    "value": "mask_var_res",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_var",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(h_gt, w_gt)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_121": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "pretrained/FlowNet2-C_checkpoint.pth.tar",
                    "type": "str",
                    "possible_values": []
                }
            },
            "from_numpy_276": {
                "variable": {
                    "value": "refMtrx",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "H_fut",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_283": {
                "variable": {
                    "value": "XYhom",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "XYhom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.stack([X, Y, np.ones_like(X)], axis=1).T",
                            "Attribute"
                        ],
                        [
                            "np.tile(XYhom, [args.batch_size, 1, 1]).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(XYhom).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "unbind_284": {
                "variable": {
                    "value": "(XHom, YHom, Zom)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "XYhom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.stack([X, Y, np.ones_like(X)], axis=1).T",
                            "Attribute"
                        ],
                        [
                            "np.tile(XYhom, [args.batch_size, 1, 1]).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(XYhom).cuda()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unbind_289": {
                "variable": {
                    "value": "(XwarpHom, YwarpHom, ZwarpHom)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "XYwarpHom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "refMtrx.matmul(XYhom)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_295": {
                "variable": {
                    "value": "flow",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(u, v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "upsample_296": {
                "variable": {
                    "value": "flow",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "flow",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((u, v), 1)",
                            "Call"
                        ],
                        [
                            "nn.functional.upsample(flow, size=(h_gt, w_gt), mode='bilinear')",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(h_gt, w_gt)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "stack_303": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[Xwarp, Ywarp]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "grid_sample_305": {
                "variable": {
                    "value": "patch_var_future",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "patch_var",
                    "type": "variable",
                    "possible_values": []
                },
                "grid": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack([Xwarp, Ywarp], dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "grid_sample_306": {
                "variable": {
                    "value": "mask_var_future",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_var",
                    "type": "variable",
                    "possible_values": []
                },
                "grid": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack([Xwarp, Ywarp], dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "from_numpy_309": {
                "variable": {
                    "value": "refMtrxP",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "H_past",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "unbind_313": {
                "variable": {
                    "value": "(XwarpHomP, YwarpHomP, ZwarpHomP)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "XYwarpHomP",
                    "type": "variable",
                    "possible_values": [
                        [
                            "refMtrxP.matmul(XYhom)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_319": {
                "variable": {
                    "value": "gridP",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[XwarpP, YwarpP]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "grid_sample_321": {
                "variable": {
                    "value": "patch_var_past",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "patch_var",
                    "type": "variable",
                    "possible_values": []
                },
                "grid": {
                    "value": "gridP",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack([XwarpP, YwarpP], dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "grid_sample_322": {
                "variable": {
                    "value": "mask_var_past",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_var",
                    "type": "variable",
                    "possible_values": []
                },
                "grid": {
                    "value": "gridP",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack([XwarpP, YwarpP], dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_125": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "pretrained/flownets.pth.tar",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_210": {
                "tensors": {
                    "value": "(torch.zeros((bt, 2, h_gt, w_gt)), torch.ones((bt, 1, h_gt, w_gt)))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mul_324": {
                "input": {
                    "value": "mask_var",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "patch_var",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "mul_325": {
                "input": {
                    "value": "mask_var_past",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.grid_sample(mask_var, gridP, mode='bilinear')",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "patch_var_past",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.grid_sample(patch_var, gridP, mode='bilinear')",
                            "Call"
                        ]
                    ]
                }
            },
            "mul_326": {
                "input": {
                    "value": "mask_var_future",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.grid_sample(mask_var, grid, mode='bilinear')",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "patch_var_future",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.grid_sample(patch_var, grid, mode='bilinear')",
                            "Call"
                        ]
                    ]
                }
            },
            "mul_344": {
                "input": {
                    "value": "mask_var_res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.functional.upsample(mask_var, size=(h_gt, w_gt), mode='bilinear')",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "forward_patch_flow",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(torch.cat((torch.zeros((bt, 2, h_gt, w_gt)), torch.ones((bt, 1, h_gt, w_gt))), 1).cuda(), volatile=True)",
                            "Call"
                        ],
                        [
                            "Variable(torch.cat((torch.zeros((bt, 2, h_gt, w_gt)), torch.zeros((bt, 1, h_gt, w_gt))), 1).cuda(), volatile=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_129": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "pretrained/FlowNet2_checkpoint.pth.tar",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_342": {
                "tensors": {
                    "value": "(torch.zeros((bt, 2, h_gt, w_gt)), torch.zeros((bt, 1, h_gt, w_gt)))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_210": {
                "*size": {
                    "value": "(bt, 2, h_gt, w_gt)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_210": {
                "*size": {
                    "value": "(bt, 1, h_gt, w_gt)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_342": {
                "*size": {
                    "value": "(bt, 1, h_gt, w_gt)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "utils.py": {
        "torch": {
            "save_61": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "save_path / '{}_{}'.format(prefix, filename)",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    }
}