{
    "SfMLearner.py": {
        "tensorflow": {
            "constant_178": {
                "variable": {
                    "value": "ref_exp_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "ref_exp_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_reference_explain_mask(s)",
                            "Call"
                        ],
                        [
                            "np.tile(tmp, (opt.batch_size, int(opt.img_height / 2 ** downscaling), int(opt.img_width / 2 ** downscaling), 1))",
                            "Call"
                        ],
                        [
                            "tf.constant(ref_exp_mask, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_182": {
                "variable": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "tf.reshape(ref, [-1, 2])",
                    "type": "Call",
                    "possible_values": []
                },
                "logits": {
                    "value": "tf.reshape(pred, [-1, 2])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_221": {
                "variable": {
                    "value": "weights_x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "-tf.reduce_mean(tf.abs(image_dx), 3, keepdims=True)",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_222": {
                "variable": {
                    "value": "weights_y",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "-tf.reduce_mean(tf.abs(image_dy), 3, keepdims=True)",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Saver_276": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "var_list": {
                    "value": "[var for var in tf.model_variables()] + [self.global_step]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Supervisor_279": {
                "variable": {
                    "value": "sv",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "opt.checkpoint_dir",
                    "type": "Attribute",
                    "possible_values": []
                },
                "save_summaries_secs": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "saver": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "ConfigProto_282": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_331": {
                "variable": {
                    "value": "input_uint8",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.img_height, self.img_width, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "raw_input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_344": {
                "variable": {
                    "value": "input_uint8",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.img_height, self.img_width * self.seq_length, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "raw_input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "convert_image_dtype_360": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "(image + 1.0) / 2.0",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_142": {
                "variable": {
                    "value": "optim",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "opt.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "beta1": {
                    "value": "opt.beta1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_147": {
                "variable": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "assign_150": {
                "variable": {
                    "value": "self.incr_global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ref": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self.global_step + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_185": {
                "input_tensor": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax_cross_entropy_with_logits(labels=tf.reshape(ref, [-1, 2]), logits=tf.reshape(pred, [-1, 2]))",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_229": {
                "name": {
                    "value": "total_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.total_loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_230": {
                "name": {
                    "value": "pixel_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.pixel_loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_231": {
                "name": {
                    "value": "smooth_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.smooth_loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "histogram_253": {
                "name": {
                    "value": "tx",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.pred_poses[:, :, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "histogram_254": {
                "name": {
                    "value": "ty",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.pred_poses[:, :, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "histogram_255": {
                "name": {
                    "value": "tz",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.pred_poses[:, :, 2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "histogram_256": {
                "name": {
                    "value": "rx",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.pred_poses[:, :, 3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "histogram_257": {
                "name": {
                    "value": "ry",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.pred_poses[:, :, 4]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "histogram_258": {
                "name": {
                    "value": "rz",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.pred_poses[:, :, 5]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_sum_274": {
                "variable": {
                    "value": "parameter_count",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "[tf.reduce_prod(tf.shape(v)) for v in tf.trainable_variables()]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "convert_image_dtype_366": {
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "(image + 1.0) / 2.0",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_26": {
                "name": {
                    "value": "data_loading",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_32": {
                "variable": {
                    "value": "mask_ph",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "tgt_image.shape[1:3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "expand_dims_33": {
                "variable": {
                    "value": "mask_image",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_ph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder('float32', shape=tgt_image.shape[1:3])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_34": {
                "variable": {
                    "value": "mask_image",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(mask_ph, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(mask_image, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "name_scope_37": {
                "name": {
                    "value": "depth_prediction",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_45": {
                "name": {
                    "value": "pose_and_explainability_prediction",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_53": {
                "name": {
                    "value": "compute_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "resize_area_70": {
                "variable": {
                    "value": "curr_tgt_image",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "tgt_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.preprocess_image(tgt_image)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[int(opt.img_height / 2 ** s), int(opt.img_width / 2 ** s)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "resize_area_72": {
                "variable": {
                    "value": "curr_src_image_stack",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "src_image_stack",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.preprocess_image(src_image_stack)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[int(opt.img_height / 2 ** s), int(opt.img_width / 2 ** s)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "name_scope_140": {
                "name": {
                    "value": "train_op",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_204": {
                "input_tensor": {
                    "value": "tf.abs(dy2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_225": {
                "input_tensor": {
                    "value": "abs(smoothness_y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_233": {
                "name": {
                    "value": "exp_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.exp_loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "histogram_235": {
                "name": {
                    "value": "'scale%d_depth' % s",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "self.pred_depth[s]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "image_236": {
                "name": {
                    "value": "'scale%d_disparity_image' % s",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "1.0 / self.pred_depth[s]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "image_237": {
                "name": {
                    "value": "'scale%d_target_image' % s",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "self.deprocess_image(self.tgt_image_all[s])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "name_scope_273": {
                "name": {
                    "value": "parameter_count",
                    "type": "str",
                    "possible_values": []
                }
            },
            "trainable_variables_286": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "name_scope_334": {
                "name": {
                    "value": "depth_prediction",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_352": {
                "name": {
                    "value": "pose_prediction",
                    "type": "str",
                    "possible_values": []
                }
            },
            "resize_area_75": {
                "variable": {
                    "value": "curr_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "mask_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(mask_ph, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(mask_image, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[int(opt.img_height / 2 ** s), int(opt.img_width / 2 ** s)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "abs_95": {
                "variable": {
                    "value": "curr_proj_error",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "curr_proj_image - curr_tgt_image",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_183": {
                "tensor": {
                    "value": "ref",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_184": {
                "tensor": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_203": {
                "input_tensor": {
                    "value": "tf.abs(dydx)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_204": {
                "x": {
                    "value": "dy2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_mean_221": {
                "input_tensor": {
                    "value": "tf.abs(image_dx)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_mean_222": {
                "input_tensor": {
                    "value": "tf.abs(image_dy)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "image_244": {
                "name": {
                    "value": "'scale%d_source_image_%d' % (s, i)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "self.deprocess_image(self.src_image_stack_all[s][:, :, :, i * 3:(i + 1) * 3])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "image_247": {
                "name": {
                    "value": "'scale%d_projected_image_%d' % (s, i)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "self.deprocess_image(self.proj_image_stack_all[s][:, :, :, i * 3:(i + 1) * 3])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "image_249": {
                "name": {
                    "value": "'scale%d_proj_error_%d' % (s, i)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "self.deprocess_image(tf.clip_by_value(self.proj_error_stack_all[s][:, :, :, i * 3:(i + 1) * 3] - 1, -1, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "image_252": {
                "name": {
                    "value": "'scale%d_mask' % s",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "self.mask_stack_all[s]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "latest_checkpoint_291": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "opt.checkpoint_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "slice_101": {
                "variable": {
                    "value": "curr_exp_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "pred_exp_logits[s]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 0, 0, i * 2]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, -1, -1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_107": {
                "variable": {
                    "value": "curr_exp",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "curr_exp_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(pred_exp_logits[s], [0, 0, 0, i * 2], [-1, -1, -1, 2])",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_123": {
                "variable": {
                    "value": "proj_image_stack",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[proj_image_stack, curr_proj_image]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_125": {
                "variable": {
                    "value": "proj_error_stack",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[proj_error_stack, curr_proj_error]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "trainable_variables_141": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_mean_201": {
                "input_tensor": {
                    "value": "tf.abs(dx2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_202": {
                "input_tensor": {
                    "value": "tf.abs(dxdy)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_203": {
                "x": {
                    "value": "dydx",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "abs_221": {
                "x": {
                    "value": "image_dx",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "abs_222": {
                "x": {
                    "value": "image_dy",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "image_241": {
                "name": {
                    "value": "'scale%d_exp_mask_%d' % (s, i)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.expand_dims(self.exp_mask_stack_all[s][:, :, :, i], -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_prod_274": {
                "input_tensor": {
                    "value": "tf.shape(v)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_89": {
                "input": {
                    "value": "pred_depth[s]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_110": {
                "input_tensor": {
                    "value": "curr_proj_error * tf.expand_dims(curr_exp[:, :, :, 1], -1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_113": {
                "input_tensor": {
                    "value": "curr_proj_error",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.abs(curr_proj_image - curr_tgt_image)",
                            "Call"
                        ],
                        [
                            "curr_proj_error * curr_mask",
                            "BinOp"
                        ]
                    ]
                }
            },
            "expand_dims_119": {
                "variable": {
                    "value": "exp_mask_stack",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "curr_exp[:, :, :, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_128": {
                "variable": {
                    "value": "exp_mask_stack",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[exp_mask_stack, tf.expand_dims(curr_exp[:, :, :, 1], -1)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_201": {
                "x": {
                    "value": "dx2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "abs_202": {
                "x": {
                    "value": "dxdy",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "expand_dims_243": {
                "input": {
                    "value": "self.exp_mask_stack_all[s][:, :, :, i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "clip_by_value_250": {
                "t": {
                    "value": "self.proj_error_stack_all[s][:, :, :, i * 3:(i + 1) * 3] - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_274": {
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "trainable_variables_275": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "model_variables_276": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "expand_dims_111": {
                "input": {
                    "value": "curr_exp[:, :, :, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_129": {
                "input": {
                    "value": "curr_exp[:, :, :, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "data_loader.py": {
        "tensorflow": {
            "string_input_producer_27": {
                "variable": {
                    "value": "image_paths_queue",
                    "type": "variable",
                    "possible_values": []
                },
                "string_tensor": {
                    "value": "file_list['image_file_list']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "random.randint(0, 2 ** 31 - 1)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "string_input_producer_31": {
                "variable": {
                    "value": "cam_paths_queue",
                    "type": "variable",
                    "possible_values": []
                },
                "string_tensor": {
                    "value": "file_list['cam_file_list']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "random.randint(0, 2 ** 31 - 1)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "WholeFileReader_40": {
                "variable": {
                    "value": "img_reader",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "decode_jpeg_42": {
                "variable": {
                    "value": "image_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "image_contents",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "TextLineReader_48": {
                "variable": {
                    "value": "cam_reader",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "decode_csv_53": {
                "variable": {
                    "value": "raw_cam_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "records": {
                    "value": "raw_cam_contents",
                    "type": "variable",
                    "possible_values": []
                },
                "record_defaults": {
                    "value": "rec_def",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "stack_55": {
                "variable": {
                    "value": "raw_cam_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "raw_cam_vec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.decode_csv(raw_cam_contents, record_defaults=rec_def)",
                            "Call"
                        ],
                        [
                            "tf.stack(raw_cam_vec)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_56": {
                "variable": {
                    "value": "intrinsics",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "raw_cam_vec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.decode_csv(raw_cam_contents, record_defaults=rec_def)",
                            "Call"
                        ],
                        [
                            "tf.stack(raw_cam_vec)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "batch_60": {
                "variable": {
                    "value": "(src_image_stack, tgt_image, intrinsics)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[src_image_stack, tgt_image, intrinsics]",
                    "type": "List",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_70": {
                "variable": {
                    "value": "zeros",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "intrinsics[:, 0, 0] / 2 ** s",
                            "BinOp"
                        ]
                    ]
                }
            },
            "stack_71": {
                "variable": {
                    "value": "r1",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[fx, zeros, cx]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_72": {
                "variable": {
                    "value": "r2",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[zeros, fy, cy]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_73": {
                "variable": {
                    "value": "r3",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[0.0, 0.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_74": {
                "variable": {
                    "value": "r3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "r3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([0.0, 0.0, 1.0], shape=[1, 3])",
                            "Call"
                        ],
                        [
                            "tf.tile(r3, [batch_size, 1])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[batch_size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_75": {
                "variable": {
                    "value": "intrinsics",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[r1, r2, r3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "slice_95": {
                "variable": {
                    "value": "tgt_image",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "image_seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.decode_jpeg(image_contents)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, tgt_start_idx, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, img_width, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_99": {
                "variable": {
                    "value": "src_image_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "image_seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.decode_jpeg(image_contents)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, int(img_width * (num_source // 2)), -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_103": {
                "variable": {
                    "value": "src_image_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "image_seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.decode_jpeg(image_contents)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, int(tgt_start_idx + img_width), 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, int(img_width * (num_source // 2)), -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_106": {
                "variable": {
                    "value": "src_image_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[src_image_1, src_image_2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_108": {
                "variable": {
                    "value": "src_image_stack",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.slice(src_image_seq, [0, i * img_width, 0], [-1, img_width, -1]) for i in range(num_source)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "slice_121": {
                "variable": {
                    "value": "tgt_image",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "image_seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.decode_jpeg(image_contents)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, tgt_start_idx, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, -1, img_width, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_125": {
                "variable": {
                    "value": "src_image_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "image_seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.decode_jpeg(image_contents)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, -1, int(img_width * (num_source // 2)), -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_129": {
                "variable": {
                    "value": "src_image_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "image_seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.decode_jpeg(image_contents)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, int(tgt_start_idx + img_width), 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, -1, int(img_width * (num_source // 2)), -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_132": {
                "variable": {
                    "value": "src_image_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[src_image_1, src_image_2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_134": {
                "variable": {
                    "value": "src_image_stack",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.slice(src_image_seq, [0, 0, i * img_width, 0], [-1, -1, img_width, -1]) for i in range(num_source)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_150": {
                "variable": {
                    "value": "intrinsics_mscale",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "intrinsics_mscale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.stack(intrinsics_mscale, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "slice_108": {
                "input_": {
                    "value": "src_image_seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([src_image_1, src_image_2], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([src_image_1, src_image_2], axis=2)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, i * img_width, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, img_width, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_134": {
                "input_": {
                    "value": "src_image_seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([src_image_1, src_image_2], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([src_image_1, src_image_2], axis=2)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, i * img_width, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, -1, img_width, -1]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "nets.py": {
        "tensorflow": {
            "concat_22": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tgt_image, src_image_stack]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "resize_nearest_neighbor_18": {
                "images": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([tgt_image, src_image_stack], axis=3)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[rH.value, rW.value]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_26": {
                "name_or_scope": {
                    "value": "pose_exp_net",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_82": {
                "name_or_scope": {
                    "value": "depth_net",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_transpose_106": {
                "variable": {
                    "value": "upcnv7",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cnv7b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cylin.conv2d(cnv7, 512, [3, 3], stride=1, padding=pad, scope='cnv7b')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "upcnv7",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_109": {
                "variable": {
                    "value": "i7_in",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[upcnv7, cnv6b]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_transpose_112": {
                "variable": {
                    "value": "upcnv6",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "icnv7",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cylin.conv2d(i7_in, 512, [3, 3], stride=1, padding=pad, scope='icnv7')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "upcnv6",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_114": {
                "variable": {
                    "value": "i6_in",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[upcnv6, cnv5b]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_transpose_117": {
                "variable": {
                    "value": "upcnv5",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "icnv6",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cylin.conv2d(i6_in, 512, [3, 3], stride=1, padding=pad, scope='icnv6')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "upcnv5",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_119": {
                "variable": {
                    "value": "i5_in",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[upcnv5, cnv4b]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_transpose_122": {
                "variable": {
                    "value": "upcnv4",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "icnv5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cylin.conv2d(i5_in, 256, [3, 3], stride=1, padding=pad, scope='icnv5')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "upcnv4",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_123": {
                "variable": {
                    "value": "i4_in",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[upcnv4, cnv3b]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "resize_bilinear_127": {
                "variable": {
                    "value": "disp4_up",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "disp4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DISP_SCALING * cylin.conv2d(icnv4, 1, [3, 3], stride=1, padding=pad, activation_fn=tf.sigmoid, normalizer_fn=None, scope='disp4') + MIN_DISP",
                            "BinOp"
                        ]
                    ]
                },
                "size": {
                    "value": "[np.int(H / 4), np.int(W / 4)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_transpose_129": {
                "variable": {
                    "value": "upcnv3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "icnv4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cylin.conv2d(i4_in, 128, [3, 3], stride=1, padding=pad, scope='icnv4')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "upcnv3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_130": {
                "variable": {
                    "value": "i3_in",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[upcnv3, cnv2b, disp4_up]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "resize_bilinear_134": {
                "variable": {
                    "value": "disp3_up",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "disp3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DISP_SCALING * cylin.conv2d(icnv3, 1, [3, 3], stride=1, padding=pad, activation_fn=tf.sigmoid, normalizer_fn=None, scope='disp3') + MIN_DISP",
                            "BinOp"
                        ]
                    ]
                },
                "size": {
                    "value": "[np.int(H / 2), np.int(W / 2)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_transpose_136": {
                "variable": {
                    "value": "upcnv2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "icnv3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cylin.conv2d(i3_in, 64, [3, 3], stride=1, padding=pad, scope='icnv3')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "upcnv2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_137": {
                "variable": {
                    "value": "i2_in",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[upcnv2, cnv1b, disp3_up]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "resize_bilinear_141": {
                "variable": {
                    "value": "disp2_up",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "disp2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DISP_SCALING * cylin.conv2d(icnv2, 1, [3, 3], stride=1, padding=pad, activation_fn=tf.sigmoid, normalizer_fn=None, scope='disp2') + MIN_DISP",
                            "BinOp"
                        ]
                    ]
                },
                "size": {
                    "value": "[H, W]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_transpose_143": {
                "variable": {
                    "value": "upcnv1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "icnv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cylin.conv2d(i2_in, 32, [3, 3], stride=1, padding=pad, scope='icnv2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "upcnv1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_144": {
                "variable": {
                    "value": "i1_in",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[upcnv1, disp2_up]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_46": {
                "variable": {
                    "value": "pose_avg",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "pose_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cylin.conv2d(cnv7, 6 * num_source, [1, 1], padding=pad, scope='pred', stride=1, normalizer_fn=None, activation_fn=None)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_41": {
                "name_or_scope": {
                    "value": "pose",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_transpose_53": {
                "variable": {
                    "value": "upcnv5",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cnv5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cylin.conv2d(cnv4, 256, [3, 3], stride=2, padding=pad, scope='cnv5')",
                            "Call"
                        ],
                        [
                            "cylin.conv2d(cnv4b, 512, [3, 3], stride=2, padding=pad, scope='cnv5')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "upcnv5",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_transpose_55": {
                "variable": {
                    "value": "upcnv4",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "upcnv5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d_transpose(cnv5, 256, [3, 3], stride=2, scope='upcnv5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d_transpose(icnv6, 256, [3, 3], stride=2, scope='upcnv5')",
                            "Call"
                        ],
                        [
                            "resize_like(upcnv5, cnv4b)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "upcnv4",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_transpose_59": {
                "variable": {
                    "value": "upcnv3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "upcnv4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d_transpose(upcnv5, 128, [3, 3], stride=2, scope='upcnv4')",
                            "Call"
                        ],
                        [
                            "slim.conv2d_transpose(icnv5, 128, [3, 3], stride=2, scope='upcnv4')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "upcnv3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_transpose_63": {
                "variable": {
                    "value": "upcnv2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "upcnv3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d_transpose(upcnv4, 64, [3, 3], stride=2, scope='upcnv3')",
                            "Call"
                        ],
                        [
                            "slim.conv2d_transpose(icnv4, 64, [3, 3], stride=2, scope='upcnv3')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "[5, 5]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "upcnv2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_transpose_67": {
                "variable": {
                    "value": "upcnv1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "upcnv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d_transpose(upcnv3, 32, [5, 5], stride=2, scope='upcnv2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d_transpose(icnv3, 32, [3, 3], stride=2, scope='upcnv2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "[7, 7]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "upcnv1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_49": {
                "tensor": {
                    "value": "pose_avg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(pose_pred, [1, 2])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, num_source, 6]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_52": {
                "name_or_scope": {
                    "value": "exp",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/unwarp/unwarp_panos.py": {
        "tensorflow": {
            "placeholder_27": {
                "variable": {
                    "value": "im_ph",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "uint8",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "im.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_28": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "im_ph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder('uint8', im.shape)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "expand_dims_29": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(im_ph, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(imgs, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "placeholder_31": {
                "variable": {
                    "value": "lutx_ph",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "lutx.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_32": {
                "variable": {
                    "value": "luty_ph",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "luty.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_34": {
                "variable": {
                    "value": "lutx_re",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lutx_ph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder('float32', lutx.shape)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_35": {
                "variable": {
                    "value": "lutx_re",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lutx_re",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(lutx_ph, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(lutx_re, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_36": {
                "variable": {
                    "value": "luty_re",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "luty_ph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder('float32', luty.shape)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_37": {
                "variable": {
                    "value": "luty_re",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "luty_re",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(luty_ph, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(luty_re, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_39": {
                "variable": {
                    "value": "coords",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[lutx_re, luty_re]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ConfigProto_44": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_46": {
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tf_cylindrical/layers.py": {
        "tensorflow": {
            "conv2d_25": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "num_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "strides": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[kernel_size, kernel_size]",
                            "List"
                        ]
                    ]
                },
                "padding": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "data_format": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'CYLIN'",
                            "Method Argument"
                        ]
                    ]
                },
                "dilations": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "conv2d_41": {
                "input": {
                    "value": "wrapped_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "wrap_pad(inputs, wrap_padding)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "num_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "strides": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[kernel_size, kernel_size]",
                            "List"
                        ]
                    ]
                },
                "padding": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "data_format": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "dilations": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "tf_cylindrical/pad.py": {
        "tensorflow": {
            "slice_57": {
                "variable": {
                    "value": "rpad",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "rstarts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[0] * rank",
                            "BinOp"
                        ]
                    ]
                },
                "size": {
                    "value": "sizes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[-1] * rank",
                            "BinOp"
                        ],
                        [
                            "[-1] * rank",
                            "BinOp"
                        ]
                    ]
                }
            },
            "slice_62": {
                "variable": {
                    "value": "lpad",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "lstarts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[0] * rank",
                            "BinOp"
                        ]
                    ]
                },
                "size": {
                    "value": "sizes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[-1] * rank",
                            "BinOp"
                        ],
                        [
                            "[-1] * rank",
                            "BinOp"
                        ]
                    ]
                }
            },
            "pad_39": {
                "tensor": {
                    "value": "wrap(tensor, wrapping, axis=axis[1])",
                    "type": "Call",
                    "possible_values": []
                },
                "paddings": {
                    "value": "paddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[[0, 0]] * rank",
                            "BinOp"
                        ]
                    ]
                },
                "mode": {
                    "value": "CONSTANT",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_64": {
                "values": {
                    "value": "[lpad, tensor, rpad]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "slice_83": {
                "input_": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "starts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[0] * rank",
                            "BinOp"
                        ]
                    ]
                },
                "size": {
                    "value": "sizes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[-1] * rank",
                            "BinOp"
                        ],
                        [
                            "[-1] * rank",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "train.py": {
        "tensorflow": {
            "set_random_seed_35": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8964",
                            "int"
                        ]
                    ]
                }
            },
            "run_49": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils.py": {
        "tensorflow": {
            "clip_by_value_42": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(z, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(z, -1), -1)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-np.pi",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "np.pi",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_value_43": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(y, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(y, -1), -1)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-np.pi",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "np.pi",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_value_44": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(x, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(x, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(tf.reshape(x, (-1, 1)), rep)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-np.pi",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "np.pi",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_47": {
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(z, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(z, -1), -1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_48": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(y, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(y, -1), -1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_49": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(x, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(x, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(tf.reshape(x, (-1, 1)), rep)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_51": {
                "variable": {
                    "value": "zeros",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[B, N, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_52": {
                "variable": {
                    "value": "ones",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[B, N, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cos_54": {
                "variable": {
                    "value": "cosz",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(z, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(z, -1), -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sin_55": {
                "variable": {
                    "value": "sinz",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(z, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(z, -1), -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_56": {
                "variable": {
                    "value": "rotz_1",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[cosz, -sinz, zeros]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_57": {
                "variable": {
                    "value": "rotz_2",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[sinz, cosz, zeros]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_58": {
                "variable": {
                    "value": "rotz_3",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[zeros, zeros, ones]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_59": {
                "variable": {
                    "value": "zmat",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[rotz_1, rotz_2, rotz_3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cos_61": {
                "variable": {
                    "value": "cosy",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(y, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(y, -1), -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sin_62": {
                "variable": {
                    "value": "siny",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(y, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(y, -1), -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_63": {
                "variable": {
                    "value": "roty_1",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[cosy, zeros, siny]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_64": {
                "variable": {
                    "value": "roty_2",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[zeros, ones, zeros]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_65": {
                "variable": {
                    "value": "roty_3",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[-siny, zeros, cosy]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_66": {
                "variable": {
                    "value": "ymat",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[roty_1, roty_2, roty_3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cos_68": {
                "variable": {
                    "value": "cosx",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(x, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(x, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(tf.reshape(x, (-1, 1)), rep)",
                            "Call"
                        ]
                    ]
                }
            },
            "sin_69": {
                "variable": {
                    "value": "sinx",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(x, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(x, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(tf.reshape(x, (-1, 1)), rep)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_70": {
                "variable": {
                    "value": "rotx_1",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[ones, zeros, zeros]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_71": {
                "variable": {
                    "value": "rotx_2",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[zeros, cosx, -sinx]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_72": {
                "variable": {
                    "value": "rotx_3",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[zeros, sinx, cosx]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_73": {
                "variable": {
                    "value": "xmat",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[rotx_1, rotx_2, rotx_3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_75": {
                "a": {
                    "value": "xmat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([rotx_1, rotx_2, rotx_3], axis=2)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "ymat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([roty_1, roty_2, roty_3], axis=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "slice_86": {
                "variable": {
                    "value": "translation",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "vec",
                    "type": "variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_87": {
                "variable": {
                    "value": "translation",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "translation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(vec, [0, 0], [-1, 3])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(translation, -1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "slice_88": {
                "variable": {
                    "value": "rx",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "vec",
                    "type": "variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_89": {
                "variable": {
                    "value": "ry",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "vec",
                    "type": "variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_90": {
                "variable": {
                    "value": "rz",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "vec",
                    "type": "variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 5]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_92": {
                "variable": {
                    "value": "rot_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rot_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "euler2mat(rz, ry, rx)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(rot_mat, axis=[1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_93": {
                "variable": {
                    "value": "transform_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[rot_mat, translation]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_108": {
                "variable": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 / (depth + 1e-06)",
                            "BinOp"
                        ],
                        [
                            "depth / normalizer",
                            "BinOp"
                        ],
                        [
                            "depth / (np.percentile(depth, pc) + 1e-06)",
                            "BinOp"
                        ],
                        [
                            "np.clip(depth, 0, 1)",
                            "Call"
                        ],
                        [
                            "gray2rgb(depth, cmap=cmap)",
                            "Call"
                        ],
                        [
                            "depth[:keep_H]",
                            "Subscript"
                        ],
                        [
                            "depth",
                            "variable"
                        ],
                        [
                            "tf.reshape(depth, [batch, 1, -1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch, 1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_109": {
                "variable": {
                    "value": "pixel_coords",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "pixel_coords",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(pixel_coords, [batch, 3, -1])",
                            "Call"
                        ],
                        [
                            "tf.concat([theta, h, filler], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([x_n, y_n, filler], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(intrinsics, pixel_coords)",
                            "Call"
                        ],
                        [
                            "pixel_coords[:, 0:2, :]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(pixel_coords, [batch, 2, height, width])",
                            "Call"
                        ],
                        [
                            "meshgrid(batch, height, width)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch, 3, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_126": {
                "variable": {
                    "value": "cam_coords",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "cam_coords",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([X, Y, Z], axis=1) * depth",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(tf.matrix_inverse(intrinsics), pixel_coords) * depth",
                            "BinOp"
                        ],
                        [
                            "tf.concat([cam_coords, ones], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(cam_coords, [batch, -1, height, width])",
                            "Call"
                        ],
                        [
                            "tf.reshape(cam_coords, [batch, 4, -1])",
                            "Call"
                        ],
                        [
                            "pixel2cam(depth, pixel_coords, intrinsics, is_cylin=is_cylin)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch, -1, height, width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_140": {
                "variable": {
                    "value": "cam_coords",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "cam_coords",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([X, Y, Z], axis=1) * depth",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(tf.matrix_inverse(intrinsics), pixel_coords) * depth",
                            "BinOp"
                        ],
                        [
                            "tf.concat([cam_coords, ones], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(cam_coords, [batch, -1, height, width])",
                            "Call"
                        ],
                        [
                            "tf.reshape(cam_coords, [batch, 4, -1])",
                            "Call"
                        ],
                        [
                            "pixel2cam(depth, pixel_coords, intrinsics, is_cylin=is_cylin)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch, 4, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_141": {
                "variable": {
                    "value": "unnormalized_pixel_coords",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "proj",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "cam_coords",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([X, Y, Z], axis=1) * depth",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(tf.matrix_inverse(intrinsics), pixel_coords) * depth",
                            "BinOp"
                        ],
                        [
                            "tf.concat([cam_coords, ones], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(cam_coords, [batch, -1, height, width])",
                            "Call"
                        ],
                        [
                            "tf.reshape(cam_coords, [batch, 4, -1])",
                            "Call"
                        ],
                        [
                            "pixel2cam(depth, pixel_coords, intrinsics, is_cylin=is_cylin)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_160": {
                "variable": {
                    "value": "pixel_coords",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "intrinsics",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "pixel_coords",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(pixel_coords, [batch, 3, -1])",
                            "Call"
                        ],
                        [
                            "tf.concat([theta, h, filler], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([x_n, y_n, filler], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(intrinsics, pixel_coords)",
                            "Call"
                        ],
                        [
                            "pixel_coords[:, 0:2, :]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(pixel_coords, [batch, 2, height, width])",
                            "Call"
                        ],
                        [
                            "meshgrid(batch, height, width)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_162": {
                "variable": {
                    "value": "pixel_coords",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "pixel_coords",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(pixel_coords, [batch, 3, -1])",
                            "Call"
                        ],
                        [
                            "tf.concat([theta, h, filler], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([x_n, y_n, filler], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(intrinsics, pixel_coords)",
                            "Call"
                        ],
                        [
                            "pixel_coords[:, 0:2, :]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(pixel_coords, [batch, 2, height, width])",
                            "Call"
                        ],
                        [
                            "meshgrid(batch, height, width)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch, 2, height, width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_176": {
                "variable": {
                    "value": "x_t",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.ones(shape=tf.stack([height, 1]))",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.transpose(tf.expand_dims(tf.linspace(-1.0, 1.0, width), 1), [1, 0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_179": {
                "variable": {
                    "value": "y_t",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.expand_dims(tf.linspace(-1.0, 1.0, height), 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.ones(shape=tf.stack([1, width]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tile_188": {
                "variable": {
                    "value": "coords",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(coords, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[batch, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_113": {
                "variable": {
                    "value": "cylinder_coords",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.matrix_inverse(intrinsics)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "pixel_coords",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(pixel_coords, [batch, 3, -1])",
                            "Call"
                        ],
                        [
                            "tf.concat([theta, h, filler], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([x_n, y_n, filler], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(intrinsics, pixel_coords)",
                            "Call"
                        ],
                        [
                            "pixel_coords[:, 0:2, :]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(pixel_coords, [batch, 2, height, width])",
                            "Call"
                        ],
                        [
                            "meshgrid(batch, height, width)",
                            "Call"
                        ]
                    ]
                }
            },
            "sin_115": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "cylinder_coords[:, 0:1, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cos_117": {
                "variable": {
                    "value": "Z",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "cylinder_coords[:, 0:1, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_124": {
                "variable": {
                    "value": "ones",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch, 1, height * width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_125": {
                "variable": {
                    "value": "cam_coords",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[cam_coords, ones]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "slice_144": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "unnormalized_pixel_coords",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(proj, cam_coords)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_145": {
                "variable": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "unnormalized_pixel_coords",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(proj, cam_coords)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 1, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_146": {
                "variable": {
                    "value": "Z",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "unnormalized_pixel_coords",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(proj, cam_coords)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 2, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "atan2_148": {
                "variable": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sin(cylinder_coords[:, 0:1, :])",
                            "Call"
                        ],
                        [
                            "tf.slice(unnormalized_pixel_coords, [0, 0, 0], [-1, 1, -1])",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "Z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cos(cylinder_coords[:, 0:1, :])",
                            "Call"
                        ],
                        [
                            "tf.slice(unnormalized_pixel_coords, [0, 2, 0], [-1, 1, -1])",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_149": {
                "variable": {
                    "value": "filler",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch, 1, height * width)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "concat_150": {
                "variable": {
                    "value": "pixel_coords",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[theta, h, filler]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "slice_152": {
                "variable": {
                    "value": "x_u",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "unnormalized_pixel_coords",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(proj, cam_coords)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_153": {
                "variable": {
                    "value": "y_u",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "unnormalized_pixel_coords",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(proj, cam_coords)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 1, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_154": {
                "variable": {
                    "value": "z_u",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "unnormalized_pixel_coords",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(proj, cam_coords)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 2, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_157": {
                "variable": {
                    "value": "filler",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch, 1, height * width)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "concat_158": {
                "variable": {
                    "value": "pixel_coords",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[x_n, y_n, filler]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_163": {
                "a": {
                    "value": "pixel_coords",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(pixel_coords, [batch, 3, -1])",
                            "Call"
                        ],
                        [
                            "tf.concat([theta, h, filler], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([x_n, y_n, filler], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(intrinsics, pixel_coords)",
                            "Call"
                        ],
                        [
                            "pixel_coords[:, 0:2, :]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(pixel_coords, [batch, 2, height, width])",
                            "Call"
                        ],
                        [
                            "meshgrid(batch, height, width)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_like_184": {
                "variable": {
                    "value": "ones",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(tf.ones(shape=tf.stack([height, 1])), tf.transpose(tf.expand_dims(tf.linspace(-1.0, 1.0, width), 1), [1, 0]))",
                            "Call"
                        ],
                        [
                            "(x_t + 1.0) * 0.5 * tf.cast(width - 1, tf.float32)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "stack_185": {
                "variable": {
                    "value": "coords",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[x_t, y_t, ones]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_187": {
                "variable": {
                    "value": "coords",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[x_t, y_t]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_233": {
                "variable": {
                    "value": "rep",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.expand_dims(tf.ones(shape=tf.stack([n_repeats])), 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_237": {
                "variable": {
                    "value": "rep",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "rep",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(tf.expand_dims(tf.ones(shape=tf.stack([n_repeats])), 1), [1, 0])",
                            "Call"
                        ],
                        [
                            "tf.cast(rep, 'float32')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_238": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.reshape(x, (-1, 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "rep",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(tf.expand_dims(tf.ones(shape=tf.stack([n_repeats])), 1), [1, 0])",
                            "Call"
                        ],
                        [
                            "tf.cast(rep, 'float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "where_247": {
                "variable": {
                    "value": "dim_safe",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.less(dim, zero)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "dim + width",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "where_251": {
                "variable": {
                    "value": "dim_safe",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.greater(dim, dim_max)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "dim - width",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "split_257": {
                "variable": {
                    "value": "(coords_x, coords_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "coords",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([x_t, y_t, ones], axis=0)",
                            "Call"
                        ],
                        [
                            "tf.stack([x_t, y_t], axis=0)",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(coords, 0), [batch, 1, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_263": {
                "variable": {
                    "value": "coords_x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "coords_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(coords_x, 'float32')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_264": {
                "variable": {
                    "value": "coords_y",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "coords_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(coords_y, 'float32')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "floor_266": {
                "variable": {
                    "value": "x0",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "coords_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(coords_x, 'float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "floor_268": {
                "variable": {
                    "value": "y0",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "coords_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(coords_y, 'float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_271": {
                "variable": {
                    "value": "y_max",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.shape(imgs)[1] - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_272": {
                "variable": {
                    "value": "x_max",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.shape(imgs)[2] - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "clip_by_value_293": {
                "variable": {
                    "value": "y0_safe",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "y0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.floor(coords_y)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "zero",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.float32(0)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_max": {
                    "value": "y_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.shape(imgs)[1] - 1, 'float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_value_294": {
                "variable": {
                    "value": "y1_safe",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "y1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y0 + 1",
                            "BinOp"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "zero",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.float32(0)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_max": {
                    "value": "y_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.shape(imgs)[1] - 1, 'float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_300": {
                "variable": {
                    "value": "dim2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "inp_size[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_301": {
                "variable": {
                    "value": "dim1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "inp_size[2] * inp_size[1]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_302": {
                "variable": {
                    "value": "base",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "_repeat(tf.cast(tf.range(coord_size[0]), 'float32') * dim1, coord_size[1] * coord_size[2])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[out_size[0], out_size[1], out_size[2], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_310": {
                "variable": {
                    "value": "idx00",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x0_safe + base_y0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_320": {
                "variable": {
                    "value": "imgs_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "imgs * mask",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.stack([-1, inp_size[3]])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_321": {
                "variable": {
                    "value": "imgs_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "imgs_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(imgs, tf.stack([-1, inp_size[3]]))",
                            "Call"
                        ],
                        [
                            "tf.cast(imgs_flat, 'float32')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_322": {
                "variable": {
                    "value": "im00",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.gather(imgs_flat, tf.cast(idx00, 'int32'))",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "coords.get_shape().as_list()",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_323": {
                "variable": {
                    "value": "im01",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.gather(imgs_flat, tf.cast(idx01, 'int32'))",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "coords.get_shape().as_list()",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_324": {
                "variable": {
                    "value": "im10",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.gather(imgs_flat, tf.cast(idx10, 'int32'))",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "coords.get_shape().as_list()",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_325": {
                "variable": {
                    "value": "im11",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.gather(imgs_flat, tf.cast(idx11, 'int32'))",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "coords.get_shape().as_list()",
                            "Call"
                        ]
                    ]
                }
            },
            "add_n_332": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[w00 * im00, w01 * im01, w10 * im10, w11 * im11]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "divide_346": {
                "x": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.reduce_mean(tensor)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_40": {
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(z, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(z, -1), -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_176": {
                "shape": {
                    "value": "tf.stack([height, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_177": {
                "a": {
                    "value": "tf.expand_dims(tf.linspace(-1.0, 1.0, width), 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_179": {
                "input": {
                    "value": "tf.linspace(-1.0, 1.0, height)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_180": {
                "shape": {
                    "value": "tf.stack([1, width])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_181": {
                "x": {
                    "value": "width - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_182": {
                "x": {
                    "value": "height - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_188": {
                "input": {
                    "value": "coords",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([x_t, y_t, ones], axis=0)",
                            "Call"
                        ],
                        [
                            "tf.stack([x_t, y_t], axis=0)",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(coords, 0), [batch, 1, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_239": {
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(x, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(x, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(tf.reshape(x, (-1, 1)), rep)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "name_scope_256": {
                "name": {
                    "value": "image_sampling",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_279": {
                "variable": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.shape(imgs)[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "clip_by_value_286": {
                "variable": {
                    "value": "x0_safe",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "x0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.floor(coords_x)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "zero",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.float32(0)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_max": {
                    "value": "x_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.shape(imgs)[2] - 1, 'float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_value_287": {
                "variable": {
                    "value": "x1_safe",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x0 + 1",
                            "BinOp"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "zero",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.float32(0)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_max": {
                    "value": "x_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.shape(imgs)[2] - 1, 'float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_346": {
                "input_tensor": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "concat_119": {
                "values": {
                    "value": "[X, Y, Z]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_121": {
                "a": {
                    "value": "tf.matrix_inverse(intrinsics)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "pixel_coords",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(pixel_coords, [batch, 3, -1])",
                            "Call"
                        ],
                        [
                            "tf.concat([theta, h, filler], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([x_n, y_n, filler], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(intrinsics, pixel_coords)",
                            "Call"
                        ],
                        [
                            "pixel_coords[:, 0:2, :]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(pixel_coords, [batch, 2, height, width])",
                            "Call"
                        ],
                        [
                            "meshgrid(batch, height, width)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_177": {
                "input": {
                    "value": "tf.linspace(-1.0, 1.0, width)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "linspace_179": {
                "start": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "stop": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "num": {
                    "value": "height",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "expand_dims_234": {
                "input": {
                    "value": "tf.ones(shape=tf.stack([n_repeats]))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_238": {
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(x, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(x, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(tf.reshape(x, (-1, 1)), rep)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "less_247": {
                "x": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "zero",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.float32(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "greater_251": {
                "x": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "dim_max",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stack_320": {
                "values": {
                    "value": "[-1, inp_size[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_322": {
                "params": {
                    "value": "imgs_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(imgs, tf.stack([-1, inp_size[3]]))",
                            "Call"
                        ],
                        [
                            "tf.cast(imgs_flat, 'float32')",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "tf.cast(idx00, 'int32')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_323": {
                "params": {
                    "value": "imgs_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(imgs, tf.stack([-1, inp_size[3]]))",
                            "Call"
                        ],
                        [
                            "tf.cast(imgs_flat, 'float32')",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "tf.cast(idx01, 'int32')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_324": {
                "params": {
                    "value": "imgs_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(imgs, tf.stack([-1, inp_size[3]]))",
                            "Call"
                        ],
                        [
                            "tf.cast(imgs_flat, 'float32')",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "tf.cast(idx10, 'int32')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_325": {
                "params": {
                    "value": "imgs_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(imgs, tf.stack([-1, inp_size[3]]))",
                            "Call"
                        ],
                        [
                            "tf.cast(imgs_flat, 'float32')",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "tf.cast(idx11, 'int32')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_147": {
                "x": {
                    "value": "X * X + Z * Z",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_176": {
                "values": {
                    "value": "[height, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "linspace_178": {
                "start": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "stop": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "num": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.shape(imgs)[2], 'float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_180": {
                "values": {
                    "value": "[1, width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_234": {
                "shape": {
                    "value": "tf.stack([n_repeats])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_322": {
                "x": {
                    "value": "idx00",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x0_safe + base_y0, [-1])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "int32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_323": {
                "x": {
                    "value": "idx01",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x0_safe + base_y1",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "int32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_324": {
                "x": {
                    "value": "idx10",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x1_safe + base_y0",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "int32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_325": {
                "x": {
                    "value": "idx11",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x1_safe + base_y1",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "int32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "shape_271": {
                "input": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "imgs * mask",
                            "BinOp"
                        ]
                    ]
                }
            },
            "shape_272": {
                "input": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "imgs * mask",
                            "BinOp"
                        ]
                    ]
                }
            },
            "shape_279": {
                "input": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "imgs * mask",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cast_304": {
                "x": {
                    "value": "tf.range(coord_size[0])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "stack_234": {
                "values": {
                    "value": "[n_repeats]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    }
}