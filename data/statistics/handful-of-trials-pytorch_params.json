{
    "config/utils.py": {
        "tensorflow": {
            "ConfigProto_17": {
                "variable": {
                    "value": "cfg",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_20": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "cfg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "truncated_normal_21": {
                "shape": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "size",
                            "Method Argument"
                        ]
                    ]
                },
                "stddev": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "std",
                            "Method Argument"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "Parameter_33": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "truncated_normal(size=(ensemble_size, in_features, out_features), std=1.0 / (2.0 * np.sqrt(in_features)))",
                            "Call"
                        ],
                        [
                            "nn.Parameter(w)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_35": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(ensemble_size, 1, out_features, dtype=torch.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_26": {
                "data": {
                    "value": "val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sess.run(tf.truncated_normal(shape=size, stddev=std))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_8": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_35": {
                "*size": {
                    "value": "ensemble_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ensemble_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "mbexp.py": {
        "tensorflow": {
            "set_random_seed_30": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seed",
                            "Method Argument"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "manual_seed_23": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seed",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "is_available_24": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_all_25": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seed",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "MPC.py": {
        "torch": {
            "is_available_17": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_17": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "from_numpy_325": {
                "variable": {
                    "value": "ac_seqs",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "ac_seqs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(ac_seqs).float().to(TORCH_DEVICE)",
                            "Call"
                        ],
                        [
                            "ac_seqs.view(-1, self.plan_hor, self.dU)",
                            "Call"
                        ],
                        [
                            "tiled.contiguous().view(self.plan_hor, -1, self.dU)",
                            "Call"
                        ],
                        [
                            "ac_seqs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_345": {
                "variable": {
                    "value": "cur_obs",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.sy_cur_obs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_349": {
                "variable": {
                    "value": "costs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "nopt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ac_seqs.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "self.npart",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "TORCH_DEVICE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda') if torch.cuda.is_available() else torch.device('cpu')",
                            "IfExp"
                        ]
                    ]
                }
            },
            "no_grad_320": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_376": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(proc_obs, acs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "from_numpy_250": {
                "variable": {
                    "value": "val_in",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.train_in[idxs[:5000]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_251": {
                "variable": {
                    "value": "val_targ",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.train_targs[idxs[:5000]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_231": {
                "variable": {
                    "value": "train_in",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.train_in[batch_idxs]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_232": {
                "variable": {
                    "value": "train_targ",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.train_targs[batch_idxs]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "exp_235": {
                "variable": {
                    "value": "inv_var",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-logvar",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "randn_like_380": {
                "input": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model(train_in, ret_logvar=True)",
                            "Call"
                        ],
                        [
                            "self.model(val_in)",
                            "Call"
                        ],
                        [
                            "self.model(inputs)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "TORCH_DEVICE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda') if torch.cuda.is_available() else torch.device('cpu')",
                            "IfExp"
                        ]
                    ]
                }
            }
        }
    },
    "config/cartpole.py": {
        "torch": {
            "tensor_98": {
                "variable": {
                    "value": "ee_sub",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0, 0.6]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "TORCH_DEVICE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda') if torch.cuda.is_available() else torch.device('cpu')",
                            "IfExp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_14": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_14": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Parameter_35": {
                "variable": {
                    "value": "self.inputs_mu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(in_features)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_36": {
                "variable": {
                    "value": "self.inputs_sigma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(in_features)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_38": {
                "variable": {
                    "value": "self.max_logvar",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(1, out_features // 2, dtype=torch.float32) / 2.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_39": {
                "variable": {
                    "value": "self.min_logvar",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "-torch.ones(1, out_features // 2, dtype=torch.float32) * 10.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_56": {
                "variable": {
                    "value": "self.inputs_mu.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.mean(data, axis=0, keepdims=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_57": {
                "variable": {
                    "value": "self.inputs_sigma.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.std(data, axis=0, keepdims=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_171": {
                "variable": {
                    "value": "model.optim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cat_155": {
                "tensors": {
                    "value": "[x0 - 0.6 * theta.sin(), -0.6 * theta.cos()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_35": {
                "*size": {
                    "value": "in_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_36": {
                "*size": {
                    "value": "in_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "softplus_78": {
                "input": {
                    "value": "self.max_logvar - logvar",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softplus_79": {
                "input": {
                    "value": "logvar - self.min_logvar",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_84": {
                "input": {
                    "value": "logvar",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs[:, :, self.out_features // 2:]",
                            "Subscript"
                        ],
                        [
                            "self.max_logvar - F.softplus(self.max_logvar - logvar)",
                            "BinOp"
                        ],
                        [
                            "self.min_logvar + F.softplus(logvar - self.min_logvar)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_38": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "out_features // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_120": {
                "tensors": {
                    "value": "[obs[:, 1:2].sin(), obs[:, 1:2].cos(), obs[:, :1], obs[:, 2:]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_39": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "out_features // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "config/halfcheetah.py": {
        "torch": {
            "is_available_16": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_16": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Parameter_39": {
                "variable": {
                    "value": "self.inputs_mu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(in_features)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_40": {
                "variable": {
                    "value": "self.inputs_sigma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(in_features)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_42": {
                "variable": {
                    "value": "self.max_logvar",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(1, out_features // 2, dtype=torch.float32) / 2.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_43": {
                "variable": {
                    "value": "self.min_logvar",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "-torch.ones(1, out_features // 2, dtype=torch.float32) * 10.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_61": {
                "variable": {
                    "value": "self.inputs_mu.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.mean(data, axis=0, keepdims=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_62": {
                "variable": {
                    "value": "self.inputs_sigma.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.std(data, axis=0, keepdims=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_172": {
                "variable": {
                    "value": "model.optim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cat_136": {
                "tensors": {
                    "value": "[pred[:, :1], obs[:, 1:] + pred[:, 1:]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_39": {
                "*size": {
                    "value": "in_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_40": {
                "*size": {
                    "value": "in_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "softplus_86": {
                "input": {
                    "value": "self.max_logvar - logvar",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softplus_87": {
                "input": {
                    "value": "logvar - self.min_logvar",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_92": {
                "input": {
                    "value": "logvar",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs[:, :, self.out_features // 2:]",
                            "Subscript"
                        ],
                        [
                            "self.max_logvar - F.softplus(self.max_logvar - logvar)",
                            "BinOp"
                        ],
                        [
                            "self.min_logvar + F.softplus(logvar - self.min_logvar)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_42": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "out_features // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_124": {
                "tensors": {
                    "value": "[obs[:, 1:2], obs[:, 2:3].sin(), obs[:, 2:3].cos(), obs[:, 3:]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_147": {
                "tensors": {
                    "value": "[next_obs[:, :1], next_obs[:, 1:] - obs[:, 1:]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_43": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "out_features // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "config/pusher.py": {
        "torch": {
            "is_available_14": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_14": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Parameter_35": {
                "variable": {
                    "value": "self.inputs_mu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(in_features)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_36": {
                "variable": {
                    "value": "self.inputs_sigma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(in_features)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_38": {
                "variable": {
                    "value": "self.max_logvar",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(1, out_features // 2, dtype=torch.float32) / 2.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_39": {
                "variable": {
                    "value": "self.min_logvar",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "-torch.ones(1, out_features // 2, dtype=torch.float32) * 10.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_56": {
                "variable": {
                    "value": "self.inputs_mu.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.mean(data, axis=0, keepdims=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_57": {
                "variable": {
                    "value": "self.inputs_sigma.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.std(data, axis=0, keepdims=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_168": {
                "variable": {
                    "value": "model.optim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "from_numpy_145": {
                "variable": {
                    "value": "self.goal_pos_gpu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "goal_pos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.ENV.ac_goal_pos",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_35": {
                "*size": {
                    "value": "in_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_36": {
                "*size": {
                    "value": "in_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "softplus_78": {
                "input": {
                    "value": "self.max_logvar - logvar",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softplus_79": {
                "input": {
                    "value": "logvar - self.min_logvar",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_84": {
                "input": {
                    "value": "logvar",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs[:, :, self.out_features // 2:]",
                            "Subscript"
                        ],
                        [
                            "self.max_logvar - F.softplus(self.max_logvar - logvar)",
                            "BinOp"
                        ],
                        [
                            "self.min_logvar + F.softplus(logvar - self.min_logvar)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_38": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "out_features // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_39": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "out_features // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "config/reacher.py": {
        "torch": {
            "is_available_16": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_16": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Parameter_37": {
                "variable": {
                    "value": "self.inputs_mu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(in_features)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_38": {
                "variable": {
                    "value": "self.inputs_sigma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(in_features)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_40": {
                "variable": {
                    "value": "self.max_logvar",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(1, out_features // 2, dtype=torch.float32) / 2.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_41": {
                "variable": {
                    "value": "self.min_logvar",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "-torch.ones(1, out_features // 2, dtype=torch.float32) * 10.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_58": {
                "variable": {
                    "value": "self.inputs_mu.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.mean(data, axis=0, keepdims=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_59": {
                "variable": {
                    "value": "self.inputs_sigma.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.std(data, axis=0, keepdims=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_157": {
                "variable": {
                    "value": "model.optim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "from_numpy_140": {
                "ndarray": {
                    "value": "cost",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.sum(np.square(dis), axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_37": {
                "*size": {
                    "value": "in_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_38": {
                "*size": {
                    "value": "in_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "softplus_80": {
                "input": {
                    "value": "self.max_logvar - logvar",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softplus_81": {
                "input": {
                    "value": "logvar - self.min_logvar",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_86": {
                "input": {
                    "value": "logvar",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs[:, :, self.out_features // 2:]",
                            "Subscript"
                        ],
                        [
                            "self.max_logvar - F.softplus(self.max_logvar - logvar)",
                            "BinOp"
                        ],
                        [
                            "self.min_logvar + F.softplus(logvar - self.min_logvar)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_40": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "out_features // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_41": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "out_features // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}