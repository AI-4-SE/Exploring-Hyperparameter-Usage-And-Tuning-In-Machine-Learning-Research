{
    "corpora/create_mfc_corpus.py": {
        "sklearn": {
            "train_test_split_37": {
                "variable": {
                    "value": "(X_train, X_devtest, y_train, y_devtest)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X_data",
                    "type": null,
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y_data",
                    "type": null,
                    "possible_values": []
                },
                "random_state": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stratify": {
                    "value": "y_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "train_test_split_42": {
                "variable": {
                    "value": "(X_dev, X_test, y_dev, y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X_devtest",
                    "type": null,
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y_devtest",
                    "type": null,
                    "possible_values": []
                },
                "random_state": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stratify": {
                    "value": "y_devtest",
                    "type": "Variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "postprocess/ppmi_words.py": {
        "sklearn": {
            "CountVectorizer_52": {
                "variable": {
                    "value": "vocab_vectorizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "ngram_range": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tokenizer": {
                    "value": "tokenizeText",
                    "type": "Variable",
                    "possible_values": []
                },
                "lowercase": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "token_pattern": {
                    "value": "\\x08*",
                    "type": "Constant",
                    "possible_values": []
                },
                "min_df": {
                    "value": "min_freq",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(sys.argv[3])",
                            "Call"
                        ]
                    ]
                }
            },
            "CountVectorizer_56": {
                "variable": {
                    "value": "vectorizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "ngram_range": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tokenizer": {
                    "value": "tokenizeText",
                    "type": "Variable",
                    "possible_values": []
                },
                "vocabulary": {
                    "value": "freq_vocab",
                    "type": "Name",
                    "possible_values": [
                        [
                            "vocab_vectorizer.vocabulary_.keys()",
                            "Call"
                        ]
                    ]
                },
                "lowercase": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "token_pattern": {
                    "value": "\\x08*",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "cli.py": {
        "tensorflow": {
            "run_61": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "main.py": {
        "tensorflow": {
            "build_tensor_info_123": {
                "variable": {
                    "value": "input_token_idxs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "model.t_variables['token_idxs']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "build_tensor_info_124": {
                "variable": {
                    "value": "input_sent_l",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "model.t_variables['sent_l']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "build_tensor_info_125": {
                "variable": {
                    "value": "input_mask_tokens",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "model.t_variables['mask_tokens']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "build_tensor_info_126": {
                "variable": {
                    "value": "input_mask_sents",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "model.t_variables['mask_sents']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "build_tensor_info_127": {
                "variable": {
                    "value": "input_doc_l",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "model.t_variables['doc_l']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "build_tensor_info_128": {
                "variable": {
                    "value": "input_gold_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "model.t_variables['gold_labels']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "build_tensor_info_129": {
                "variable": {
                    "value": "input_doc_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "model.t_variables['doc_ids']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "build_tensor_info_130": {
                "variable": {
                    "value": "input_max_sent_l",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "model.t_variables['max_sent_l']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "build_tensor_info_131": {
                "variable": {
                    "value": "input_max_doc_l",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "model.t_variables['max_doc_l']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "build_tensor_info_132": {
                "variable": {
                    "value": "input_mask_parser_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "model.t_variables['mask_parser_1']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "build_tensor_info_133": {
                "variable": {
                    "value": "input_mask_parser_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "model.t_variables['mask_parser_2']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "build_tensor_info_134": {
                "variable": {
                    "value": "input_batch_l",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "model.t_variables['batch_l']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "build_tensor_info_135": {
                "variable": {
                    "value": "input_keep_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "model.t_variables['keep_prob']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "build_tensor_info_137": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "model.final_output",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "build_signature_def_143": {
                "variable": {
                    "value": "prediction_signature",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "{'input_token_idxs': input_token_idxs, 'input_sent_l': input_sent_l, 'input_mask_tokens': input_mask_tokens, 'input_mask_sents': input_mask_sents, 'input_doc_l': input_doc_l, 'input_gold_labels': input_gold_labels, 'input_doc_ids': input_doc_ids, 'input_max_sent_l': input_max_sent_l, 'input_max_doc_l': input_max_doc_l, 'input_mask_parser_1': input_mask_parser_1, 'input_mask_parser_2': input_mask_parser_2, 'input_batch_l': input_batch_l, 'input_keep_prob': input_keep_prob}",
                    "type": "Dict",
                    "possible_values": []
                },
                "outputs": {
                    "value": "{'output': output, 'str_scores': str_scores}",
                    "type": "Dict",
                    "possible_values": []
                },
                "method_name": {
                    "value": "tf.saved_model.signature_constants.PREDICT_METHOD_NAME",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_random_seed_52": {
                "seed": {
                    "value": "config.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "build_tensor_info_139": {
                "variable": {
                    "value": "str_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.convert_to_tensor(np.empty([1, 1]), np.float64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "build_tensor_info_141": {
                "variable": {
                    "value": "str_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "model.str_scores",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_92": {
                "variable": {
                    "value": "gvi",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_91": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "convert_to_tensor_139": {
                "value": {
                    "value": "np.empty([1, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "np.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "models.py": {
        "tensorflow": {
            "placeholder_13": {
                "variable": {
                    "value": "t_variables[keep_prob]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_14": {
                "variable": {
                    "value": "t_variables[batch_l]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_15": {
                "variable": {
                    "value": "t_variables[token_idxs]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None, None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_16": {
                "variable": {
                    "value": "t_variables[sent_l]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_17": {
                "variable": {
                    "value": "t_variables[doc_l]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_18": {
                "variable": {
                    "value": "t_variables[max_sent_l]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_19": {
                "variable": {
                    "value": "t_variables[max_doc_l]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_20": {
                "variable": {
                    "value": "t_variables[gold_labels]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_21": {
                "variable": {
                    "value": "t_variables[doc_ids]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_22": {
                "variable": {
                    "value": "t_variables[mask_tokens]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None, None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_23": {
                "variable": {
                    "value": "t_variables[mask_sents]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_24": {
                "variable": {
                    "value": "t_variables[mask_parser_1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None, None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_25": {
                "variable": {
                    "value": "t_variables[mask_parser_2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None, None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "embedding_lookup_136": {
                "variable": {
                    "value": "tokens_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.t_variables['token_idxs'][:, :max_doc_l, :max_sent_l]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "dropout_137": {
                "variable": {
                    "value": "tokens_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tokens_input",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(self.embeddings, self.t_variables['token_idxs'][:, :max_doc_l, :max_sent_l])",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(tokens_input, self.t_variables['keep_prob'])",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "self.t_variables['keep_prob']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reshape_142": {
                "variable": {
                    "value": "tokens_input_do",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tokens_input",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(self.embeddings, self.t_variables['token_idxs'][:, :max_doc_l, :max_sent_l])",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(tokens_input, self.t_variables['keep_prob'])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_l * max_doc_l, max_sent_l, self.config.d_embed]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_143": {
                "variable": {
                    "value": "sent_l",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "sent_l",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.t_variables['sent_l']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(sent_l, [batch_l * max_doc_l])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_l * max_doc_l]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_144": {
                "variable": {
                    "value": "mask_tokens",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "mask_tokens",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.t_variables['mask_tokens'][:, :max_doc_l, :max_sent_l]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(mask_tokens, [batch_l * max_doc_l, -1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_l * max_doc_l, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_147": {
                "variable": {
                    "value": "tokens_sem",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tokens_output[0][:, :, :self.config.dim_sem], tokens_output[1][:, :, :self.config.dim_sem]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_148": {
                "variable": {
                    "value": "tokens_str",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tokens_output[0][:, :, self.config.dim_sem:], tokens_output[1][:, :, self.config.dim_sem:]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "to_float_314": {
                "variable": {
                    "value": "positions",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.range(length)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_345": {
                "variable": {
                    "value": "padded_signal",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "signal",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.get_timing_signal(length, min_timescale, max_timescale, num_timescales)",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [0, 2 * self.config.dim_sem - 2 * num_timescales]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_70": {
                "variable": {
                    "value": "self.embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "emb",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config.n_embed, self.config.d_embed]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "self.xavier_init",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_72": {
                "variable": {
                    "value": "embeddings_root",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "emb_root",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 1, 2 * self.config.dim_sem]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "self.xavier_init",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_74": {
                "variable": {
                    "value": "embeddings_root_s",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "emb_root_s",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 1, 2 * self.config.dim_sem]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "self.xavier_init",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_77": {
                "variable": {
                    "value": "w_comb",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w_comb",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[4 * self.config.dim_sem, 2 * self.config.dim_sem]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "self.xavier_init",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_79": {
                "variable": {
                    "value": "w_comb_both",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w_comb_both",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[6 * self.config.dim_sem, 2 * self.config.dim_sem]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "self.xavier_init",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_81": {
                "variable": {
                    "value": "b_comb",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bias_comb",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2 * self.config.dim_sem]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_83": {
                "variable": {
                    "value": "w_comb_s",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w_comb_s",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[4 * self.config.dim_sem, 2 * self.config.dim_sem]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "self.xavier_init",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_85": {
                "variable": {
                    "value": "b_comb_s",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bias_comb_s",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2 * self.config.dim_sem]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_87": {
                "variable": {
                    "value": "w_softmax",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w_softmax",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2 * self.config.dim_sem, self.config.dim_output]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "self.xavier_init",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_89": {
                "variable": {
                    "value": "b_softmax",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bias_softmax",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config.dim_output]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "self.xavier_init",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_92": {
                "variable": {
                    "value": "w_sem_doc",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w_sem_doc",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2 * self.config.dim_sem, 2 * self.config.dim_sem]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "self.xavier_init",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_95": {
                "variable": {
                    "value": "w_str_doc",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w_str_doc",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2 * self.config.dim_sem, 2 * self.config.dim_str]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "self.xavier_init",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_153": {
                "variable": {
                    "value": "temp1",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_l * max_doc_l, max_sent_l, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_154": {
                "variable": {
                    "value": "temp2",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_l * max_doc_l, 1, max_sent_l]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_156": {
                "variable": {
                    "value": "mask1",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_l * max_doc_l, max_sent_l, max_sent_l - 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_157": {
                "variable": {
                    "value": "mask2",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_l * max_doc_l, max_sent_l - 1, max_sent_l]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_158": {
                "variable": {
                    "value": "mask1",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[temp1, mask1]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_159": {
                "variable": {
                    "value": "mask2",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[temp2, mask2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matrix_transpose_180": {
                "variable": {
                    "value": "str_scores_s",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "str_scores_s_",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "concat_181": {
                "variable": {
                    "value": "tokens_sem_root",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.tile(embeddings_root_s, [batch_l * max_doc_l, 1, 1]), tokens_sem]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_182": {
                "variable": {
                    "value": "tokens_output_",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "str_scores_s",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matrix_transpose(str_scores_s_)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "tokens_sem_root",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat([tf.tile(embeddings_root_s, [batch_l * max_doc_l, 1, 1]), tokens_sem], 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_187": {
                "variable": {
                    "value": "tokens_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tokens_output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "LReLu(tf.tensordot(tf.concat([tokens_sem, tokens_input_do], 2), w_comb_s, [[2], [0]]) + b_comb_s)",
                            "Call"
                        ],
                        [
                            "tokens_output * tf.expand_dims(mask_tokens, 2)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(tokens_output, 1)",
                            "Call"
                        ],
                        [
                            "LReLu(tf.tensordot(tf.concat([tokens_sem, tokens_output_], 2), w_comb_s, [[2], [0]]) + b_comb_s)",
                            "Call"
                        ],
                        [
                            "tokens_output * tf.expand_dims(mask_tokens, 2)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(tokens_output, 1) / tf.expand_dims(tf.cast(sent_l, tf.float64), 1)",
                            "BinOp"
                        ],
                        [
                            "tokens_output + tf.expand_dims((mask_tokens - 1) * 999, 2)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_max(tokens_output, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tokens_output, [batch_l, max_doc_l, 2 * self.config.dim_sem])",
                            "Call"
                        ],
                        [
                            "self.add_timing_signal(tokens_output, max_doc_l, num_timescales=self.config.dim_sem)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tokens_output, [batch_l * max_doc_l, 2 * self.config.dim_sem])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_202": {
                "variable": {
                    "value": "sents_sem",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tokens_output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "LReLu(tf.tensordot(tf.concat([tokens_sem, tokens_input_do], 2), w_comb_s, [[2], [0]]) + b_comb_s)",
                            "Call"
                        ],
                        [
                            "tokens_output * tf.expand_dims(mask_tokens, 2)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(tokens_output, 1)",
                            "Call"
                        ],
                        [
                            "LReLu(tf.tensordot(tf.concat([tokens_sem, tokens_output_], 2), w_comb_s, [[2], [0]]) + b_comb_s)",
                            "Call"
                        ],
                        [
                            "tokens_output * tf.expand_dims(mask_tokens, 2)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(tokens_output, 1) / tf.expand_dims(tf.cast(sent_l, tf.float64), 1)",
                            "BinOp"
                        ],
                        [
                            "tokens_output + tf.expand_dims((mask_tokens - 1) * 999, 2)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_max(tokens_output, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tokens_output, [batch_l, max_doc_l, 2 * self.config.dim_sem])",
                            "Call"
                        ],
                        [
                            "self.add_timing_signal(tokens_output, max_doc_l, num_timescales=self.config.dim_sem)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tokens_output, [batch_l * max_doc_l, 2 * self.config.dim_sem])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w_sem_doc",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('w_sem_doc', [2 * self.config.dim_sem, 2 * self.config.dim_sem], dtype=tf.float64, initializer=self.xavier_init)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_203": {
                "variable": {
                    "value": "sents_sem",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "sents_sem",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.concat([sents_output[0][:, :, :self.config.dim_sem], sents_output[1][:, :, :self.config.dim_sem]], 2)",
                            "Call"
                        ],
                        [
                            "tf.matmul(tokens_output, w_sem_doc)",
                            "Call"
                        ],
                        [
                            "tf.reshape(sents_sem, [batch_l, max_doc_l, 2 * self.config.dim_sem])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_l, max_doc_l, 2 * self.config.dim_sem]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_204": {
                "variable": {
                    "value": "sents_str",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tokens_output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "LReLu(tf.tensordot(tf.concat([tokens_sem, tokens_input_do], 2), w_comb_s, [[2], [0]]) + b_comb_s)",
                            "Call"
                        ],
                        [
                            "tokens_output * tf.expand_dims(mask_tokens, 2)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(tokens_output, 1)",
                            "Call"
                        ],
                        [
                            "LReLu(tf.tensordot(tf.concat([tokens_sem, tokens_output_], 2), w_comb_s, [[2], [0]]) + b_comb_s)",
                            "Call"
                        ],
                        [
                            "tokens_output * tf.expand_dims(mask_tokens, 2)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(tokens_output, 1) / tf.expand_dims(tf.cast(sent_l, tf.float64), 1)",
                            "BinOp"
                        ],
                        [
                            "tokens_output + tf.expand_dims((mask_tokens - 1) * 999, 2)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_max(tokens_output, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tokens_output, [batch_l, max_doc_l, 2 * self.config.dim_sem])",
                            "Call"
                        ],
                        [
                            "self.add_timing_signal(tokens_output, max_doc_l, num_timescales=self.config.dim_sem)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tokens_output, [batch_l * max_doc_l, 2 * self.config.dim_sem])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w_str_doc",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('w_str_doc', [2 * self.config.dim_sem, 2 * self.config.dim_str], dtype=tf.float64, initializer=self.xavier_init)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_205": {
                "variable": {
                    "value": "sents_str",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "sents_str",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.concat([sents_output[0][:, :, self.config.dim_sem:], sents_output[1][:, :, self.config.dim_sem:]], 2)",
                            "Call"
                        ],
                        [
                            "tf.matmul(tokens_output, w_str_doc)",
                            "Call"
                        ],
                        [
                            "tf.reshape(sents_str, [batch_l, max_doc_l, 2 * self.config.dim_str])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_l, max_doc_l, 2 * self.config.dim_str]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_207": {
                "variable": {
                    "value": "sents_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tokens_output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "LReLu(tf.tensordot(tf.concat([tokens_sem, tokens_input_do], 2), w_comb_s, [[2], [0]]) + b_comb_s)",
                            "Call"
                        ],
                        [
                            "tokens_output * tf.expand_dims(mask_tokens, 2)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(tokens_output, 1)",
                            "Call"
                        ],
                        [
                            "LReLu(tf.tensordot(tf.concat([tokens_sem, tokens_output_], 2), w_comb_s, [[2], [0]]) + b_comb_s)",
                            "Call"
                        ],
                        [
                            "tokens_output * tf.expand_dims(mask_tokens, 2)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(tokens_output, 1) / tf.expand_dims(tf.cast(sent_l, tf.float64), 1)",
                            "BinOp"
                        ],
                        [
                            "tokens_output + tf.expand_dims((mask_tokens - 1) * 999, 2)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_max(tokens_output, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tokens_output, [batch_l, max_doc_l, 2 * self.config.dim_sem])",
                            "Call"
                        ],
                        [
                            "self.add_timing_signal(tokens_output, max_doc_l, num_timescales=self.config.dim_sem)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tokens_output, [batch_l * max_doc_l, 2 * self.config.dim_sem])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_l, max_doc_l, 2 * self.config.dim_sem]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_210": {
                "variable": {
                    "value": "sents_sem",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[sents_output[0][:, :, :self.config.dim_sem], sents_output[1][:, :, :self.config.dim_sem]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_211": {
                "variable": {
                    "value": "sents_str",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[sents_output[0][:, :, self.config.dim_sem:], sents_output[1][:, :, self.config.dim_sem:]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matrix_transpose_241": {
                "variable": {
                    "value": "str_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "str_scores_",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "matmul_244": {
                "variable": {
                    "value": "sents_children",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "str_scores_no_root",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "sents_sem",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.concat([sents_output[0][:, :, :self.config.dim_sem], sents_output[1][:, :, :self.config.dim_sem]], 2)",
                            "Call"
                        ],
                        [
                            "tf.matmul(tokens_output, w_sem_doc)",
                            "Call"
                        ],
                        [
                            "tf.reshape(sents_sem, [batch_l, max_doc_l, 2 * self.config.dim_sem])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_265": {
                "variable": {
                    "value": "sents_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "sents_output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "LReLu(tf.tensordot(tf.concat([sents_sem, sents_input], 2), w_comb, [[2], [0]]) + b_comb)",
                            "Call"
                        ],
                        [
                            "LReLu(tf.tensordot(tf.concat([sents_sem, sents_input], 2), w_comb, [[2], [0]]) + b_comb)",
                            "Call"
                        ],
                        [
                            "sents_output * tf.expand_dims(mask_sents, 2)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(sents_output, 1)",
                            "Call"
                        ],
                        [
                            "LReLu(tf.tensordot(tf.concat([sents_sem, sents_children], 2), w_comb, [[2], [0]]) + b_comb)",
                            "Call"
                        ],
                        [
                            "sents_output * tf.expand_dims(mask_sents, 2)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(sents_output, 1) / tf.expand_dims(tf.cast(doc_l, tf.float64), 1)",
                            "BinOp"
                        ],
                        [
                            "LReLu(tf.tensordot(tf.concat([sents_sem, sents_parents], 2), w_comb, [[2], [0]]) + b_comb)",
                            "Call"
                        ],
                        [
                            "sents_output + tf.expand_dims((mask_sents - 1) * 999, 2)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_max(sents_output, 1)",
                            "Call"
                        ],
                        [
                            "LReLu(tf.tensordot(tf.concat([sents_sem, sents_parents, sents_children], 2), w_comb_both, [[2], [0]]) + b_comb)",
                            "Call"
                        ],
                        [
                            "sents_weighted * tf.expand_dims(mask_sents, 2)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(sents_output, 1)",
                            "Call"
                        ],
                        [
                            "LReLu(tf.tensordot(tf.concat([sents_output, sents_children_2], 2), w_comb, [[2], [0]]) + b_comb)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AdamOptimizer_282": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.config.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_with_logits_286": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.final_output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels": {
                    "value": "self.t_variables['gold_labels']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_mean_288": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_289": {
                "variable": {
                    "value": "model_params",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "Model",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_collection_290": {
                "variable": {
                    "value": "str_params",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "Structure",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_320": {
                "values": {
                    "value": "[tf.sin(scaled_time), tf.cos(scaled_time)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_69": {
                "name_or_scope": {
                    "value": "Embeddings",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_76": {
                "name_or_scope": {
                    "value": "Model",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_98": {
                "name_or_scope": {
                    "value": "Structure/doc",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_99": {
                "name": {
                    "value": "w_parser_p",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2 * self.config.dim_str, 2 * self.config.dim_str]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "self.xavier_init",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_102": {
                "name": {
                    "value": "w_parser_c",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2 * self.config.dim_str, 2 * self.config.dim_str]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "self.xavier_init",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_105": {
                "name": {
                    "value": "w_parser_s",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2 * self.config.dim_str, 2 * self.config.dim_str]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "self.xavier_init",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_107": {
                "name": {
                    "value": "bias_parser_p",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2 * self.config.dim_str]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "self.xavier_init",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_109": {
                "name": {
                    "value": "bias_parser_c",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2 * self.config.dim_str]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "self.xavier_init",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_111": {
                "name": {
                    "value": "w_parser_root",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2 * self.config.dim_str, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "self.xavier_init",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_113": {
                "name_or_scope": {
                    "value": "Structure/sent",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_114": {
                "name": {
                    "value": "w_parser_p",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2 * self.config.dim_str, 2 * self.config.dim_str]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "self.xavier_init",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_117": {
                "name": {
                    "value": "w_parser_c",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2 * self.config.dim_str, 2 * self.config.dim_str]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "self.xavier_init",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_120": {
                "name": {
                    "value": "bias_parser_p",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2 * self.config.dim_str]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "self.xavier_init",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_122": {
                "name": {
                    "value": "bias_parser_c",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2 * self.config.dim_str]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "self.xavier_init",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_125": {
                "name": {
                    "value": "w_parser_s",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2 * self.config.dim_str, 2 * self.config.dim_str]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "self.xavier_init",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_127": {
                "name": {
                    "value": "w_parser_root",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2 * self.config.dim_str, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "self.xavier_init",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_165": {
                "variable": {
                    "value": "mask_ll_tokens",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_tokens",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.t_variables['mask_tokens'][:, :max_doc_l, :max_sent_l]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(mask_tokens, [batch_l * max_doc_l, -1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_166": {
                "variable": {
                    "value": "mask_ll_tokens_trans",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "mask_ll_tokens",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.expand_dims(mask_tokens, 2)",
                            "Call"
                        ],
                        [
                            "mask_ll_tokens",
                            "Name"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_172": {
                "x": {
                    "value": "mask_diags",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matrix_diag_part(mask_tokens_mult)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_173": {
                "variable": {
                    "value": "zero_matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_l * max_doc_l, max_sent_l, max_sent_l]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_198": {
                "variable": {
                    "value": "tokens_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tokens_output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "LReLu(tf.tensordot(tf.concat([tokens_sem, tokens_input_do], 2), w_comb_s, [[2], [0]]) + b_comb_s)",
                            "Call"
                        ],
                        [
                            "tokens_output * tf.expand_dims(mask_tokens, 2)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(tokens_output, 1)",
                            "Call"
                        ],
                        [
                            "LReLu(tf.tensordot(tf.concat([tokens_sem, tokens_output_], 2), w_comb_s, [[2], [0]]) + b_comb_s)",
                            "Call"
                        ],
                        [
                            "tokens_output * tf.expand_dims(mask_tokens, 2)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(tokens_output, 1) / tf.expand_dims(tf.cast(sent_l, tf.float64), 1)",
                            "BinOp"
                        ],
                        [
                            "tokens_output + tf.expand_dims((mask_tokens - 1) * 999, 2)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_max(tokens_output, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tokens_output, [batch_l, max_doc_l, 2 * self.config.dim_sem])",
                            "Call"
                        ],
                        [
                            "self.add_timing_signal(tokens_output, max_doc_l, num_timescales=self.config.dim_sem)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tokens_output, [batch_l * max_doc_l, 2 * self.config.dim_sem])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_l, max_doc_l, 2 * self.config.dim_sem]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_200": {
                "variable": {
                    "value": "tokens_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tokens_output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "LReLu(tf.tensordot(tf.concat([tokens_sem, tokens_input_do], 2), w_comb_s, [[2], [0]]) + b_comb_s)",
                            "Call"
                        ],
                        [
                            "tokens_output * tf.expand_dims(mask_tokens, 2)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(tokens_output, 1)",
                            "Call"
                        ],
                        [
                            "LReLu(tf.tensordot(tf.concat([tokens_sem, tokens_output_], 2), w_comb_s, [[2], [0]]) + b_comb_s)",
                            "Call"
                        ],
                        [
                            "tokens_output * tf.expand_dims(mask_tokens, 2)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(tokens_output, 1) / tf.expand_dims(tf.cast(sent_l, tf.float64), 1)",
                            "BinOp"
                        ],
                        [
                            "tokens_output + tf.expand_dims((mask_tokens - 1) * 999, 2)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_max(tokens_output, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tokens_output, [batch_l, max_doc_l, 2 * self.config.dim_sem])",
                            "Call"
                        ],
                        [
                            "self.add_timing_signal(tokens_output, max_doc_l, num_timescales=self.config.dim_sem)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tokens_output, [batch_l * max_doc_l, 2 * self.config.dim_sem])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_l * max_doc_l, 2 * self.config.dim_sem]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_215": {
                "variable": {
                    "value": "sents_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tokens_output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "LReLu(tf.tensordot(tf.concat([tokens_sem, tokens_input_do], 2), w_comb_s, [[2], [0]]) + b_comb_s)",
                            "Call"
                        ],
                        [
                            "tokens_output * tf.expand_dims(mask_tokens, 2)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(tokens_output, 1)",
                            "Call"
                        ],
                        [
                            "LReLu(tf.tensordot(tf.concat([tokens_sem, tokens_output_], 2), w_comb_s, [[2], [0]]) + b_comb_s)",
                            "Call"
                        ],
                        [
                            "tokens_output * tf.expand_dims(mask_tokens, 2)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(tokens_output, 1) / tf.expand_dims(tf.cast(sent_l, tf.float64), 1)",
                            "BinOp"
                        ],
                        [
                            "tokens_output + tf.expand_dims((mask_tokens - 1) * 999, 2)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_max(tokens_output, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tokens_output, [batch_l, max_doc_l, 2 * self.config.dim_sem])",
                            "Call"
                        ],
                        [
                            "self.add_timing_signal(tokens_output, max_doc_l, num_timescales=self.config.dim_sem)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tokens_output, [batch_l * max_doc_l, 2 * self.config.dim_sem])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_l, max_doc_l, 2 * self.config.dim_sem]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_225": {
                "variable": {
                    "value": "mask_ll_sents",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_sents",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.t_variables['mask_sents'][:, :max_doc_l]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_226": {
                "variable": {
                    "value": "mask_ll_sents_trans",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "mask_ll_sents",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.expand_dims(mask_sents, 2)",
                            "Call"
                        ],
                        [
                            "mask_ll_sents",
                            "Name"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_232": {
                "x": {
                    "value": "mask_sents_diags",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matrix_diag_part(mask_sents_mult)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_233": {
                "variable": {
                    "value": "zero_matrix_sents",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_l, max_doc_l, max_doc_l]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_248": {
                "variable": {
                    "value": "sents_sem_root",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.tile(embeddings_root, [batch_l, 1, 1]), sents_sem]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_249": {
                "variable": {
                    "value": "sents_parents",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "str_scores",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matrix_transpose(str_scores_)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "sents_sem_root",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat([tf.tile(embeddings_root, [batch_l, 1, 1]), sents_sem], 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_278": {
                "a": {
                    "value": "final_output",
                    "type": "Name",
                    "possible_values": [
                        [
                            "MLP(sents_output, 'output', self.t_variables['keep_prob'], self.config.seed, self.xavier_init)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w_softmax",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('w_softmax', [2 * self.config.dim_sem, self.config.dim_output], dtype=tf.float64, initializer=self.xavier_init)",
                            "Call"
                        ]
                    ]
                }
            },
            "AdagradOptimizer_284": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.config.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_285": {
                "name_or_scope": {
                    "value": "Model",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clip_by_global_norm_296": {
                "variable": {
                    "value": "(gradients, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "gradients",
                    "type": "Variable",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "self.config.clip_ratio",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_317": {
                "x": {
                    "value": "tf.to_float(tf.range(num_timescales)) * -log_timescale_increment",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "expand_dims_319": {
                "input": {
                    "value": "inv_timescales",
                    "type": "Name",
                    "possible_values": [
                        [
                            "min_timescale * tf.exp(tf.to_float(tf.range(num_timescales)) * -log_timescale_increment)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_346": {
                "tensor": {
                    "value": "padded_signal",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.pad(signal, [[0, 0], [0, 2 * self.config.dim_sem - 2 * num_timescales]])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, length, 2 * self.config.dim_sem]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_186": {
                "input": {
                    "value": "mask_tokens",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.t_variables['mask_tokens'][:, :max_doc_l, :max_sent_l]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(mask_tokens, [batch_l * max_doc_l, -1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_max_193": {
                "variable": {
                    "value": "tokens_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tokens_output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "LReLu(tf.tensordot(tf.concat([tokens_sem, tokens_input_do], 2), w_comb_s, [[2], [0]]) + b_comb_s)",
                            "Call"
                        ],
                        [
                            "tokens_output * tf.expand_dims(mask_tokens, 2)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(tokens_output, 1)",
                            "Call"
                        ],
                        [
                            "LReLu(tf.tensordot(tf.concat([tokens_sem, tokens_output_], 2), w_comb_s, [[2], [0]]) + b_comb_s)",
                            "Call"
                        ],
                        [
                            "tokens_output * tf.expand_dims(mask_tokens, 2)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(tokens_output, 1) / tf.expand_dims(tf.cast(sent_l, tf.float64), 1)",
                            "BinOp"
                        ],
                        [
                            "tokens_output + tf.expand_dims((mask_tokens - 1) * 999, 2)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_max(tokens_output, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tokens_output, [batch_l, max_doc_l, 2 * self.config.dim_sem])",
                            "Call"
                        ],
                        [
                            "self.add_timing_signal(tokens_output, max_doc_l, num_timescales=self.config.dim_sem)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tokens_output, [batch_l * max_doc_l, 2 * self.config.dim_sem])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_259": {
                "variable": {
                    "value": "sents_children_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "str_scores_no_root",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "sents_output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "LReLu(tf.tensordot(tf.concat([sents_sem, sents_input], 2), w_comb, [[2], [0]]) + b_comb)",
                            "Call"
                        ],
                        [
                            "LReLu(tf.tensordot(tf.concat([sents_sem, sents_input], 2), w_comb, [[2], [0]]) + b_comb)",
                            "Call"
                        ],
                        [
                            "sents_output * tf.expand_dims(mask_sents, 2)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(sents_output, 1)",
                            "Call"
                        ],
                        [
                            "LReLu(tf.tensordot(tf.concat([sents_sem, sents_children], 2), w_comb, [[2], [0]]) + b_comb)",
                            "Call"
                        ],
                        [
                            "sents_output * tf.expand_dims(mask_sents, 2)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(sents_output, 1) / tf.expand_dims(tf.cast(doc_l, tf.float64), 1)",
                            "BinOp"
                        ],
                        [
                            "LReLu(tf.tensordot(tf.concat([sents_sem, sents_parents], 2), w_comb, [[2], [0]]) + b_comb)",
                            "Call"
                        ],
                        [
                            "sents_output + tf.expand_dims((mask_sents - 1) * 999, 2)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_max(sents_output, 1)",
                            "Call"
                        ],
                        [
                            "LReLu(tf.tensordot(tf.concat([sents_sem, sents_parents, sents_children], 2), w_comb_both, [[2], [0]]) + b_comb)",
                            "Call"
                        ],
                        [
                            "sents_weighted * tf.expand_dims(mask_sents, 2)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(sents_output, 1)",
                            "Call"
                        ],
                        [
                            "LReLu(tf.tensordot(tf.concat([sents_output, sents_children_2], 2), w_comb, [[2], [0]]) + b_comb)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_264": {
                "input": {
                    "value": "mask_sents",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.t_variables['mask_sents'][:, :max_doc_l]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_max_271": {
                "variable": {
                    "value": "sents_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "sents_output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "LReLu(tf.tensordot(tf.concat([sents_sem, sents_input], 2), w_comb, [[2], [0]]) + b_comb)",
                            "Call"
                        ],
                        [
                            "LReLu(tf.tensordot(tf.concat([sents_sem, sents_input], 2), w_comb, [[2], [0]]) + b_comb)",
                            "Call"
                        ],
                        [
                            "sents_output * tf.expand_dims(mask_sents, 2)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(sents_output, 1)",
                            "Call"
                        ],
                        [
                            "LReLu(tf.tensordot(tf.concat([sents_sem, sents_children], 2), w_comb, [[2], [0]]) + b_comb)",
                            "Call"
                        ],
                        [
                            "sents_output * tf.expand_dims(mask_sents, 2)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(sents_output, 1) / tf.expand_dims(tf.cast(doc_l, tf.float64), 1)",
                            "BinOp"
                        ],
                        [
                            "LReLu(tf.tensordot(tf.concat([sents_sem, sents_parents], 2), w_comb, [[2], [0]]) + b_comb)",
                            "Call"
                        ],
                        [
                            "sents_output + tf.expand_dims((mask_sents - 1) * 999, 2)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_max(sents_output, 1)",
                            "Call"
                        ],
                        [
                            "LReLu(tf.tensordot(tf.concat([sents_sem, sents_parents, sents_children], 2), w_comb_both, [[2], [0]]) + b_comb)",
                            "Call"
                        ],
                        [
                            "sents_weighted * tf.expand_dims(mask_sents, 2)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(sents_output, 1)",
                            "Call"
                        ],
                        [
                            "LReLu(tf.tensordot(tf.concat([sents_output, sents_children_2], 2), w_comb, [[2], [0]]) + b_comb)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sin_320": {
                "x": {
                    "value": "scaled_time",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.expand_dims(positions, 1) * tf.expand_dims(inv_timescales, 0)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cos_320": {
                "x": {
                    "value": "scaled_time",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.expand_dims(positions, 1) * tf.expand_dims(inv_timescales, 0)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "constant_initializer_81": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_initializer_85": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensordot_151": {
                "a": {
                    "value": "tf.concat([tokens_sem, tokens_input_do], 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "w_comb_s",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('w_comb_s', [4 * self.config.dim_sem, 2 * self.config.dim_sem], dtype=tf.float64, initializer=self.xavier_init)",
                            "Call"
                        ]
                    ]
                },
                "axes": {
                    "value": "[[2], [0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "logical_not_172": {
                "x": {
                    "value": "tf.cast(mask_diags, tf.bool)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_177": {
                "input": {
                    "value": "mask_tokens",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.t_variables['mask_tokens'][:, :max_doc_l, :max_sent_l]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(mask_tokens, [batch_l * max_doc_l, -1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tile_181": {
                "input": {
                    "value": "embeddings_root_s",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('emb_root_s', [1, 1, 2 * self.config.dim_sem], dtype=tf.float64, initializer=self.xavier_init)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[batch_l * max_doc_l, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensordot_183": {
                "a": {
                    "value": "tf.concat([tokens_sem, tokens_output_], 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "w_comb_s",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('w_comb_s', [4 * self.config.dim_sem, 2 * self.config.dim_sem], dtype=tf.float64, initializer=self.xavier_init)",
                            "Call"
                        ]
                    ]
                },
                "axes": {
                    "value": "[[2], [0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_189": {
                "input": {
                    "value": "mask_tokens",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.t_variables['mask_tokens'][:, :max_doc_l, :max_sent_l]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(mask_tokens, [batch_l * max_doc_l, -1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_190": {
                "input_tensor": {
                    "value": "tokens_output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "LReLu(tf.tensordot(tf.concat([tokens_sem, tokens_input_do], 2), w_comb_s, [[2], [0]]) + b_comb_s)",
                            "Call"
                        ],
                        [
                            "tokens_output * tf.expand_dims(mask_tokens, 2)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(tokens_output, 1)",
                            "Call"
                        ],
                        [
                            "LReLu(tf.tensordot(tf.concat([tokens_sem, tokens_output_], 2), w_comb_s, [[2], [0]]) + b_comb_s)",
                            "Call"
                        ],
                        [
                            "tokens_output * tf.expand_dims(mask_tokens, 2)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(tokens_output, 1) / tf.expand_dims(tf.cast(sent_l, tf.float64), 1)",
                            "BinOp"
                        ],
                        [
                            "tokens_output + tf.expand_dims((mask_tokens - 1) * 999, 2)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_max(tokens_output, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tokens_output, [batch_l, max_doc_l, 2 * self.config.dim_sem])",
                            "Call"
                        ],
                        [
                            "self.add_timing_signal(tokens_output, max_doc_l, num_timescales=self.config.dim_sem)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tokens_output, [batch_l * max_doc_l, 2 * self.config.dim_sem])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_190": {
                "input": {
                    "value": "tf.cast(sent_l, tf.float64)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "logical_not_232": {
                "x": {
                    "value": "tf.cast(mask_sents_diags, tf.bool)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_238": {
                "input": {
                    "value": "mask_sents",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.t_variables['mask_sents'][:, :max_doc_l]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_267": {
                "input": {
                    "value": "mask_sents",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.t_variables['mask_sents'][:, :max_doc_l]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_268": {
                "input_tensor": {
                    "value": "sents_output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "LReLu(tf.tensordot(tf.concat([sents_sem, sents_input], 2), w_comb, [[2], [0]]) + b_comb)",
                            "Call"
                        ],
                        [
                            "LReLu(tf.tensordot(tf.concat([sents_sem, sents_input], 2), w_comb, [[2], [0]]) + b_comb)",
                            "Call"
                        ],
                        [
                            "sents_output * tf.expand_dims(mask_sents, 2)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(sents_output, 1)",
                            "Call"
                        ],
                        [
                            "LReLu(tf.tensordot(tf.concat([sents_sem, sents_children], 2), w_comb, [[2], [0]]) + b_comb)",
                            "Call"
                        ],
                        [
                            "sents_output * tf.expand_dims(mask_sents, 2)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(sents_output, 1) / tf.expand_dims(tf.cast(doc_l, tf.float64), 1)",
                            "BinOp"
                        ],
                        [
                            "LReLu(tf.tensordot(tf.concat([sents_sem, sents_parents], 2), w_comb, [[2], [0]]) + b_comb)",
                            "Call"
                        ],
                        [
                            "sents_output + tf.expand_dims((mask_sents - 1) * 999, 2)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_max(sents_output, 1)",
                            "Call"
                        ],
                        [
                            "LReLu(tf.tensordot(tf.concat([sents_sem, sents_parents, sents_children], 2), w_comb_both, [[2], [0]]) + b_comb)",
                            "Call"
                        ],
                        [
                            "sents_weighted * tf.expand_dims(mask_sents, 2)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(sents_output, 1)",
                            "Call"
                        ],
                        [
                            "LReLu(tf.tensordot(tf.concat([sents_output, sents_children_2], 2), w_comb, [[2], [0]]) + b_comb)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_268": {
                "input": {
                    "value": "tf.cast(doc_l, tf.float64)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_275": {
                "variable": {
                    "value": "sents_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "sents_output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "LReLu(tf.tensordot(tf.concat([sents_sem, sents_input], 2), w_comb, [[2], [0]]) + b_comb)",
                            "Call"
                        ],
                        [
                            "LReLu(tf.tensordot(tf.concat([sents_sem, sents_input], 2), w_comb, [[2], [0]]) + b_comb)",
                            "Call"
                        ],
                        [
                            "sents_output * tf.expand_dims(mask_sents, 2)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(sents_output, 1)",
                            "Call"
                        ],
                        [
                            "LReLu(tf.tensordot(tf.concat([sents_sem, sents_children], 2), w_comb, [[2], [0]]) + b_comb)",
                            "Call"
                        ],
                        [
                            "sents_output * tf.expand_dims(mask_sents, 2)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(sents_output, 1) / tf.expand_dims(tf.cast(doc_l, tf.float64), 1)",
                            "BinOp"
                        ],
                        [
                            "LReLu(tf.tensordot(tf.concat([sents_sem, sents_parents], 2), w_comb, [[2], [0]]) + b_comb)",
                            "Call"
                        ],
                        [
                            "sents_output + tf.expand_dims((mask_sents - 1) * 999, 2)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_max(sents_output, 1)",
                            "Call"
                        ],
                        [
                            "LReLu(tf.tensordot(tf.concat([sents_sem, sents_parents, sents_children], 2), w_comb_both, [[2], [0]]) + b_comb)",
                            "Call"
                        ],
                        [
                            "sents_weighted * tf.expand_dims(mask_sents, 2)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(sents_output, 1)",
                            "Call"
                        ],
                        [
                            "LReLu(tf.tensordot(tf.concat([sents_output, sents_children_2], 2), w_comb, [[2], [0]]) + b_comb)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "to_float_318": {
                "x": {
                    "value": "tf.range(num_timescales)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_151": {
                "values": {
                    "value": "[tokens_sem, tokens_input_do]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_183": {
                "values": {
                    "value": "[tokens_sem, tokens_output_]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_190": {
                "x": {
                    "value": "sent_l",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.t_variables['sent_l']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(sent_l, [batch_l * max_doc_l])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_192": {
                "input": {
                    "value": "(mask_tokens - 1) * 999",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensordot_216": {
                "a": {
                    "value": "tf.concat([sents_sem, sents_input], 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "w_comb",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('w_comb', [4 * self.config.dim_sem, 2 * self.config.dim_sem], dtype=tf.float64, initializer=self.xavier_init)",
                            "Call"
                        ]
                    ]
                },
                "axes": {
                    "value": "[[2], [0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensordot_218": {
                "a": {
                    "value": "tf.concat([sents_sem, sents_input], 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "w_comb",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('w_comb', [4 * self.config.dim_sem, 2 * self.config.dim_sem], dtype=tf.float64, initializer=self.xavier_init)",
                            "Call"
                        ]
                    ]
                },
                "axes": {
                    "value": "[[2], [0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensordot_246": {
                "a": {
                    "value": "tf.concat([sents_sem, sents_children], 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "w_comb",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('w_comb', [4 * self.config.dim_sem, 2 * self.config.dim_sem], dtype=tf.float64, initializer=self.xavier_init)",
                            "Call"
                        ]
                    ]
                },
                "axes": {
                    "value": "[[2], [0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_248": {
                "input": {
                    "value": "embeddings_root",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('emb_root', [1, 1, 2 * self.config.dim_sem], dtype=tf.float64, initializer=self.xavier_init)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[batch_l, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_268": {
                "x": {
                    "value": "doc_l",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.t_variables['doc_l']",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_270": {
                "input": {
                    "value": "(mask_sents - 1) * 999",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "l2_loss_293": {
                "t": {
                    "value": "p",
                    "type": "Name",
                    "possible_values": [
                        [
                            "model_params + str_params",
                            "BinOp"
                        ]
                    ]
                }
            },
            "concat_216": {
                "values": {
                    "value": "[sents_sem, sents_input]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_218": {
                "values": {
                    "value": "[sents_sem, sents_input]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_246": {
                "values": {
                    "value": "[sents_sem, sents_children]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensordot_251": {
                "a": {
                    "value": "tf.concat([sents_sem, sents_parents], 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "w_comb",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('w_comb', [4 * self.config.dim_sem, 2 * self.config.dim_sem], dtype=tf.float64, initializer=self.xavier_init)",
                            "Call"
                        ]
                    ]
                },
                "axes": {
                    "value": "[[2], [0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensordot_260": {
                "a": {
                    "value": "tf.concat([sents_output, sents_children_2], 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "w_comb",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('w_comb', [4 * self.config.dim_sem, 2 * self.config.dim_sem], dtype=tf.float64, initializer=self.xavier_init)",
                            "Call"
                        ]
                    ]
                },
                "axes": {
                    "value": "[[2], [0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_273": {
                "input": {
                    "value": "str_scores[:, :, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_274": {
                "input": {
                    "value": "mask_sents",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.t_variables['mask_sents'][:, :max_doc_l]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_251": {
                "values": {
                    "value": "[sents_sem, sents_parents]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensordot_253": {
                "a": {
                    "value": "tf.concat([sents_sem, sents_parents, sents_children], 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "w_comb_both",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('w_comb_both', [6 * self.config.dim_sem, 2 * self.config.dim_sem], dtype=tf.float64, initializer=self.xavier_init)",
                            "Call"
                        ]
                    ]
                },
                "axes": {
                    "value": "[[2], [0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_260": {
                "values": {
                    "value": "[sents_output, sents_children_2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_253": {
                "values": {
                    "value": "[sents_sem, sents_parents, sents_children]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "neural.py": {
        "tensorflow": {
            "dropout_47": {
                "variable": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "input",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.dropout(input, keep_prob, seed=seed)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "keep_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "dropout_49": {
                "variable": {
                    "value": "h1",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "h1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "LReLu(tf.matmul(input, w1) + b1)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h1, keep_prob, seed=seed)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "keep_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "bidirectional_dynamic_rnn_25": {
                "variable": {
                    "value": "(outputs, output_states)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell_fw": {
                    "value": "fw_cell",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.GRUCell(n_hidden)",
                            "Call"
                        ],
                        [
                            "tf.contrib.rnn.LSTMCell(n_hidden)",
                            "Call"
                        ]
                    ]
                },
                "cell_bw": {
                    "value": "bw_cell",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.GRUCell(n_hidden)",
                            "Call"
                        ],
                        [
                            "tf.contrib.rnn.LSTMCell(n_hidden)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "input",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.dropout(input, keep_prob, seed=seed)",
                            "Call"
                        ]
                    ]
                },
                "initial_state_fw": {
                    "value": "fw_initial_state",
                    "type": "Name",
                    "possible_values": [
                        [
                            "fw_cell.zero_state(batch_size, tf.float64)",
                            "Call"
                        ]
                    ]
                },
                "initial_state_bw": {
                    "value": "bw_initial_state",
                    "type": "Name",
                    "possible_values": [
                        [
                            "bw_cell.zero_state(batch_size, tf.float64)",
                            "Call"
                        ]
                    ]
                },
                "sequence_length": {
                    "value": "seqlen",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "get_variable_35": {
                "variable": {
                    "value": "w1",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "'w1_' + vname",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[dim_input, dim_input]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "xavier_init",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "get_variable_38": {
                "variable": {
                    "value": "b1",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "'bias1_' + vname",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[dim_input]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_41": {
                "variable": {
                    "value": "w2",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "'w2_' + vname",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[dim_input, dim_input]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "xavier_init",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "get_variable_44": {
                "variable": {
                    "value": "b2",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "'bias2_' + vname",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[dim_input]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_66": {
                "variable": {
                    "value": "parent",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.tensordot(input, w_parser_p, [[2], [0]]) + b_parser_p",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_67": {
                "variable": {
                    "value": "child",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.tensordot(input, w_parser_c, [[2], [0]]) + b_parser_c",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensordot_74": {
                "variable": {
                    "value": "temp",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "parent_masked",
                    "type": "Name",
                    "possible_values": [
                        [
                            "parent",
                            "Name"
                        ],
                        [
                            "parent * mask",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "w_parser_s",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('w_parser_s')",
                            "Call"
                        ]
                    ]
                },
                "axes": {
                    "value": "[[-1], [0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_75": {
                "variable": {
                    "value": "raw_scores_words_",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "temp",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.tensordot(parent_masked, w_parser_s, [[-1], [0]])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.matrix_transpose(child_masked)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_77": {
                "variable": {
                    "value": "raw_scores_root_",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.tensordot(input, w_parser_root, [[2], [0]])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "exp_78": {
                "variable": {
                    "value": "raw_scores_words",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "raw_scores_words_",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(temp, tf.matrix_transpose(child_masked))",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_79": {
                "variable": {
                    "value": "raw_scores_root",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "raw_scores_root_",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.squeeze(tf.tensordot(input, w_parser_root, [[2], [0]]), [2])",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_80": {
                "variable": {
                    "value": "tmp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "raw_scores_words[:, :, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_sum_91": {
                "variable": {
                    "value": "L_reduce",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "A_masked",
                    "type": "Name",
                    "possible_values": [
                        [
                            "A",
                            "Name"
                        ],
                        [
                            "A * mask_multiply",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_95": {
                "variable": {
                    "value": "LL",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.expand_dims(r, [1]), LL_diag]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "multiply_102": {
                "variable": {
                    "value": "d0",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "r",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "LL_inv[:, :, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "expand_dims_103": {
                "variable": {
                    "value": "LL_inv_diag",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.matrix_diag_part(LL_inv)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matrix_transpose_104": {
                "a": {
                    "value": "A_masked",
                    "type": "Name",
                    "possible_values": [
                        [
                            "A",
                            "Name"
                        ],
                        [
                            "A * mask_multiply",
                            "BinOp"
                        ]
                    ]
                }
            },
            "multiply_105": {
                "variable": {
                    "value": "tmp2",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "A_masked",
                    "type": "Name",
                    "possible_values": [
                        [
                            "A",
                            "Name"
                        ],
                        [
                            "A * mask_multiply",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.matrix_transpose(LL_inv)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_107": {
                "variable": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.expand_dims(d0, [1]), d_no_root]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "shape_10": {
                "input": {
                    "value": "input",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.dropout(input, keep_prob, seed=seed)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_11": {
                "name_or_scope": {
                    "value": "cell_name + 'fw'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "initializer": {
                    "value": "xavier_init",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GRUCell_13": {
                "variable": {
                    "value": "fw_cell",
                    "type": "Variable",
                    "possible_values": []
                },
                "units": {
                    "value": "n_hidden",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "variable_scope_18": {
                "name_or_scope": {
                    "value": "cell_name + 'bw'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "initializer": {
                    "value": "xavier_init",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GRUCell_20": {
                "variable": {
                    "value": "bw_cell",
                    "type": "Variable",
                    "possible_values": []
                },
                "units": {
                    "value": "n_hidden",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "variable_scope_24": {
                "name_or_scope": {
                    "value": "cell_name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "''",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_34": {
                "name_or_scope": {
                    "value": "Model",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_58": {
                "variable": {
                    "value": "w_parser_p",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w_parser_p",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_59": {
                "variable": {
                    "value": "w_parser_c",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w_parser_c",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_60": {
                "variable": {
                    "value": "b_parser_p",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bias_parser_p",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_61": {
                "variable": {
                    "value": "b_parser_c",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bias_parser_c",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_63": {
                "variable": {
                    "value": "w_parser_s",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w_parser_s",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_64": {
                "variable": {
                    "value": "w_parser_root",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w_parser_root",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "abs_6": {
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "LSTMCell_15": {
                "variable": {
                    "value": "fw_cell",
                    "type": "Variable",
                    "possible_values": []
                },
                "units": {
                    "value": "n_hidden",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "LSTMCell_22": {
                "variable": {
                    "value": "bw_cell",
                    "type": "Variable",
                    "possible_values": []
                },
                "units": {
                    "value": "n_hidden",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "matmul_48": {
                "a": {
                    "value": "input",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.dropout(input, keep_prob, seed=seed)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('w1_' + vname, [dim_input, dim_input], dtype=tf.float64, initializer=xavier_init)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_50": {
                "a": {
                    "value": "h1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "LReLu(tf.matmul(input, w1) + b1)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h1, keep_prob, seed=seed)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('w2_' + vname, [dim_input, dim_input], dtype=tf.float64, initializer=xavier_init)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_57": {
                "name_or_scope": {
                    "value": "'Structure/' + name",
                    "type": "BinOp",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matrix_transpose_75": {
                "a": {
                    "value": "child_masked",
                    "type": "Name",
                    "possible_values": [
                        [
                            "child",
                            "Name"
                        ],
                        [
                            "child * mask",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tensordot_77": {
                "a": {
                    "value": "input",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.dropout(input, keep_prob, seed=seed)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w_parser_root",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('w_parser_root')",
                            "Call"
                        ]
                    ]
                },
                "axes": {
                    "value": "[[2], [0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "multiply_104": {
                "x": {
                    "value": "tf.matrix_transpose(A_masked)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "LL_inv_diag",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.matrix_diag_part(LL_inv), 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "matrix_transpose_105": {
                "a": {
                    "value": "LL_inv",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matrix_inverse(LL)",
                            "Call"
                        ],
                        [
                            "tf.matrix_inverse(LL_masked)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_initializer_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_initializer_46": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensordot_66": {
                "a": {
                    "value": "input",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.dropout(input, keep_prob, seed=seed)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w_parser_p",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('w_parser_p')",
                            "Call"
                        ]
                    ]
                },
                "axes": {
                    "value": "[[2], [0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensordot_67": {
                "a": {
                    "value": "input",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.dropout(input, keep_prob, seed=seed)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w_parser_c",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('w_parser_c')",
                            "Call"
                        ]
                    ]
                },
                "axes": {
                    "value": "[[2], [0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_95": {
                "input": {
                    "value": "r",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_107": {
                "input": {
                    "value": "d0",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.multiply(r, LL_inv[:, :, 0])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "predictor.py": {
        "tensorflow": {
            "Session_21": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "graph": {
                    "value": "tf.Graph()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_23": {
                "variable": {
                    "value": "meta_graph_def",
                    "type": "Variable",
                    "possible_values": []
                },
                "export_dir": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tags": {
                    "value": "[tf.saved_model.tag_constants.SERVING]",
                    "type": "List",
                    "possible_values": []
                },
                "options": {
                    "value": "self.model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Graph_21": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils.py": {
        "tensorflow": {}
    }
}