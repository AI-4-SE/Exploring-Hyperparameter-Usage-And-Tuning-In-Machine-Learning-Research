{
    "linear_svm/mnist_workaround.py": {
        "sklearn": {
            "get_data_home_13": {
                "variable": {
                    "value": "data_home",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "linear_svm/old_isit/mnist_workaround.py": {
        "sklearn": {
            "get_data_home_13": {
                "variable": {
                    "value": "data_home",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "linear_svm/old_isit/test_defense_svm.py": {
        "sklearn": {
            "shuffle_26": {
                "variable": {
                    "value": "(data, labels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "1234",
                    "type": "int",
                    "possible_values": []
                }
            },
            "train_test_split_27": {
                "variable": {
                    "value": "(data_train, data_test, labels_train, labels_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.25",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "1234",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LinearSVC_36": {
                "variable": {
                    "value": "clf",
                    "type": "variable",
                    "possible_values": []
                },
                "loss": {
                    "value": "hinge",
                    "type": "str",
                    "possible_values": []
                },
                "random_state": {
                    "value": "65",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LinearSVC_57": {
                "variable": {
                    "value": "clf_sp",
                    "type": "variable",
                    "possible_values": []
                },
                "loss": {
                    "value": "hinge",
                    "type": "str",
                    "possible_values": []
                },
                "random_state": {
                    "value": "1234",
                    "type": "int",
                    "possible_values": []
                }
            },
            "accuracy_score_39": {
                "y_true": {
                    "value": "labels_test",
                    "type": "variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "clf.predict(data_test)",
                            "Call"
                        ]
                    ]
                }
            },
            "accuracy_score_51": {
                "y_true": {
                    "value": "labels_test",
                    "type": "variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "pred_adv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "clf.predict(data_test_adv)",
                            "Call"
                        ]
                    ]
                }
            },
            "accuracy_score_62": {
                "y_true": {
                    "value": "labels_test",
                    "type": "variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "pred_sp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "clf_sp.predict(data_test_sp)",
                            "Call"
                        ]
                    ]
                }
            },
            "accuracy_score_75": {
                "y_true": {
                    "value": "labels_test",
                    "type": "variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "pred_adv_sw_sp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "clf_sp.predict(data_test_adv_sw_sp)",
                            "Call"
                        ]
                    ]
                }
            },
            "accuracy_score_89": {
                "y_true": {
                    "value": "labels_test",
                    "type": "variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "pred_adv_w_sp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "clf_sp.predict(data_test_adv_w_sp)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "linear_svm/test_defense_svm.py": {
        "sklearn": {
            "shuffle_35": {
                "variable": {
                    "value": "(data, labels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "1234",
                    "type": "int",
                    "possible_values": []
                }
            },
            "train_test_split_36": {
                "variable": {
                    "value": "(x_train, x_test, y_train, y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.25",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "1234",
                    "type": "int",
                    "possible_values": []
                },
                "stratify": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.hstack([np.repeat(digit_1, digit_1_data.shape[0]), np.repeat(digit_2, digit_2_data.shape[0])])",
                            "Call"
                        ]
                    ]
                }
            },
            "LinearSVC_46": {
                "variable": {
                    "value": "clf",
                    "type": "variable",
                    "possible_values": []
                },
                "loss": {
                    "value": "hinge",
                    "type": "str",
                    "possible_values": []
                },
                "random_state": {
                    "value": "65",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LinearSVC_64": {
                "variable": {
                    "value": "clf_sp",
                    "type": "variable",
                    "possible_values": []
                },
                "loss": {
                    "value": "hinge",
                    "type": "str",
                    "possible_values": []
                },
                "random_state": {
                    "value": "1234",
                    "type": "int",
                    "possible_values": []
                }
            },
            "accuracy_score_49": {
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "clf.predict(x_test)",
                            "Call"
                        ]
                    ]
                }
            },
            "accuracy_score_58": {
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "pred_adv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "clf.predict(x_adv)",
                            "Call"
                        ]
                    ]
                }
            },
            "accuracy_score_69": {
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "pred_sp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "clf_sp.predict(x_test_sp)",
                            "Call"
                        ]
                    ]
                }
            },
            "accuracy_score_78": {
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "pred_adv_sw_sp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "clf_sp.predict(x_adv_sw_sp)",
                            "Call"
                        ]
                    ]
                }
            },
            "accuracy_score_87": {
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "pred_adv_w_sp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "clf_sp.predict(x_adv_w_sp)",
                            "Call"
                        ]
                    ]
                }
            },
            "accuracy_score_100": {
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "pred_adv_proj_sp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "clf_sp.predict(x_adv_w_proj_sp)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "neural_nets/attacks.py": {
        "tensorflow": {
            "placeholder_54": {
                "variable": {
                    "value": "x_inp",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, num_rows, num_cols, num_channels)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_72": {
                "variable": {
                    "value": "t_",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "gradients_73": {
                "variable": {
                    "value": "(grad_t,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "ys": {
                    "value": "logits[:, t_]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "xs": {
                    "value": "x_inp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=(None, num_rows, num_cols, num_channels))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, num_rows, num_cols, num_channels))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, dim))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, dim))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, num_rows, num_cols, num_channels))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, num_rows, num_cols, num_channels))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(1, num_rows, num_cols, num_channels))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, dim))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, dim))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(batch_size, num_rows, num_cols, num_channels))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, num_rows, num_cols, num_channels))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, num_rows, num_cols, num_channels))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(batch_size, num_rows, num_cols, num_channels))",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_129": {
                "variable": {
                    "value": "x_inp",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, num_rows, num_cols, num_channels)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_146": {
                "variable": {
                    "value": "t_",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "gradients_147": {
                "variable": {
                    "value": "(grad_t,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "ys": {
                    "value": "logits[:, t_]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "xs": {
                    "value": "x_inp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=(None, num_rows, num_cols, num_channels))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, num_rows, num_cols, num_channels))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, dim))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, dim))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, num_rows, num_cols, num_channels))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, num_rows, num_cols, num_channels))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(1, num_rows, num_cols, num_channels))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, dim))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, dim))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(batch_size, num_rows, num_cols, num_channels))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, num_rows, num_cols, num_channels))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, num_rows, num_cols, num_channels))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(batch_size, num_rows, num_cols, num_channels))",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_210": {
                "variable": {
                    "value": "x_inp",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "gradients_212": {
                "variable": {
                    "value": "(grad,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "ys": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.get_logits(x_inp)",
                            "Call"
                        ],
                        [
                            "self.model.get_logits(x_inp)",
                            "Call"
                        ],
                        [
                            "self.model.get_logits(x_inp)",
                            "Call"
                        ],
                        [
                            "self.model.get_logits(x_inp)",
                            "Call"
                        ],
                        [
                            "self.model.get_logits(x_inp)",
                            "Call"
                        ],
                        [
                            "self.model.get_logits(x_inp)",
                            "Call"
                        ],
                        [
                            "self.model.get_logits(x_inp)",
                            "Call"
                        ],
                        [
                            "self.model.get_logits(x_inp)",
                            "Call"
                        ],
                        [
                            "self.model.get_logits(x_inp)",
                            "Call"
                        ],
                        [
                            "self.model.get_logits(x_inp)",
                            "Call"
                        ],
                        [
                            "self.model.get_logits(x_inp)",
                            "Call"
                        ],
                        [
                            "self.model.get_logits(x_inp)",
                            "Call"
                        ],
                        [
                            "self.model.get_logits(x_inp)",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "x_inp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=(None, num_rows, num_cols, num_channels))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, num_rows, num_cols, num_channels))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, dim))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, dim))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, num_rows, num_cols, num_channels))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, num_rows, num_cols, num_channels))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(1, num_rows, num_cols, num_channels))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, dim))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, dim))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(batch_size, num_rows, num_cols, num_channels))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, num_rows, num_cols, num_channels))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, num_rows, num_cols, num_channels))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(batch_size, num_rows, num_cols, num_channels))",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_261": {
                "variable": {
                    "value": "x_inp",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "gradients_263": {
                "variable": {
                    "value": "(grad,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "ys": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.get_logits(x_inp)",
                            "Call"
                        ],
                        [
                            "self.model.get_logits(x_inp)",
                            "Call"
                        ],
                        [
                            "self.model.get_logits(x_inp)",
                            "Call"
                        ],
                        [
                            "self.model.get_logits(x_inp)",
                            "Call"
                        ],
                        [
                            "self.model.get_logits(x_inp)",
                            "Call"
                        ],
                        [
                            "self.model.get_logits(x_inp)",
                            "Call"
                        ],
                        [
                            "self.model.get_logits(x_inp)",
                            "Call"
                        ],
                        [
                            "self.model.get_logits(x_inp)",
                            "Call"
                        ],
                        [
                            "self.model.get_logits(x_inp)",
                            "Call"
                        ],
                        [
                            "self.model.get_logits(x_inp)",
                            "Call"
                        ],
                        [
                            "self.model.get_logits(x_inp)",
                            "Call"
                        ],
                        [
                            "self.model.get_logits(x_inp)",
                            "Call"
                        ],
                        [
                            "self.model.get_logits(x_inp)",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "x_inp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=(None, num_rows, num_cols, num_channels))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, num_rows, num_cols, num_channels))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, dim))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, dim))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, num_rows, num_cols, num_channels))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, num_rows, num_cols, num_channels))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(1, num_rows, num_cols, num_channels))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, dim))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, dim))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(batch_size, num_rows, num_cols, num_channels))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, num_rows, num_cols, num_channels))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, num_rows, num_cols, num_channels))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(batch_size, num_rows, num_cols, num_channels))",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_337": {
                "variable": {
                    "value": "x_inp",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, num_rows, num_cols, num_channels)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_357": {
                "variable": {
                    "value": "t_",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "gradients_358": {
                "variable": {
                    "value": "(grad_t,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "ys": {
                    "value": "logits[:, t_]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "xs": {
                    "value": "x_inp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=(None, num_rows, num_cols, num_channels))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, num_rows, num_cols, num_channels))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, dim))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, dim))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, num_rows, num_cols, num_channels))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, num_rows, num_cols, num_channels))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(1, num_rows, num_cols, num_channels))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, dim))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, dim))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(batch_size, num_rows, num_cols, num_channels))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, num_rows, num_cols, num_channels))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, num_rows, num_cols, num_channels))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(batch_size, num_rows, num_cols, num_channels))",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_436": {
                "variable": {
                    "value": "x_inp",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, num_rows, num_cols, num_channels)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_457": {
                "variable": {
                    "value": "t_",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "gradients_458": {
                "variable": {
                    "value": "(grad_t,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "ys": {
                    "value": "logits[:, t_]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "xs": {
                    "value": "x_inp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=(None, num_rows, num_cols, num_channels))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, num_rows, num_cols, num_channels))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, dim))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, dim))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, num_rows, num_cols, num_channels))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, num_rows, num_cols, num_channels))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(1, num_rows, num_cols, num_channels))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, dim))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, dim))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(batch_size, num_rows, num_cols, num_channels))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, num_rows, num_cols, num_channels))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, num_rows, num_cols, num_channels))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(batch_size, num_rows, num_cols, num_channels))",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_539": {
                "variable": {
                    "value": "x_inp",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, num_rows, num_cols, num_channels)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "gradients_541": {
                "variable": {
                    "value": "(grad_t,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "ys": {
                    "value": "logits[:, t]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "xs": {
                    "value": "x_inp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=(None, num_rows, num_cols, num_channels))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, num_rows, num_cols, num_channels))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, dim))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, dim))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, num_rows, num_cols, num_channels))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, num_rows, num_cols, num_channels))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(1, num_rows, num_cols, num_channels))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, dim))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, dim))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(batch_size, num_rows, num_cols, num_channels))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, num_rows, num_cols, num_channels))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, num_rows, num_cols, num_channels))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(batch_size, num_rows, num_cols, num_channels))",
                            "Call"
                        ]
                    ]
                }
            },
            "gradients_542": {
                "variable": {
                    "value": "(grad_l,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "ys": {
                    "value": "logits[:, l]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "xs": {
                    "value": "x_inp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=(None, num_rows, num_cols, num_channels))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, num_rows, num_cols, num_channels))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, dim))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, dim))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, num_rows, num_cols, num_channels))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, num_rows, num_cols, num_channels))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(1, num_rows, num_cols, num_channels))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, dim))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, dim))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(batch_size, num_rows, num_cols, num_channels))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, num_rows, num_cols, num_channels))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, num_rows, num_cols, num_channels))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(batch_size, num_rows, num_cols, num_channels))",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_585": {
                "variable": {
                    "value": "x_inp",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "gradients_587": {
                "variable": {
                    "value": "(grad,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "ys": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.get_logits(x_inp)",
                            "Call"
                        ],
                        [
                            "self.model.get_logits(x_inp)",
                            "Call"
                        ],
                        [
                            "self.model.get_logits(x_inp)",
                            "Call"
                        ],
                        [
                            "self.model.get_logits(x_inp)",
                            "Call"
                        ],
                        [
                            "self.model.get_logits(x_inp)",
                            "Call"
                        ],
                        [
                            "self.model.get_logits(x_inp)",
                            "Call"
                        ],
                        [
                            "self.model.get_logits(x_inp)",
                            "Call"
                        ],
                        [
                            "self.model.get_logits(x_inp)",
                            "Call"
                        ],
                        [
                            "self.model.get_logits(x_inp)",
                            "Call"
                        ],
                        [
                            "self.model.get_logits(x_inp)",
                            "Call"
                        ],
                        [
                            "self.model.get_logits(x_inp)",
                            "Call"
                        ],
                        [
                            "self.model.get_logits(x_inp)",
                            "Call"
                        ],
                        [
                            "self.model.get_logits(x_inp)",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "x_inp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=(None, num_rows, num_cols, num_channels))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, num_rows, num_cols, num_channels))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, dim))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, dim))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, num_rows, num_cols, num_channels))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, num_rows, num_cols, num_channels))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(1, num_rows, num_cols, num_channels))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, dim))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, dim))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(batch_size, num_rows, num_cols, num_channels))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, num_rows, num_cols, num_channels))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, num_rows, num_cols, num_channels))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(batch_size, num_rows, num_cols, num_channels))",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_642": {
                "variable": {
                    "value": "x_inp",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "gradients_644": {
                "variable": {
                    "value": "(grad,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "ys": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.get_logits(x_inp)",
                            "Call"
                        ],
                        [
                            "self.model.get_logits(x_inp)",
                            "Call"
                        ],
                        [
                            "self.model.get_logits(x_inp)",
                            "Call"
                        ],
                        [
                            "self.model.get_logits(x_inp)",
                            "Call"
                        ],
                        [
                            "self.model.get_logits(x_inp)",
                            "Call"
                        ],
                        [
                            "self.model.get_logits(x_inp)",
                            "Call"
                        ],
                        [
                            "self.model.get_logits(x_inp)",
                            "Call"
                        ],
                        [
                            "self.model.get_logits(x_inp)",
                            "Call"
                        ],
                        [
                            "self.model.get_logits(x_inp)",
                            "Call"
                        ],
                        [
                            "self.model.get_logits(x_inp)",
                            "Call"
                        ],
                        [
                            "self.model.get_logits(x_inp)",
                            "Call"
                        ],
                        [
                            "self.model.get_logits(x_inp)",
                            "Call"
                        ],
                        [
                            "self.model.get_logits(x_inp)",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "x_inp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=(None, num_rows, num_cols, num_channels))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, num_rows, num_cols, num_channels))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, dim))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, dim))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, num_rows, num_cols, num_channels))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, num_rows, num_cols, num_channels))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(1, num_rows, num_cols, num_channels))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, dim))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, dim))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(batch_size, num_rows, num_cols, num_channels))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, num_rows, num_cols, num_channels))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, num_rows, num_cols, num_channels))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(batch_size, num_rows, num_cols, num_channels))",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_732": {
                "variable": {
                    "value": "x_inp",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, num_rows, num_cols, num_channels)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_733": {
                "variable": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, num_classes)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "stop_gradient_734": {
                "variable": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=(batch_size, num_classes))",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(y_true)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, num_classes))",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(y_true)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, num_classes))",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(y_true)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(batch_size, num_classes))",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(y_true)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_cross_entropy_with_logits_v2_736": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.get_logits(x_inp)",
                            "Call"
                        ],
                        [
                            "self.model.get_logits(x_inp)",
                            "Call"
                        ],
                        [
                            "self.model.get_logits(x_inp)",
                            "Call"
                        ],
                        [
                            "self.model.get_logits(x_inp)",
                            "Call"
                        ],
                        [
                            "self.model.get_logits(x_inp)",
                            "Call"
                        ],
                        [
                            "self.model.get_logits(x_inp)",
                            "Call"
                        ],
                        [
                            "self.model.get_logits(x_inp)",
                            "Call"
                        ],
                        [
                            "self.model.get_logits(x_inp)",
                            "Call"
                        ],
                        [
                            "self.model.get_logits(x_inp)",
                            "Call"
                        ],
                        [
                            "self.model.get_logits(x_inp)",
                            "Call"
                        ],
                        [
                            "self.model.get_logits(x_inp)",
                            "Call"
                        ],
                        [
                            "self.model.get_logits(x_inp)",
                            "Call"
                        ],
                        [
                            "self.model.get_logits(x_inp)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=(batch_size, num_classes))",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(y_true)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, num_classes))",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(y_true)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, num_classes))",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(y_true)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(batch_size, num_classes))",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(y_true)",
                            "Call"
                        ]
                    ]
                }
            },
            "gradients_737": {
                "variable": {
                    "value": "(gradient,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "ys": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax_cross_entropy_with_logits_v2(logits=logits, labels=y_true)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax_cross_entropy_with_logits_v2(logits=logits, labels=y_true)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax_cross_entropy_with_logits_v2(logits=logits, labels=y_true)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax_cross_entropy_with_logits_v2(logits=logits, labels=y_true)",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "x_inp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=(None, num_rows, num_cols, num_channels))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, num_rows, num_cols, num_channels))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, dim))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, dim))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, num_rows, num_cols, num_channels))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, num_rows, num_cols, num_channels))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(1, num_rows, num_cols, num_channels))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, dim))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, dim))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(batch_size, num_rows, num_cols, num_channels))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, num_rows, num_cols, num_channels))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, num_rows, num_cols, num_channels))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(batch_size, num_rows, num_cols, num_channels))",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_827": {
                "variable": {
                    "value": "x_inp",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, num_rows, num_cols, num_channels)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_828": {
                "variable": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, num_classes)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "stop_gradient_829": {
                "variable": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=(batch_size, num_classes))",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(y_true)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, num_classes))",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(y_true)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, num_classes))",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(y_true)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(batch_size, num_classes))",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(y_true)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_cross_entropy_with_logits_v2_831": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.get_logits(x_inp)",
                            "Call"
                        ],
                        [
                            "self.model.get_logits(x_inp)",
                            "Call"
                        ],
                        [
                            "self.model.get_logits(x_inp)",
                            "Call"
                        ],
                        [
                            "self.model.get_logits(x_inp)",
                            "Call"
                        ],
                        [
                            "self.model.get_logits(x_inp)",
                            "Call"
                        ],
                        [
                            "self.model.get_logits(x_inp)",
                            "Call"
                        ],
                        [
                            "self.model.get_logits(x_inp)",
                            "Call"
                        ],
                        [
                            "self.model.get_logits(x_inp)",
                            "Call"
                        ],
                        [
                            "self.model.get_logits(x_inp)",
                            "Call"
                        ],
                        [
                            "self.model.get_logits(x_inp)",
                            "Call"
                        ],
                        [
                            "self.model.get_logits(x_inp)",
                            "Call"
                        ],
                        [
                            "self.model.get_logits(x_inp)",
                            "Call"
                        ],
                        [
                            "self.model.get_logits(x_inp)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=(batch_size, num_classes))",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(y_true)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, num_classes))",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(y_true)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, num_classes))",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(y_true)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(batch_size, num_classes))",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(y_true)",
                            "Call"
                        ]
                    ]
                }
            },
            "gradients_832": {
                "variable": {
                    "value": "(gradient,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "ys": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax_cross_entropy_with_logits_v2(logits=logits, labels=y_true)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax_cross_entropy_with_logits_v2(logits=logits, labels=y_true)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax_cross_entropy_with_logits_v2(logits=logits, labels=y_true)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax_cross_entropy_with_logits_v2(logits=logits, labels=y_true)",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "x_inp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=(None, num_rows, num_cols, num_channels))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, num_rows, num_cols, num_channels))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, dim))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, dim))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, num_rows, num_cols, num_channels))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, num_rows, num_cols, num_channels))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(1, num_rows, num_cols, num_channels))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, dim))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, dim))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(batch_size, num_rows, num_cols, num_channels))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, num_rows, num_cols, num_channels))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, num_rows, num_cols, num_channels))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(batch_size, num_rows, num_cols, num_channels))",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_922": {
                "variable": {
                    "value": "x_inp",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, num_rows, num_cols, num_channels)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_923": {
                "variable": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, num_classes)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "stop_gradient_924": {
                "variable": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=(batch_size, num_classes))",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(y_true)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, num_classes))",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(y_true)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, num_classes))",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(y_true)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(batch_size, num_classes))",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(y_true)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_cross_entropy_with_logits_v2_926": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.get_logits(x_inp)",
                            "Call"
                        ],
                        [
                            "self.model.get_logits(x_inp)",
                            "Call"
                        ],
                        [
                            "self.model.get_logits(x_inp)",
                            "Call"
                        ],
                        [
                            "self.model.get_logits(x_inp)",
                            "Call"
                        ],
                        [
                            "self.model.get_logits(x_inp)",
                            "Call"
                        ],
                        [
                            "self.model.get_logits(x_inp)",
                            "Call"
                        ],
                        [
                            "self.model.get_logits(x_inp)",
                            "Call"
                        ],
                        [
                            "self.model.get_logits(x_inp)",
                            "Call"
                        ],
                        [
                            "self.model.get_logits(x_inp)",
                            "Call"
                        ],
                        [
                            "self.model.get_logits(x_inp)",
                            "Call"
                        ],
                        [
                            "self.model.get_logits(x_inp)",
                            "Call"
                        ],
                        [
                            "self.model.get_logits(x_inp)",
                            "Call"
                        ],
                        [
                            "self.model.get_logits(x_inp)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=(batch_size, num_classes))",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(y_true)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, num_classes))",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(y_true)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, num_classes))",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(y_true)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(batch_size, num_classes))",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(y_true)",
                            "Call"
                        ]
                    ]
                }
            },
            "gradients_927": {
                "variable": {
                    "value": "(gradient,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "ys": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax_cross_entropy_with_logits_v2(logits=logits, labels=y_true)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax_cross_entropy_with_logits_v2(logits=logits, labels=y_true)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax_cross_entropy_with_logits_v2(logits=logits, labels=y_true)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax_cross_entropy_with_logits_v2(logits=logits, labels=y_true)",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "x_inp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=(None, num_rows, num_cols, num_channels))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, num_rows, num_cols, num_channels))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, dim))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, dim))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, num_rows, num_cols, num_channels))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, num_rows, num_cols, num_channels))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(1, num_rows, num_cols, num_channels))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, dim))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, dim))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(batch_size, num_rows, num_cols, num_channels))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, num_rows, num_cols, num_channels))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, num_rows, num_cols, num_channels))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(batch_size, num_rows, num_cols, num_channels))",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_1013": {
                "variable": {
                    "value": "x_inp",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, num_rows, num_cols, num_channels)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_1014": {
                "variable": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, num_classes)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "stop_gradient_1015": {
                "variable": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=(batch_size, num_classes))",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(y_true)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, num_classes))",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(y_true)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, num_classes))",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(y_true)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(batch_size, num_classes))",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(y_true)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_cross_entropy_with_logits_v2_1017": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.get_logits(x_inp)",
                            "Call"
                        ],
                        [
                            "self.model.get_logits(x_inp)",
                            "Call"
                        ],
                        [
                            "self.model.get_logits(x_inp)",
                            "Call"
                        ],
                        [
                            "self.model.get_logits(x_inp)",
                            "Call"
                        ],
                        [
                            "self.model.get_logits(x_inp)",
                            "Call"
                        ],
                        [
                            "self.model.get_logits(x_inp)",
                            "Call"
                        ],
                        [
                            "self.model.get_logits(x_inp)",
                            "Call"
                        ],
                        [
                            "self.model.get_logits(x_inp)",
                            "Call"
                        ],
                        [
                            "self.model.get_logits(x_inp)",
                            "Call"
                        ],
                        [
                            "self.model.get_logits(x_inp)",
                            "Call"
                        ],
                        [
                            "self.model.get_logits(x_inp)",
                            "Call"
                        ],
                        [
                            "self.model.get_logits(x_inp)",
                            "Call"
                        ],
                        [
                            "self.model.get_logits(x_inp)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=(batch_size, num_classes))",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(y_true)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, num_classes))",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(y_true)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, num_classes))",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(y_true)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(batch_size, num_classes))",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(y_true)",
                            "Call"
                        ]
                    ]
                }
            },
            "gradients_1018": {
                "variable": {
                    "value": "(gradient,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "ys": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax_cross_entropy_with_logits_v2(logits=logits, labels=y_true)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax_cross_entropy_with_logits_v2(logits=logits, labels=y_true)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax_cross_entropy_with_logits_v2(logits=logits, labels=y_true)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax_cross_entropy_with_logits_v2(logits=logits, labels=y_true)",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "x_inp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=(None, num_rows, num_cols, num_channels))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, num_rows, num_cols, num_channels))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, dim))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, dim))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, num_rows, num_cols, num_channels))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, num_rows, num_cols, num_channels))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(1, num_rows, num_cols, num_channels))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, dim))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, dim))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(batch_size, num_rows, num_cols, num_channels))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, num_rows, num_cols, num_channels))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, num_rows, num_cols, num_channels))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(batch_size, num_rows, num_cols, num_channels))",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_858": {
                "variable": {
                    "value": "correct_prediction",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(logits, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(y_true, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_961": {
                "variable": {
                    "value": "correct_prediction",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(logits, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(y_true, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "argmax_858": {
                "input": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=(batch_size, num_classes))",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(y_true)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, num_classes))",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(y_true)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, num_classes))",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(y_true)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(batch_size, num_classes))",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(y_true)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_961": {
                "input": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=(batch_size, num_classes))",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(y_true)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, num_classes))",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(y_true)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, num_classes))",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(y_true)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(batch_size, num_classes))",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(y_true)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "neural_nets/mnist_data_pair.py": {
        "tensorflow": {
            "get_seed_113": {
                "variable": {
                    "value": "(seed1, seed2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "op_seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "as_dtype_116": {
                "type_value": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dtypes.as_dtype(dtype).base_dtype",
                            "Attribute"
                        ],
                        [
                            "dtypes.float32",
                            "Method Argument"
                        ],
                        [
                            "dtypes.float32",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "neural_nets/models.py": {
        "tensorflow": {
            "reshape_22": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf_sp_frontend(x, **self.def_params)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, self.image_size, self.image_size, self.num_channels])",
                            "Call"
                        ],
                        [
                            "tf_sp_frontend_binary(x, **self.def_params)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, self.dim])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.image_size, self.image_size, self.num_channels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_60": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf_sp_frontend(x, **self.def_params)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, self.image_size, self.image_size, self.num_channels])",
                            "Call"
                        ],
                        [
                            "tf_sp_frontend_binary(x, **self.def_params)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, self.dim])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_92": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[5, 5]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "scope": {
                    "value": "layer1-conv",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool2d_93": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(inputs, 20, [5, 5], padding='SAME', scope='layer1-conv')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, 2, stride=2, scope='layer1-max-pool')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 40, [5, 5], padding='VALID', scope='layer2-conv')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, 2, stride=2, scope='layer2-max-pool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(net, [-1, 5 * 5 * 40])",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(net, 1000, scope='layer3')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, is_training=phase, scope='layer3-dropout')",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(net, 1000, scope='layer4')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, is_training=phase, scope='layer4-dropout')",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(net, 10, scope='logits', activation_fn=None)",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(inputs, 10, scope='layer1')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "layer1-max-pool",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_96": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(inputs, 20, [5, 5], padding='SAME', scope='layer1-conv')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, 2, stride=2, scope='layer1-max-pool')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 40, [5, 5], padding='VALID', scope='layer2-conv')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, 2, stride=2, scope='layer2-max-pool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(net, [-1, 5 * 5 * 40])",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(net, 1000, scope='layer3')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, is_training=phase, scope='layer3-dropout')",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(net, 1000, scope='layer4')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, is_training=phase, scope='layer4-dropout')",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(net, 10, scope='logits', activation_fn=None)",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(inputs, 10, scope='layer1')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "40",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[5, 5]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "scope": {
                    "value": "layer2-conv",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool2d_97": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(inputs, 20, [5, 5], padding='SAME', scope='layer1-conv')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, 2, stride=2, scope='layer1-max-pool')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 40, [5, 5], padding='VALID', scope='layer2-conv')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, 2, stride=2, scope='layer2-max-pool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(net, [-1, 5 * 5 * 40])",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(net, 1000, scope='layer3')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, is_training=phase, scope='layer3-dropout')",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(net, 1000, scope='layer4')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, is_training=phase, scope='layer4-dropout')",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(net, 10, scope='logits', activation_fn=None)",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(inputs, 10, scope='layer1')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "layer2-max-pool",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_98": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(inputs, 20, [5, 5], padding='SAME', scope='layer1-conv')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, 2, stride=2, scope='layer1-max-pool')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 40, [5, 5], padding='VALID', scope='layer2-conv')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, 2, stride=2, scope='layer2-max-pool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(net, [-1, 5 * 5 * 40])",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(net, 1000, scope='layer3')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, is_training=phase, scope='layer3-dropout')",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(net, 1000, scope='layer4')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, is_training=phase, scope='layer4-dropout')",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(net, 10, scope='logits', activation_fn=None)",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(inputs, 10, scope='layer1')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 5 * 5 * 40]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dropout_102": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(inputs, 20, [5, 5], padding='SAME', scope='layer1-conv')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, 2, stride=2, scope='layer1-max-pool')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 40, [5, 5], padding='VALID', scope='layer2-conv')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, 2, stride=2, scope='layer2-max-pool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(net, [-1, 5 * 5 * 40])",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(net, 1000, scope='layer3')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, is_training=phase, scope='layer3-dropout')",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(net, 1000, scope='layer4')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, is_training=phase, scope='layer4-dropout')",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(net, 10, scope='logits', activation_fn=None)",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(inputs, 10, scope='layer1')",
                            "Call"
                        ]
                    ]
                },
                "is_training": {
                    "value": "phase",
                    "type": "variable",
                    "possible_values": []
                },
                "scope": {
                    "value": "layer3-dropout",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dropout_106": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(inputs, 20, [5, 5], padding='SAME', scope='layer1-conv')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, 2, stride=2, scope='layer1-max-pool')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 40, [5, 5], padding='VALID', scope='layer2-conv')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, 2, stride=2, scope='layer2-max-pool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(net, [-1, 5 * 5 * 40])",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(net, 1000, scope='layer3')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, is_training=phase, scope='layer3-dropout')",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(net, 1000, scope='layer4')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, is_training=phase, scope='layer4-dropout')",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(net, 10, scope='logits', activation_fn=None)",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(inputs, 10, scope='layer1')",
                            "Call"
                        ]
                    ]
                },
                "is_training": {
                    "value": "phase",
                    "type": "variable",
                    "possible_values": []
                },
                "scope": {
                    "value": "layer4-dropout",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dropout_110": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(inputs, 20, [5, 5], padding='SAME', scope='layer1-conv')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, 2, stride=2, scope='layer1-max-pool')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 40, [5, 5], padding='VALID', scope='layer2-conv')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, 2, stride=2, scope='layer2-max-pool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(net, [-1, 5 * 5 * 40])",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(net, 1000, scope='layer3')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, is_training=phase, scope='layer3-dropout')",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(net, 1000, scope='layer4')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, is_training=phase, scope='layer4-dropout')",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(net, 10, scope='logits', activation_fn=None)",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(inputs, 10, scope='layer1')",
                            "Call"
                        ]
                    ]
                },
                "is_training": {
                    "value": "phase",
                    "type": "variable",
                    "possible_values": []
                },
                "scope": {
                    "value": "logits-dropout",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_91": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'four_layer_cnn'",
                            "Method Argument"
                        ],
                        [
                            "'two_layer_nn'",
                            "Method Argument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.AUTO_REUSE",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_120": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'four_layer_cnn'",
                            "Method Argument"
                        ],
                        [
                            "'two_layer_nn'",
                            "Method Argument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.AUTO_REUSE",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "neural_nets/old_workshop/locally_linear_attacks.py": {
        "tensorflow": {
            "map_fn_20": {
                "variable": {
                    "value": "x_sw_temp",
                    "type": "variable",
                    "possible_values": []
                },
                "fn": {
                    "value": "func",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lambda target: semi_white_box_each(x, source, target, model, eps)",
                            "Lambda"
                        ],
                        [
                            "lambda target: white_box_each(x, source, target, model, eps)",
                            "Lambda"
                        ]
                    ]
                },
                "elems": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.arange(10).astype(np.int32)",
                            "Call"
                        ],
                        [
                            "np.arange(10).astype(np.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "map_fn_22": {
                "variable": {
                    "value": "output_temp",
                    "type": "variable",
                    "possible_values": []
                },
                "fn": {
                    "value": "func2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lambda target: model.get_logits(x_sw_temp[target])[:, target][0] - model.get_logits(x_sw_temp[target])[:, source][0]",
                            "Lambda"
                        ],
                        [
                            "lambda target: model.get_logits(x_w_temp[target])[:, target][0] - model.get_logits(x_w_temp[target])[:, source][0]",
                            "Lambda"
                        ]
                    ]
                },
                "elems": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.arange(10).astype(np.int32)",
                            "Call"
                        ],
                        [
                            "np.arange(10).astype(np.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "top_k_23": {
                "variable": {
                    "value": "(val, ind)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reshape(output_temp, [10])",
                    "type": "Call",
                    "possible_values": []
                },
                "k": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cond_24": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.equal(ind[0], source)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : ind[1]",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : ind[0]",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "map_fn_39": {
                "variable": {
                    "value": "x_w_temp",
                    "type": "variable",
                    "possible_values": []
                },
                "fn": {
                    "value": "func",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lambda target: semi_white_box_each(x, source, target, model, eps)",
                            "Lambda"
                        ],
                        [
                            "lambda target: white_box_each(x, source, target, model, eps)",
                            "Lambda"
                        ]
                    ]
                },
                "elems": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.arange(10).astype(np.int32)",
                            "Call"
                        ],
                        [
                            "np.arange(10).astype(np.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "map_fn_41": {
                "variable": {
                    "value": "output_temp",
                    "type": "variable",
                    "possible_values": []
                },
                "fn": {
                    "value": "func2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lambda target: model.get_logits(x_sw_temp[target])[:, target][0] - model.get_logits(x_sw_temp[target])[:, source][0]",
                            "Lambda"
                        ],
                        [
                            "lambda target: model.get_logits(x_w_temp[target])[:, target][0] - model.get_logits(x_w_temp[target])[:, source][0]",
                            "Lambda"
                        ]
                    ]
                },
                "elems": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.arange(10).astype(np.int32)",
                            "Call"
                        ],
                        [
                            "np.arange(10).astype(np.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "top_k_42": {
                "variable": {
                    "value": "(val, ind)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reshape(output_temp, [10])",
                    "type": "Call",
                    "possible_values": []
                },
                "k": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cond_43": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.equal(ind[0], source)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : ind[1]",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : ind[0]",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "reshape_54": {
                "variable": {
                    "value": "sweq",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.sign(tf.subtract(weq_target, weq_source))",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 28, 28, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "clip_by_value_55": {
                "variable": {
                    "value": "x_sw_each",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "x + eps * sweq",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "py_func_64": {
                "variable": {
                    "value": "weq_source_proj",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "sp_project",
                    "type": "variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[x, weq_source]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "py_func_66": {
                "variable": {
                    "value": "weq_target_proj",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "sp_project",
                    "type": "variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[x, weq_target]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_67": {
                "variable": {
                    "value": "sweq",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.sign(tf.subtract(weq_target_proj, weq_source_proj))",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 28, 28, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "clip_by_value_68": {
                "variable": {
                    "value": "x_w_each",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "x + eps * sweq",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reshape_23": {
                "tensor": {
                    "value": "output_temp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.map_fn(func2, targets, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.map_fn(func2, targets, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[10]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "equal_24": {
                "x": {
                    "value": "ind[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "source",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reshape_42": {
                "tensor": {
                    "value": "output_temp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.map_fn(func2, targets, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.map_fn(func2, targets, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[10]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "equal_43": {
                "x": {
                    "value": "ind[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "source",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "gradients_52": {
                "ys": {
                    "value": "output[:, source]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "xs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "gradients_53": {
                "ys": {
                    "value": "output[:, target]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "xs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sign_54": {
                "x": {
                    "value": "tf.subtract(weq_target, weq_source)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gradients_63": {
                "ys": {
                    "value": "output[:, source]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "xs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "gradients_65": {
                "ys": {
                    "value": "output[:, target]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "xs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sign_67": {
                "x": {
                    "value": "tf.subtract(weq_target_proj, weq_source_proj)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "subtract_54": {
                "x": {
                    "value": "weq_target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gradients(output[:, target], x)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.gradients(output[:, target], x)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "weq_source",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gradients(output[:, source], x)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.gradients(output[:, source], x)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "subtract_67": {
                "x": {
                    "value": "weq_target_proj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.py_func(sp_project, [x, weq_target], tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "weq_source_proj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.py_func(sp_project, [x, weq_source], tf.float32)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "neural_nets/old_workshop/test_defense_cnn.py": {
        "tensorflow": {
            "placeholder_75": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 28, 28, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_76": {
                "variable": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "perturb",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_77": {
                "variable": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_78": {
                "variable": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_95": {
                "variable": {
                    "value": "x_inp",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 28, 28, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "Inputs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_96": {
                "variable": {
                    "value": "y_actual",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 10]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "Labels",
                    "type": "str",
                    "possible_values": []
                }
            },
            "equal_99": {
                "variable": {
                    "value": "correct_prediction",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(logits, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(y_actual, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_100": {
                "variable": {
                    "value": "accuracy",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(correct_prediction, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Saver_103": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "var_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.get_model_variables(scope='four_layer_cnn')",
                            "Call"
                        ]
                    ]
                }
            },
            "InteractiveSession_123": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "InteractiveSession_150": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_default_graph_72": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_verbosity_73": {
                "level": {
                    "value": "tf.logging.ERROR",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_34": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[5, 5]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "scope": {
                    "value": "layer1-conv",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool2d_35": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(inputs, 20, [5, 5], padding='SAME', scope='layer1-conv')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, 2, stride=2, scope='layer1-max-pool')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 40, [5, 5], padding='VALID', scope='layer2-conv')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, 2, stride=2, scope='layer2-max-pool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(net, [-1, 5 * 5 * 40])",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(net, 1000, scope='layer3')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, is_training=phase, scope='layer3-dropout')",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(net, 1000, scope='layer4')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, is_training=phase, scope='layer4-dropout')",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(net, 10, scope='logits', activation_fn=None)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "layer1-max-pool",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_38": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(inputs, 20, [5, 5], padding='SAME', scope='layer1-conv')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, 2, stride=2, scope='layer1-max-pool')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 40, [5, 5], padding='VALID', scope='layer2-conv')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, 2, stride=2, scope='layer2-max-pool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(net, [-1, 5 * 5 * 40])",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(net, 1000, scope='layer3')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, is_training=phase, scope='layer3-dropout')",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(net, 1000, scope='layer4')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, is_training=phase, scope='layer4-dropout')",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(net, 10, scope='logits', activation_fn=None)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "40",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[5, 5]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "scope": {
                    "value": "layer2-conv",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool2d_39": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(inputs, 20, [5, 5], padding='SAME', scope='layer1-conv')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, 2, stride=2, scope='layer1-max-pool')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 40, [5, 5], padding='VALID', scope='layer2-conv')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, 2, stride=2, scope='layer2-max-pool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(net, [-1, 5 * 5 * 40])",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(net, 1000, scope='layer3')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, is_training=phase, scope='layer3-dropout')",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(net, 1000, scope='layer4')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, is_training=phase, scope='layer4-dropout')",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(net, 10, scope='logits', activation_fn=None)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "layer2-max-pool",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_40": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(inputs, 20, [5, 5], padding='SAME', scope='layer1-conv')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, 2, stride=2, scope='layer1-max-pool')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 40, [5, 5], padding='VALID', scope='layer2-conv')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, 2, stride=2, scope='layer2-max-pool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(net, [-1, 5 * 5 * 40])",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(net, 1000, scope='layer3')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, is_training=phase, scope='layer3-dropout')",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(net, 1000, scope='layer4')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, is_training=phase, scope='layer4-dropout')",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(net, 10, scope='logits', activation_fn=None)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 5 * 5 * 40]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dropout_44": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(inputs, 20, [5, 5], padding='SAME', scope='layer1-conv')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, 2, stride=2, scope='layer1-max-pool')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 40, [5, 5], padding='VALID', scope='layer2-conv')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, 2, stride=2, scope='layer2-max-pool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(net, [-1, 5 * 5 * 40])",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(net, 1000, scope='layer3')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, is_training=phase, scope='layer3-dropout')",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(net, 1000, scope='layer4')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, is_training=phase, scope='layer4-dropout')",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(net, 10, scope='logits', activation_fn=None)",
                            "Call"
                        ]
                    ]
                },
                "is_training": {
                    "value": "phase",
                    "type": "variable",
                    "possible_values": []
                },
                "scope": {
                    "value": "layer3-dropout",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dropout_48": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(inputs, 20, [5, 5], padding='SAME', scope='layer1-conv')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, 2, stride=2, scope='layer1-max-pool')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 40, [5, 5], padding='VALID', scope='layer2-conv')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, 2, stride=2, scope='layer2-max-pool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(net, [-1, 5 * 5 * 40])",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(net, 1000, scope='layer3')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, is_training=phase, scope='layer3-dropout')",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(net, 1000, scope='layer4')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, is_training=phase, scope='layer4-dropout')",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(net, 10, scope='logits', activation_fn=None)",
                            "Call"
                        ]
                    ]
                },
                "is_training": {
                    "value": "phase",
                    "type": "variable",
                    "possible_values": []
                },
                "scope": {
                    "value": "layer4-dropout",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dropout_52": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(inputs, 20, [5, 5], padding='SAME', scope='layer1-conv')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, 2, stride=2, scope='layer1-max-pool')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 40, [5, 5], padding='VALID', scope='layer2-conv')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, 2, stride=2, scope='layer2-max-pool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(net, [-1, 5 * 5 * 40])",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(net, 1000, scope='layer3')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, is_training=phase, scope='layer3-dropout')",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(net, 1000, scope='layer4')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, is_training=phase, scope='layer4-dropout')",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(net, 10, scope='logits', activation_fn=None)",
                            "Call"
                        ]
                    ]
                },
                "is_training": {
                    "value": "phase",
                    "type": "variable",
                    "possible_values": []
                },
                "scope": {
                    "value": "logits-dropout",
                    "type": "str",
                    "possible_values": []
                }
            },
            "argmax_82": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.get_logits(x)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "output_type": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argmax_99": {
                "input": {
                    "value": "y_actual",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=[None, 10], name='Labels')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_100": {
                "x": {
                    "value": "correct_prediction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(tf.argmax(logits, 1), tf.argmax(y_actual, 1))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_124": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_151": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_33": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'four_layer_cnn'",
                            "Method Argument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.AUTO_REUSE",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "neural_nets/sp_func_nn.py": {
        "tensorflow": {
            "get_default_graph_78": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "RegisterGradient_77": {
                "op_type": {
                    "value": "rnd_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'PyFuncGrad' + str(np.random.randint(0, 100000000.0))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "py_func_80": {
                "func": {
                    "value": "func",
                    "type": "variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                },
                "Tout": {
                    "value": "Tout",
                    "type": "variable",
                    "possible_values": []
                },
                "stateful": {
                    "value": "stateful",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "name_scope_94": {
                "name": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "name_scope_175": {
                "name": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            }
        }
    },
    "neural_nets/test_defense_binary.py": {
        "tensorflow": {
            "placeholder_64": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_65": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, num_classes)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "maximum_67": {
                "variable": {
                    "value": "prediction",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.sign(logits)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Session_71": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_74": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "var_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.get_model_variables(scope='two_layer_nn')",
                            "Call"
                        ]
                    ]
                }
            },
            "reset_default_graph_62": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sign_67": {
                "x": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.get_logits(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_68": {
                "input_tensor": {
                    "value": "tf.cast(tf.equal(prediction, y), tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "global_variables_initializer_72": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cast_68": {
                "x": {
                    "value": "tf.equal(prediction, y)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_68": {
                "x": {
                    "value": "prediction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.maximum(tf.sign(logits), 0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=(None, num_classes))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "neural_nets/test_defense_multiclass.py": {
        "tensorflow": {
            "placeholder_93": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, num_rows, num_cols, num_channels)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_94": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, num_classes)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "equal_96": {
                "variable": {
                    "value": "correct_prediction",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(logits, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(y, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Session_100": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_103": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "var_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.get_model_variables(scope='four_layer_cnn')",
                            "Call"
                        ]
                    ]
                }
            },
            "reset_default_graph_91": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argmax_96": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=(None, num_classes))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_97": {
                "input_tensor": {
                    "value": "tf.cast(correct_prediction, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "global_variables_initializer_101": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cast_97": {
                "x": {
                    "value": "correct_prediction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(tf.argmax(logits, 1), tf.argmax(y, 1))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}