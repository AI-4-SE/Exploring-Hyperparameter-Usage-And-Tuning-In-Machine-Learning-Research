{
    "python/models/DIIN.py": {
        "tensorflow": {
            "placeholder_20": {
                "variable": {
                    "value": "self.premise_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.sequence_length]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "premise",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_21": {
                "variable": {
                    "value": "self.hypothesis_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.sequence_length]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "hypothesis",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_22": {
                "variable": {
                    "value": "self.premise_pos",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.sequence_length, 47]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "premise_pos",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_23": {
                "variable": {
                    "value": "self.hypothesis_pos",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.sequence_length, 47]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "hypothesis_pos",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_24": {
                "variable": {
                    "value": "self.premise_char",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.sequence_length, config.char_in_word_size]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "premise_char",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_25": {
                "variable": {
                    "value": "self.hypothesis_char",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.sequence_length, config.char_in_word_size]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "hypothesis_char",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_26": {
                "variable": {
                    "value": "self.premise_exact_match",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.sequence_length, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "premise_exact_match",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_27": {
                "variable": {
                    "value": "self.hypothesis_exact_match",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.sequence_length, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "hypothesis_exact_match",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_30": {
                "variable": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "exponential_decay_33": {
                "variable": {
                    "value": "self.dropout_keep_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "config.keep_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "global_step": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "decay_steps": {
                    "value": "config.dropout_decay_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "decay_rate": {
                    "value": "config.dropout_decay_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "staircase": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "dropout_keep_rate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_37": {
                "variable": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "label_y",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_38": {
                "variable": {
                    "value": "self.keep_rate_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "keep_prob",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_39": {
                "variable": {
                    "value": "self.is_train",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "bool",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "is_train",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_83": {
                "variable": {
                    "value": "premise_in",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(premise_in, tf.cast(self.premise_pos, tf.float32))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_84": {
                "variable": {
                    "value": "hypothesis_in",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(hypothesis_in, tf.cast(self.hypothesis_pos, tf.float32))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_86": {
                "variable": {
                    "value": "premise_in",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[premise_in, tf.cast(self.premise_exact_match, tf.float32)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_87": {
                "variable": {
                    "value": "hypothesis_in",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[hypothesis_in, tf.cast(self.hypothesis_exact_match, tf.float32)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_132": {
                "variable": {
                    "value": "self.total_cost",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sparse_softmax_cross_entropy_with_logits(labels=self.y, logits=self.logits)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_133": {
                "variable": {
                    "value": "self.acc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(tf.equal(tf.arg_max(self.logits, dimension=1), tf.cast(self.y, tf.int64)), tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "merge_all_208": {
                "variable": {
                    "value": "self.summary",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tile_230": {
                "variable": {
                    "value": "p_aug",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(p, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, HL, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_231": {
                "variable": {
                    "value": "h_aug",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(h, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, PL, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_252": {
                "variable": {
                    "value": "p_aug_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(p, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, PL, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_253": {
                "variable": {
                    "value": "p_aug_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(p, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, PL, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_329": {
                "variable": {
                    "value": "out_final",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "fm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.convolution2d(denseAttention, int(dim * config.dense_net_first_scale_down_ratio), config.first_scale_down_kernel, padding='SAME', activation_fn=act)",
                            "Call"
                        ],
                        [
                            "dense_net_block(config, fm, config.dense_net_growth_rate, config.dense_net_layers, config.dense_net_kernel_size, is_train, scope='first_dense_net_block')",
                            "Call"
                        ],
                        [
                            "dense_net_transition_layer(config, fm, config.dense_net_transition_rate, scope='second_transition_layer')",
                            "Call"
                        ],
                        [
                            "dense_net_block(config, fm, config.dense_net_growth_rate, config.dense_net_layers, config.dense_net_kernel_size, is_train, scope='second_dense_net_block')",
                            "Call"
                        ],
                        [
                            "dense_net_transition_layer(config, fm, config.dense_net_transition_rate, scope='third_transition_layer')",
                            "Call"
                        ],
                        [
                            "dense_net_block(config, fm, config.dense_net_growth_rate, config.dense_net_layers, config.dense_net_kernel_size, is_train, scope='third_dense_net_block')",
                            "Call"
                        ],
                        [
                            "dense_net_transition_layer(config, fm, config.dense_net_transition_rate, scope='fourth_transition_layer')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, shape_list[1] * shape_list[2] * shape_list[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "max_pool_358": {
                "variable": {
                    "value": "feature_map",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.convolution2d(feature_map, out_dim, 1, padding='SAME', activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(feature_map, [1, 2, 2, 1], [1, 2, 2, 1], 'VALID')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "scalar_35": {
                "name": {
                    "value": "dropout_keep_rate",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.dropout_keep_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_43": {
                "variable": {
                    "value": "emb",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "E",
                    "type": "variable",
                    "possible_values": []
                },
                "ids": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cond_44": {
                "variable": {
                    "value": "emb_drop",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "self.is_train",
                    "type": "Attribute",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : tf.nn.dropout(emb, config.keep_rate)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : emb",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "get_variable_62": {
                "variable": {
                    "value": "char_emb_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "char_emb_mat",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[config.char_vocab_size, config.char_emb_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_76": {
                "variable": {
                    "value": "premise_in",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[premise_in, conv_pre]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_77": {
                "variable": {
                    "value": "hypothesis_in",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[hypothesis_in, conv_hyp]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "histogram_129": {
                "name": {
                    "value": "logit_histogram",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_134": {
                "name": {
                    "value": "acc",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.acc",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_135": {
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.total_cost",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_211": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_227": {
                "name_or_scope": {
                    "value": "scope or 'dense_logit_bi_attention'",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "reduce_any_236": {
                "variable": {
                    "value": "p_mask_aug",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(tf.tile(tf.expand_dims(p_mask, 2), [1, 1, HL, 1]), tf.bool)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_any_237": {
                "variable": {
                    "value": "h_mask_aug",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(tf.tile(tf.expand_dims(h_mask, 1), [1, PL, 1, 1]), tf.bool)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_248": {
                "name_or_scope": {
                    "value": "scope or 'self_attention'",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "reduce_any_258": {
                "variable": {
                    "value": "p_mask_aug_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(tf.tile(tf.expand_dims(p_mask, 2), [1, 1, PL, 1]), tf.bool)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_any_259": {
                "variable": {
                    "value": "p_mask_aug_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(tf.tile(tf.expand_dims(p_mask, 1), [1, PL, 1, 1]), tf.bool)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_271": {
                "name_or_scope": {
                    "value": "scope or 'self_attention_layer'",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "variable_scope_313": {
                "name_or_scope": {
                    "value": "dense_net",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_335": {
                "name_or_scope": {
                    "value": "scope or 'dense_net_block'",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "concat_344": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "list_of_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[feature_map]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_351": {
                "name_or_scope": {
                    "value": "scope or 'transition_layer'",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "variable_scope_55": {
                "name_or_scope": {
                    "value": "emb",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_57": {
                "variable": {
                    "value": "self.E",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "trainable": {
                    "value": "emb_train",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_61": {
                "name_or_scope": {
                    "value": "char_emb",
                    "type": "str",
                    "possible_values": []
                }
            },
            "embedding_lookup_64": {
                "variable": {
                    "value": "char_pre",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "char_emb_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('char_emb_mat', shape=[config.char_vocab_size, config.char_emb_size])",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "self.premise_char",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_65": {
                "variable": {
                    "value": "char_hyp",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "char_emb_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('char_emb_mat', shape=[config.char_vocab_size, config.char_emb_size])",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "self.hypothesis_char",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_90": {
                "name_or_scope": {
                    "value": "highway",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_95": {
                "name_or_scope": {
                    "value": "prepro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_108": {
                "name_or_scope": {
                    "value": "main",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cond_113": {
                "variable": {
                    "value": "bi_att_mx",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "self.is_train",
                    "type": "Attribute",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : tf.nn.dropout(bi_att_mx, config.keep_rate)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : bi_att_mx",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_with_logits_132": {
                "labels": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_133": {
                "x": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_n_145": {
                "variable": {
                    "value": "weights_added",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[tf.nn.l2_loss(tensor) for tensor in tf.trainable_variables() if tensor.name.endswith('weights:0') and (not tensor.name.endswith('weighted_sum/weights:0')) or tensor.name.endswith('kernel:0')]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "constant_146": {
                "variable": {
                    "value": "full_l2_step",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "config.weight_l2loss_step_full_reg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "full_l2reg_step",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_147": {
                "variable": {
                    "value": "full_l2_ratio",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "config.l2_regularization_ratio",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "l2_regularization_ratio",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_148": {
                "variable": {
                    "value": "gs_flt",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_149": {
                "variable": {
                    "value": "half_l2_step_flt",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "full_l2_step / 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_159": {
                "name": {
                    "value": "l2loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "l2loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weights_added * l2loss_ratio",
                            "BinOp"
                        ],
                        [
                            "tf.add_n([tf.nn.l2_loss(tensor) for tensor in tf.trainable_variables() if tensor.name.endswith('weights:0') or tensor.name.endswith('kernel:0')]) * tf.constant(config.l2_regularization_ratio, dtype='float', shape=[], name='l2_regularization_ratio')",
                            "BinOp"
                        ]
                    ]
                }
            },
            "scalar_204": {
                "name": {
                    "value": "diff_penalty_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "diff_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.add_n([tf.nn.l2_loss(tensor) for tensor in diffs]) * tf.constant(config.diff_penalty_loss_ratio, dtype='float', shape=[], name='diff_penalty_loss_ratio')",
                            "BinOp"
                        ]
                    ]
                }
            },
            "expand_dims_230": {
                "input": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self_attention_layer(config, self.is_train, pre, p_mask=prem_mask, scope='{}_layer_self_att_enc'.format(i))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_231": {
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self_attention_layer(config, self.is_train, hyp, p_mask=hyp_mask, scope='{}_layer_self_att_enc_h'.format(i))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_252": {
                "input": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self_attention_layer(config, self.is_train, pre, p_mask=prem_mask, scope='{}_layer_self_att_enc'.format(i))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_253": {
                "input": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self_attention_layer(config, self.is_train, pre, p_mask=prem_mask, scope='{}_layer_self_att_enc'.format(i))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_272": {
                "input": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self_attention_layer(config, self.is_train, pre, p_mask=prem_mask, scope='{}_layer_self_att_enc'.format(i))",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_56": {
                "name_or_scope": {
                    "value": "emb_var",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_56": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_63": {
                "name_or_scope": {
                    "value": "char",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_74": {
                "variable": {
                    "value": "conv_pre",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "conv_pre",
                    "type": "variable",
                    "possible_values": [
                        [
                            "multi_conv1d(char_pre, filter_sizes, heights, 'VALID', self.is_train, config.keep_rate, scope='conv')",
                            "Call"
                        ],
                        [
                            "tf.reshape(conv_pre, [-1, self.sequence_length, config.char_out_size])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.sequence_length, config.char_out_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_75": {
                "variable": {
                    "value": "conv_hyp",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "conv_hyp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "multi_conv1d(char_hyp, filter_sizes, heights, 'VALID', self.is_train, config.keep_rate, scope='conv')",
                            "Call"
                        ],
                        [
                            "tf.reshape(conv_hyp, [-1, self.sequence_length, config.char_out_size])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.sequence_length, config.char_out_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_83": {
                "x": {
                    "value": "self.premise_pos",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_84": {
                "x": {
                    "value": "self.hypothesis_pos",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_86": {
                "x": {
                    "value": "self.premise_exact_match",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_87": {
                "x": {
                    "value": "self.hypothesis_exact_match",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_133": {
                "x": {
                    "value": "tf.arg_max(self.logits, dimension=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.cast(self.y, tf.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_155": {
                "name": {
                    "value": "l2loss_ratio",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "l2loss_ratio",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sigmoid((gs_flt - half_l2_step_flt) * 8 / half_l2_step_flt) * full_l2_ratio",
                            "BinOp"
                        ]
                    ]
                }
            },
            "trainable_variables_165": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "add_n_203": {
                "inputs": {
                    "value": "[tf.nn.l2_loss(tensor) for tensor in diffs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "constant_203": {
                "value": {
                    "value": "config.diff_penalty_loss_ratio",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "diff_penalty_loss_ratio",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_236": {
                "x": {
                    "value": "tf.tile(tf.expand_dims(p_mask, 2), [1, 1, HL, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_237": {
                "x": {
                    "value": "tf.tile(tf.expand_dims(h_mask, 1), [1, PL, 1, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_258": {
                "x": {
                    "value": "tf.tile(tf.expand_dims(p_mask, 2), [1, 1, PL, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_259": {
                "x": {
                    "value": "tf.tile(tf.expand_dims(p_mask, 1), [1, PL, 1, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_44": {
                "x": {
                    "value": "emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(E, x)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "config.keep_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_70": {
                "name_or_scope": {
                    "value": "conv",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_99": {
                "name_or_scope": {
                    "value": "tf.get_variable_scope()",
                    "type": "Call",
                    "possible_values": []
                },
                "reuse": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "arg_max_133": {
                "input": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dimension": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_154": {
                "x": {
                    "value": "(gs_flt - half_l2_step_flt) * 8 / half_l2_step_flt",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "add_n_158": {
                "inputs": {
                    "value": "[tf.nn.l2_loss(tensor) for tensor in tf.trainable_variables() if tensor.name.endswith('weights:0') or tensor.name.endswith('kernel:0')]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "constant_158": {
                "value": {
                    "value": "config.l2_regularization_ratio",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "l2_regularization_ratio",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tile_236": {
                "input": {
                    "value": "tf.expand_dims(p_mask, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, HL, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_237": {
                "input": {
                    "value": "tf.expand_dims(h_mask, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, PL, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_258": {
                "input": {
                    "value": "tf.expand_dims(p_mask, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, PL, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_259": {
                "input": {
                    "value": "tf.expand_dims(p_mask, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, PL, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_scope_99": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "dropout_113": {
                "x": {
                    "value": "bi_att_mx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bi_attention_mx(config, self.is_train, main, support, p_mask=main_mask, h_mask=support_mask)",
                            "Call"
                        ],
                        [
                            "tf.cond(self.is_train, lambda : tf.nn.dropout(bi_att_mx, config.keep_rate), lambda : bi_att_mx)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "config.keep_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "l2_loss_145": {
                "t": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                }
            },
            "l2_loss_203": {
                "t": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_236": {
                "input": {
                    "value": "p_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_237": {
                "input": {
                    "value": "h_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_258": {
                "input": {
                    "value": "p_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_259": {
                "input": {
                    "value": "p_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "trainable_variables_145": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "l2_loss_158": {
                "t": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                }
            },
            "trainable_variables_158": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "python/models/attmix_CNN.py": {
        "tensorflow": {
            "unstack_807": {
                "variable": {
                    "value": "list_of_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "dense_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_820": {
                "variable": {
                    "value": "new_logit",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "list_of_new_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[tf.expand_dims(tensor, axis=3) for tensor in list_of_new_logits]",
                            "ListComp"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_any_830": {
                "variable": {
                    "value": "p_mask_aug",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(tf.tile(tf.expand_dims(p_mask, 2), [1, 1, HL, 1]), tf.bool)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_any_831": {
                "variable": {
                    "value": "h_mask_aug",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(tf.tile(tf.expand_dims(h_mask, 1), [1, PL, 1, 1]), tf.bool)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_853": {
                "variable": {
                    "value": "new_dense_attention",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "feature_map",
                            "Name"
                        ],
                        [
                            "normalize(feature_map)",
                            "Call"
                        ],
                        [
                            "tf.concat(list_of_features, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.cond(is_train, lambda : tf.nn.dropout(features, config.keep_rate), lambda : features)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[tf.expand_dims(f, axis=1) for f in features]",
                            "ListComp"
                        ],
                        [
                            "[tf.expand_dims(f, axis=1) for f in features]",
                            "ListComp"
                        ],
                        [
                            "[tf.expand_dims(f, axis=1) for f in features]",
                            "ListComp"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_max_859": {
                "variable": {
                    "value": "sum_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "bi_att_mx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bi_attention_mx(config, self.is_train, main, support, p_mask=main_mask, h_mask=support_mask)",
                            "Call"
                        ],
                        [
                            "normalize(bi_att_mx)",
                            "Call"
                        ],
                        [
                            "tf.cond(self.is_train, lambda : tf.nn.dropout(bi_att_mx, config.keep_rate), lambda : bi_att_mx)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.reduce_sum(bi_att_mx, axis=3), axis=3)",
                            "Call"
                        ],
                        [
                            "highway_network(bi_att_mx, config.highway_num_layers, True, wd=config.wd, is_train=self.is_train)",
                            "Call"
                        ],
                        [
                            "fuse_gate(config, self.is_train, bi_att_mx, bi_att_mx, scope='dense_attention_self_fuse_gate')",
                            "Call"
                        ],
                        [
                            "linear(bi_att_mx, bi_att_mx.get_shape().as_list()[-1], True, bias_start=0.0, scope='DA_linear', squeeze=False, wd=config.wd, input_keep_prob=config.keep_rate, is_train=self.is_train)",
                            "Call"
                        ],
                        [
                            "add_features(config, bi_att_mx, main_mask, support_mask)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.layer_norm(bi_att_mx)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_871": {
                "variable": {
                    "value": "mean_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "bi_att_mx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bi_attention_mx(config, self.is_train, main, support, p_mask=main_mask, h_mask=support_mask)",
                            "Call"
                        ],
                        [
                            "normalize(bi_att_mx)",
                            "Call"
                        ],
                        [
                            "tf.cond(self.is_train, lambda : tf.nn.dropout(bi_att_mx, config.keep_rate), lambda : bi_att_mx)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.reduce_sum(bi_att_mx, axis=3), axis=3)",
                            "Call"
                        ],
                        [
                            "highway_network(bi_att_mx, config.highway_num_layers, True, wd=config.wd, is_train=self.is_train)",
                            "Call"
                        ],
                        [
                            "fuse_gate(config, self.is_train, bi_att_mx, bi_att_mx, scope='dense_attention_self_fuse_gate')",
                            "Call"
                        ],
                        [
                            "linear(bi_att_mx, bi_att_mx.get_shape().as_list()[-1], True, bias_start=0.0, scope='DA_linear', squeeze=False, wd=config.wd, input_keep_prob=config.keep_rate, is_train=self.is_train)",
                            "Call"
                        ],
                        [
                            "add_features(config, bi_att_mx, main_mask, support_mask)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.layer_norm(bi_att_mx)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_min_883": {
                "variable": {
                    "value": "min_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "bi_att_mx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bi_attention_mx(config, self.is_train, main, support, p_mask=main_mask, h_mask=support_mask)",
                            "Call"
                        ],
                        [
                            "normalize(bi_att_mx)",
                            "Call"
                        ],
                        [
                            "tf.cond(self.is_train, lambda : tf.nn.dropout(bi_att_mx, config.keep_rate), lambda : bi_att_mx)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.reduce_sum(bi_att_mx, axis=3), axis=3)",
                            "Call"
                        ],
                        [
                            "highway_network(bi_att_mx, config.highway_num_layers, True, wd=config.wd, is_train=self.is_train)",
                            "Call"
                        ],
                        [
                            "fuse_gate(config, self.is_train, bi_att_mx, bi_att_mx, scope='dense_attention_self_fuse_gate')",
                            "Call"
                        ],
                        [
                            "linear(bi_att_mx, bi_att_mx.get_shape().as_list()[-1], True, bias_start=0.0, scope='DA_linear', squeeze=False, wd=config.wd, input_keep_prob=config.keep_rate, is_train=self.is_train)",
                            "Call"
                        ],
                        [
                            "add_features(config, bi_att_mx, main_mask, support_mask)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.layer_norm(bi_att_mx)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_893": {
                "variable": {
                    "value": "sum_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "bi_att_mx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bi_attention_mx(config, self.is_train, main, support, p_mask=main_mask, h_mask=support_mask)",
                            "Call"
                        ],
                        [
                            "normalize(bi_att_mx)",
                            "Call"
                        ],
                        [
                            "tf.cond(self.is_train, lambda : tf.nn.dropout(bi_att_mx, config.keep_rate), lambda : bi_att_mx)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.reduce_sum(bi_att_mx, axis=3), axis=3)",
                            "Call"
                        ],
                        [
                            "highway_network(bi_att_mx, config.highway_num_layers, True, wd=config.wd, is_train=self.is_train)",
                            "Call"
                        ],
                        [
                            "fuse_gate(config, self.is_train, bi_att_mx, bi_att_mx, scope='dense_attention_self_fuse_gate')",
                            "Call"
                        ],
                        [
                            "linear(bi_att_mx, bi_att_mx.get_shape().as_list()[-1], True, bias_start=0.0, scope='DA_linear', squeeze=False, wd=config.wd, input_keep_prob=config.keep_rate, is_train=self.is_train)",
                            "Call"
                        ],
                        [
                            "add_features(config, bi_att_mx, main_mask, support_mask)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.layer_norm(bi_att_mx)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool_1424": {
                "variable": {
                    "value": "down_sampled_tf_tmp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fm_tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fm",
                            "Name"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_1425": {
                "variable": {
                    "value": "fm",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[fm, down_sampled_tf_tmp]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_variable_1478": {
                "variable": {
                    "value": "alphas",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "alpha",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "_x.get_shape()[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_1481": {
                "variable": {
                    "value": "pos",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "_x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "placeholder_34": {
                "variable": {
                    "value": "self.premise_pos",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.sequence_length, 47]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "premise_pos",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_35": {
                "variable": {
                    "value": "self.hypothesis_pos",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.sequence_length, 47]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "hypothesis_pos",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_36": {
                "variable": {
                    "value": "self.premise_char",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.sequence_length, config.char_in_word_size]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "premise_char",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_37": {
                "variable": {
                    "value": "self.hypothesis_char",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.sequence_length, config.char_in_word_size]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "hypothesis_char",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_38": {
                "variable": {
                    "value": "self.premise_exact_match",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.sequence_length, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "premise_exact_match",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_39": {
                "variable": {
                    "value": "self.hypothesis_exact_match",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.sequence_length, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "hypothesis_exact_match",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_40": {
                "variable": {
                    "value": "self.premise_itf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.sequence_length, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "premise_itf",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_41": {
                "variable": {
                    "value": "self.hypothesis_itf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.sequence_length, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "hypothesis_itf",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_42": {
                "variable": {
                    "value": "self.premise_antonym",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.sequence_length, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "premise_antonym",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_43": {
                "variable": {
                    "value": "self.hypothesis_antonym",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.sequence_length, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "hypothesis_antonym",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_44": {
                "variable": {
                    "value": "self.premise_NER_feature",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.sequence_length, 7]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "premise_ner_feature",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_45": {
                "variable": {
                    "value": "self.hypothesis_NER_feature",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.sequence_length, 7]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "hypothesis_ner_feature",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_46": {
                "variable": {
                    "value": "self.positional_encoding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.sequence_length, 300]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "positional_encoding",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_52": {
                "variable": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "placeholder_63": {
                "variable": {
                    "value": "self.keep_rate_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "keep_prob",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_64": {
                "variable": {
                    "value": "self.is_train",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "bool",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "is_train",
                    "type": "str",
                    "possible_values": []
                }
            },
            "merge_all_599": {
                "variable": {
                    "value": "self.summary",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reshape_800": {
                "variable": {
                    "value": "out_final",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "residual(config, arg, init_dim, 336, filter_size, 'res_transition_1', act=act, norm=norm, is_train=is_train, tensor_dict=tensor_dict)",
                            "Call"
                        ],
                        [
                            "residual(config, arg, 336, 224, filter_size, 'res_transition_2', act=act, norm=norm, is_train=is_train, tensor_dict=tensor_dict)",
                            "Call"
                        ],
                        [
                            "residual(config, arg, 224, config.res_conv_1_chan, filter_size, 'res1', act=act, norm=norm, is_train=is_train, tensor_dict=tensor_dict)",
                            "Call"
                        ],
                        [
                            "residual(config, arg, init_dim, config.res_conv_1_chan, filter_size, 'res1', act=act, norm=norm, is_train=is_train, tensor_dict=tensor_dict)",
                            "Call"
                        ],
                        [
                            "residual(config, res, config.res_conv_1_chan, config.res_conv_1_chan, filter_size, 'res2', act=act, norm=norm, is_train=is_train, tensor_dict=tensor_dict)",
                            "Call"
                        ],
                        [
                            "residual(config, res, config.res_conv_1_chan, config.res_conv_1_chan, filter_size, 'res3', act=act, norm=norm, is_train=is_train, tensor_dict=tensor_dict)",
                            "Call"
                        ],
                        [
                            "conv_pooling(res, 'first_conv_pool')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(res, [1, 2, 2, 1], [1, 2, 2, 1], 'VALID')",
                            "Call"
                        ],
                        [
                            "residual(config, res, config.res_conv_1_chan, config.res_conv_1_chan, filter_size, 'res4', act=act, norm=norm, is_train=is_train, tensor_dict=tensor_dict)",
                            "Call"
                        ],
                        [
                            "residual(config, res, config.res_conv_1_chan, config.res_conv_1_chan, filter_size, 'res5', act=act, norm=norm, is_train=is_train, tensor_dict=tensor_dict)",
                            "Call"
                        ],
                        [
                            "residual(config, res, config.res_conv_1_chan, config.res_conv_2_chan, filter_size, 'res6', act=act, norm=norm, is_train=is_train, tensor_dict=tensor_dict)",
                            "Call"
                        ],
                        [
                            "conv_pooling(res, 'second_conv_pool')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(res, [1, 2, 2, 1], [1, 2, 2, 1], 'VALID')",
                            "Call"
                        ],
                        [
                            "residual(config, res, config.res_conv_2_chan, config.res_conv_2_chan, filter_size, 'res7', act=act, norm=norm, is_train=is_train, tensor_dict=tensor_dict)",
                            "Call"
                        ],
                        [
                            "residual(config, res, config.res_conv_2_chan, config.res_conv_2_chan, filter_size, 'res8', act=act, norm=norm, is_train=is_train, tensor_dict=tensor_dict)",
                            "Call"
                        ],
                        [
                            "residual(config, res, config.res_conv_2_chan, config.res_conv_2_chan, filter_size, 'res8_1', act=act, norm=norm, is_train=is_train, tensor_dict=tensor_dict)",
                            "Call"
                        ],
                        [
                            "residual(config, res, config.res_conv_2_chan, config.res_conv_3_chan, filter_size, 'res9', act=act, norm=norm, is_train=is_train, tensor_dict=tensor_dict)",
                            "Call"
                        ],
                        [
                            "conv_pooling(res, 'third_conv_pool')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(res, [1, 2, 2, 1], [1, 2, 2, 1], 'VALID')",
                            "Call"
                        ],
                        [
                            "residual(config, res, config.res_conv_3_chan, config.res_conv_3_chan, filter_size, 'res13', act=act, norm=norm, is_train=is_train, tensor_dict=tensor_dict)",
                            "Call"
                        ],
                        [
                            "residual(config, res, config.res_conv_3_chan, config.res_conv_3_chan, filter_size, 'res14', act=act, norm=norm, is_train=is_train, tensor_dict=tensor_dict)",
                            "Call"
                        ],
                        [
                            "residual(config, res, config.res_conv_3_chan, config.res_conv_3_chan, filter_size, 'res15', act=act, norm=norm, is_train=is_train, tensor_dict=tensor_dict)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(res, [1, 6, 6, 1], [1, 1, 1, 1], 'VALID')",
                            "Call"
                        ],
                        [
                            "tf.concat([max_pool, avg_pool], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(res, [1, 2, 2, 1], [1, 2, 2, 1], 'VALID')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, shape_list[1] * shape_list[2] * shape_list[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_908": {
                "variable": {
                    "value": "p_aug",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(p, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, HL, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_909": {
                "variable": {
                    "value": "h_aug",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(h, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, PL, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_946": {
                "variable": {
                    "value": "dense_logit_with_exp_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dense_logit_with_exp_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "exp_mask(dense_logit_feature, ph_mask)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(dense_logit_with_exp_mask, axis=3)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_959": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.cast(ph_mask, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_980": {
                "variable": {
                    "value": "p_aug_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(p, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, PL, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_981": {
                "variable": {
                    "value": "p_aug_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(p, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, PL, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_1064": {
                "variable": {
                    "value": "p1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "linear(p, dim, True, bias_start=0.0, scope='linear_maping_1', squeeze=False, wd=config.wd, input_keep_prob=config.keep_rate, is_train=is_train)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tile_1073": {
                "variable": {
                    "value": "p_aug",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(p, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, HL, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_1074": {
                "variable": {
                    "value": "h_aug",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(h, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, PL, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_1097": {
                "variable": {
                    "value": "p_a",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(p_a, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, PL, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_1334": {
                "variable": {
                    "value": "out_final",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "fm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "denseAttention",
                            "Name"
                        ],
                        [
                            "dense_net_block(config, fm, config.dense_net_growth_rate, config.dense_net_layers, config.dense_net_kernel_size, is_train, scope='first_dense_net_block', tensor_dict=tensor_dict)",
                            "Call"
                        ],
                        [
                            "dense_net_transition_layer(config, fm, config.dense_net_transition_rate, scope='second_transition_layer', tensor_dict=tensor_dict)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.convolution2d(denseAttention, int(dim * config.dense_net_first_scale_down_ratio), config.first_scale_down_kernel, padding='SAME', activation_fn=act)",
                            "Call"
                        ],
                        [
                            "dense_net_transition_layer(config, denseAttention, config.first_transition_growth_rate, scope='first_transition_layer', tensor_dict=tensor_dict)",
                            "Call"
                        ],
                        [
                            "dense_net_block(config, fm, config.dense_net_growth_rate, config.dense_net_layers, config.dense_net_kernel_size, is_train, scope='second_dense_net_block', tensor_dict=tensor_dict)",
                            "Call"
                        ],
                        [
                            "dense_net_transition_layer(config, fm, config.dense_net_transition_rate, scope='third_transition_layer', tensor_dict=tensor_dict)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(tf.concat(fms, axis=4), axis=4)",
                            "Call"
                        ],
                        [
                            "dense_net_block(config, fm, config.dense_net_growth_rate, config.dense_net_layers, config.dense_net_kernel_size, is_train, scope='third_dense_net_block', tensor_dict=tensor_dict)",
                            "Call"
                        ],
                        [
                            "residual(config, fm, dim, dim, 3, 'last_layer_in_dense_block', padding='SAME', act=tf.nn.relu, is_train=is_train)",
                            "Call"
                        ],
                        [
                            "dense_net_transition_layer(config, fm, config.dense_net_transition_rate, scope='fourth_transition_layer', tensor_dict=tensor_dict)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(fm, [1, 2, 2, 1], [1, 2, 2, 1], 'VALID')",
                            "Call"
                        ],
                        [
                            "dense_net_block(config, fm, config.dense_net_growth_rate, config.dense_net_layers, config.dense_net_kernel_size, is_train, scope='fourth_dense_net_block', tensor_dict=tensor_dict)",
                            "Call"
                        ],
                        [
                            "tf.concat([fm, down_sampled_tf_tmp], axis=3)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, shape_list[1] * shape_list[2] * shape_list[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "moments_1507": {
                "variable": {
                    "value": "(mean, variance)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "axes": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Variable_1508": {
                "variable": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros(params_shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_1509": {
                "variable": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.ones(params_shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_26": {
                "variable": {
                    "value": "self.premise_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.context_seq_len]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "premise",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_27": {
                "variable": {
                    "value": "self.hypothesis_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.query_seq_len]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "hypothesis",
                    "type": "str",
                    "possible_values": []
                }
            },
            "exponential_decay_55": {
                "variable": {
                    "value": "self.dropout_keep_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "config.keep_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "global_step": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "decay_steps": {
                    "value": "config.dropout_decay_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "decay_rate": {
                    "value": "config.dropout_decay_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "staircase": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "dropout_keep_rate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_60": {
                "variable": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "label_y",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_62": {
                "variable": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "label_y",
                    "type": "str",
                    "possible_values": []
                }
            },
            "embedding_lookup_70": {
                "variable": {
                    "value": "emb",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "E",
                    "type": "variable",
                    "possible_values": []
                },
                "ids": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm(x)",
                            "Call"
                        ],
                        [
                            "act(x)",
                            "Call"
                        ],
                        [
                            "norm(x)",
                            "Call"
                        ],
                        [
                            "act(x)",
                            "Call"
                        ],
                        [
                            "convolution2d(x, out_filter, 1, padding=padding, normalizer_fn=norm, activation_fn=act)",
                            "Call"
                        ],
                        [
                            "convolution2d(x, out_filter, 1, padding=padding, activation_fn=act)",
                            "Call"
                        ],
                        [
                            "convolution2d(x, out_filter, kernel_size, padding=padding, activation_fn=act)",
                            "Call"
                        ],
                        [
                            "tf.nn.atrous_conv2d(x, filters, rate=2, padding=padding) + bias",
                            "BinOp"
                        ],
                        [
                            "act(x)",
                            "Call"
                        ],
                        [
                            "convolution2d(x, out_filter, kernel_size, padding=padding, normalizer_fn=norm, activation_fn=act)",
                            "Call"
                        ],
                        [
                            "convolution2d(x, out_filter, kernel_size, padding=padding, activation_fn=act)",
                            "Call"
                        ],
                        [
                            "convolution2d(x, out_filter, kernel_size, padding=padding, normalizer_fn=norm, activation_fn=act)",
                            "Call"
                        ],
                        [
                            "convolution2d(x, out_filter, kernel_size, padding=padding, activation_fn=act)",
                            "Call"
                        ],
                        [
                            "convolution2d(x, out_filter, kernel_size, padding=padding, activation_fn=act)",
                            "Call"
                        ],
                        [
                            "tf.nn.atrous_conv2d(x, filters, rate=2, padding=padding) + bias",
                            "BinOp"
                        ],
                        [
                            "act(x)",
                            "Call"
                        ],
                        [
                            "tf.cond(is_train, lambda : tf.nn.dropout(x, config.keep_rate), lambda : x)",
                            "Call"
                        ],
                        [
                            "convolution2d(x, out_filter, 1, padding=padding, normalizer_fn=norm, activation_fn=act)",
                            "Call"
                        ],
                        [
                            "convolution2d(x, out_filter, 1, padding=padding, activation_fn=act)",
                            "Call"
                        ],
                        [
                            "convolution2d(x, out_filter, kernel_size, padding=padding, normalizer_fn=norm, activation_fn=act)",
                            "Call"
                        ],
                        [
                            "convolution2d(x, out_filter, kernel_size, padding=padding, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "convolution2d(x, out_filter, kernel_size, padding=padding, activation_fn=act)",
                            "Call"
                        ],
                        [
                            "fuse_gate(config, is_train, orig_x, x, scope='conv_fuse_gate')",
                            "Call"
                        ],
                        [
                            "fuse_gate(config, is_train, x, orig_x, scope='conv_fuse_gate')",
                            "Call"
                        ],
                        [
                            "tf.cond(is_train, lambda : tf.nn.dropout(x, config.keep_rate), lambda : x)",
                            "Call"
                        ],
                        [
                            "shuffle_add(config, x)",
                            "Call"
                        ],
                        [
                            "tf.concat([x, orig_x], axis=3)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ]
                    ]
                }
            },
            "concat_155": {
                "variable": {
                    "value": "premise_in",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(premise_in, tf.cast(self.premise_pos, tf.float32))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_156": {
                "variable": {
                    "value": "hypothesis_in",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(hypothesis_in, tf.cast(self.hypothesis_pos, tf.float32))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_159": {
                "variable": {
                    "value": "premise_in",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[premise_in, tf.cast(self.premise_exact_match, tf.float32)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_160": {
                "variable": {
                    "value": "hypothesis_in",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[hypothesis_in, tf.cast(self.hypothesis_exact_match, tf.float32)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_163": {
                "variable": {
                    "value": "premise_in",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[premise_in, self.premise_itf]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_164": {
                "variable": {
                    "value": "hypothesis_in",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[hypothesis_in, self.hypothesis_itf]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_167": {
                "variable": {
                    "value": "premise_in",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[premise_in, tf.cast(self.premise_antonym, tf.float32)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_168": {
                "variable": {
                    "value": "hypothesis_in",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[hypothesis_in, tf.cast(self.hypothesis_antonym, tf.float32)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_171": {
                "variable": {
                    "value": "premise_in",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[premise_in, tf.cast(self.premise_NER_feature, tf.float32)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_172": {
                "variable": {
                    "value": "hypothesis_in",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[hypothesis_in, tf.cast(self.hypothesis_NER_feature, tf.float32)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cond_191": {
                "variable": {
                    "value": "premise_in",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "self.is_train",
                    "type": "Attribute",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : tf.nn.dropout(premise_in, config.input_keep_rate)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : premise_in",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cond_192": {
                "variable": {
                    "value": "hypothesis_in",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "self.is_train",
                    "type": "Attribute",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : tf.nn.dropout(hypothesis_in, config.input_keep_rate)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : hypothesis_in",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "BasicLSTMCell_218": {
                "variable": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": []
                },
                "num_units": {
                    "value": "self.LSTM_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "state_is_tuple": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_max_440": {
                "variable": {
                    "value": "p_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "premise_in",
                            "Name"
                        ],
                        [
                            "premise_in",
                            "Name"
                        ],
                        [
                            "premise_in",
                            "Name"
                        ],
                        [
                            "self_attention_layer(config, self.is_train, pre, p_mask=prem_mask, scope='{}_layer_self_att_enc'.format(i))",
                            "Call"
                        ],
                        [
                            "self_attention_layer(config, self.is_train, p, p_mask=prem_mask, scope='{}_layer_self_att_enc'.format(i))",
                            "Call"
                        ],
                        [
                            "memory_augment_layer(config, p, prem_mask, self.is_train, config.memory_key_and_values_num, name='memory_augmentation_layer')",
                            "Call"
                        ],
                        [
                            "fuse_gate(config, self.is_train, p, p1, scope='linear_enc_fuse_gate_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.concat([p, p * pre], axis=2)",
                            "Call"
                        ],
                        [
                            "p1",
                            "Name"
                        ],
                        [
                            "tf.concat([p, p - pre], axis=2)",
                            "Call"
                        ],
                        [
                            "p_lstm_enc",
                            "Name"
                        ],
                        [
                            "tmp_p",
                            "Name"
                        ],
                        [
                            "tf.concat([pre, p, p * pre], axis=2)",
                            "Call"
                        ],
                        [
                            "fuse_gate(config, self.is_train, p, p_lstm_enc, scope='lstm_enc_fuse_gate')",
                            "Call"
                        ],
                        [
                            "tmp_p",
                            "Name"
                        ],
                        [
                            "linear_mapping_with_residual_conn(config, self.is_train, p, p_mask=prem_mask, scope='{}_layer_self_att_linear_mapping'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.concat([pre, p, p * pre, p - pre], axis=2)",
                            "Call"
                        ],
                        [
                            "raw_pre",
                            "Name"
                        ],
                        [
                            "tf.concat([p, pre], axis=2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_max_441": {
                "variable": {
                    "value": "h_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hypothesis_in",
                            "Name"
                        ],
                        [
                            "hypothesis_in",
                            "Name"
                        ],
                        [
                            "hypothesis_in",
                            "Name"
                        ],
                        [
                            "self_attention_layer(config, self.is_train, hyp, p_mask=hyp_mask, scope='{}_layer_self_att_enc_h'.format(i))",
                            "Call"
                        ],
                        [
                            "self_attention_layer(config, self.is_train, hyp, p_mask=hyp_mask, scope='{}_layer_self_att_enc'.format(i))",
                            "Call"
                        ],
                        [
                            "self_attention_layer(config, self.is_train, h, p_mask=hyp_mask, scope='{}_layer_self_att_enc'.format(i))",
                            "Call"
                        ],
                        [
                            "memory_augment_layer(config, h, hyp_mask, self.is_train, config.memory_key_and_values_num, name='memory_augmentation_layer')",
                            "Call"
                        ],
                        [
                            "fuse_gate(config, self.is_train, h, h1, scope='linear_enc_fuse_gate_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.concat([h, h * hyp], axis=2)",
                            "Call"
                        ],
                        [
                            "h1",
                            "Name"
                        ],
                        [
                            "tf.concat([h, h - hyp], axis=2)",
                            "Call"
                        ],
                        [
                            "h_lstm_enc",
                            "Name"
                        ],
                        [
                            "tmp_h",
                            "Name"
                        ],
                        [
                            "tf.concat([hyp, h, h * hyp], axis=2)",
                            "Call"
                        ],
                        [
                            "fuse_gate(config, self.is_train, h, h_lstm_enc, scope='lstm_enc_fuse_gate')",
                            "Call"
                        ],
                        [
                            "tmp_h",
                            "Name"
                        ],
                        [
                            "linear_mapping_with_residual_conn(config, self.is_train, h, p_mask=hyp_mask, scope='{}_layer_self_att_linear_mapping'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.concat([hyp, h, h * hyp, h - hyp], axis=2)",
                            "Call"
                        ],
                        [
                            "raw_hyp",
                            "Name"
                        ],
                        [
                            "tf.concat([h, hyp], axis=2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_max_459": {
                "variable": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.concat(logtis_aug, axis=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "histogram_468": {
                "name": {
                    "value": "logit_histogram",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_473": {
                "variable": {
                    "value": "sm_lgt",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_475": {
                "variable": {
                    "value": "self.acc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(tf.equal(tf.arg_max(self.logits, dimension=1), tf.arg_max(self.y, dimension=1)), tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_477": {
                "variable": {
                    "value": "self.total_cost",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sparse_softmax_cross_entropy_with_logits(labels=self.y, logits=self.logits)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_478": {
                "variable": {
                    "value": "self.acc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(tf.equal(tf.arg_max(self.logits, dimension=1), tf.cast(self.y, tf.int64)), tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_479": {
                "name": {
                    "value": "acc",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.acc",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_max_483": {
                "variable": {
                    "value": "p_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "premise_in",
                            "Name"
                        ],
                        [
                            "premise_in",
                            "Name"
                        ],
                        [
                            "premise_in",
                            "Name"
                        ],
                        [
                            "self_attention_layer(config, self.is_train, pre, p_mask=prem_mask, scope='{}_layer_self_att_enc'.format(i))",
                            "Call"
                        ],
                        [
                            "self_attention_layer(config, self.is_train, p, p_mask=prem_mask, scope='{}_layer_self_att_enc'.format(i))",
                            "Call"
                        ],
                        [
                            "memory_augment_layer(config, p, prem_mask, self.is_train, config.memory_key_and_values_num, name='memory_augmentation_layer')",
                            "Call"
                        ],
                        [
                            "fuse_gate(config, self.is_train, p, p1, scope='linear_enc_fuse_gate_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.concat([p, p * pre], axis=2)",
                            "Call"
                        ],
                        [
                            "p1",
                            "Name"
                        ],
                        [
                            "tf.concat([p, p - pre], axis=2)",
                            "Call"
                        ],
                        [
                            "p_lstm_enc",
                            "Name"
                        ],
                        [
                            "tmp_p",
                            "Name"
                        ],
                        [
                            "tf.concat([pre, p, p * pre], axis=2)",
                            "Call"
                        ],
                        [
                            "fuse_gate(config, self.is_train, p, p_lstm_enc, scope='lstm_enc_fuse_gate')",
                            "Call"
                        ],
                        [
                            "tmp_p",
                            "Name"
                        ],
                        [
                            "linear_mapping_with_residual_conn(config, self.is_train, p, p_mask=prem_mask, scope='{}_layer_self_att_linear_mapping'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.concat([pre, p, p * pre, p - pre], axis=2)",
                            "Call"
                        ],
                        [
                            "raw_pre",
                            "Name"
                        ],
                        [
                            "tf.concat([p, pre], axis=2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_max_484": {
                "variable": {
                    "value": "h_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hypothesis_in",
                            "Name"
                        ],
                        [
                            "hypothesis_in",
                            "Name"
                        ],
                        [
                            "hypothesis_in",
                            "Name"
                        ],
                        [
                            "self_attention_layer(config, self.is_train, hyp, p_mask=hyp_mask, scope='{}_layer_self_att_enc_h'.format(i))",
                            "Call"
                        ],
                        [
                            "self_attention_layer(config, self.is_train, hyp, p_mask=hyp_mask, scope='{}_layer_self_att_enc'.format(i))",
                            "Call"
                        ],
                        [
                            "self_attention_layer(config, self.is_train, h, p_mask=hyp_mask, scope='{}_layer_self_att_enc'.format(i))",
                            "Call"
                        ],
                        [
                            "memory_augment_layer(config, h, hyp_mask, self.is_train, config.memory_key_and_values_num, name='memory_augmentation_layer')",
                            "Call"
                        ],
                        [
                            "fuse_gate(config, self.is_train, h, h1, scope='linear_enc_fuse_gate_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.concat([h, h * hyp], axis=2)",
                            "Call"
                        ],
                        [
                            "h1",
                            "Name"
                        ],
                        [
                            "tf.concat([h, h - hyp], axis=2)",
                            "Call"
                        ],
                        [
                            "h_lstm_enc",
                            "Name"
                        ],
                        [
                            "tmp_h",
                            "Name"
                        ],
                        [
                            "tf.concat([hyp, h, h * hyp], axis=2)",
                            "Call"
                        ],
                        [
                            "fuse_gate(config, self.is_train, h, h_lstm_enc, scope='lstm_enc_fuse_gate')",
                            "Call"
                        ],
                        [
                            "tmp_h",
                            "Name"
                        ],
                        [
                            "linear_mapping_with_residual_conn(config, self.is_train, h, p_mask=hyp_mask, scope='{}_layer_self_att_linear_mapping'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.concat([hyp, h, h * hyp, h - hyp], axis=2)",
                            "Call"
                        ],
                        [
                            "raw_hyp",
                            "Name"
                        ],
                        [
                            "tf.concat([h, hyp], axis=2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_485": {
                "variable": {
                    "value": "cat",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[p_vec, h_vec, p_vec - h_vec, p_vec * h_vec]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_486": {
                "variable": {
                    "value": "enc_loss_ratio",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "config.enc_loss_ratio",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "encoding_loss_ratio",
                    "type": "str",
                    "possible_values": []
                }
            },
            "scalar_491": {
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.total_cost",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_max_586": {
                "variable": {
                    "value": "p_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "premise_in",
                            "Name"
                        ],
                        [
                            "premise_in",
                            "Name"
                        ],
                        [
                            "premise_in",
                            "Name"
                        ],
                        [
                            "self_attention_layer(config, self.is_train, pre, p_mask=prem_mask, scope='{}_layer_self_att_enc'.format(i))",
                            "Call"
                        ],
                        [
                            "self_attention_layer(config, self.is_train, p, p_mask=prem_mask, scope='{}_layer_self_att_enc'.format(i))",
                            "Call"
                        ],
                        [
                            "memory_augment_layer(config, p, prem_mask, self.is_train, config.memory_key_and_values_num, name='memory_augmentation_layer')",
                            "Call"
                        ],
                        [
                            "fuse_gate(config, self.is_train, p, p1, scope='linear_enc_fuse_gate_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.concat([p, p * pre], axis=2)",
                            "Call"
                        ],
                        [
                            "p1",
                            "Name"
                        ],
                        [
                            "tf.concat([p, p - pre], axis=2)",
                            "Call"
                        ],
                        [
                            "p_lstm_enc",
                            "Name"
                        ],
                        [
                            "tmp_p",
                            "Name"
                        ],
                        [
                            "tf.concat([pre, p, p * pre], axis=2)",
                            "Call"
                        ],
                        [
                            "fuse_gate(config, self.is_train, p, p_lstm_enc, scope='lstm_enc_fuse_gate')",
                            "Call"
                        ],
                        [
                            "tmp_p",
                            "Name"
                        ],
                        [
                            "linear_mapping_with_residual_conn(config, self.is_train, p, p_mask=prem_mask, scope='{}_layer_self_att_linear_mapping'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.concat([pre, p, p * pre, p - pre], axis=2)",
                            "Call"
                        ],
                        [
                            "raw_pre",
                            "Name"
                        ],
                        [
                            "tf.concat([p, pre], axis=2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_max_587": {
                "variable": {
                    "value": "h_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hypothesis_in",
                            "Name"
                        ],
                        [
                            "hypothesis_in",
                            "Name"
                        ],
                        [
                            "hypothesis_in",
                            "Name"
                        ],
                        [
                            "self_attention_layer(config, self.is_train, hyp, p_mask=hyp_mask, scope='{}_layer_self_att_enc_h'.format(i))",
                            "Call"
                        ],
                        [
                            "self_attention_layer(config, self.is_train, hyp, p_mask=hyp_mask, scope='{}_layer_self_att_enc'.format(i))",
                            "Call"
                        ],
                        [
                            "self_attention_layer(config, self.is_train, h, p_mask=hyp_mask, scope='{}_layer_self_att_enc'.format(i))",
                            "Call"
                        ],
                        [
                            "memory_augment_layer(config, h, hyp_mask, self.is_train, config.memory_key_and_values_num, name='memory_augmentation_layer')",
                            "Call"
                        ],
                        [
                            "fuse_gate(config, self.is_train, h, h1, scope='linear_enc_fuse_gate_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.concat([h, h * hyp], axis=2)",
                            "Call"
                        ],
                        [
                            "h1",
                            "Name"
                        ],
                        [
                            "tf.concat([h, h - hyp], axis=2)",
                            "Call"
                        ],
                        [
                            "h_lstm_enc",
                            "Name"
                        ],
                        [
                            "tmp_h",
                            "Name"
                        ],
                        [
                            "tf.concat([hyp, h, h * hyp], axis=2)",
                            "Call"
                        ],
                        [
                            "fuse_gate(config, self.is_train, h, h_lstm_enc, scope='lstm_enc_fuse_gate')",
                            "Call"
                        ],
                        [
                            "tmp_h",
                            "Name"
                        ],
                        [
                            "linear_mapping_with_residual_conn(config, self.is_train, h, p_mask=hyp_mask, scope='{}_layer_self_att_linear_mapping'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.concat([hyp, h, h * hyp, h - hyp], axis=2)",
                            "Call"
                        ],
                        [
                            "raw_hyp",
                            "Name"
                        ],
                        [
                            "tf.concat([h, hyp], axis=2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "equal_589": {
                "variable": {
                    "value": "entailment_switch",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.constant(0, dtype=tf.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_590": {
                "variable": {
                    "value": "neutral_switch",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.constant(1, dtype=tf.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_591": {
                "variable": {
                    "value": "contradiction_switch",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.constant(2, dtype=tf.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "map_fn_593": {
                "variable": {
                    "value": "entailment_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "fn": {
                    "value": "lambda x: tf.cond(x[0], lambda : 1 / x[1], lambda : tf.constant(0.0, dtype=tf.float32))",
                    "type": "Lambda",
                    "possible_values": []
                },
                "elems": {
                    "value": "(entailment_switch, cos_sim)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                }
            },
            "map_fn_594": {
                "variable": {
                    "value": "neutral_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "fn": {
                    "value": "lambda x: tf.cond(x[0], lambda : tf.abs(x[1]), lambda : tf.constant(0.0, dtype=tf.float32))",
                    "type": "Lambda",
                    "possible_values": []
                },
                "elems": {
                    "value": "(neutral_switch, cos_sim)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                }
            },
            "map_fn_595": {
                "variable": {
                    "value": "contradiction_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "fn": {
                    "value": "lambda x: tf.cond(x[0], lambda : 1 / -x[1], lambda : tf.constant(0.0, dtype=tf.float32))",
                    "type": "Lambda",
                    "possible_values": []
                },
                "elems": {
                    "value": "(contradiction_switch, cos_sim)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                }
            },
            "global_variables_602": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tile_705": {
                "variable": {
                    "value": "comm_aug",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(comm, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, perspectives, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_706": {
                "variable": {
                    "value": "perspect_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "perspect_weight",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[perspectives, dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_713": {
                "name_or_scope": {
                    "value": "name or 'conv_blocks'",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "max_pool_761": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "residual(config, arg, init_dim, 336, filter_size, 'res_transition_1', act=act, norm=norm, is_train=is_train, tensor_dict=tensor_dict)",
                            "Call"
                        ],
                        [
                            "residual(config, arg, 336, 224, filter_size, 'res_transition_2', act=act, norm=norm, is_train=is_train, tensor_dict=tensor_dict)",
                            "Call"
                        ],
                        [
                            "residual(config, arg, 224, config.res_conv_1_chan, filter_size, 'res1', act=act, norm=norm, is_train=is_train, tensor_dict=tensor_dict)",
                            "Call"
                        ],
                        [
                            "residual(config, arg, init_dim, config.res_conv_1_chan, filter_size, 'res1', act=act, norm=norm, is_train=is_train, tensor_dict=tensor_dict)",
                            "Call"
                        ],
                        [
                            "residual(config, res, config.res_conv_1_chan, config.res_conv_1_chan, filter_size, 'res2', act=act, norm=norm, is_train=is_train, tensor_dict=tensor_dict)",
                            "Call"
                        ],
                        [
                            "residual(config, res, config.res_conv_1_chan, config.res_conv_1_chan, filter_size, 'res3', act=act, norm=norm, is_train=is_train, tensor_dict=tensor_dict)",
                            "Call"
                        ],
                        [
                            "conv_pooling(res, 'first_conv_pool')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(res, [1, 2, 2, 1], [1, 2, 2, 1], 'VALID')",
                            "Call"
                        ],
                        [
                            "residual(config, res, config.res_conv_1_chan, config.res_conv_1_chan, filter_size, 'res4', act=act, norm=norm, is_train=is_train, tensor_dict=tensor_dict)",
                            "Call"
                        ],
                        [
                            "residual(config, res, config.res_conv_1_chan, config.res_conv_1_chan, filter_size, 'res5', act=act, norm=norm, is_train=is_train, tensor_dict=tensor_dict)",
                            "Call"
                        ],
                        [
                            "residual(config, res, config.res_conv_1_chan, config.res_conv_2_chan, filter_size, 'res6', act=act, norm=norm, is_train=is_train, tensor_dict=tensor_dict)",
                            "Call"
                        ],
                        [
                            "conv_pooling(res, 'second_conv_pool')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(res, [1, 2, 2, 1], [1, 2, 2, 1], 'VALID')",
                            "Call"
                        ],
                        [
                            "residual(config, res, config.res_conv_2_chan, config.res_conv_2_chan, filter_size, 'res7', act=act, norm=norm, is_train=is_train, tensor_dict=tensor_dict)",
                            "Call"
                        ],
                        [
                            "residual(config, res, config.res_conv_2_chan, config.res_conv_2_chan, filter_size, 'res8', act=act, norm=norm, is_train=is_train, tensor_dict=tensor_dict)",
                            "Call"
                        ],
                        [
                            "residual(config, res, config.res_conv_2_chan, config.res_conv_2_chan, filter_size, 'res8_1', act=act, norm=norm, is_train=is_train, tensor_dict=tensor_dict)",
                            "Call"
                        ],
                        [
                            "residual(config, res, config.res_conv_2_chan, config.res_conv_3_chan, filter_size, 'res9', act=act, norm=norm, is_train=is_train, tensor_dict=tensor_dict)",
                            "Call"
                        ],
                        [
                            "conv_pooling(res, 'third_conv_pool')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(res, [1, 2, 2, 1], [1, 2, 2, 1], 'VALID')",
                            "Call"
                        ],
                        [
                            "residual(config, res, config.res_conv_3_chan, config.res_conv_3_chan, filter_size, 'res13', act=act, norm=norm, is_train=is_train, tensor_dict=tensor_dict)",
                            "Call"
                        ],
                        [
                            "residual(config, res, config.res_conv_3_chan, config.res_conv_3_chan, filter_size, 'res14', act=act, norm=norm, is_train=is_train, tensor_dict=tensor_dict)",
                            "Call"
                        ],
                        [
                            "residual(config, res, config.res_conv_3_chan, config.res_conv_3_chan, filter_size, 'res15', act=act, norm=norm, is_train=is_train, tensor_dict=tensor_dict)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(res, [1, 6, 6, 1], [1, 1, 1, 1], 'VALID')",
                            "Call"
                        ],
                        [
                            "tf.concat([max_pool, avg_pool], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(res, [1, 2, 2, 1], [1, 2, 2, 1], 'VALID')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool_771": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "residual(config, arg, init_dim, 336, filter_size, 'res_transition_1', act=act, norm=norm, is_train=is_train, tensor_dict=tensor_dict)",
                            "Call"
                        ],
                        [
                            "residual(config, arg, 336, 224, filter_size, 'res_transition_2', act=act, norm=norm, is_train=is_train, tensor_dict=tensor_dict)",
                            "Call"
                        ],
                        [
                            "residual(config, arg, 224, config.res_conv_1_chan, filter_size, 'res1', act=act, norm=norm, is_train=is_train, tensor_dict=tensor_dict)",
                            "Call"
                        ],
                        [
                            "residual(config, arg, init_dim, config.res_conv_1_chan, filter_size, 'res1', act=act, norm=norm, is_train=is_train, tensor_dict=tensor_dict)",
                            "Call"
                        ],
                        [
                            "residual(config, res, config.res_conv_1_chan, config.res_conv_1_chan, filter_size, 'res2', act=act, norm=norm, is_train=is_train, tensor_dict=tensor_dict)",
                            "Call"
                        ],
                        [
                            "residual(config, res, config.res_conv_1_chan, config.res_conv_1_chan, filter_size, 'res3', act=act, norm=norm, is_train=is_train, tensor_dict=tensor_dict)",
                            "Call"
                        ],
                        [
                            "conv_pooling(res, 'first_conv_pool')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(res, [1, 2, 2, 1], [1, 2, 2, 1], 'VALID')",
                            "Call"
                        ],
                        [
                            "residual(config, res, config.res_conv_1_chan, config.res_conv_1_chan, filter_size, 'res4', act=act, norm=norm, is_train=is_train, tensor_dict=tensor_dict)",
                            "Call"
                        ],
                        [
                            "residual(config, res, config.res_conv_1_chan, config.res_conv_1_chan, filter_size, 'res5', act=act, norm=norm, is_train=is_train, tensor_dict=tensor_dict)",
                            "Call"
                        ],
                        [
                            "residual(config, res, config.res_conv_1_chan, config.res_conv_2_chan, filter_size, 'res6', act=act, norm=norm, is_train=is_train, tensor_dict=tensor_dict)",
                            "Call"
                        ],
                        [
                            "conv_pooling(res, 'second_conv_pool')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(res, [1, 2, 2, 1], [1, 2, 2, 1], 'VALID')",
                            "Call"
                        ],
                        [
                            "residual(config, res, config.res_conv_2_chan, config.res_conv_2_chan, filter_size, 'res7', act=act, norm=norm, is_train=is_train, tensor_dict=tensor_dict)",
                            "Call"
                        ],
                        [
                            "residual(config, res, config.res_conv_2_chan, config.res_conv_2_chan, filter_size, 'res8', act=act, norm=norm, is_train=is_train, tensor_dict=tensor_dict)",
                            "Call"
                        ],
                        [
                            "residual(config, res, config.res_conv_2_chan, config.res_conv_2_chan, filter_size, 'res8_1', act=act, norm=norm, is_train=is_train, tensor_dict=tensor_dict)",
                            "Call"
                        ],
                        [
                            "residual(config, res, config.res_conv_2_chan, config.res_conv_3_chan, filter_size, 'res9', act=act, norm=norm, is_train=is_train, tensor_dict=tensor_dict)",
                            "Call"
                        ],
                        [
                            "conv_pooling(res, 'third_conv_pool')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(res, [1, 2, 2, 1], [1, 2, 2, 1], 'VALID')",
                            "Call"
                        ],
                        [
                            "residual(config, res, config.res_conv_3_chan, config.res_conv_3_chan, filter_size, 'res13', act=act, norm=norm, is_train=is_train, tensor_dict=tensor_dict)",
                            "Call"
                        ],
                        [
                            "residual(config, res, config.res_conv_3_chan, config.res_conv_3_chan, filter_size, 'res14', act=act, norm=norm, is_train=is_train, tensor_dict=tensor_dict)",
                            "Call"
                        ],
                        [
                            "residual(config, res, config.res_conv_3_chan, config.res_conv_3_chan, filter_size, 'res15', act=act, norm=norm, is_train=is_train, tensor_dict=tensor_dict)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(res, [1, 6, 6, 1], [1, 1, 1, 1], 'VALID')",
                            "Call"
                        ],
                        [
                            "tf.concat([max_pool, avg_pool], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(res, [1, 2, 2, 1], [1, 2, 2, 1], 'VALID')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool_783": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "residual(config, arg, init_dim, 336, filter_size, 'res_transition_1', act=act, norm=norm, is_train=is_train, tensor_dict=tensor_dict)",
                            "Call"
                        ],
                        [
                            "residual(config, arg, 336, 224, filter_size, 'res_transition_2', act=act, norm=norm, is_train=is_train, tensor_dict=tensor_dict)",
                            "Call"
                        ],
                        [
                            "residual(config, arg, 224, config.res_conv_1_chan, filter_size, 'res1', act=act, norm=norm, is_train=is_train, tensor_dict=tensor_dict)",
                            "Call"
                        ],
                        [
                            "residual(config, arg, init_dim, config.res_conv_1_chan, filter_size, 'res1', act=act, norm=norm, is_train=is_train, tensor_dict=tensor_dict)",
                            "Call"
                        ],
                        [
                            "residual(config, res, config.res_conv_1_chan, config.res_conv_1_chan, filter_size, 'res2', act=act, norm=norm, is_train=is_train, tensor_dict=tensor_dict)",
                            "Call"
                        ],
                        [
                            "residual(config, res, config.res_conv_1_chan, config.res_conv_1_chan, filter_size, 'res3', act=act, norm=norm, is_train=is_train, tensor_dict=tensor_dict)",
                            "Call"
                        ],
                        [
                            "conv_pooling(res, 'first_conv_pool')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(res, [1, 2, 2, 1], [1, 2, 2, 1], 'VALID')",
                            "Call"
                        ],
                        [
                            "residual(config, res, config.res_conv_1_chan, config.res_conv_1_chan, filter_size, 'res4', act=act, norm=norm, is_train=is_train, tensor_dict=tensor_dict)",
                            "Call"
                        ],
                        [
                            "residual(config, res, config.res_conv_1_chan, config.res_conv_1_chan, filter_size, 'res5', act=act, norm=norm, is_train=is_train, tensor_dict=tensor_dict)",
                            "Call"
                        ],
                        [
                            "residual(config, res, config.res_conv_1_chan, config.res_conv_2_chan, filter_size, 'res6', act=act, norm=norm, is_train=is_train, tensor_dict=tensor_dict)",
                            "Call"
                        ],
                        [
                            "conv_pooling(res, 'second_conv_pool')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(res, [1, 2, 2, 1], [1, 2, 2, 1], 'VALID')",
                            "Call"
                        ],
                        [
                            "residual(config, res, config.res_conv_2_chan, config.res_conv_2_chan, filter_size, 'res7', act=act, norm=norm, is_train=is_train, tensor_dict=tensor_dict)",
                            "Call"
                        ],
                        [
                            "residual(config, res, config.res_conv_2_chan, config.res_conv_2_chan, filter_size, 'res8', act=act, norm=norm, is_train=is_train, tensor_dict=tensor_dict)",
                            "Call"
                        ],
                        [
                            "residual(config, res, config.res_conv_2_chan, config.res_conv_2_chan, filter_size, 'res8_1', act=act, norm=norm, is_train=is_train, tensor_dict=tensor_dict)",
                            "Call"
                        ],
                        [
                            "residual(config, res, config.res_conv_2_chan, config.res_conv_3_chan, filter_size, 'res9', act=act, norm=norm, is_train=is_train, tensor_dict=tensor_dict)",
                            "Call"
                        ],
                        [
                            "conv_pooling(res, 'third_conv_pool')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(res, [1, 2, 2, 1], [1, 2, 2, 1], 'VALID')",
                            "Call"
                        ],
                        [
                            "residual(config, res, config.res_conv_3_chan, config.res_conv_3_chan, filter_size, 'res13', act=act, norm=norm, is_train=is_train, tensor_dict=tensor_dict)",
                            "Call"
                        ],
                        [
                            "residual(config, res, config.res_conv_3_chan, config.res_conv_3_chan, filter_size, 'res14', act=act, norm=norm, is_train=is_train, tensor_dict=tensor_dict)",
                            "Call"
                        ],
                        [
                            "residual(config, res, config.res_conv_3_chan, config.res_conv_3_chan, filter_size, 'res15', act=act, norm=norm, is_train=is_train, tensor_dict=tensor_dict)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(res, [1, 6, 6, 1], [1, 1, 1, 1], 'VALID')",
                            "Call"
                        ],
                        [
                            "tf.concat([max_pool, avg_pool], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(res, [1, 2, 2, 1], [1, 2, 2, 1], 'VALID')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "avg_pool_790": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "residual(config, arg, init_dim, 336, filter_size, 'res_transition_1', act=act, norm=norm, is_train=is_train, tensor_dict=tensor_dict)",
                            "Call"
                        ],
                        [
                            "residual(config, arg, 336, 224, filter_size, 'res_transition_2', act=act, norm=norm, is_train=is_train, tensor_dict=tensor_dict)",
                            "Call"
                        ],
                        [
                            "residual(config, arg, 224, config.res_conv_1_chan, filter_size, 'res1', act=act, norm=norm, is_train=is_train, tensor_dict=tensor_dict)",
                            "Call"
                        ],
                        [
                            "residual(config, arg, init_dim, config.res_conv_1_chan, filter_size, 'res1', act=act, norm=norm, is_train=is_train, tensor_dict=tensor_dict)",
                            "Call"
                        ],
                        [
                            "residual(config, res, config.res_conv_1_chan, config.res_conv_1_chan, filter_size, 'res2', act=act, norm=norm, is_train=is_train, tensor_dict=tensor_dict)",
                            "Call"
                        ],
                        [
                            "residual(config, res, config.res_conv_1_chan, config.res_conv_1_chan, filter_size, 'res3', act=act, norm=norm, is_train=is_train, tensor_dict=tensor_dict)",
                            "Call"
                        ],
                        [
                            "conv_pooling(res, 'first_conv_pool')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(res, [1, 2, 2, 1], [1, 2, 2, 1], 'VALID')",
                            "Call"
                        ],
                        [
                            "residual(config, res, config.res_conv_1_chan, config.res_conv_1_chan, filter_size, 'res4', act=act, norm=norm, is_train=is_train, tensor_dict=tensor_dict)",
                            "Call"
                        ],
                        [
                            "residual(config, res, config.res_conv_1_chan, config.res_conv_1_chan, filter_size, 'res5', act=act, norm=norm, is_train=is_train, tensor_dict=tensor_dict)",
                            "Call"
                        ],
                        [
                            "residual(config, res, config.res_conv_1_chan, config.res_conv_2_chan, filter_size, 'res6', act=act, norm=norm, is_train=is_train, tensor_dict=tensor_dict)",
                            "Call"
                        ],
                        [
                            "conv_pooling(res, 'second_conv_pool')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(res, [1, 2, 2, 1], [1, 2, 2, 1], 'VALID')",
                            "Call"
                        ],
                        [
                            "residual(config, res, config.res_conv_2_chan, config.res_conv_2_chan, filter_size, 'res7', act=act, norm=norm, is_train=is_train, tensor_dict=tensor_dict)",
                            "Call"
                        ],
                        [
                            "residual(config, res, config.res_conv_2_chan, config.res_conv_2_chan, filter_size, 'res8', act=act, norm=norm, is_train=is_train, tensor_dict=tensor_dict)",
                            "Call"
                        ],
                        [
                            "residual(config, res, config.res_conv_2_chan, config.res_conv_2_chan, filter_size, 'res8_1', act=act, norm=norm, is_train=is_train, tensor_dict=tensor_dict)",
                            "Call"
                        ],
                        [
                            "residual(config, res, config.res_conv_2_chan, config.res_conv_3_chan, filter_size, 'res9', act=act, norm=norm, is_train=is_train, tensor_dict=tensor_dict)",
                            "Call"
                        ],
                        [
                            "conv_pooling(res, 'third_conv_pool')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(res, [1, 2, 2, 1], [1, 2, 2, 1], 'VALID')",
                            "Call"
                        ],
                        [
                            "residual(config, res, config.res_conv_3_chan, config.res_conv_3_chan, filter_size, 'res13', act=act, norm=norm, is_train=is_train, tensor_dict=tensor_dict)",
                            "Call"
                        ],
                        [
                            "residual(config, res, config.res_conv_3_chan, config.res_conv_3_chan, filter_size, 'res14', act=act, norm=norm, is_train=is_train, tensor_dict=tensor_dict)",
                            "Call"
                        ],
                        [
                            "residual(config, res, config.res_conv_3_chan, config.res_conv_3_chan, filter_size, 'res15', act=act, norm=norm, is_train=is_train, tensor_dict=tensor_dict)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(res, [1, 6, 6, 1], [1, 1, 1, 1], 'VALID')",
                            "Call"
                        ],
                        [
                            "tf.concat([max_pool, avg_pool], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(res, [1, 2, 2, 1], [1, 2, 2, 1], 'VALID')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 6, 6, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "expand_dims_819": {
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ],
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_830": {
                "x": {
                    "value": "tf.tile(tf.expand_dims(p_mask, 2), [1, 1, HL, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_831": {
                "x": {
                    "value": "tf.tile(tf.expand_dims(h_mask, 1), [1, PL, 1, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_860": {
                "input": {
                    "value": "sum_feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_max(bi_att_mx, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(bi_att_mx, axis=3)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_872": {
                "input": {
                    "value": "mean_feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(bi_att_mx, axis=3)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_884": {
                "input": {
                    "value": "min_feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_min(bi_att_mx, axis=3)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_894": {
                "input": {
                    "value": "sum_feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_max(bi_att_mx, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(bi_att_mx, axis=3)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_905": {
                "name_or_scope": {
                    "value": "scope or 'dense_logit_bi_attention'",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "variable_scope_932": {
                "name_or_scope": {
                    "value": "scope or 'dense_logits_softmax_features'",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "softmax_951": {
                "variable": {
                    "value": "dense_logit_softmax_row",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "dense_logit_with_exp_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "exp_mask(dense_logit_feature, ph_mask)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(dense_logit_with_exp_mask, axis=3)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "softmax_row",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_954": {
                "variable": {
                    "value": "dense_logit_softmax_col",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "dense_logit_with_exp_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "exp_mask(dense_logit_feature, ph_mask)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(dense_logit_with_exp_mask, axis=3)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "softmax_col",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_976": {
                "name_or_scope": {
                    "value": "scope or 'self_attention'",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "reduce_any_986": {
                "variable": {
                    "value": "p_mask_aug_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(tf.tile(tf.expand_dims(p_mask, 2), [1, 1, PL, 1]), tf.bool)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_any_987": {
                "variable": {
                    "value": "p_mask_aug_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(tf.tile(tf.expand_dims(p_mask, 1), [1, PL, 1, 1]), tf.bool)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unstack_992": {
                "variable": {
                    "value": "list_of_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self_dense_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dense_logits(config, [p_aug_1, p_aug_2], config.self_att_head_num, True, bias_start=0.0, scope='dense_logits', mask=self_mask, wd=0.0, input_keep_prob=config.keep_rate, is_train=is_train, func=config.dense_att_logit_func)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_994": {
                "variable": {
                    "value": "self_att",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "list_of_self_att",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[softsel(p_aug_2, logit) for logit in list_of_logits]",
                            "ListComp"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_1021": {
                "name_or_scope": {
                    "value": "scope or 'self_attention_layer'",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "variable_scope_1061": {
                "name_or_scope": {
                    "value": "scope or 'linear_mapping'",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "variable_scope_1070": {
                "name_or_scope": {
                    "value": "scope or 'bi_attention'",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "tile_1079": {
                "variable": {
                    "value": "h_value_aug",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(h_value, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, PL, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_any_1084": {
                "variable": {
                    "value": "p_mask_aug",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(tf.tile(tf.expand_dims(p_mask, 2), [1, 1, HL, 1]), tf.bool)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_any_1085": {
                "variable": {
                    "value": "h_mask_aug",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(tf.tile(tf.expand_dims(h_mask, 1), [1, PL, 1, 1]), tf.bool)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_1103": {
                "name_or_scope": {
                    "value": "scope or 'cross_attention_layer'",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "concat_1110": {
                "variable": {
                    "value": "p0",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[p, h_a, p * h_a]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_1112": {
                "variable": {
                    "value": "p0",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[p, h_a, p * h_a, p * p_a]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unstack_1246": {
                "variable": {
                    "value": "list_of_conv_features",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm(x)",
                            "Call"
                        ],
                        [
                            "act(x)",
                            "Call"
                        ],
                        [
                            "norm(x)",
                            "Call"
                        ],
                        [
                            "act(x)",
                            "Call"
                        ],
                        [
                            "convolution2d(x, out_filter, 1, padding=padding, normalizer_fn=norm, activation_fn=act)",
                            "Call"
                        ],
                        [
                            "convolution2d(x, out_filter, 1, padding=padding, activation_fn=act)",
                            "Call"
                        ],
                        [
                            "convolution2d(x, out_filter, kernel_size, padding=padding, activation_fn=act)",
                            "Call"
                        ],
                        [
                            "tf.nn.atrous_conv2d(x, filters, rate=2, padding=padding) + bias",
                            "BinOp"
                        ],
                        [
                            "act(x)",
                            "Call"
                        ],
                        [
                            "convolution2d(x, out_filter, kernel_size, padding=padding, normalizer_fn=norm, activation_fn=act)",
                            "Call"
                        ],
                        [
                            "convolution2d(x, out_filter, kernel_size, padding=padding, activation_fn=act)",
                            "Call"
                        ],
                        [
                            "convolution2d(x, out_filter, kernel_size, padding=padding, normalizer_fn=norm, activation_fn=act)",
                            "Call"
                        ],
                        [
                            "convolution2d(x, out_filter, kernel_size, padding=padding, activation_fn=act)",
                            "Call"
                        ],
                        [
                            "convolution2d(x, out_filter, kernel_size, padding=padding, activation_fn=act)",
                            "Call"
                        ],
                        [
                            "tf.nn.atrous_conv2d(x, filters, rate=2, padding=padding) + bias",
                            "BinOp"
                        ],
                        [
                            "act(x)",
                            "Call"
                        ],
                        [
                            "tf.cond(is_train, lambda : tf.nn.dropout(x, config.keep_rate), lambda : x)",
                            "Call"
                        ],
                        [
                            "convolution2d(x, out_filter, 1, padding=padding, normalizer_fn=norm, activation_fn=act)",
                            "Call"
                        ],
                        [
                            "convolution2d(x, out_filter, 1, padding=padding, activation_fn=act)",
                            "Call"
                        ],
                        [
                            "convolution2d(x, out_filter, kernel_size, padding=padding, normalizer_fn=norm, activation_fn=act)",
                            "Call"
                        ],
                        [
                            "convolution2d(x, out_filter, kernel_size, padding=padding, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "convolution2d(x, out_filter, kernel_size, padding=padding, activation_fn=act)",
                            "Call"
                        ],
                        [
                            "fuse_gate(config, is_train, orig_x, x, scope='conv_fuse_gate')",
                            "Call"
                        ],
                        [
                            "fuse_gate(config, is_train, x, orig_x, scope='conv_fuse_gate')",
                            "Call"
                        ],
                        [
                            "tf.cond(is_train, lambda : tf.nn.dropout(x, config.keep_rate), lambda : x)",
                            "Call"
                        ],
                        [
                            "shuffle_add(config, x)",
                            "Call"
                        ],
                        [
                            "tf.concat([x, orig_x], axis=3)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_1287": {
                "name_or_scope": {
                    "value": "dense_net",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_1340": {
                "name_or_scope": {
                    "value": "scope or 'dense_net_block'",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "concat_1373": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "list_of_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[feature_map]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cond_1385": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "is_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : tf.nn.dropout(features, config.keep_rate)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : features",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "variable_scope_1390": {
                "name_or_scope": {
                    "value": "scope or 'transition_layer'",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "max_pool_1395": {
                "variable": {
                    "value": "feature_map",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.batch_norm(feature_map)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(feature_map, [1, 2, 2, 1], [1, 2, 2, 1], 'VALID')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(feature_map, [1, 2, 2, 1], [1, 2, 2, 1], 'VALID')",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.convolution2d(feature_map, out_dim, 1, padding='SAME', activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(feature_map, [1, 2, 2, 1], [1, 2, 2, 1], 'VALID')",
                            "Call"
                        ],
                        [
                            "normalize(feature_map)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool_1398": {
                "variable": {
                    "value": "feature_map",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.batch_norm(feature_map)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(feature_map, [1, 2, 2, 1], [1, 2, 2, 1], 'VALID')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(feature_map, [1, 2, 2, 1], [1, 2, 2, 1], 'VALID')",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.convolution2d(feature_map, out_dim, 1, padding='SAME', activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(feature_map, [1, 2, 2, 1], [1, 2, 2, 1], 'VALID')",
                            "Call"
                        ],
                        [
                            "normalize(feature_map)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_1403": {
                "variable": {
                    "value": "features_map",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[fm_list[2 * i] + fm_list[2 * i + 1] for i in range(len(fm_list) / 2)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool_1409": {
                "variable": {
                    "value": "feature_map",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.batch_norm(feature_map)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(feature_map, [1, 2, 2, 1], [1, 2, 2, 1], 'VALID')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(feature_map, [1, 2, 2, 1], [1, 2, 2, 1], 'VALID')",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.convolution2d(feature_map, out_dim, 1, padding='SAME', activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(feature_map, [1, 2, 2, 1], [1, 2, 2, 1], 'VALID')",
                            "Call"
                        ],
                        [
                            "normalize(feature_map)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_1431": {
                "name_or_scope": {
                    "value": "name or 'memory_augmentation'",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "get_variable_1459": {
                "variable": {
                    "value": "mem",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "memory_key_and_value",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[memory_size, dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_1460": {
                "variable": {
                    "value": "mem_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[memory_size, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "memory_mask",
                    "type": "str",
                    "possible_values": []
                }
            },
            "expand_dims_1461": {
                "variable": {
                    "value": "mem_aug",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mem",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('memory_key_and_value', shape=[memory_size, dim])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_1462": {
                "variable": {
                    "value": "mem_mask_aug",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mem_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones([memory_size, 1], name='memory_mask')",
                            "Call"
                        ],
                        [
                            "tf.ones([memory_size, 1], name='memory_mask')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "where_1474": {
                "condition": {
                    "value": "x > 0.0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm(x)",
                            "Call"
                        ],
                        [
                            "act(x)",
                            "Call"
                        ],
                        [
                            "norm(x)",
                            "Call"
                        ],
                        [
                            "act(x)",
                            "Call"
                        ],
                        [
                            "convolution2d(x, out_filter, 1, padding=padding, normalizer_fn=norm, activation_fn=act)",
                            "Call"
                        ],
                        [
                            "convolution2d(x, out_filter, 1, padding=padding, activation_fn=act)",
                            "Call"
                        ],
                        [
                            "convolution2d(x, out_filter, kernel_size, padding=padding, activation_fn=act)",
                            "Call"
                        ],
                        [
                            "tf.nn.atrous_conv2d(x, filters, rate=2, padding=padding) + bias",
                            "BinOp"
                        ],
                        [
                            "act(x)",
                            "Call"
                        ],
                        [
                            "convolution2d(x, out_filter, kernel_size, padding=padding, normalizer_fn=norm, activation_fn=act)",
                            "Call"
                        ],
                        [
                            "convolution2d(x, out_filter, kernel_size, padding=padding, activation_fn=act)",
                            "Call"
                        ],
                        [
                            "convolution2d(x, out_filter, kernel_size, padding=padding, normalizer_fn=norm, activation_fn=act)",
                            "Call"
                        ],
                        [
                            "convolution2d(x, out_filter, kernel_size, padding=padding, activation_fn=act)",
                            "Call"
                        ],
                        [
                            "convolution2d(x, out_filter, kernel_size, padding=padding, activation_fn=act)",
                            "Call"
                        ],
                        [
                            "tf.nn.atrous_conv2d(x, filters, rate=2, padding=padding) + bias",
                            "BinOp"
                        ],
                        [
                            "act(x)",
                            "Call"
                        ],
                        [
                            "tf.cond(is_train, lambda : tf.nn.dropout(x, config.keep_rate), lambda : x)",
                            "Call"
                        ],
                        [
                            "convolution2d(x, out_filter, 1, padding=padding, normalizer_fn=norm, activation_fn=act)",
                            "Call"
                        ],
                        [
                            "convolution2d(x, out_filter, 1, padding=padding, activation_fn=act)",
                            "Call"
                        ],
                        [
                            "convolution2d(x, out_filter, kernel_size, padding=padding, normalizer_fn=norm, activation_fn=act)",
                            "Call"
                        ],
                        [
                            "convolution2d(x, out_filter, kernel_size, padding=padding, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "convolution2d(x, out_filter, kernel_size, padding=padding, activation_fn=act)",
                            "Call"
                        ],
                        [
                            "fuse_gate(config, is_train, orig_x, x, scope='conv_fuse_gate')",
                            "Call"
                        ],
                        [
                            "fuse_gate(config, is_train, x, orig_x, scope='conv_fuse_gate')",
                            "Call"
                        ],
                        [
                            "tf.cond(is_train, lambda : tf.nn.dropout(x, config.keep_rate), lambda : x)",
                            "Call"
                        ],
                        [
                            "shuffle_add(config, x)",
                            "Call"
                        ],
                        [
                            "tf.concat([x, orig_x], axis=3)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "alpha * tf.exp(x) - alpha",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_1503": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'ln'",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "placeholder_29": {
                "variable": {
                    "value": "self.premise_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.sequence_length, config.subword_feature_len]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "premise",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_30": {
                "variable": {
                    "value": "self.hypothesis_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.sequence_length, config.subword_feature_len]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "hypothesis",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_32": {
                "variable": {
                    "value": "self.premise_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.sequence_length]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "premise",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_33": {
                "variable": {
                    "value": "self.hypothesis_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.sequence_length]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "hypothesis",
                    "type": "str",
                    "possible_values": []
                }
            },
            "scalar_57": {
                "name": {
                    "value": "dropout_keep_rate",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.dropout_keep_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cond_78": {
                "variable": {
                    "value": "emb_drop",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "self.is_train",
                    "type": "Attribute",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : tf.nn.dropout(emb, config.keep_rate)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : emb",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "Variable_95": {
                "variable": {
                    "value": "self.E",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "trainable": {
                    "value": "emb_train",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_sum_99": {
                "variable": {
                    "value": "premise_in",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "premise_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "emb_drop(self.E, self.premise_x)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(premise_in, axis=2)",
                            "Call"
                        ],
                        [
                            "emb_drop(self.E, self.premise_x)",
                            "Call"
                        ],
                        [
                            "emb_drop(self.E, self.premise_x)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.batch_norm(premise_in)",
                            "Call"
                        ],
                        [
                            "tf.concat((premise_in, tf.cast(self.premise_pos, tf.float32)), axis=2)",
                            "Call"
                        ],
                        [
                            "tf.concat([premise_in, tf.cast(self.premise_exact_match, tf.float32)], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.concat([premise_in, self.premise_itf], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.concat([premise_in, tf.cast(self.premise_antonym, tf.float32)], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.concat([premise_in, tf.cast(self.premise_NER_feature, tf.float32)], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.concat([premise_in, conv_pre], axis=2)",
                            "Call"
                        ],
                        [
                            "fuse_gate(config, self.is_train, premise_in, premise_in, scope='embedding_fuse_gate')",
                            "Call"
                        ],
                        [
                            "tf.cond(self.is_train, lambda : tf.nn.dropout(premise_in, config.input_keep_rate), lambda : premise_in)",
                            "Call"
                        ],
                        [
                            "highway_network(premise_in, config.highway_num_layers, True, wd=config.wd, is_train=self.is_train, output_size=config.highway_network_output_size)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_100": {
                "variable": {
                    "value": "hypothesis_in",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "hypothesis_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "emb_drop(self.E, self.hypothesis_x)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(hypothesis_in, axis=2)",
                            "Call"
                        ],
                        [
                            "emb_drop(self.E, self.hypothesis_x)",
                            "Call"
                        ],
                        [
                            "emb_drop(self.E, self.hypothesis_x)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.batch_norm(hypothesis_in)",
                            "Call"
                        ],
                        [
                            "tf.concat((hypothesis_in, tf.cast(self.hypothesis_pos, tf.float32)), axis=2)",
                            "Call"
                        ],
                        [
                            "tf.concat([hypothesis_in, tf.cast(self.hypothesis_exact_match, tf.float32)], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.concat([hypothesis_in, self.hypothesis_itf], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.concat([hypothesis_in, tf.cast(self.hypothesis_antonym, tf.float32)], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.concat([hypothesis_in, tf.cast(self.hypothesis_NER_feature, tf.float32)], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.concat([hypothesis_in, conv_hyp], axis=2)",
                            "Call"
                        ],
                        [
                            "fuse_gate(config, self.is_train, hypothesis_in, hypothesis_in, scope='embedding_fuse_gate')",
                            "Call"
                        ],
                        [
                            "tf.cond(self.is_train, lambda : tf.nn.dropout(hypothesis_in, config.input_keep_rate), lambda : hypothesis_in)",
                            "Call"
                        ],
                        [
                            "highway_network(hypothesis_in, config.highway_num_layers, True, scope='highway_network_h', wd=config.wd, is_train=self.is_train, output_size=config.highway_network_output_size)",
                            "Call"
                        ],
                        [
                            "highway_network(hypothesis_in, config.highway_num_layers, True, wd=config.wd, is_train=self.is_train, output_size=config.highway_network_output_size)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_223": {
                "name_or_scope": {
                    "value": "prepro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "LSTMCell_314": {
                "variable": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "p.get_shape().as_list()[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "bidirectional_dynamic_rnn_317": {
                "variable": {
                    "value": "((fw_p, bw_p), _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell_fw": {
                    "value": "d_cell",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SwitchableDropoutWrapper(cell, self.is_train, input_keep_prob=config.keep_rate)",
                            "Call"
                        ],
                        [
                            "SwitchableDropoutWrapper(cell, self.is_train, input_keep_prob=config.keep_rate)",
                            "Call"
                        ]
                    ]
                },
                "cell_bw": {
                    "value": "d_cell",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SwitchableDropoutWrapper(cell, self.is_train, input_keep_prob=config.keep_rate)",
                            "Call"
                        ],
                        [
                            "SwitchableDropoutWrapper(cell, self.is_train, input_keep_prob=config.keep_rate)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "premise_in",
                            "Name"
                        ],
                        [
                            "premise_in",
                            "Name"
                        ],
                        [
                            "premise_in",
                            "Name"
                        ],
                        [
                            "self_attention_layer(config, self.is_train, pre, p_mask=prem_mask, scope='{}_layer_self_att_enc'.format(i))",
                            "Call"
                        ],
                        [
                            "self_attention_layer(config, self.is_train, p, p_mask=prem_mask, scope='{}_layer_self_att_enc'.format(i))",
                            "Call"
                        ],
                        [
                            "memory_augment_layer(config, p, prem_mask, self.is_train, config.memory_key_and_values_num, name='memory_augmentation_layer')",
                            "Call"
                        ],
                        [
                            "fuse_gate(config, self.is_train, p, p1, scope='linear_enc_fuse_gate_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.concat([p, p * pre], axis=2)",
                            "Call"
                        ],
                        [
                            "p1",
                            "Name"
                        ],
                        [
                            "tf.concat([p, p - pre], axis=2)",
                            "Call"
                        ],
                        [
                            "p_lstm_enc",
                            "Name"
                        ],
                        [
                            "tmp_p",
                            "Name"
                        ],
                        [
                            "tf.concat([pre, p, p * pre], axis=2)",
                            "Call"
                        ],
                        [
                            "fuse_gate(config, self.is_train, p, p_lstm_enc, scope='lstm_enc_fuse_gate')",
                            "Call"
                        ],
                        [
                            "tmp_p",
                            "Name"
                        ],
                        [
                            "linear_mapping_with_residual_conn(config, self.is_train, p, p_mask=prem_mask, scope='{}_layer_self_att_linear_mapping'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.concat([pre, p, p * pre, p - pre], axis=2)",
                            "Call"
                        ],
                        [
                            "raw_pre",
                            "Name"
                        ],
                        [
                            "tf.concat([p, pre], axis=2)",
                            "Call"
                        ]
                    ]
                },
                "sequence_length": {
                    "value": "prem_seq_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "p",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_318": {
                "variable": {
                    "value": "p_lstm_enc",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[fw_p, bw_p]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bidirectional_dynamic_rnn_323": {
                "variable": {
                    "value": "((fw_h, bw_h), _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell_fw": {
                    "value": "d_cell",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SwitchableDropoutWrapper(cell, self.is_train, input_keep_prob=config.keep_rate)",
                            "Call"
                        ],
                        [
                            "SwitchableDropoutWrapper(cell, self.is_train, input_keep_prob=config.keep_rate)",
                            "Call"
                        ]
                    ]
                },
                "cell_bw": {
                    "value": "d_cell",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SwitchableDropoutWrapper(cell, self.is_train, input_keep_prob=config.keep_rate)",
                            "Call"
                        ],
                        [
                            "SwitchableDropoutWrapper(cell, self.is_train, input_keep_prob=config.keep_rate)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hypothesis_in",
                            "Name"
                        ],
                        [
                            "hypothesis_in",
                            "Name"
                        ],
                        [
                            "hypothesis_in",
                            "Name"
                        ],
                        [
                            "self_attention_layer(config, self.is_train, hyp, p_mask=hyp_mask, scope='{}_layer_self_att_enc_h'.format(i))",
                            "Call"
                        ],
                        [
                            "self_attention_layer(config, self.is_train, hyp, p_mask=hyp_mask, scope='{}_layer_self_att_enc'.format(i))",
                            "Call"
                        ],
                        [
                            "self_attention_layer(config, self.is_train, h, p_mask=hyp_mask, scope='{}_layer_self_att_enc'.format(i))",
                            "Call"
                        ],
                        [
                            "memory_augment_layer(config, h, hyp_mask, self.is_train, config.memory_key_and_values_num, name='memory_augmentation_layer')",
                            "Call"
                        ],
                        [
                            "fuse_gate(config, self.is_train, h, h1, scope='linear_enc_fuse_gate_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.concat([h, h * hyp], axis=2)",
                            "Call"
                        ],
                        [
                            "h1",
                            "Name"
                        ],
                        [
                            "tf.concat([h, h - hyp], axis=2)",
                            "Call"
                        ],
                        [
                            "h_lstm_enc",
                            "Name"
                        ],
                        [
                            "tmp_h",
                            "Name"
                        ],
                        [
                            "tf.concat([hyp, h, h * hyp], axis=2)",
                            "Call"
                        ],
                        [
                            "fuse_gate(config, self.is_train, h, h_lstm_enc, scope='lstm_enc_fuse_gate')",
                            "Call"
                        ],
                        [
                            "tmp_h",
                            "Name"
                        ],
                        [
                            "linear_mapping_with_residual_conn(config, self.is_train, h, p_mask=hyp_mask, scope='{}_layer_self_att_linear_mapping'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.concat([hyp, h, h * hyp, h - hyp], axis=2)",
                            "Call"
                        ],
                        [
                            "raw_hyp",
                            "Name"
                        ],
                        [
                            "tf.concat([h, hyp], axis=2)",
                            "Call"
                        ]
                    ]
                },
                "sequence_length": {
                    "value": "hyp_seq_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "p",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_324": {
                "variable": {
                    "value": "h_lstm_enc",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[fw_h, bw_h]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_335": {
                "name_or_scope": {
                    "value": "main",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_443": {
                "variable": {
                    "value": "f0",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[p_vec, h_vec, p_vec - h_vec, p_vec * h_vec]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_445": {
                "variable": {
                    "value": "f0",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[f0, p_vec, h_vec, p_vec - h_vec, p_vec * h_vec]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_n_498": {
                "variable": {
                    "value": "weights_added",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[tf.nn.l2_loss(tensor) for tensor in tf.trainable_variables() if tensor.name.endswith('weights:0') and (not tensor.name.endswith('weighted_sum/weights:0'))]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "constant_499": {
                "variable": {
                    "value": "full_l2_step",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "config.weight_l2loss_step_full_reg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "full_l2reg_step",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_500": {
                "variable": {
                    "value": "full_l2_ratio",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "config.l2_regularization_ratio",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "l2_regularization_ratio",
                    "type": "str",
                    "possible_values": []
                }
            },
            "scalar_506": {
                "name": {
                    "value": "l2loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "l2loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weights_added * l2loss_ratio",
                            "BinOp"
                        ],
                        [
                            "tf.add_n([tf.nn.l2_loss(tensor) for tensor in tf.trainable_variables() if tensor.name.endswith('weights:0')]) * tf.constant(config.l2_regularization_ratio, dtype='float', shape=[], name='l2_regularization_ratio')",
                            "BinOp"
                        ]
                    ]
                }
            },
            "trainable_variables_548": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "add_n_573": {
                "variable": {
                    "value": "weights_added",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[tf.nn.l2_loss(tensor) for tensor in diffs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "constant_574": {
                "variable": {
                    "value": "full_l2_step",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "config.diff_l2_penalty_full_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "full_l2reg_step",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_575": {
                "variable": {
                    "value": "diff_l2_ratio",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "config.diff_penalty_loss_ratio",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "diff_penalty_loss_ratio",
                    "type": "str",
                    "possible_values": []
                }
            },
            "scalar_581": {
                "name": {
                    "value": "diff_penalty_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "diff_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weights_added * diff_l2loss_ratio",
                            "BinOp"
                        ],
                        [
                            "tf.add_n([tf.nn.l2_loss(tensor) for tensor in diffs]) * tf.constant(config.diff_penalty_loss_ratio, dtype='float', shape=[], name='diff_penalty_loss_ratio')",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_mean_596": {
                "input_tensor": {
                    "value": "tf.add_n([entailment_loss, neutral_loss, contradiction_loss])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_616": {
                "name_or_scope": {
                    "value": "scope or 'add_one_d_feature'",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "reduce_sum_625": {
                "variable": {
                    "value": "weighted_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.softmax(wgt, dim=1) * matrix",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unstack_631": {
                "variable": {
                    "value": "list_of_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "wgt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "linear(matrix, 1, True, bias_start=0.0, scope='weighted_sum', squeeze=False, wd=config.wd, input_keep_prob=config.keep_rate, is_train=self.is_train)",
                            "Call"
                        ],
                        [
                            "exp_mask(wgt, mask)",
                            "Call"
                        ],
                        [
                            "linear(matrix, 8, True, bias_start=0.0, scope='weighted_sum', squeeze=False, wd=config.wd, input_keep_prob=config.keep_rate, is_train=self.is_train)",
                            "Call"
                        ],
                        [
                            "linear(tmp_weight, 48, False, bias_start=0.0, scope='weighted_sum', squeeze=False, wd=config.wd, input_keep_prob=config.keep_rate, is_train=self.is_train)",
                            "Call"
                        ],
                        [
                            "linear(matrix, 48, False, bias_start=0.0, scope='weighted_sum', squeeze=False, wd=config.wd, input_keep_prob=config.keep_rate, is_train=self.is_train)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unstack_647": {
                "variable": {
                    "value": "list_of_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "wgt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "linear(matrix, 1, True, bias_start=0.0, scope='weighted_sum', squeeze=False, wd=config.wd, input_keep_prob=config.keep_rate, is_train=self.is_train)",
                            "Call"
                        ],
                        [
                            "exp_mask(wgt, mask)",
                            "Call"
                        ],
                        [
                            "linear(matrix, 8, True, bias_start=0.0, scope='weighted_sum', squeeze=False, wd=config.wd, input_keep_prob=config.keep_rate, is_train=self.is_train)",
                            "Call"
                        ],
                        [
                            "linear(tmp_weight, 48, False, bias_start=0.0, scope='weighted_sum', squeeze=False, wd=config.wd, input_keep_prob=config.keep_rate, is_train=self.is_train)",
                            "Call"
                        ],
                        [
                            "linear(matrix, 48, False, bias_start=0.0, scope='weighted_sum', squeeze=False, wd=config.wd, input_keep_prob=config.keep_rate, is_train=self.is_train)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_676": {
                "variable": {
                    "value": "ft",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "feature_map",
                            "Name"
                        ],
                        [
                            "normalize(feature_map)",
                            "Call"
                        ],
                        [
                            "tf.concat(list_of_features, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.cond(is_train, lambda : tf.nn.dropout(features, config.keep_rate), lambda : features)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[tf.expand_dims(f, axis=1) for f in features]",
                            "ListComp"
                        ],
                        [
                            "[tf.expand_dims(f, axis=1) for f in features]",
                            "ListComp"
                        ],
                        [
                            "[tf.expand_dims(f, axis=1) for f in features]",
                            "ListComp"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_681": {
                "name_or_scope": {
                    "value": "scope or 'multi_perspective_merge'",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "reduce_max_685": {
                "variable": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "lhs",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_max_686": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "rhs",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_694": {
                "variable": {
                    "value": "ftr",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "feature_map",
                            "Name"
                        ],
                        [
                            "normalize(feature_map)",
                            "Call"
                        ],
                        [
                            "tf.concat(list_of_features, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.cond(is_train, lambda : tf.nn.dropout(features, config.keep_rate), lambda : features)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[tf.expand_dims(f, axis=1) for f in features]",
                            "ListComp"
                        ],
                        [
                            "[tf.expand_dims(f, axis=1) for f in features]",
                            "ListComp"
                        ],
                        [
                            "[tf.expand_dims(f, axis=1) for f in features]",
                            "ListComp"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_702": {
                "name_or_scope": {
                    "value": "scope or 'multi_perspective_matching'",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "get_variable_717": {
                "variable": {
                    "value": "filters",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "filter",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2, 2, chan, chan]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_718": {
                "variable": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bias",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[chan]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool_792": {
                "variable": {
                    "value": "max_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "residual(config, arg, init_dim, 336, filter_size, 'res_transition_1', act=act, norm=norm, is_train=is_train, tensor_dict=tensor_dict)",
                            "Call"
                        ],
                        [
                            "residual(config, arg, 336, 224, filter_size, 'res_transition_2', act=act, norm=norm, is_train=is_train, tensor_dict=tensor_dict)",
                            "Call"
                        ],
                        [
                            "residual(config, arg, 224, config.res_conv_1_chan, filter_size, 'res1', act=act, norm=norm, is_train=is_train, tensor_dict=tensor_dict)",
                            "Call"
                        ],
                        [
                            "residual(config, arg, init_dim, config.res_conv_1_chan, filter_size, 'res1', act=act, norm=norm, is_train=is_train, tensor_dict=tensor_dict)",
                            "Call"
                        ],
                        [
                            "residual(config, res, config.res_conv_1_chan, config.res_conv_1_chan, filter_size, 'res2', act=act, norm=norm, is_train=is_train, tensor_dict=tensor_dict)",
                            "Call"
                        ],
                        [
                            "residual(config, res, config.res_conv_1_chan, config.res_conv_1_chan, filter_size, 'res3', act=act, norm=norm, is_train=is_train, tensor_dict=tensor_dict)",
                            "Call"
                        ],
                        [
                            "conv_pooling(res, 'first_conv_pool')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(res, [1, 2, 2, 1], [1, 2, 2, 1], 'VALID')",
                            "Call"
                        ],
                        [
                            "residual(config, res, config.res_conv_1_chan, config.res_conv_1_chan, filter_size, 'res4', act=act, norm=norm, is_train=is_train, tensor_dict=tensor_dict)",
                            "Call"
                        ],
                        [
                            "residual(config, res, config.res_conv_1_chan, config.res_conv_1_chan, filter_size, 'res5', act=act, norm=norm, is_train=is_train, tensor_dict=tensor_dict)",
                            "Call"
                        ],
                        [
                            "residual(config, res, config.res_conv_1_chan, config.res_conv_2_chan, filter_size, 'res6', act=act, norm=norm, is_train=is_train, tensor_dict=tensor_dict)",
                            "Call"
                        ],
                        [
                            "conv_pooling(res, 'second_conv_pool')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(res, [1, 2, 2, 1], [1, 2, 2, 1], 'VALID')",
                            "Call"
                        ],
                        [
                            "residual(config, res, config.res_conv_2_chan, config.res_conv_2_chan, filter_size, 'res7', act=act, norm=norm, is_train=is_train, tensor_dict=tensor_dict)",
                            "Call"
                        ],
                        [
                            "residual(config, res, config.res_conv_2_chan, config.res_conv_2_chan, filter_size, 'res8', act=act, norm=norm, is_train=is_train, tensor_dict=tensor_dict)",
                            "Call"
                        ],
                        [
                            "residual(config, res, config.res_conv_2_chan, config.res_conv_2_chan, filter_size, 'res8_1', act=act, norm=norm, is_train=is_train, tensor_dict=tensor_dict)",
                            "Call"
                        ],
                        [
                            "residual(config, res, config.res_conv_2_chan, config.res_conv_3_chan, filter_size, 'res9', act=act, norm=norm, is_train=is_train, tensor_dict=tensor_dict)",
                            "Call"
                        ],
                        [
                            "conv_pooling(res, 'third_conv_pool')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(res, [1, 2, 2, 1], [1, 2, 2, 1], 'VALID')",
                            "Call"
                        ],
                        [
                            "residual(config, res, config.res_conv_3_chan, config.res_conv_3_chan, filter_size, 'res13', act=act, norm=norm, is_train=is_train, tensor_dict=tensor_dict)",
                            "Call"
                        ],
                        [
                            "residual(config, res, config.res_conv_3_chan, config.res_conv_3_chan, filter_size, 'res14', act=act, norm=norm, is_train=is_train, tensor_dict=tensor_dict)",
                            "Call"
                        ],
                        [
                            "residual(config, res, config.res_conv_3_chan, config.res_conv_3_chan, filter_size, 'res15', act=act, norm=norm, is_train=is_train, tensor_dict=tensor_dict)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(res, [1, 6, 6, 1], [1, 1, 1, 1], 'VALID')",
                            "Call"
                        ],
                        [
                            "tf.concat([max_pool, avg_pool], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(res, [1, 2, 2, 1], [1, 2, 2, 1], 'VALID')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 6, 6, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "avg_pool_793": {
                "variable": {
                    "value": "avg_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "residual(config, arg, init_dim, 336, filter_size, 'res_transition_1', act=act, norm=norm, is_train=is_train, tensor_dict=tensor_dict)",
                            "Call"
                        ],
                        [
                            "residual(config, arg, 336, 224, filter_size, 'res_transition_2', act=act, norm=norm, is_train=is_train, tensor_dict=tensor_dict)",
                            "Call"
                        ],
                        [
                            "residual(config, arg, 224, config.res_conv_1_chan, filter_size, 'res1', act=act, norm=norm, is_train=is_train, tensor_dict=tensor_dict)",
                            "Call"
                        ],
                        [
                            "residual(config, arg, init_dim, config.res_conv_1_chan, filter_size, 'res1', act=act, norm=norm, is_train=is_train, tensor_dict=tensor_dict)",
                            "Call"
                        ],
                        [
                            "residual(config, res, config.res_conv_1_chan, config.res_conv_1_chan, filter_size, 'res2', act=act, norm=norm, is_train=is_train, tensor_dict=tensor_dict)",
                            "Call"
                        ],
                        [
                            "residual(config, res, config.res_conv_1_chan, config.res_conv_1_chan, filter_size, 'res3', act=act, norm=norm, is_train=is_train, tensor_dict=tensor_dict)",
                            "Call"
                        ],
                        [
                            "conv_pooling(res, 'first_conv_pool')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(res, [1, 2, 2, 1], [1, 2, 2, 1], 'VALID')",
                            "Call"
                        ],
                        [
                            "residual(config, res, config.res_conv_1_chan, config.res_conv_1_chan, filter_size, 'res4', act=act, norm=norm, is_train=is_train, tensor_dict=tensor_dict)",
                            "Call"
                        ],
                        [
                            "residual(config, res, config.res_conv_1_chan, config.res_conv_1_chan, filter_size, 'res5', act=act, norm=norm, is_train=is_train, tensor_dict=tensor_dict)",
                            "Call"
                        ],
                        [
                            "residual(config, res, config.res_conv_1_chan, config.res_conv_2_chan, filter_size, 'res6', act=act, norm=norm, is_train=is_train, tensor_dict=tensor_dict)",
                            "Call"
                        ],
                        [
                            "conv_pooling(res, 'second_conv_pool')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(res, [1, 2, 2, 1], [1, 2, 2, 1], 'VALID')",
                            "Call"
                        ],
                        [
                            "residual(config, res, config.res_conv_2_chan, config.res_conv_2_chan, filter_size, 'res7', act=act, norm=norm, is_train=is_train, tensor_dict=tensor_dict)",
                            "Call"
                        ],
                        [
                            "residual(config, res, config.res_conv_2_chan, config.res_conv_2_chan, filter_size, 'res8', act=act, norm=norm, is_train=is_train, tensor_dict=tensor_dict)",
                            "Call"
                        ],
                        [
                            "residual(config, res, config.res_conv_2_chan, config.res_conv_2_chan, filter_size, 'res8_1', act=act, norm=norm, is_train=is_train, tensor_dict=tensor_dict)",
                            "Call"
                        ],
                        [
                            "residual(config, res, config.res_conv_2_chan, config.res_conv_3_chan, filter_size, 'res9', act=act, norm=norm, is_train=is_train, tensor_dict=tensor_dict)",
                            "Call"
                        ],
                        [
                            "conv_pooling(res, 'third_conv_pool')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(res, [1, 2, 2, 1], [1, 2, 2, 1], 'VALID')",
                            "Call"
                        ],
                        [
                            "residual(config, res, config.res_conv_3_chan, config.res_conv_3_chan, filter_size, 'res13', act=act, norm=norm, is_train=is_train, tensor_dict=tensor_dict)",
                            "Call"
                        ],
                        [
                            "residual(config, res, config.res_conv_3_chan, config.res_conv_3_chan, filter_size, 'res14', act=act, norm=norm, is_train=is_train, tensor_dict=tensor_dict)",
                            "Call"
                        ],
                        [
                            "residual(config, res, config.res_conv_3_chan, config.res_conv_3_chan, filter_size, 'res15', act=act, norm=norm, is_train=is_train, tensor_dict=tensor_dict)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(res, [1, 6, 6, 1], [1, 1, 1, 1], 'VALID')",
                            "Call"
                        ],
                        [
                            "tf.concat([max_pool, avg_pool], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(res, [1, 2, 2, 1], [1, 2, 2, 1], 'VALID')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 6, 6, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_794": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[max_pool, avg_pool]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_830": {
                "input": {
                    "value": "tf.expand_dims(p_mask, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, HL, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_831": {
                "input": {
                    "value": "tf.expand_dims(h_mask, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, PL, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_908": {
                "input": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "premise_in",
                            "Name"
                        ],
                        [
                            "premise_in",
                            "Name"
                        ],
                        [
                            "premise_in",
                            "Name"
                        ],
                        [
                            "self_attention_layer(config, self.is_train, pre, p_mask=prem_mask, scope='{}_layer_self_att_enc'.format(i))",
                            "Call"
                        ],
                        [
                            "self_attention_layer(config, self.is_train, p, p_mask=prem_mask, scope='{}_layer_self_att_enc'.format(i))",
                            "Call"
                        ],
                        [
                            "memory_augment_layer(config, p, prem_mask, self.is_train, config.memory_key_and_values_num, name='memory_augmentation_layer')",
                            "Call"
                        ],
                        [
                            "fuse_gate(config, self.is_train, p, p1, scope='linear_enc_fuse_gate_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.concat([p, p * pre], axis=2)",
                            "Call"
                        ],
                        [
                            "p1",
                            "Name"
                        ],
                        [
                            "tf.concat([p, p - pre], axis=2)",
                            "Call"
                        ],
                        [
                            "p_lstm_enc",
                            "Name"
                        ],
                        [
                            "tmp_p",
                            "Name"
                        ],
                        [
                            "tf.concat([pre, p, p * pre], axis=2)",
                            "Call"
                        ],
                        [
                            "fuse_gate(config, self.is_train, p, p_lstm_enc, scope='lstm_enc_fuse_gate')",
                            "Call"
                        ],
                        [
                            "tmp_p",
                            "Name"
                        ],
                        [
                            "linear_mapping_with_residual_conn(config, self.is_train, p, p_mask=prem_mask, scope='{}_layer_self_att_linear_mapping'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.concat([pre, p, p * pre, p - pre], axis=2)",
                            "Call"
                        ],
                        [
                            "raw_pre",
                            "Name"
                        ],
                        [
                            "tf.concat([p, pre], axis=2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_909": {
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hypothesis_in",
                            "Name"
                        ],
                        [
                            "hypothesis_in",
                            "Name"
                        ],
                        [
                            "hypothesis_in",
                            "Name"
                        ],
                        [
                            "self_attention_layer(config, self.is_train, hyp, p_mask=hyp_mask, scope='{}_layer_self_att_enc_h'.format(i))",
                            "Call"
                        ],
                        [
                            "self_attention_layer(config, self.is_train, hyp, p_mask=hyp_mask, scope='{}_layer_self_att_enc'.format(i))",
                            "Call"
                        ],
                        [
                            "self_attention_layer(config, self.is_train, h, p_mask=hyp_mask, scope='{}_layer_self_att_enc'.format(i))",
                            "Call"
                        ],
                        [
                            "memory_augment_layer(config, h, hyp_mask, self.is_train, config.memory_key_and_values_num, name='memory_augmentation_layer')",
                            "Call"
                        ],
                        [
                            "fuse_gate(config, self.is_train, h, h1, scope='linear_enc_fuse_gate_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.concat([h, h * hyp], axis=2)",
                            "Call"
                        ],
                        [
                            "h1",
                            "Name"
                        ],
                        [
                            "tf.concat([h, h - hyp], axis=2)",
                            "Call"
                        ],
                        [
                            "h_lstm_enc",
                            "Name"
                        ],
                        [
                            "tmp_h",
                            "Name"
                        ],
                        [
                            "tf.concat([hyp, h, h * hyp], axis=2)",
                            "Call"
                        ],
                        [
                            "fuse_gate(config, self.is_train, h, h_lstm_enc, scope='lstm_enc_fuse_gate')",
                            "Call"
                        ],
                        [
                            "tmp_h",
                            "Name"
                        ],
                        [
                            "linear_mapping_with_residual_conn(config, self.is_train, h, p_mask=hyp_mask, scope='{}_layer_self_att_linear_mapping'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.concat([hyp, h, h * hyp, h - hyp], axis=2)",
                            "Call"
                        ],
                        [
                            "raw_hyp",
                            "Name"
                        ],
                        [
                            "tf.concat([h, hyp], axis=2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_959": {
                "x": {
                    "value": "ph_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "p_mask_aug & h_mask_aug",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_980": {
                "input": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "premise_in",
                            "Name"
                        ],
                        [
                            "premise_in",
                            "Name"
                        ],
                        [
                            "premise_in",
                            "Name"
                        ],
                        [
                            "self_attention_layer(config, self.is_train, pre, p_mask=prem_mask, scope='{}_layer_self_att_enc'.format(i))",
                            "Call"
                        ],
                        [
                            "self_attention_layer(config, self.is_train, p, p_mask=prem_mask, scope='{}_layer_self_att_enc'.format(i))",
                            "Call"
                        ],
                        [
                            "memory_augment_layer(config, p, prem_mask, self.is_train, config.memory_key_and_values_num, name='memory_augmentation_layer')",
                            "Call"
                        ],
                        [
                            "fuse_gate(config, self.is_train, p, p1, scope='linear_enc_fuse_gate_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.concat([p, p * pre], axis=2)",
                            "Call"
                        ],
                        [
                            "p1",
                            "Name"
                        ],
                        [
                            "tf.concat([p, p - pre], axis=2)",
                            "Call"
                        ],
                        [
                            "p_lstm_enc",
                            "Name"
                        ],
                        [
                            "tmp_p",
                            "Name"
                        ],
                        [
                            "tf.concat([pre, p, p * pre], axis=2)",
                            "Call"
                        ],
                        [
                            "fuse_gate(config, self.is_train, p, p_lstm_enc, scope='lstm_enc_fuse_gate')",
                            "Call"
                        ],
                        [
                            "tmp_p",
                            "Name"
                        ],
                        [
                            "linear_mapping_with_residual_conn(config, self.is_train, p, p_mask=prem_mask, scope='{}_layer_self_att_linear_mapping'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.concat([pre, p, p * pre, p - pre], axis=2)",
                            "Call"
                        ],
                        [
                            "raw_pre",
                            "Name"
                        ],
                        [
                            "tf.concat([p, pre], axis=2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_981": {
                "input": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "premise_in",
                            "Name"
                        ],
                        [
                            "premise_in",
                            "Name"
                        ],
                        [
                            "premise_in",
                            "Name"
                        ],
                        [
                            "self_attention_layer(config, self.is_train, pre, p_mask=prem_mask, scope='{}_layer_self_att_enc'.format(i))",
                            "Call"
                        ],
                        [
                            "self_attention_layer(config, self.is_train, p, p_mask=prem_mask, scope='{}_layer_self_att_enc'.format(i))",
                            "Call"
                        ],
                        [
                            "memory_augment_layer(config, p, prem_mask, self.is_train, config.memory_key_and_values_num, name='memory_augmentation_layer')",
                            "Call"
                        ],
                        [
                            "fuse_gate(config, self.is_train, p, p1, scope='linear_enc_fuse_gate_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.concat([p, p * pre], axis=2)",
                            "Call"
                        ],
                        [
                            "p1",
                            "Name"
                        ],
                        [
                            "tf.concat([p, p - pre], axis=2)",
                            "Call"
                        ],
                        [
                            "p_lstm_enc",
                            "Name"
                        ],
                        [
                            "tmp_p",
                            "Name"
                        ],
                        [
                            "tf.concat([pre, p, p * pre], axis=2)",
                            "Call"
                        ],
                        [
                            "fuse_gate(config, self.is_train, p, p_lstm_enc, scope='lstm_enc_fuse_gate')",
                            "Call"
                        ],
                        [
                            "tmp_p",
                            "Name"
                        ],
                        [
                            "linear_mapping_with_residual_conn(config, self.is_train, p, p_mask=prem_mask, scope='{}_layer_self_att_linear_mapping'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.concat([pre, p, p * pre, p - pre], axis=2)",
                            "Call"
                        ],
                        [
                            "raw_pre",
                            "Name"
                        ],
                        [
                            "tf.concat([p, pre], axis=2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_1022": {
                "input": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "premise_in",
                            "Name"
                        ],
                        [
                            "premise_in",
                            "Name"
                        ],
                        [
                            "premise_in",
                            "Name"
                        ],
                        [
                            "self_attention_layer(config, self.is_train, pre, p_mask=prem_mask, scope='{}_layer_self_att_enc'.format(i))",
                            "Call"
                        ],
                        [
                            "self_attention_layer(config, self.is_train, p, p_mask=prem_mask, scope='{}_layer_self_att_enc'.format(i))",
                            "Call"
                        ],
                        [
                            "memory_augment_layer(config, p, prem_mask, self.is_train, config.memory_key_and_values_num, name='memory_augmentation_layer')",
                            "Call"
                        ],
                        [
                            "fuse_gate(config, self.is_train, p, p1, scope='linear_enc_fuse_gate_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.concat([p, p * pre], axis=2)",
                            "Call"
                        ],
                        [
                            "p1",
                            "Name"
                        ],
                        [
                            "tf.concat([p, p - pre], axis=2)",
                            "Call"
                        ],
                        [
                            "p_lstm_enc",
                            "Name"
                        ],
                        [
                            "tmp_p",
                            "Name"
                        ],
                        [
                            "tf.concat([pre, p, p * pre], axis=2)",
                            "Call"
                        ],
                        [
                            "fuse_gate(config, self.is_train, p, p_lstm_enc, scope='lstm_enc_fuse_gate')",
                            "Call"
                        ],
                        [
                            "tmp_p",
                            "Name"
                        ],
                        [
                            "linear_mapping_with_residual_conn(config, self.is_train, p, p_mask=prem_mask, scope='{}_layer_self_att_linear_mapping'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.concat([pre, p, p * pre, p - pre], axis=2)",
                            "Call"
                        ],
                        [
                            "raw_pre",
                            "Name"
                        ],
                        [
                            "tf.concat([p, pre], axis=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_1071": {
                "input": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "premise_in",
                            "Name"
                        ],
                        [
                            "premise_in",
                            "Name"
                        ],
                        [
                            "premise_in",
                            "Name"
                        ],
                        [
                            "self_attention_layer(config, self.is_train, pre, p_mask=prem_mask, scope='{}_layer_self_att_enc'.format(i))",
                            "Call"
                        ],
                        [
                            "self_attention_layer(config, self.is_train, p, p_mask=prem_mask, scope='{}_layer_self_att_enc'.format(i))",
                            "Call"
                        ],
                        [
                            "memory_augment_layer(config, p, prem_mask, self.is_train, config.memory_key_and_values_num, name='memory_augmentation_layer')",
                            "Call"
                        ],
                        [
                            "fuse_gate(config, self.is_train, p, p1, scope='linear_enc_fuse_gate_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.concat([p, p * pre], axis=2)",
                            "Call"
                        ],
                        [
                            "p1",
                            "Name"
                        ],
                        [
                            "tf.concat([p, p - pre], axis=2)",
                            "Call"
                        ],
                        [
                            "p_lstm_enc",
                            "Name"
                        ],
                        [
                            "tmp_p",
                            "Name"
                        ],
                        [
                            "tf.concat([pre, p, p * pre], axis=2)",
                            "Call"
                        ],
                        [
                            "fuse_gate(config, self.is_train, p, p_lstm_enc, scope='lstm_enc_fuse_gate')",
                            "Call"
                        ],
                        [
                            "tmp_p",
                            "Name"
                        ],
                        [
                            "linear_mapping_with_residual_conn(config, self.is_train, p, p_mask=prem_mask, scope='{}_layer_self_att_linear_mapping'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.concat([pre, p, p * pre, p - pre], axis=2)",
                            "Call"
                        ],
                        [
                            "raw_pre",
                            "Name"
                        ],
                        [
                            "tf.concat([p, pre], axis=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_1072": {
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hypothesis_in",
                            "Name"
                        ],
                        [
                            "hypothesis_in",
                            "Name"
                        ],
                        [
                            "hypothesis_in",
                            "Name"
                        ],
                        [
                            "self_attention_layer(config, self.is_train, hyp, p_mask=hyp_mask, scope='{}_layer_self_att_enc_h'.format(i))",
                            "Call"
                        ],
                        [
                            "self_attention_layer(config, self.is_train, hyp, p_mask=hyp_mask, scope='{}_layer_self_att_enc'.format(i))",
                            "Call"
                        ],
                        [
                            "self_attention_layer(config, self.is_train, h, p_mask=hyp_mask, scope='{}_layer_self_att_enc'.format(i))",
                            "Call"
                        ],
                        [
                            "memory_augment_layer(config, h, hyp_mask, self.is_train, config.memory_key_and_values_num, name='memory_augmentation_layer')",
                            "Call"
                        ],
                        [
                            "fuse_gate(config, self.is_train, h, h1, scope='linear_enc_fuse_gate_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.concat([h, h * hyp], axis=2)",
                            "Call"
                        ],
                        [
                            "h1",
                            "Name"
                        ],
                        [
                            "tf.concat([h, h - hyp], axis=2)",
                            "Call"
                        ],
                        [
                            "h_lstm_enc",
                            "Name"
                        ],
                        [
                            "tmp_h",
                            "Name"
                        ],
                        [
                            "tf.concat([hyp, h, h * hyp], axis=2)",
                            "Call"
                        ],
                        [
                            "fuse_gate(config, self.is_train, h, h_lstm_enc, scope='lstm_enc_fuse_gate')",
                            "Call"
                        ],
                        [
                            "tmp_h",
                            "Name"
                        ],
                        [
                            "linear_mapping_with_residual_conn(config, self.is_train, h, p_mask=hyp_mask, scope='{}_layer_self_att_linear_mapping'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.concat([hyp, h, h * hyp, h - hyp], axis=2)",
                            "Call"
                        ],
                        [
                            "raw_hyp",
                            "Name"
                        ],
                        [
                            "tf.concat([h, hyp], axis=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_1073": {
                "input": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "premise_in",
                            "Name"
                        ],
                        [
                            "premise_in",
                            "Name"
                        ],
                        [
                            "premise_in",
                            "Name"
                        ],
                        [
                            "self_attention_layer(config, self.is_train, pre, p_mask=prem_mask, scope='{}_layer_self_att_enc'.format(i))",
                            "Call"
                        ],
                        [
                            "self_attention_layer(config, self.is_train, p, p_mask=prem_mask, scope='{}_layer_self_att_enc'.format(i))",
                            "Call"
                        ],
                        [
                            "memory_augment_layer(config, p, prem_mask, self.is_train, config.memory_key_and_values_num, name='memory_augmentation_layer')",
                            "Call"
                        ],
                        [
                            "fuse_gate(config, self.is_train, p, p1, scope='linear_enc_fuse_gate_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.concat([p, p * pre], axis=2)",
                            "Call"
                        ],
                        [
                            "p1",
                            "Name"
                        ],
                        [
                            "tf.concat([p, p - pre], axis=2)",
                            "Call"
                        ],
                        [
                            "p_lstm_enc",
                            "Name"
                        ],
                        [
                            "tmp_p",
                            "Name"
                        ],
                        [
                            "tf.concat([pre, p, p * pre], axis=2)",
                            "Call"
                        ],
                        [
                            "fuse_gate(config, self.is_train, p, p_lstm_enc, scope='lstm_enc_fuse_gate')",
                            "Call"
                        ],
                        [
                            "tmp_p",
                            "Name"
                        ],
                        [
                            "linear_mapping_with_residual_conn(config, self.is_train, p, p_mask=prem_mask, scope='{}_layer_self_att_linear_mapping'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.concat([pre, p, p * pre, p - pre], axis=2)",
                            "Call"
                        ],
                        [
                            "raw_pre",
                            "Name"
                        ],
                        [
                            "tf.concat([p, pre], axis=2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_1074": {
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hypothesis_in",
                            "Name"
                        ],
                        [
                            "hypothesis_in",
                            "Name"
                        ],
                        [
                            "hypothesis_in",
                            "Name"
                        ],
                        [
                            "self_attention_layer(config, self.is_train, hyp, p_mask=hyp_mask, scope='{}_layer_self_att_enc_h'.format(i))",
                            "Call"
                        ],
                        [
                            "self_attention_layer(config, self.is_train, hyp, p_mask=hyp_mask, scope='{}_layer_self_att_enc'.format(i))",
                            "Call"
                        ],
                        [
                            "self_attention_layer(config, self.is_train, h, p_mask=hyp_mask, scope='{}_layer_self_att_enc'.format(i))",
                            "Call"
                        ],
                        [
                            "memory_augment_layer(config, h, hyp_mask, self.is_train, config.memory_key_and_values_num, name='memory_augmentation_layer')",
                            "Call"
                        ],
                        [
                            "fuse_gate(config, self.is_train, h, h1, scope='linear_enc_fuse_gate_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.concat([h, h * hyp], axis=2)",
                            "Call"
                        ],
                        [
                            "h1",
                            "Name"
                        ],
                        [
                            "tf.concat([h, h - hyp], axis=2)",
                            "Call"
                        ],
                        [
                            "h_lstm_enc",
                            "Name"
                        ],
                        [
                            "tmp_h",
                            "Name"
                        ],
                        [
                            "tf.concat([hyp, h, h * hyp], axis=2)",
                            "Call"
                        ],
                        [
                            "fuse_gate(config, self.is_train, h, h_lstm_enc, scope='lstm_enc_fuse_gate')",
                            "Call"
                        ],
                        [
                            "tmp_h",
                            "Name"
                        ],
                        [
                            "linear_mapping_with_residual_conn(config, self.is_train, h, p_mask=hyp_mask, scope='{}_layer_self_att_linear_mapping'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.concat([hyp, h, h * hyp, h - hyp], axis=2)",
                            "Call"
                        ],
                        [
                            "raw_hyp",
                            "Name"
                        ],
                        [
                            "tf.concat([h, hyp], axis=2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_max_1096": {
                "input_tensor": {
                    "value": "h_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p_aug * h_aug",
                            "BinOp"
                        ],
                        [
                            "h_logits_tmp * h_aug",
                            "BinOp"
                        ],
                        [
                            "tf.concat([p_aug, h_aug, p_aug * h_aug], axis=3)",
                            "Call"
                        ],
                        [
                            "dense_logits(config, [p_aug, h_aug], config.dense_logit_features_num, True, wd=config.wd, mask=ph_mask, is_train=is_train, func=config.dense_att_logit_func, scope='h_logits')",
                            "Call"
                        ],
                        [
                            "get_logits([p_aug_1, p_aug_2], None, True, wd=config.wd, mask=self_mask, is_train=is_train, func=config.self_att_logit_func, scope='h_logits')",
                            "Call"
                        ],
                        [
                            "get_logits([p_aug, h_aug], None, True, wd=config.wd, mask=ph_mask, is_train=is_train, func=config.logit_func, scope='h_logits')",
                            "Call"
                        ],
                        [
                            "get_logits([p_aug, h_aug], None, True, wd=config.wd, mask=ph_mask, is_train=is_train, func='mul_linear', scope='h_logits')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_1097": {
                "input": {
                    "value": "p_a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "softsel(p, tf.reduce_max(h_logits, 2))",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(p_a, 1), [1, PL, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_1104": {
                "input": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "premise_in",
                            "Name"
                        ],
                        [
                            "premise_in",
                            "Name"
                        ],
                        [
                            "premise_in",
                            "Name"
                        ],
                        [
                            "self_attention_layer(config, self.is_train, pre, p_mask=prem_mask, scope='{}_layer_self_att_enc'.format(i))",
                            "Call"
                        ],
                        [
                            "self_attention_layer(config, self.is_train, p, p_mask=prem_mask, scope='{}_layer_self_att_enc'.format(i))",
                            "Call"
                        ],
                        [
                            "memory_augment_layer(config, p, prem_mask, self.is_train, config.memory_key_and_values_num, name='memory_augmentation_layer')",
                            "Call"
                        ],
                        [
                            "fuse_gate(config, self.is_train, p, p1, scope='linear_enc_fuse_gate_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.concat([p, p * pre], axis=2)",
                            "Call"
                        ],
                        [
                            "p1",
                            "Name"
                        ],
                        [
                            "tf.concat([p, p - pre], axis=2)",
                            "Call"
                        ],
                        [
                            "p_lstm_enc",
                            "Name"
                        ],
                        [
                            "tmp_p",
                            "Name"
                        ],
                        [
                            "tf.concat([pre, p, p * pre], axis=2)",
                            "Call"
                        ],
                        [
                            "fuse_gate(config, self.is_train, p, p_lstm_enc, scope='lstm_enc_fuse_gate')",
                            "Call"
                        ],
                        [
                            "tmp_p",
                            "Name"
                        ],
                        [
                            "linear_mapping_with_residual_conn(config, self.is_train, p, p_mask=prem_mask, scope='{}_layer_self_att_linear_mapping'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.concat([pre, p, p * pre, p - pre], axis=2)",
                            "Call"
                        ],
                        [
                            "raw_pre",
                            "Name"
                        ],
                        [
                            "tf.concat([p, pre], axis=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_1105": {
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hypothesis_in",
                            "Name"
                        ],
                        [
                            "hypothesis_in",
                            "Name"
                        ],
                        [
                            "hypothesis_in",
                            "Name"
                        ],
                        [
                            "self_attention_layer(config, self.is_train, hyp, p_mask=hyp_mask, scope='{}_layer_self_att_enc_h'.format(i))",
                            "Call"
                        ],
                        [
                            "self_attention_layer(config, self.is_train, hyp, p_mask=hyp_mask, scope='{}_layer_self_att_enc'.format(i))",
                            "Call"
                        ],
                        [
                            "self_attention_layer(config, self.is_train, h, p_mask=hyp_mask, scope='{}_layer_self_att_enc'.format(i))",
                            "Call"
                        ],
                        [
                            "memory_augment_layer(config, h, hyp_mask, self.is_train, config.memory_key_and_values_num, name='memory_augmentation_layer')",
                            "Call"
                        ],
                        [
                            "fuse_gate(config, self.is_train, h, h1, scope='linear_enc_fuse_gate_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.concat([h, h * hyp], axis=2)",
                            "Call"
                        ],
                        [
                            "h1",
                            "Name"
                        ],
                        [
                            "tf.concat([h, h - hyp], axis=2)",
                            "Call"
                        ],
                        [
                            "h_lstm_enc",
                            "Name"
                        ],
                        [
                            "tmp_h",
                            "Name"
                        ],
                        [
                            "tf.concat([hyp, h, h * hyp], axis=2)",
                            "Call"
                        ],
                        [
                            "fuse_gate(config, self.is_train, h, h_lstm_enc, scope='lstm_enc_fuse_gate')",
                            "Call"
                        ],
                        [
                            "tmp_h",
                            "Name"
                        ],
                        [
                            "linear_mapping_with_residual_conn(config, self.is_train, h, p_mask=hyp_mask, scope='{}_layer_self_att_linear_mapping'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.concat([hyp, h, h * hyp, h - hyp], axis=2)",
                            "Call"
                        ],
                        [
                            "raw_hyp",
                            "Name"
                        ],
                        [
                            "tf.concat([h, hyp], axis=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_1128": {
                "name_or_scope": {
                    "value": "name or 'inception_CNN'",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "variable_scope_1131": {
                "name_or_scope": {
                    "value": "name or 'residual_CNN'",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "image_1248": {
                "name": {
                    "value": "conv_feature",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.expand_dims(list_of_conv_features[0], 3)",
                    "type": "Call",
                    "possible_values": []
                },
                "max_outputs": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_max_1298": {
                "variable": {
                    "value": "fm",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.concat(fms, axis=4)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool_1324": {
                "variable": {
                    "value": "fm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "denseAttention",
                            "Name"
                        ],
                        [
                            "dense_net_block(config, fm, config.dense_net_growth_rate, config.dense_net_layers, config.dense_net_kernel_size, is_train, scope='first_dense_net_block', tensor_dict=tensor_dict)",
                            "Call"
                        ],
                        [
                            "dense_net_transition_layer(config, fm, config.dense_net_transition_rate, scope='second_transition_layer', tensor_dict=tensor_dict)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.convolution2d(denseAttention, int(dim * config.dense_net_first_scale_down_ratio), config.first_scale_down_kernel, padding='SAME', activation_fn=act)",
                            "Call"
                        ],
                        [
                            "dense_net_transition_layer(config, denseAttention, config.first_transition_growth_rate, scope='first_transition_layer', tensor_dict=tensor_dict)",
                            "Call"
                        ],
                        [
                            "dense_net_block(config, fm, config.dense_net_growth_rate, config.dense_net_layers, config.dense_net_kernel_size, is_train, scope='second_dense_net_block', tensor_dict=tensor_dict)",
                            "Call"
                        ],
                        [
                            "dense_net_transition_layer(config, fm, config.dense_net_transition_rate, scope='third_transition_layer', tensor_dict=tensor_dict)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(tf.concat(fms, axis=4), axis=4)",
                            "Call"
                        ],
                        [
                            "dense_net_block(config, fm, config.dense_net_growth_rate, config.dense_net_layers, config.dense_net_kernel_size, is_train, scope='third_dense_net_block', tensor_dict=tensor_dict)",
                            "Call"
                        ],
                        [
                            "residual(config, fm, dim, dim, 3, 'last_layer_in_dense_block', padding='SAME', act=tf.nn.relu, is_train=is_train)",
                            "Call"
                        ],
                        [
                            "dense_net_transition_layer(config, fm, config.dense_net_transition_rate, scope='fourth_transition_layer', tensor_dict=tensor_dict)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(fm, [1, 2, 2, 1], [1, 2, 2, 1], 'VALID')",
                            "Call"
                        ],
                        [
                            "dense_net_block(config, fm, config.dense_net_growth_rate, config.dense_net_layers, config.dense_net_kernel_size, is_train, scope='fourth_dense_net_block', tensor_dict=tensor_dict)",
                            "Call"
                        ],
                        [
                            "tf.concat([fm, down_sampled_tf_tmp], axis=3)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_1375": {
                "values": {
                    "value": "list_of_features[1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_variable_1437": {
                "variable": {
                    "value": "keys",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "'memory_keys_{}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[memory_size, dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_1438": {
                "variable": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "'memory_values_{}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[memory_size, dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_1440": {
                "variable": {
                    "value": "mem_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[memory_size, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "memory_mask",
                    "type": "str",
                    "possible_values": []
                }
            },
            "expand_dims_1441": {
                "variable": {
                    "value": "mem_mask_aug",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mem_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones([memory_size, 1], name='memory_mask')",
                            "Call"
                        ],
                        [
                            "tf.ones([memory_size, 1], name='memory_mask')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_1442": {
                "variable": {
                    "value": "key_aug",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "keys",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('memory_keys_{}'.format(i), shape=[memory_size, dim])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_1443": {
                "variable": {
                    "value": "value_aug",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('memory_values_{}'.format(i), shape=[memory_size, dim])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_initializer_1479": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_1508": {
                "shape": {
                    "value": "params_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs_shape[-1:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ones_1509": {
                "shape": {
                    "value": "params_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs_shape[-1:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "reduce_sum_83": {
                "input_tensor": {
                    "value": "self.premise_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_84": {
                "input_tensor": {
                    "value": "self.hypothesis_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_94": {
                "name_or_scope": {
                    "value": "emb_var",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_94": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_98": {
                "name_or_scope": {
                    "value": "subword_emb_sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_105": {
                "name_or_scope": {
                    "value": "emb",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_121": {
                "variable": {
                    "value": "char_emb_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "char_emb_mat",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[config.char_vocab_size, config.char_emb_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_148": {
                "variable": {
                    "value": "premise_in",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[premise_in, conv_pre]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_149": {
                "variable": {
                    "value": "hypothesis_in",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[hypothesis_in, conv_hyp]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_184": {
                "name_or_scope": {
                    "value": "embedding_fuse_gate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_196": {
                "name_or_scope": {
                    "value": "highway",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_307": {
                "name_or_scope": {
                    "value": "mem_augmt",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_313": {
                "name_or_scope": {
                    "value": "LSTM_encoding",
                    "type": "str",
                    "possible_values": []
                }
            },
            "subtract_423": {
                "variable": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "premise_final",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_one_side(config, p, h, prem_seq_lengths, hyp_seq_lengths, prem_mask, hyp_mask, scope='premise_as_main')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "hypothesis_final",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_one_side(config, h, p, hyp_seq_lengths, prem_seq_lengths, hyp_mask, prem_mask, scope='premise_as_main')",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_424": {
                "variable": {
                    "value": "mul",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "premise_final",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_one_side(config, p, h, prem_seq_lengths, hyp_seq_lengths, prem_mask, hyp_mask, scope='premise_as_main')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "hypothesis_final",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_one_side(config, h, p, hyp_seq_lengths, prem_seq_lengths, hyp_mask, prem_mask, scope='premise_as_main')",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_425": {
                "variable": {
                    "value": "f0",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(premise_final, hypothesis_final, diff, mul)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_458": {
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ],
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_459": {
                "values": {
                    "value": "logtis_aug",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tf.expand_dims(tensor, axis=2) for tensor in logits]",
                            "ListComp"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_474": {
                "input_tensor": {
                    "value": "tf.reduce_sum(self.y * tf.log(sm_lgt) + (1 - self.y) * tf.log(1 - sm_lgt), axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_475": {
                "x": {
                    "value": "tf.equal(tf.arg_max(self.logits, dimension=1), tf.arg_max(self.y, dimension=1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_with_logits_477": {
                "labels": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_478": {
                "x": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_488": {
                "input_tensor": {
                    "value": "tf.reductf.nn.sparse_softmax_cross_entropy_with_logits(labels=self.y, logits=enc_logits)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_502": {
                "name": {
                    "value": "l2loss_ratio",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "l2loss_ratio",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sigmoid(tf.cast((self.global_step - full_l2_step / 2) * 8, tf.float32) / tf.cast(full_l2_step / 2, tf.float32)) * full_l2_ratio",
                            "BinOp"
                        ]
                    ]
                }
            },
            "trainable_variables_512": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "scalar_577": {
                "name": {
                    "value": "diff_l2loss_ratio",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "diff_l2loss_ratio",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sigmoid(tf.cast((self.global_step - full_l2_step / 2) * 8, tf.float32) / tf.cast(full_l2_step / 2, tf.float32)) * diff_l2_ratio",
                            "BinOp"
                        ]
                    ]
                }
            },
            "constant_589": {
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_590": {
                "value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_591": {
                "value": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_n_596": {
                "inputs": {
                    "value": "[entailment_loss, neutral_loss, contradiction_loss]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_634": {
                "variable": {
                    "value": "logit_tmp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list_of_logits",
                            "Name"
                        ],
                        [
                            "list_of_logits",
                            "Name"
                        ],
                        [
                            "list_of_logits",
                            "Name"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_638": {
                "variable": {
                    "value": "weighted_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.softmax(wgt_tmp, dim=1) * matrix",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_643": {
                "variable": {
                    "value": "tmp_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "linear(matrix, 200, True, bias_start=0.0, scope='weighted_sum_1', squeeze=False, wd=config.wd, input_keep_prob=config.keep_rate, is_train=self.is_train)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_650": {
                "variable": {
                    "value": "logit_tmp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list_of_logits",
                            "Name"
                        ],
                        [
                            "list_of_logits",
                            "Name"
                        ],
                        [
                            "list_of_logits",
                            "Name"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_654": {
                "variable": {
                    "value": "weighted_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.softmax(wgt_tmp, dim=1) * matrix",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_657": {
                "values": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "feature_map",
                            "Name"
                        ],
                        [
                            "normalize(feature_map)",
                            "Call"
                        ],
                        [
                            "tf.concat(list_of_features, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.cond(is_train, lambda : tf.nn.dropout(features, config.keep_rate), lambda : features)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[tf.expand_dims(f, axis=1) for f in features]",
                            "ListComp"
                        ],
                        [
                            "[tf.expand_dims(f, axis=1) for f in features]",
                            "ListComp"
                        ],
                        [
                            "[tf.expand_dims(f, axis=1) for f in features]",
                            "ListComp"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_663": {
                "variable": {
                    "value": "logit_tmp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list_of_logits",
                            "Name"
                        ],
                        [
                            "list_of_logits",
                            "Name"
                        ],
                        [
                            "list_of_logits",
                            "Name"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_667": {
                "variable": {
                    "value": "weighted_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.softmax(wgt_tmp, dim=1) * matrix",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_670": {
                "values": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "feature_map",
                            "Name"
                        ],
                        [
                            "normalize(feature_map)",
                            "Call"
                        ],
                        [
                            "tf.concat(list_of_features, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.cond(is_train, lambda : tf.nn.dropout(features, config.keep_rate), lambda : features)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[tf.expand_dims(f, axis=1) for f in features]",
                            "ListComp"
                        ],
                        [
                            "[tf.expand_dims(f, axis=1) for f in features]",
                            "ListComp"
                        ],
                        [
                            "[tf.expand_dims(f, axis=1) for f in features]",
                            "ListComp"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_677": {
                "values": {
                    "value": "[ft, matrix]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_705": {
                "input": {
                    "value": "comm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lhs * rhs",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_715": {
                "name_or_scope": {
                    "value": "name or 'conv_pooling'",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "max_pool_796": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "residual(config, arg, init_dim, 336, filter_size, 'res_transition_1', act=act, norm=norm, is_train=is_train, tensor_dict=tensor_dict)",
                            "Call"
                        ],
                        [
                            "residual(config, arg, 336, 224, filter_size, 'res_transition_2', act=act, norm=norm, is_train=is_train, tensor_dict=tensor_dict)",
                            "Call"
                        ],
                        [
                            "residual(config, arg, 224, config.res_conv_1_chan, filter_size, 'res1', act=act, norm=norm, is_train=is_train, tensor_dict=tensor_dict)",
                            "Call"
                        ],
                        [
                            "residual(config, arg, init_dim, config.res_conv_1_chan, filter_size, 'res1', act=act, norm=norm, is_train=is_train, tensor_dict=tensor_dict)",
                            "Call"
                        ],
                        [
                            "residual(config, res, config.res_conv_1_chan, config.res_conv_1_chan, filter_size, 'res2', act=act, norm=norm, is_train=is_train, tensor_dict=tensor_dict)",
                            "Call"
                        ],
                        [
                            "residual(config, res, config.res_conv_1_chan, config.res_conv_1_chan, filter_size, 'res3', act=act, norm=norm, is_train=is_train, tensor_dict=tensor_dict)",
                            "Call"
                        ],
                        [
                            "conv_pooling(res, 'first_conv_pool')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(res, [1, 2, 2, 1], [1, 2, 2, 1], 'VALID')",
                            "Call"
                        ],
                        [
                            "residual(config, res, config.res_conv_1_chan, config.res_conv_1_chan, filter_size, 'res4', act=act, norm=norm, is_train=is_train, tensor_dict=tensor_dict)",
                            "Call"
                        ],
                        [
                            "residual(config, res, config.res_conv_1_chan, config.res_conv_1_chan, filter_size, 'res5', act=act, norm=norm, is_train=is_train, tensor_dict=tensor_dict)",
                            "Call"
                        ],
                        [
                            "residual(config, res, config.res_conv_1_chan, config.res_conv_2_chan, filter_size, 'res6', act=act, norm=norm, is_train=is_train, tensor_dict=tensor_dict)",
                            "Call"
                        ],
                        [
                            "conv_pooling(res, 'second_conv_pool')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(res, [1, 2, 2, 1], [1, 2, 2, 1], 'VALID')",
                            "Call"
                        ],
                        [
                            "residual(config, res, config.res_conv_2_chan, config.res_conv_2_chan, filter_size, 'res7', act=act, norm=norm, is_train=is_train, tensor_dict=tensor_dict)",
                            "Call"
                        ],
                        [
                            "residual(config, res, config.res_conv_2_chan, config.res_conv_2_chan, filter_size, 'res8', act=act, norm=norm, is_train=is_train, tensor_dict=tensor_dict)",
                            "Call"
                        ],
                        [
                            "residual(config, res, config.res_conv_2_chan, config.res_conv_2_chan, filter_size, 'res8_1', act=act, norm=norm, is_train=is_train, tensor_dict=tensor_dict)",
                            "Call"
                        ],
                        [
                            "residual(config, res, config.res_conv_2_chan, config.res_conv_3_chan, filter_size, 'res9', act=act, norm=norm, is_train=is_train, tensor_dict=tensor_dict)",
                            "Call"
                        ],
                        [
                            "conv_pooling(res, 'third_conv_pool')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(res, [1, 2, 2, 1], [1, 2, 2, 1], 'VALID')",
                            "Call"
                        ],
                        [
                            "residual(config, res, config.res_conv_3_chan, config.res_conv_3_chan, filter_size, 'res13', act=act, norm=norm, is_train=is_train, tensor_dict=tensor_dict)",
                            "Call"
                        ],
                        [
                            "residual(config, res, config.res_conv_3_chan, config.res_conv_3_chan, filter_size, 'res14', act=act, norm=norm, is_train=is_train, tensor_dict=tensor_dict)",
                            "Call"
                        ],
                        [
                            "residual(config, res, config.res_conv_3_chan, config.res_conv_3_chan, filter_size, 'res15', act=act, norm=norm, is_train=is_train, tensor_dict=tensor_dict)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(res, [1, 6, 6, 1], [1, 1, 1, 1], 'VALID')",
                            "Call"
                        ],
                        [
                            "tf.concat([max_pool, avg_pool], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(res, [1, 2, 2, 1], [1, 2, 2, 1], 'VALID')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "expand_dims_830": {
                "input": {
                    "value": "p_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_831": {
                "input": {
                    "value": "h_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_925": {
                "variable": {
                    "value": "h_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[p_aug, h_aug, p_aug * h_aug]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_986": {
                "x": {
                    "value": "tf.tile(tf.expand_dims(p_mask, 2), [1, 1, PL, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_987": {
                "x": {
                    "value": "tf.tile(tf.expand_dims(p_mask, 1), [1, PL, 1, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tile_1010": {
                "variable": {
                    "value": "p_aug_tmp_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(p_tmp_1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, PL, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_1011": {
                "variable": {
                    "value": "p_aug_tmp_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(p_tmp_2, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, PL, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_1014": {
                "variable": {
                    "value": "self_att",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[self_att, self_att_tmp]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_1034": {
                "variable": {
                    "value": "tmp_p",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[p, self_att]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_1079": {
                "input": {
                    "value": "h_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_1084": {
                "x": {
                    "value": "tf.tile(tf.expand_dims(p_mask, 2), [1, 1, HL, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_1085": {
                "x": {
                    "value": "tf.tile(tf.expand_dims(h_mask, 1), [1, PL, 1, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_1248": {
                "input": {
                    "value": "list_of_conv_features[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_1250": {
                "name_or_scope": {
                    "value": "sub_add",
                    "type": "str",
                    "possible_values": []
                }
            },
            "expand_dims_1402": {
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ],
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "image_1450": {
                "name": {
                    "value": "'memory_{}_layer_keys'.format(i)",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.expand_dims(tf.expand_dims(keys, 2), 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "max_outputs": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "image_1451": {
                "name": {
                    "value": "'memory_{}_layer_values'.format(i)",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.expand_dims(tf.expand_dims(values, 2), 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "max_outputs": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_variable_108": {
                "variable": {
                    "value": "self.E",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "embedding",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.pred_size, self.embedding_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_113": {
                "variable": {
                    "value": "self.E",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "trainable": {
                    "value": "emb_train",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_120": {
                "name_or_scope": {
                    "value": "char_emb",
                    "type": "str",
                    "possible_values": []
                }
            },
            "embedding_lookup_123": {
                "variable": {
                    "value": "char_pre",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "char_emb_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('char_emb_mat', shape=[config.char_vocab_size, config.char_emb_size])",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "self.premise_char",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_124": {
                "variable": {
                    "value": "char_hyp",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "char_emb_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('char_emb_mat', shape=[config.char_vocab_size, config.char_emb_size])",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "self.hypothesis_char",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_155": {
                "x": {
                    "value": "self.premise_pos",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_156": {
                "x": {
                    "value": "self.hypothesis_pos",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_159": {
                "x": {
                    "value": "self.premise_exact_match",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_160": {
                "x": {
                    "value": "self.hypothesis_exact_match",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_167": {
                "x": {
                    "value": "self.premise_antonym",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_168": {
                "x": {
                    "value": "self.hypothesis_antonym",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_171": {
                "x": {
                    "value": "self.premise_NER_feature",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_172": {
                "x": {
                    "value": "self.hypothesis_NER_feature",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_191": {
                "x": {
                    "value": "premise_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "emb_drop(self.E, self.premise_x)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(premise_in, axis=2)",
                            "Call"
                        ],
                        [
                            "emb_drop(self.E, self.premise_x)",
                            "Call"
                        ],
                        [
                            "emb_drop(self.E, self.premise_x)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.batch_norm(premise_in)",
                            "Call"
                        ],
                        [
                            "tf.concat((premise_in, tf.cast(self.premise_pos, tf.float32)), axis=2)",
                            "Call"
                        ],
                        [
                            "tf.concat([premise_in, tf.cast(self.premise_exact_match, tf.float32)], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.concat([premise_in, self.premise_itf], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.concat([premise_in, tf.cast(self.premise_antonym, tf.float32)], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.concat([premise_in, tf.cast(self.premise_NER_feature, tf.float32)], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.concat([premise_in, conv_pre], axis=2)",
                            "Call"
                        ],
                        [
                            "fuse_gate(config, self.is_train, premise_in, premise_in, scope='embedding_fuse_gate')",
                            "Call"
                        ],
                        [
                            "tf.cond(self.is_train, lambda : tf.nn.dropout(premise_in, config.input_keep_rate), lambda : premise_in)",
                            "Call"
                        ],
                        [
                            "highway_network(premise_in, config.highway_num_layers, True, wd=config.wd, is_train=self.is_train, output_size=config.highway_network_output_size)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "config.input_keep_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_192": {
                "x": {
                    "value": "hypothesis_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "emb_drop(self.E, self.hypothesis_x)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(hypothesis_in, axis=2)",
                            "Call"
                        ],
                        [
                            "emb_drop(self.E, self.hypothesis_x)",
                            "Call"
                        ],
                        [
                            "emb_drop(self.E, self.hypothesis_x)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.batch_norm(hypothesis_in)",
                            "Call"
                        ],
                        [
                            "tf.concat((hypothesis_in, tf.cast(self.hypothesis_pos, tf.float32)), axis=2)",
                            "Call"
                        ],
                        [
                            "tf.concat([hypothesis_in, tf.cast(self.hypothesis_exact_match, tf.float32)], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.concat([hypothesis_in, self.hypothesis_itf], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.concat([hypothesis_in, tf.cast(self.hypothesis_antonym, tf.float32)], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.concat([hypothesis_in, tf.cast(self.hypothesis_NER_feature, tf.float32)], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.concat([hypothesis_in, conv_hyp], axis=2)",
                            "Call"
                        ],
                        [
                            "fuse_gate(config, self.is_train, hypothesis_in, hypothesis_in, scope='embedding_fuse_gate')",
                            "Call"
                        ],
                        [
                            "tf.cond(self.is_train, lambda : tf.nn.dropout(hypothesis_in, config.input_keep_rate), lambda : hypothesis_in)",
                            "Call"
                        ],
                        [
                            "highway_network(hypothesis_in, config.highway_num_layers, True, scope='highway_network_h', wd=config.wd, is_train=self.is_train, output_size=config.highway_network_output_size)",
                            "Call"
                        ],
                        [
                            "highway_network(hypothesis_in, config.highway_num_layers, True, wd=config.wd, is_train=self.is_train, output_size=config.highway_network_output_size)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "config.input_keep_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_338": {
                "name_or_scope": {
                    "value": "scope or 'model_one_side'",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "cond_357": {
                "variable": {
                    "value": "bi_att_mx",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "self.is_train",
                    "type": "Attribute",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : tf.nn.dropout(bi_att_mx, config.keep_rate)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : bi_att_mx",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "expand_dims_360": {
                "variable": {
                    "value": "bi_att_mx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reduce_sum(bi_att_mx, axis=3)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_389": {
                "variable": {
                    "value": "out_final",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "conv_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[conv_blocks(config, bi_att_mx, fn, 'conv_block_knl_{}'.format(fn), self.is_train, self.tensor_dict) for fn in conv_filters]",
                            "ListComp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_427": {
                "variable": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.subtract(premise_final, hypothesis_final)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_428": {
                "variable": {
                    "value": "mul",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "premise_final",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_one_side(config, p, h, prem_seq_lengths, hyp_seq_lengths, prem_mask, hyp_mask, scope='premise_as_main')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "hypothesis_final",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_one_side(config, h, p, hyp_seq_lengths, prem_seq_lengths, hyp_mask, prem_mask, scope='premise_as_main')",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_429": {
                "variable": {
                    "value": "f0",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(premise_final, hypothesis_final, diff, mul)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_436": {
                "variable": {
                    "value": "f0",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "linear(f0, self.LSTM_dim, True, bias_start=0.0, scope='bilinear', squeeze=False, wd=config.wd, input_keep_prob=config.keep_rate, is_train=self.is_train)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_474": {
                "input_tensor": {
                    "value": "self.y * tf.log(sm_lgt) + (1 - self.y) * tf.log(1 - sm_lgt)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "equal_475": {
                "x": {
                    "value": "tf.arg_max(self.logits, dimension=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.arg_max(self.y, dimension=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_478": {
                "x": {
                    "value": "tf.arg_max(self.logits, dimension=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.cast(self.y, tf.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_with_logits_488": {
                "labels": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "enc_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "linear(cat, 3, True, bias_start=0.0, scope='enc_logit', squeeze=False, wd=config.wd, input_keep_prob=config.keep_rate, is_train=self.is_train)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_501": {
                "x": {
                    "value": "tf.cast((self.global_step - full_l2_step / 2) * 8, tf.float32) / tf.cast(full_l2_step / 2, tf.float32)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "add_n_505": {
                "inputs": {
                    "value": "[tf.nn.l2_loss(tensor) for tensor in tf.trainable_variables() if tensor.name.endswith('weights:0')]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "constant_505": {
                "value": {
                    "value": "config.l2_regularization_ratio",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "l2_regularization_ratio",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sigmoid_576": {
                "x": {
                    "value": "tf.cast((self.global_step - full_l2_step / 2) * 8, tf.float32) / tf.cast(full_l2_step / 2, tf.float32)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "add_n_580": {
                "inputs": {
                    "value": "[tf.nn.l2_loss(tensor) for tensor in diffs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "constant_580": {
                "value": {
                    "value": "config.diff_penalty_loss_ratio",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "diff_penalty_loss_ratio",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cond_593": {
                "pred": {
                    "value": "x[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : 1 / x[1]",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : tf.constant(0.0, dtype=tf.float32)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cond_594": {
                "pred": {
                    "value": "x[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : tf.abs(x[1])",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : tf.constant(0.0, dtype=tf.float32)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cond_595": {
                "pred": {
                    "value": "x[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : 1 / -x[1]",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : tf.constant(0.0, dtype=tf.float32)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "reduce_max_619": {
                "input_tensor": {
                    "value": "matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_621": {
                "input_tensor": {
                    "value": "matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_656": {
                "input": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unstack_660": {
                "value": {
                    "value": "matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_669": {
                "input": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_675": {
                "input": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_720": {
                "input": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "residual(config, arg, init_dim, 336, filter_size, 'res_transition_1', act=act, norm=norm, is_train=is_train, tensor_dict=tensor_dict)",
                            "Call"
                        ],
                        [
                            "residual(config, arg, 336, 224, filter_size, 'res_transition_2', act=act, norm=norm, is_train=is_train, tensor_dict=tensor_dict)",
                            "Call"
                        ],
                        [
                            "residual(config, arg, 224, config.res_conv_1_chan, filter_size, 'res1', act=act, norm=norm, is_train=is_train, tensor_dict=tensor_dict)",
                            "Call"
                        ],
                        [
                            "residual(config, arg, init_dim, config.res_conv_1_chan, filter_size, 'res1', act=act, norm=norm, is_train=is_train, tensor_dict=tensor_dict)",
                            "Call"
                        ],
                        [
                            "residual(config, res, config.res_conv_1_chan, config.res_conv_1_chan, filter_size, 'res2', act=act, norm=norm, is_train=is_train, tensor_dict=tensor_dict)",
                            "Call"
                        ],
                        [
                            "residual(config, res, config.res_conv_1_chan, config.res_conv_1_chan, filter_size, 'res3', act=act, norm=norm, is_train=is_train, tensor_dict=tensor_dict)",
                            "Call"
                        ],
                        [
                            "conv_pooling(res, 'first_conv_pool')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(res, [1, 2, 2, 1], [1, 2, 2, 1], 'VALID')",
                            "Call"
                        ],
                        [
                            "residual(config, res, config.res_conv_1_chan, config.res_conv_1_chan, filter_size, 'res4', act=act, norm=norm, is_train=is_train, tensor_dict=tensor_dict)",
                            "Call"
                        ],
                        [
                            "residual(config, res, config.res_conv_1_chan, config.res_conv_1_chan, filter_size, 'res5', act=act, norm=norm, is_train=is_train, tensor_dict=tensor_dict)",
                            "Call"
                        ],
                        [
                            "residual(config, res, config.res_conv_1_chan, config.res_conv_2_chan, filter_size, 'res6', act=act, norm=norm, is_train=is_train, tensor_dict=tensor_dict)",
                            "Call"
                        ],
                        [
                            "conv_pooling(res, 'second_conv_pool')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(res, [1, 2, 2, 1], [1, 2, 2, 1], 'VALID')",
                            "Call"
                        ],
                        [
                            "residual(config, res, config.res_conv_2_chan, config.res_conv_2_chan, filter_size, 'res7', act=act, norm=norm, is_train=is_train, tensor_dict=tensor_dict)",
                            "Call"
                        ],
                        [
                            "residual(config, res, config.res_conv_2_chan, config.res_conv_2_chan, filter_size, 'res8', act=act, norm=norm, is_train=is_train, tensor_dict=tensor_dict)",
                            "Call"
                        ],
                        [
                            "residual(config, res, config.res_conv_2_chan, config.res_conv_2_chan, filter_size, 'res8_1', act=act, norm=norm, is_train=is_train, tensor_dict=tensor_dict)",
                            "Call"
                        ],
                        [
                            "residual(config, res, config.res_conv_2_chan, config.res_conv_3_chan, filter_size, 'res9', act=act, norm=norm, is_train=is_train, tensor_dict=tensor_dict)",
                            "Call"
                        ],
                        [
                            "conv_pooling(res, 'third_conv_pool')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(res, [1, 2, 2, 1], [1, 2, 2, 1], 'VALID')",
                            "Call"
                        ],
                        [
                            "residual(config, res, config.res_conv_3_chan, config.res_conv_3_chan, filter_size, 'res13', act=act, norm=norm, is_train=is_train, tensor_dict=tensor_dict)",
                            "Call"
                        ],
                        [
                            "residual(config, res, config.res_conv_3_chan, config.res_conv_3_chan, filter_size, 'res14', act=act, norm=norm, is_train=is_train, tensor_dict=tensor_dict)",
                            "Call"
                        ],
                        [
                            "residual(config, res, config.res_conv_3_chan, config.res_conv_3_chan, filter_size, 'res15', act=act, norm=norm, is_train=is_train, tensor_dict=tensor_dict)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(res, [1, 6, 6, 1], [1, 1, 1, 1], 'VALID')",
                            "Call"
                        ],
                        [
                            "tf.concat([max_pool, avg_pool], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(res, [1, 2, 2, 1], [1, 2, 2, 1], 'VALID')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('filter', shape=[2, 2, chan, chan], dtype='float')",
                            "Call"
                        ],
                        [
                            "tf.get_variable('weights', shape=[kernel_size, kernel_size, in_filter, out_filter], dtype='float', trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('weights', shape=[kernel_size, kernel_size, out_filter, out_filter], dtype='float', trainable=True)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "conv_pooling",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tile_986": {
                "input": {
                    "value": "tf.expand_dims(p_mask, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, PL, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_987": {
                "input": {
                    "value": "tf.expand_dims(p_mask, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, PL, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_1007": {
                "name_or_scope": {
                    "value": "'self_att_head_{}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_1037": {
                "variable": {
                    "value": "tmp",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[p, self_att, p * self_att]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_1084": {
                "input": {
                    "value": "tf.expand_dims(p_mask, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, HL, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_1085": {
                "input": {
                    "value": "tf.expand_dims(h_mask, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, PL, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_1133": {
                "name_or_scope": {
                    "value": "shared_activation",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_1139": {
                "name_or_scope": {
                    "value": "residual_only_activation",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_1145": {
                "name_or_scope": {
                    "value": "sub1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_1150": {
                "name_or_scope": {
                    "value": "sub2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_1155": {
                "name_or_scope": {
                    "value": "sub3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cond_1230": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "is_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : tf.nn.dropout(x, config.keep_rate)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : x",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cond_1242": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "is_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : tf.nn.dropout(x, config.keep_rate)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : x",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "expand_dims_1297": {
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ],
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_1298": {
                "values": {
                    "value": "fms",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[tf.expand_dims(tensor, axis=4) for tensor in fms]",
                            "ListComp"
                        ]
                    ]
                },
                "axis": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_1385": {
                "x": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "feature_map",
                            "Name"
                        ],
                        [
                            "normalize(feature_map)",
                            "Call"
                        ],
                        [
                            "tf.concat(list_of_features, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.cond(is_train, lambda : tf.nn.dropout(features, config.keep_rate), lambda : features)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[tf.expand_dims(f, axis=1) for f in features]",
                            "ListComp"
                        ],
                        [
                            "[tf.expand_dims(f, axis=1) for f in features]",
                            "ListComp"
                        ],
                        [
                            "[tf.expand_dims(f, axis=1) for f in features]",
                            "ListComp"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "rate": {
                    "value": "config.keep_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unstack_1402": {
                "value": {
                    "value": "feature_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.batch_norm(feature_map)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(feature_map, [1, 2, 2, 1], [1, 2, 2, 1], 'VALID')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(feature_map, [1, 2, 2, 1], [1, 2, 2, 1], 'VALID')",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.convolution2d(feature_map, out_dim, 1, padding='SAME', activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(feature_map, [1, 2, 2, 1], [1, 2, 2, 1], 'VALID')",
                            "Call"
                        ],
                        [
                            "normalize(feature_map)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_1450": {
                "input": {
                    "value": "keys",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('memory_keys_{}'.format(i), shape=[memory_size, dim])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_1451": {
                "input": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('memory_values_{}'.format(i), shape=[memory_size, dim])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_1474": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm(x)",
                            "Call"
                        ],
                        [
                            "act(x)",
                            "Call"
                        ],
                        [
                            "norm(x)",
                            "Call"
                        ],
                        [
                            "act(x)",
                            "Call"
                        ],
                        [
                            "convolution2d(x, out_filter, 1, padding=padding, normalizer_fn=norm, activation_fn=act)",
                            "Call"
                        ],
                        [
                            "convolution2d(x, out_filter, 1, padding=padding, activation_fn=act)",
                            "Call"
                        ],
                        [
                            "convolution2d(x, out_filter, kernel_size, padding=padding, activation_fn=act)",
                            "Call"
                        ],
                        [
                            "tf.nn.atrous_conv2d(x, filters, rate=2, padding=padding) + bias",
                            "BinOp"
                        ],
                        [
                            "act(x)",
                            "Call"
                        ],
                        [
                            "convolution2d(x, out_filter, kernel_size, padding=padding, normalizer_fn=norm, activation_fn=act)",
                            "Call"
                        ],
                        [
                            "convolution2d(x, out_filter, kernel_size, padding=padding, activation_fn=act)",
                            "Call"
                        ],
                        [
                            "convolution2d(x, out_filter, kernel_size, padding=padding, normalizer_fn=norm, activation_fn=act)",
                            "Call"
                        ],
                        [
                            "convolution2d(x, out_filter, kernel_size, padding=padding, activation_fn=act)",
                            "Call"
                        ],
                        [
                            "convolution2d(x, out_filter, kernel_size, padding=padding, activation_fn=act)",
                            "Call"
                        ],
                        [
                            "tf.nn.atrous_conv2d(x, filters, rate=2, padding=padding) + bias",
                            "BinOp"
                        ],
                        [
                            "act(x)",
                            "Call"
                        ],
                        [
                            "tf.cond(is_train, lambda : tf.nn.dropout(x, config.keep_rate), lambda : x)",
                            "Call"
                        ],
                        [
                            "convolution2d(x, out_filter, 1, padding=padding, normalizer_fn=norm, activation_fn=act)",
                            "Call"
                        ],
                        [
                            "convolution2d(x, out_filter, 1, padding=padding, activation_fn=act)",
                            "Call"
                        ],
                        [
                            "convolution2d(x, out_filter, kernel_size, padding=padding, normalizer_fn=norm, activation_fn=act)",
                            "Call"
                        ],
                        [
                            "convolution2d(x, out_filter, kernel_size, padding=padding, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "convolution2d(x, out_filter, kernel_size, padding=padding, activation_fn=act)",
                            "Call"
                        ],
                        [
                            "fuse_gate(config, is_train, orig_x, x, scope='conv_fuse_gate')",
                            "Call"
                        ],
                        [
                            "fuse_gate(config, is_train, x, orig_x, scope='conv_fuse_gate')",
                            "Call"
                        ],
                        [
                            "tf.cond(is_train, lambda : tf.nn.dropout(x, config.keep_rate), lambda : x)",
                            "Call"
                        ],
                        [
                            "shuffle_add(config, x)",
                            "Call"
                        ],
                        [
                            "tf.concat([x, orig_x], axis=3)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ]
                    ]
                }
            },
            "dropout_78": {
                "x": {
                    "value": "emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(E, x)",
                            "Call"
                        ],
                        [
                            "emb + self.positional_encoding",
                            "BinOp"
                        ]
                    ]
                },
                "rate": {
                    "value": "config.keep_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_107": {
                "name_or_scope": {
                    "value": "emb_var",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_112": {
                "name_or_scope": {
                    "value": "emb_var",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_112": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_122": {
                "name_or_scope": {
                    "value": "char",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_133": {
                "variable": {
                    "value": "conv_pre",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "conv_pre",
                    "type": "variable",
                    "possible_values": [
                        [
                            "multi_conv1d(char_pre, filter_sizes, heights, 'VALID', self.is_train, config.keep_rate, scope='conv')",
                            "Call"
                        ],
                        [
                            "tf.reshape(conv_pre, [-1, self.sequence_length, config.char_out_size])",
                            "Call"
                        ],
                        [
                            "linear(conv_pre, conv_d, True, bias_start=0.0, scope='char_linear', squeeze=False, wd=config.wd, input_keep_prob=config.keep_rate, is_train=self.is_train)",
                            "Call"
                        ],
                        [
                            "highway_network(conv_pre, 1, True, scope='char_conv', wd=config.wd, is_train=self.is_train)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.sequence_length, config.char_out_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_134": {
                "variable": {
                    "value": "conv_hyp",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "conv_hyp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "multi_conv1d(char_hyp, filter_sizes, heights, 'VALID', self.is_train, config.keep_rate, scope='conv')",
                            "Call"
                        ],
                        [
                            "tf.reshape(conv_hyp, [-1, self.sequence_length, config.char_out_size])",
                            "Call"
                        ],
                        [
                            "linear(conv_hyp, conv_d, True, bias_start=0.0, scope='char_linear', squeeze=False, wd=config.wd, input_keep_prob=config.keep_rate, is_train=self.is_train)",
                            "Call"
                        ],
                        [
                            "highway_network(conv_hyp, 1, True, scope='char_conv', wd=config.wd, is_train=self.is_train)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.sequence_length, config.char_out_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_230": {
                "name_or_scope": {
                    "value": "tf.get_variable_scope()",
                    "type": "Call",
                    "possible_values": []
                },
                "reuse": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "concat_239": {
                "variable": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[p, p * pre]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_240": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[h, h * hyp]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_326": {
                "name_or_scope": {
                    "value": "tf.get_variable_scope()",
                    "type": "Call",
                    "possible_values": []
                },
                "reuse": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_variable_scope_328": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_435": {
                "name_or_scope": {
                    "value": "tf.get_variable_scope()",
                    "type": "Call",
                    "possible_values": []
                },
                "reuse": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "arg_max_475": {
                "input": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dimension": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arg_max_478": {
                "input": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dimension": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "l2_loss_498": {
                "t": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ],
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                }
            },
            "l2_loss_573": {
                "t": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ],
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_625": {
                "logits": {
                    "value": "wgt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "linear(matrix, 1, True, bias_start=0.0, scope='weighted_sum', squeeze=False, wd=config.wd, input_keep_prob=config.keep_rate, is_train=self.is_train)",
                            "Call"
                        ],
                        [
                            "exp_mask(wgt, mask)",
                            "Call"
                        ],
                        [
                            "linear(matrix, 8, True, bias_start=0.0, scope='weighted_sum', squeeze=False, wd=config.wd, input_keep_prob=config.keep_rate, is_train=self.is_train)",
                            "Call"
                        ],
                        [
                            "linear(tmp_weight, 48, False, bias_start=0.0, scope='weighted_sum', squeeze=False, wd=config.wd, input_keep_prob=config.keep_rate, is_train=self.is_train)",
                            "Call"
                        ],
                        [
                            "linear(matrix, 48, False, bias_start=0.0, scope='weighted_sum', squeeze=False, wd=config.wd, input_keep_prob=config.keep_rate, is_train=self.is_train)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_986": {
                "input": {
                    "value": "p_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_987": {
                "input": {
                    "value": "p_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_1010": {
                "input": {
                    "value": "p_tmp_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "linear(p, dim, True, bias_start=0.0, scope='self_att_head_{}_w1'.format(i), squeeze=False, wd=config.wd, input_keep_prob=config.keep_rate, is_train=is_train)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_1011": {
                "input": {
                    "value": "p_tmp_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "linear(p, dim, True, bias_start=0.0, scope='self_att_head_{}_w2'.format(i), squeeze=False, wd=config.wd, input_keep_prob=config.keep_rate, is_train=is_train)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_1084": {
                "input": {
                    "value": "p_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_1085": {
                "input": {
                    "value": "h_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_1161": {
                "name_or_scope": {
                    "value": "sub1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_1165": {
                "variable": {
                    "value": "filters",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[kernel_size, kernel_size, in_filter, out_filter]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_variable_1166": {
                "variable": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[out_filter]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_1169": {
                "name_or_scope": {
                    "value": "sub2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_1173": {
                "variable": {
                    "value": "filters",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[kernel_size, kernel_size, out_filter, out_filter]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_variable_1174": {
                "variable": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[out_filter]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_1221": {
                "name_or_scope": {
                    "value": "sub1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_1232": {
                "name_or_scope": {
                    "value": "sub2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_129": {
                "name_or_scope": {
                    "value": "conv",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_scope_230": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_scope_235": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "concat_242": {
                "variable": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[p, p - pre]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_243": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[h, h - hyp]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_267": {
                "name_or_scope": {
                    "value": "tf.get_variable_scope()",
                    "type": "Call",
                    "possible_values": []
                },
                "reuse": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_variable_scope_269": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_271": {
                "name_or_scope": {
                    "value": "tf.get_variable_scope()",
                    "type": "Call",
                    "possible_values": []
                },
                "reuse": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_variable_scope_273": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_scope_326": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_sum_360": {
                "input_tensor": {
                    "value": "bi_att_mx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bi_attention_mx(config, self.is_train, main, support, p_mask=main_mask, h_mask=support_mask)",
                            "Call"
                        ],
                        [
                            "normalize(bi_att_mx)",
                            "Call"
                        ],
                        [
                            "tf.cond(self.is_train, lambda : tf.nn.dropout(bi_att_mx, config.keep_rate), lambda : bi_att_mx)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.reduce_sum(bi_att_mx, axis=3), axis=3)",
                            "Call"
                        ],
                        [
                            "highway_network(bi_att_mx, config.highway_num_layers, True, wd=config.wd, is_train=self.is_train)",
                            "Call"
                        ],
                        [
                            "fuse_gate(config, self.is_train, bi_att_mx, bi_att_mx, scope='dense_attention_self_fuse_gate')",
                            "Call"
                        ],
                        [
                            "linear(bi_att_mx, bi_att_mx.get_shape().as_list()[-1], True, bias_start=0.0, scope='DA_linear', squeeze=False, wd=config.wd, input_keep_prob=config.keep_rate, is_train=self.is_train)",
                            "Call"
                        ],
                        [
                            "add_features(config, bi_att_mx, main_mask, support_mask)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.layer_norm(bi_att_mx)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "subtract_427": {
                "x": {
                    "value": "premise_final",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_one_side(config, p, h, prem_seq_lengths, hyp_seq_lengths, prem_mask, hyp_mask, scope='premise_as_main')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "hypothesis_final",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_one_side(config, h, p, hyp_seq_lengths, prem_seq_lengths, hyp_mask, prem_mask, scope='premise_as_main')",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_scope_435": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_498": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cast_501": {
                "x": {
                    "value": "full_l2_step / 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "l2_loss_505": {
                "t": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ],
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_576": {
                "x": {
                    "value": "full_l2_step / 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "l2_loss_580": {
                "t": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ],
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_593": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_594": {
                "x": {
                    "value": "x[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "constant_594": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_595": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_638": {
                "logits": {
                    "value": "wgt_tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "exp_mask(logit_tmp, mask)",
                            "Call"
                        ],
                        [
                            "exp_mask(logit_tmp, mask)",
                            "Call"
                        ],
                        [
                            "exp_mask(logit_tmp, mask)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_654": {
                "logits": {
                    "value": "wgt_tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "exp_mask(logit_tmp, mask)",
                            "Call"
                        ],
                        [
                            "exp_mask(logit_tmp, mask)",
                            "Call"
                        ],
                        [
                            "exp_mask(logit_tmp, mask)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_667": {
                "logits": {
                    "value": "wgt_tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "exp_mask(logit_tmp, mask)",
                            "Call"
                        ],
                        [
                            "exp_mask(logit_tmp, mask)",
                            "Call"
                        ],
                        [
                            "exp_mask(logit_tmp, mask)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_1275": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[x, orig_x]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_136": {
                "name_or_scope": {
                    "value": "char_linear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_245": {
                "variable": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[pre, p, p * pre]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_246": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[hyp, h, h * hyp]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_255": {
                "name_or_scope": {
                    "value": "tf.get_variable_scope()",
                    "type": "Call",
                    "possible_values": []
                },
                "reuse": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_variable_scope_257": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_scope_267": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_scope_271": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_281": {
                "name_or_scope": {
                    "value": "tf.get_variable_scope()",
                    "type": "Call",
                    "possible_values": []
                },
                "reuse": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_variable_scope_285": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "dropout_357": {
                "x": {
                    "value": "bi_att_mx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bi_attention_mx(config, self.is_train, main, support, p_mask=main_mask, h_mask=support_mask)",
                            "Call"
                        ],
                        [
                            "normalize(bi_att_mx)",
                            "Call"
                        ],
                        [
                            "tf.cond(self.is_train, lambda : tf.nn.dropout(bi_att_mx, config.keep_rate), lambda : bi_att_mx)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.reduce_sum(bi_att_mx, axis=3), axis=3)",
                            "Call"
                        ],
                        [
                            "highway_network(bi_att_mx, config.highway_num_layers, True, wd=config.wd, is_train=self.is_train)",
                            "Call"
                        ],
                        [
                            "fuse_gate(config, self.is_train, bi_att_mx, bi_att_mx, scope='dense_attention_self_fuse_gate')",
                            "Call"
                        ],
                        [
                            "linear(bi_att_mx, bi_att_mx.get_shape().as_list()[-1], True, bias_start=0.0, scope='DA_linear', squeeze=False, wd=config.wd, input_keep_prob=config.keep_rate, is_train=self.is_train)",
                            "Call"
                        ],
                        [
                            "add_features(config, bi_att_mx, main_mask, support_mask)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.layer_norm(bi_att_mx)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "config.keep_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_474": {
                "x": {
                    "value": "1 - sm_lgt",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "trainable_variables_505": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_1046": {
                "name_or_scope": {
                    "value": "highway",
                    "type": "str",
                    "possible_values": []
                }
            },
            "atrous_conv2d_1167": {
                "value": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm(x)",
                            "Call"
                        ],
                        [
                            "act(x)",
                            "Call"
                        ],
                        [
                            "norm(x)",
                            "Call"
                        ],
                        [
                            "act(x)",
                            "Call"
                        ],
                        [
                            "convolution2d(x, out_filter, 1, padding=padding, normalizer_fn=norm, activation_fn=act)",
                            "Call"
                        ],
                        [
                            "convolution2d(x, out_filter, 1, padding=padding, activation_fn=act)",
                            "Call"
                        ],
                        [
                            "convolution2d(x, out_filter, kernel_size, padding=padding, activation_fn=act)",
                            "Call"
                        ],
                        [
                            "tf.nn.atrous_conv2d(x, filters, rate=2, padding=padding) + bias",
                            "BinOp"
                        ],
                        [
                            "act(x)",
                            "Call"
                        ],
                        [
                            "convolution2d(x, out_filter, kernel_size, padding=padding, normalizer_fn=norm, activation_fn=act)",
                            "Call"
                        ],
                        [
                            "convolution2d(x, out_filter, kernel_size, padding=padding, activation_fn=act)",
                            "Call"
                        ],
                        [
                            "convolution2d(x, out_filter, kernel_size, padding=padding, normalizer_fn=norm, activation_fn=act)",
                            "Call"
                        ],
                        [
                            "convolution2d(x, out_filter, kernel_size, padding=padding, activation_fn=act)",
                            "Call"
                        ],
                        [
                            "convolution2d(x, out_filter, kernel_size, padding=padding, activation_fn=act)",
                            "Call"
                        ],
                        [
                            "tf.nn.atrous_conv2d(x, filters, rate=2, padding=padding) + bias",
                            "BinOp"
                        ],
                        [
                            "act(x)",
                            "Call"
                        ],
                        [
                            "tf.cond(is_train, lambda : tf.nn.dropout(x, config.keep_rate), lambda : x)",
                            "Call"
                        ],
                        [
                            "convolution2d(x, out_filter, 1, padding=padding, normalizer_fn=norm, activation_fn=act)",
                            "Call"
                        ],
                        [
                            "convolution2d(x, out_filter, 1, padding=padding, activation_fn=act)",
                            "Call"
                        ],
                        [
                            "convolution2d(x, out_filter, kernel_size, padding=padding, normalizer_fn=norm, activation_fn=act)",
                            "Call"
                        ],
                        [
                            "convolution2d(x, out_filter, kernel_size, padding=padding, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "convolution2d(x, out_filter, kernel_size, padding=padding, activation_fn=act)",
                            "Call"
                        ],
                        [
                            "fuse_gate(config, is_train, orig_x, x, scope='conv_fuse_gate')",
                            "Call"
                        ],
                        [
                            "fuse_gate(config, is_train, x, orig_x, scope='conv_fuse_gate')",
                            "Call"
                        ],
                        [
                            "tf.cond(is_train, lambda : tf.nn.dropout(x, config.keep_rate), lambda : x)",
                            "Call"
                        ],
                        [
                            "shuffle_add(config, x)",
                            "Call"
                        ],
                        [
                            "tf.concat([x, orig_x], axis=3)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ]
                    ]
                },
                "filters": {
                    "value": "filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('filter', shape=[2, 2, chan, chan], dtype='float')",
                            "Call"
                        ],
                        [
                            "tf.get_variable('weights', shape=[kernel_size, kernel_size, in_filter, out_filter], dtype='float', trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('weights', shape=[kernel_size, kernel_size, out_filter, out_filter], dtype='float', trainable=True)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "atrous_conv2d_1175": {
                "value": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm(x)",
                            "Call"
                        ],
                        [
                            "act(x)",
                            "Call"
                        ],
                        [
                            "norm(x)",
                            "Call"
                        ],
                        [
                            "act(x)",
                            "Call"
                        ],
                        [
                            "convolution2d(x, out_filter, 1, padding=padding, normalizer_fn=norm, activation_fn=act)",
                            "Call"
                        ],
                        [
                            "convolution2d(x, out_filter, 1, padding=padding, activation_fn=act)",
                            "Call"
                        ],
                        [
                            "convolution2d(x, out_filter, kernel_size, padding=padding, activation_fn=act)",
                            "Call"
                        ],
                        [
                            "tf.nn.atrous_conv2d(x, filters, rate=2, padding=padding) + bias",
                            "BinOp"
                        ],
                        [
                            "act(x)",
                            "Call"
                        ],
                        [
                            "convolution2d(x, out_filter, kernel_size, padding=padding, normalizer_fn=norm, activation_fn=act)",
                            "Call"
                        ],
                        [
                            "convolution2d(x, out_filter, kernel_size, padding=padding, activation_fn=act)",
                            "Call"
                        ],
                        [
                            "convolution2d(x, out_filter, kernel_size, padding=padding, normalizer_fn=norm, activation_fn=act)",
                            "Call"
                        ],
                        [
                            "convolution2d(x, out_filter, kernel_size, padding=padding, activation_fn=act)",
                            "Call"
                        ],
                        [
                            "convolution2d(x, out_filter, kernel_size, padding=padding, activation_fn=act)",
                            "Call"
                        ],
                        [
                            "tf.nn.atrous_conv2d(x, filters, rate=2, padding=padding) + bias",
                            "BinOp"
                        ],
                        [
                            "act(x)",
                            "Call"
                        ],
                        [
                            "tf.cond(is_train, lambda : tf.nn.dropout(x, config.keep_rate), lambda : x)",
                            "Call"
                        ],
                        [
                            "convolution2d(x, out_filter, 1, padding=padding, normalizer_fn=norm, activation_fn=act)",
                            "Call"
                        ],
                        [
                            "convolution2d(x, out_filter, 1, padding=padding, activation_fn=act)",
                            "Call"
                        ],
                        [
                            "convolution2d(x, out_filter, kernel_size, padding=padding, normalizer_fn=norm, activation_fn=act)",
                            "Call"
                        ],
                        [
                            "convolution2d(x, out_filter, kernel_size, padding=padding, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "convolution2d(x, out_filter, kernel_size, padding=padding, activation_fn=act)",
                            "Call"
                        ],
                        [
                            "fuse_gate(config, is_train, orig_x, x, scope='conv_fuse_gate')",
                            "Call"
                        ],
                        [
                            "fuse_gate(config, is_train, x, orig_x, scope='conv_fuse_gate')",
                            "Call"
                        ],
                        [
                            "tf.cond(is_train, lambda : tf.nn.dropout(x, config.keep_rate), lambda : x)",
                            "Call"
                        ],
                        [
                            "shuffle_add(config, x)",
                            "Call"
                        ],
                        [
                            "tf.concat([x, orig_x], axis=3)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ]
                    ]
                },
                "filters": {
                    "value": "filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('filter', shape=[2, 2, chan, chan], dtype='float')",
                            "Call"
                        ],
                        [
                            "tf.get_variable('weights', shape=[kernel_size, kernel_size, in_filter, out_filter], dtype='float', trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('weights', shape=[kernel_size, kernel_size, out_filter, out_filter], dtype='float', trainable=True)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "dropout_1230": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm(x)",
                            "Call"
                        ],
                        [
                            "act(x)",
                            "Call"
                        ],
                        [
                            "norm(x)",
                            "Call"
                        ],
                        [
                            "act(x)",
                            "Call"
                        ],
                        [
                            "convolution2d(x, out_filter, 1, padding=padding, normalizer_fn=norm, activation_fn=act)",
                            "Call"
                        ],
                        [
                            "convolution2d(x, out_filter, 1, padding=padding, activation_fn=act)",
                            "Call"
                        ],
                        [
                            "convolution2d(x, out_filter, kernel_size, padding=padding, activation_fn=act)",
                            "Call"
                        ],
                        [
                            "tf.nn.atrous_conv2d(x, filters, rate=2, padding=padding) + bias",
                            "BinOp"
                        ],
                        [
                            "act(x)",
                            "Call"
                        ],
                        [
                            "convolution2d(x, out_filter, kernel_size, padding=padding, normalizer_fn=norm, activation_fn=act)",
                            "Call"
                        ],
                        [
                            "convolution2d(x, out_filter, kernel_size, padding=padding, activation_fn=act)",
                            "Call"
                        ],
                        [
                            "convolution2d(x, out_filter, kernel_size, padding=padding, normalizer_fn=norm, activation_fn=act)",
                            "Call"
                        ],
                        [
                            "convolution2d(x, out_filter, kernel_size, padding=padding, activation_fn=act)",
                            "Call"
                        ],
                        [
                            "convolution2d(x, out_filter, kernel_size, padding=padding, activation_fn=act)",
                            "Call"
                        ],
                        [
                            "tf.nn.atrous_conv2d(x, filters, rate=2, padding=padding) + bias",
                            "BinOp"
                        ],
                        [
                            "act(x)",
                            "Call"
                        ],
                        [
                            "tf.cond(is_train, lambda : tf.nn.dropout(x, config.keep_rate), lambda : x)",
                            "Call"
                        ],
                        [
                            "convolution2d(x, out_filter, 1, padding=padding, normalizer_fn=norm, activation_fn=act)",
                            "Call"
                        ],
                        [
                            "convolution2d(x, out_filter, 1, padding=padding, activation_fn=act)",
                            "Call"
                        ],
                        [
                            "convolution2d(x, out_filter, kernel_size, padding=padding, normalizer_fn=norm, activation_fn=act)",
                            "Call"
                        ],
                        [
                            "convolution2d(x, out_filter, kernel_size, padding=padding, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "convolution2d(x, out_filter, kernel_size, padding=padding, activation_fn=act)",
                            "Call"
                        ],
                        [
                            "fuse_gate(config, is_train, orig_x, x, scope='conv_fuse_gate')",
                            "Call"
                        ],
                        [
                            "fuse_gate(config, is_train, x, orig_x, scope='conv_fuse_gate')",
                            "Call"
                        ],
                        [
                            "tf.cond(is_train, lambda : tf.nn.dropout(x, config.keep_rate), lambda : x)",
                            "Call"
                        ],
                        [
                            "shuffle_add(config, x)",
                            "Call"
                        ],
                        [
                            "tf.concat([x, orig_x], axis=3)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ]
                    ]
                },
                "rate": {
                    "value": "config.keep_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_1242": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm(x)",
                            "Call"
                        ],
                        [
                            "act(x)",
                            "Call"
                        ],
                        [
                            "norm(x)",
                            "Call"
                        ],
                        [
                            "act(x)",
                            "Call"
                        ],
                        [
                            "convolution2d(x, out_filter, 1, padding=padding, normalizer_fn=norm, activation_fn=act)",
                            "Call"
                        ],
                        [
                            "convolution2d(x, out_filter, 1, padding=padding, activation_fn=act)",
                            "Call"
                        ],
                        [
                            "convolution2d(x, out_filter, kernel_size, padding=padding, activation_fn=act)",
                            "Call"
                        ],
                        [
                            "tf.nn.atrous_conv2d(x, filters, rate=2, padding=padding) + bias",
                            "BinOp"
                        ],
                        [
                            "act(x)",
                            "Call"
                        ],
                        [
                            "convolution2d(x, out_filter, kernel_size, padding=padding, normalizer_fn=norm, activation_fn=act)",
                            "Call"
                        ],
                        [
                            "convolution2d(x, out_filter, kernel_size, padding=padding, activation_fn=act)",
                            "Call"
                        ],
                        [
                            "convolution2d(x, out_filter, kernel_size, padding=padding, normalizer_fn=norm, activation_fn=act)",
                            "Call"
                        ],
                        [
                            "convolution2d(x, out_filter, kernel_size, padding=padding, activation_fn=act)",
                            "Call"
                        ],
                        [
                            "convolution2d(x, out_filter, kernel_size, padding=padding, activation_fn=act)",
                            "Call"
                        ],
                        [
                            "tf.nn.atrous_conv2d(x, filters, rate=2, padding=padding) + bias",
                            "BinOp"
                        ],
                        [
                            "act(x)",
                            "Call"
                        ],
                        [
                            "tf.cond(is_train, lambda : tf.nn.dropout(x, config.keep_rate), lambda : x)",
                            "Call"
                        ],
                        [
                            "convolution2d(x, out_filter, 1, padding=padding, normalizer_fn=norm, activation_fn=act)",
                            "Call"
                        ],
                        [
                            "convolution2d(x, out_filter, 1, padding=padding, activation_fn=act)",
                            "Call"
                        ],
                        [
                            "convolution2d(x, out_filter, kernel_size, padding=padding, normalizer_fn=norm, activation_fn=act)",
                            "Call"
                        ],
                        [
                            "convolution2d(x, out_filter, kernel_size, padding=padding, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "convolution2d(x, out_filter, kernel_size, padding=padding, activation_fn=act)",
                            "Call"
                        ],
                        [
                            "fuse_gate(config, is_train, orig_x, x, scope='conv_fuse_gate')",
                            "Call"
                        ],
                        [
                            "fuse_gate(config, is_train, x, orig_x, scope='conv_fuse_gate')",
                            "Call"
                        ],
                        [
                            "tf.cond(is_train, lambda : tf.nn.dropout(x, config.keep_rate), lambda : x)",
                            "Call"
                        ],
                        [
                            "shuffle_add(config, x)",
                            "Call"
                        ],
                        [
                            "tf.concat([x, orig_x], axis=3)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ]
                    ]
                },
                "rate": {
                    "value": "config.keep_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_1277": {
                "variable": {
                    "value": "orig_x",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[orig_x, orig_x]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_144": {
                "name_or_scope": {
                    "value": "char_highway",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_248": {
                "variable": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[pre, p, p * pre, p - pre]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_249": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[hyp, h, h * hyp, h - hyp]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_variable_scope_255": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_scope_281": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "concat_251": {
                "variable": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[p, pre]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_252": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[h, hyp]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "python/my/tensorflow/general.py": {
        "tensorflow": {
            "reshape_127": {
                "variable": {
                    "value": "flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "out_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[left] + [fixed_shape[i] or tf.shape(tensor)[i] for i in range(start, len(fixed_shape))]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_141": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "target_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pre_shape + keep_shape",
                            "BinOp"
                        ]
                    ]
                }
            },
            "get_collection_149": {
                "variable": {
                    "value": "variables",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scope or tf.get_variable_scope().name",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_variable_31": {
                "variable": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'mask'",
                            "Constant"
                        ],
                        [
                            "'exp_mask'",
                            "Constant"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "multiply_54": {
                "variable": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.l2_loss(var)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "wd",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weight_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_87": {
                "variable": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "reduce_mean_88": {
                "variable": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(0, grads)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(grad, 0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multiply_102": {
                "x": {
                    "value": "val",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.cast(mask, 'float')",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'mask'",
                            "Constant"
                        ],
                        [
                            "'exp_mask'",
                            "Constant"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "add_119": {
                "x": {
                    "value": "val",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "(1 - tf.cast(mask, 'float')) * VERY_NEGATIVE_NUMBER",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'mask'",
                            "Constant"
                        ],
                        [
                            "'exp_mask'",
                            "Constant"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "pad_171": {
                "tensor": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "paddings": {
                    "value": "paddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[[0, shape[i] - tf.shape(tensor)[i]] for i in range(len(shape))]",
                            "ListComp"
                        ]
                    ]
                },
                "mode": {
                    "value": "mode",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'CONSTANT'",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'mask'",
                            "Constant"
                        ],
                        [
                            "'exp_mask'",
                            "Constant"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "device_30": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_52": {
                "stddev": {
                    "value": "stddev",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "add_to_collection_55": {
                "name": {
                    "value": "losses",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(tf.nn.l2_loss(var), wd, name='weight_loss')",
                            "Call"
                        ],
                        [
                            "tf.multiply(tf.nn.l2_loss(var), wd, name='{}/wd'.format(var.op.name))",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_81": {
                "variable": {
                    "value": "expanded_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_102": {
                "x": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_150": {
                "name": {
                    "value": "weight_decay",
                    "type": "str",
                    "possible_values": []
                }
            },
            "multiply_152": {
                "variable": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.l2_loss(var)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "wd",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "'{}/wd'.format(var.op.name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "l2_loss_54": {
                "t": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name, shape, initializer=initializer)",
                            "Call"
                        ],
                        [
                            "variable_on_cpu(name, shape, tf.truncated_normal_initializer(stddev=stddev))",
                            "Call"
                        ],
                        [
                            "variables",
                            "Name"
                        ]
                    ]
                }
            },
            "get_variable_scope_148": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "add_to_collection_153": {
                "name": {
                    "value": "losses",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(tf.nn.l2_loss(var), wd, name='weight_loss')",
                            "Call"
                        ],
                        [
                            "tf.multiply(tf.nn.l2_loss(var), wd, name='{}/wd'.format(var.op.name))",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_119": {
                "x": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                }
            },
            "shape_136": {
                "input": {
                    "value": "ref",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_137": {
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "l2_loss_152": {
                "t": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name, shape, initializer=initializer)",
                            "Call"
                        ],
                        [
                            "variable_on_cpu(name, shape, tf.truncated_normal_initializer(stddev=stddev))",
                            "Call"
                        ],
                        [
                            "variables",
                            "Name"
                        ]
                    ]
                }
            },
            "shape_125": {
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_126": {
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_170": {
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "python/my/tensorflow/nn.py": {
        "tensorflow": {
            "reduce_sum_209": {
                "variable": {
                    "value": "dot",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "lfs * rhs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_36": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "rate": {
                    "value": "keep_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "noise_shape": {
                    "value": "noise_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cond_37": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "is_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : d",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : x",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "softmax_47": {
                "variable": {
                    "value": "flat_out",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "flat_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "flatten(logits, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_65": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.expand_dims(a, -1) * target",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "target_rank - 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_71": {
                "variable": {
                    "value": "first",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "linear(args, size, bias, bias_start=bias_start, scope='first', wd=wd, input_keep_prob=input_keep_prob, is_train=is_train)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_151": {
                "variable": {
                    "value": "trans",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "trans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "linear([arg], d, bias, bias_start=bias_start, scope='trans', wd=wd, input_keep_prob=input_keep_prob, is_train=is_train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(trans)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_153": {
                "variable": {
                    "value": "gate",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "gate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "linear([arg], d, bias, bias_start=bias_start, scope='gate', wd=wd, input_keep_prob=input_keep_prob, is_train=is_train)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(gate)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_174": {
                "variable": {
                    "value": "filter_",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "filter",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, height, num_channels, filter_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_175": {
                "variable": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bias",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[filter_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_max_180": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.relu(xxc)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_194": {
                "variable": {
                    "value": "concat_out",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "outs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_variable_200": {
                "variable": {
                    "value": "filter_",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "filter",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, height, num_channels, filter_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_201": {
                "variable": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bias",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[filter_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_216": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sigmoid_310": {
                "variable": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "lhs_2 + rhs_2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_12": {
                "name_or_scope": {
                    "value": "scope or 'linear'",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "squeeze_26": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reconstruct(flat_out, args[0], 1)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, [len(args[0].get_shape().as_list()) - 1])",
                            "Call"
                        ],
                        [
                            "tf.cond(is_train, lambda : d, lambda : x)",
                            "Call"
                        ],
                        [
                            "reconstruct(flat_out, logits, 1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.expand_dims(a, -1) * target, target_rank - 2)",
                            "Call"
                        ],
                        [
                            "gate * trans + (1 - gate) * arg",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_max(tf.nn.relu(xxc), 2)",
                            "Call"
                        ],
                        [
                            "conv1d(in_, filter_size, height, padding, is_train=is_train, keep_prob=keep_prob, scope='conv1d_{}'.format(height))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(in_, filter_, strides, padding) + bias",
                            "BinOp"
                        ],
                        [
                            "linear(cat_args, out_size, True, bias_start=0.0, scope='dense_logit_linear', squeeze=False, wd=wd, input_keep_prob=config.keep_rate, is_train=is_train)",
                            "Call"
                        ],
                        [
                            "linear([cat_args], out_size, True, bias_start=0.0, scope='dense_logit_linear', squeeze=False, wd=wd, input_keep_prob=config.keep_rate, is_train=is_train)",
                            "Call"
                        ],
                        [
                            "linear(cat_args, out_size, True, bias_start=0.0, scope='dense_logit_linear', squeeze=False, wd=wd, input_keep_prob=config.keep_rate, is_train=is_train)",
                            "Call"
                        ],
                        [
                            "linear(cat_args, out_size, True, bias_start=0.0, scope='dense_logit_linear', squeeze=False, wd=wd, input_keep_prob=config.keep_rate, is_train=is_train)",
                            "Call"
                        ],
                        [
                            "linear(diff, out_size, True, bias_start=0.0, scope='dense_logit_linear', squeeze=False, wd=wd, input_keep_prob=config.keep_rate, is_train=is_train)",
                            "Call"
                        ],
                        [
                            "f * lhs + f2 * z",
                            "BinOp"
                        ],
                        [
                            "f * lhs + (1 - f) * z",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "[len(args[0].get_shape().as_list()) - 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "name_scope_34": {
                "name": {
                    "value": "name or 'dropout'",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "name_scope_43": {
                "name": {
                    "value": "scope or 'Softmax'",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "name_scope_62": {
                "name": {
                    "value": "scope or 'Softsel'",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "variable_scope_70": {
                "name_or_scope": {
                    "value": "scope or 'Double_Linear_Logits'",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "variable_scope_81": {
                "name_or_scope": {
                    "value": "scope or 'Linear_Logits'",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "name_scope_90": {
                "name": {
                    "value": "name or 'sum_logits'",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "variable_scope_144": {
                "name_or_scope": {
                    "value": "scope or 'highway_layer'",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "variable_scope_161": {
                "name_or_scope": {
                    "value": "scope or 'highway_network'",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "variable_scope_172": {
                "name_or_scope": {
                    "value": "scope or 'conv1d'",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "variable_scope_185": {
                "name_or_scope": {
                    "value": "scope or 'multi_conv1d'",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "variable_scope_198": {
                "name_or_scope": {
                    "value": "scope or 'conv2d'",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "sqrt_210": {
                "x": {
                    "value": "tf.reduce_sum(tf.square(rhs), axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "name_scope_215": {
                "name": {
                    "value": "scope or 'summaries'",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "scalar_217": {
                "name": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(var)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_219": {
                "variable": {
                    "value": "stddev",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_mean(tf.square(var - mean))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_220": {
                "name": {
                    "value": "stddev",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "stddev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sqrt(tf.reduce_mean(tf.square(var - mean)))",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_221": {
                "name": {
                    "value": "max",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.reduce_max(var)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_222": {
                "name": {
                    "value": "min",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.reduce_min(var)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "histogram_223": {
                "name": {
                    "value": "histogram",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_227": {
                "name_or_scope": {
                    "value": "scope or 'dense_logits'",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "concat_233": {
                "variable": {
                    "value": "cat_args",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[args[0], args[1], new_arg]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "cat_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(new_arg.get_shape().as_list()) - 1",
                            "BinOp"
                        ],
                        [
                            "len(args[0].get_shape().as_list()) - 1",
                            "BinOp"
                        ],
                        [
                            "len(mul.get_shape().as_list()) - 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "unstack_282": {
                "variable": {
                    "value": "list_of_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reconstruct(flat_out, args[0], 1)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, [len(args[0].get_shape().as_list()) - 1])",
                            "Call"
                        ],
                        [
                            "tf.cond(is_train, lambda : d, lambda : x)",
                            "Call"
                        ],
                        [
                            "reconstruct(flat_out, logits, 1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.expand_dims(a, -1) * target, target_rank - 2)",
                            "Call"
                        ],
                        [
                            "gate * trans + (1 - gate) * arg",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_max(tf.nn.relu(xxc), 2)",
                            "Call"
                        ],
                        [
                            "conv1d(in_, filter_size, height, padding, is_train=is_train, keep_prob=keep_prob, scope='conv1d_{}'.format(height))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(in_, filter_, strides, padding) + bias",
                            "BinOp"
                        ],
                        [
                            "linear(cat_args, out_size, True, bias_start=0.0, scope='dense_logit_linear', squeeze=False, wd=wd, input_keep_prob=config.keep_rate, is_train=is_train)",
                            "Call"
                        ],
                        [
                            "linear([cat_args], out_size, True, bias_start=0.0, scope='dense_logit_linear', squeeze=False, wd=wd, input_keep_prob=config.keep_rate, is_train=is_train)",
                            "Call"
                        ],
                        [
                            "linear(cat_args, out_size, True, bias_start=0.0, scope='dense_logit_linear', squeeze=False, wd=wd, input_keep_prob=config.keep_rate, is_train=is_train)",
                            "Call"
                        ],
                        [
                            "linear(cat_args, out_size, True, bias_start=0.0, scope='dense_logit_linear', squeeze=False, wd=wd, input_keep_prob=config.keep_rate, is_train=is_train)",
                            "Call"
                        ],
                        [
                            "linear(diff, out_size, True, bias_start=0.0, scope='dense_logit_linear', squeeze=False, wd=wd, input_keep_prob=config.keep_rate, is_train=is_train)",
                            "Call"
                        ],
                        [
                            "f * lhs + f2 * z",
                            "BinOp"
                        ],
                        [
                            "f * lhs + (1 - f) * z",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_290": {
                "name_or_scope": {
                    "value": "scope or 'fuse_gate'",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "relu_300": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "lhs_1 + rhs_1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_302": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "lhs_1 + rhs_1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_315": {
                "variable": {
                    "value": "f2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "lhs_3 + rhs_3",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cond_21": {
                "pred": {
                    "value": "is_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : tf.nn.dropout(arg, input_keep_prob)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : arg",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "conv2d_179": {
                "input": {
                    "value": "in_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout(in_, keep_prob, is_train)",
                            "Call"
                        ],
                        [
                            "dropout(in_, keep_prob, is_train)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "filter_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('filter', shape=[1, height, num_channels, filter_size], dtype='float')",
                            "Call"
                        ],
                        [
                            "tf.get_variable('filter', shape=[1, height, num_channels, filter_size], dtype='float')",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "strides",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1, 1, 1, 1]",
                            "List"
                        ],
                        [
                            "[1, 1, 1, 1]",
                            "List"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "relu_180": {
                "features": {
                    "value": "xxc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(in_, filter_, strides, padding) + bias",
                            "BinOp"
                        ]
                    ]
                }
            },
            "conv2d_205": {
                "input": {
                    "value": "in_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout(in_, keep_prob, is_train)",
                            "Call"
                        ],
                        [
                            "dropout(in_, keep_prob, is_train)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "filter_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('filter', shape=[1, height, num_channels, filter_size], dtype='float')",
                            "Call"
                        ],
                        [
                            "tf.get_variable('filter', shape=[1, height, num_channels, filter_size], dtype='float')",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "strides",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1, 1, 1, 1]",
                            "List"
                        ],
                        [
                            "[1, 1, 1, 1]",
                            "List"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_sum_210": {
                "input_tensor": {
                    "value": "tf.square(rhs)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "name_scope_218": {
                "name": {
                    "value": "stddev",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_max_221": {
                "input_tensor": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_min_222": {
                "input_tensor": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "expand_dims_65": {
                "input": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "softmax(logits, mask=mask)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_96": {
                "input_tensor": {
                    "value": "arg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args[0] * args[1]",
                            "BinOp"
                        ],
                        [
                            "args[0] * args[1]",
                            "BinOp"
                        ],
                        [
                            "arg / tf.sqrt(tf.constant(dim, dtype=tf.float32))",
                            "BinOp"
                        ],
                        [
                            "args[0] * args[1]",
                            "BinOp"
                        ],
                        [
                            "linear([arg], d, bias, bias_start=bias_start, scope='arg_resize', wd=wd, input_keep_prob=input_keep_prob, is_train=is_train)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "rank - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_210": {
                "x": {
                    "value": "rhs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_mean_219": {
                "input_tensor": {
                    "value": "tf.square(var - mean)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_253": {
                "variable": {
                    "value": "cat_args",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[args[0], args[1]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "cat_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(new_arg.get_shape().as_list()) - 1",
                            "BinOp"
                        ],
                        [
                            "len(args[0].get_shape().as_list()) - 1",
                            "BinOp"
                        ],
                        [
                            "len(mul.get_shape().as_list()) - 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "image_284": {
                "name": {
                    "value": "'dense_logit_layer_{}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.expand_dims(list_of_logits[i], 3)",
                    "type": "Call",
                    "possible_values": []
                },
                "max_outputs": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_21": {
                "x": {
                    "value": "arg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args[0] * args[1]",
                            "BinOp"
                        ],
                        [
                            "args[0] * args[1]",
                            "BinOp"
                        ],
                        [
                            "arg / tf.sqrt(tf.constant(dim, dtype=tf.float32))",
                            "BinOp"
                        ],
                        [
                            "args[0] * args[1]",
                            "BinOp"
                        ],
                        [
                            "linear([arg], d, bias, bias_start=bias_start, scope='arg_resize', wd=wd, input_keep_prob=input_keep_prob, is_train=is_train)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "input_keep_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "square_219": {
                "x": {
                    "value": "var - mean",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "concat_261": {
                "variable": {
                    "value": "cat_args",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[diff, mul]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "cat_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(new_arg.get_shape().as_list()) - 1",
                            "BinOp"
                        ],
                        [
                            "len(args[0].get_shape().as_list()) - 1",
                            "BinOp"
                        ],
                        [
                            "len(mul.get_shape().as_list()) - 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "expand_dims_284": {
                "input": {
                    "value": "list_of_logits[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_121": {
                "x": {
                    "value": "tf.constant(dim, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_121": {
                "value": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args[0].get_shape().as_list()[-1]",
                            "Subscript"
                        ],
                        [
                            "lhs.get_shape().as_list()[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "python/my/tensorflow/rnn.py": {
        "tensorflow": {
            "cast_18": {
                "x": {
                    "value": "flatten(sequence_length, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int64",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_36": {
                "x": {
                    "value": "flatten(sequence_length, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int64",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reverse_38": {
                "tensor": {
                    "value": "flat_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "flatten(inputs, 2)",
                            "Call"
                        ],
                        [
                            "flatten(inputs, 2)",
                            "Call"
                        ],
                        [
                            "tf.reverse(flat_inputs, 1) if sequence_length is None else tf.reverse_sequence(flat_inputs, sequence_length, 1)",
                            "IfExp"
                        ],
                        [
                            "flatten(inputs, 2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reverse_sequence_39": {
                "input": {
                    "value": "flat_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "flatten(inputs, 2)",
                            "Call"
                        ],
                        [
                            "flatten(inputs, 2)",
                            "Call"
                        ],
                        [
                            "tf.reverse(flat_inputs, 1) if sequence_length is None else tf.reverse_sequence(flat_inputs, sequence_length, 1)",
                            "IfExp"
                        ],
                        [
                            "flatten(inputs, 2)",
                            "Call"
                        ]
                    ]
                },
                "seq_lengths": {
                    "value": "sequence_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "seq_axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reverse_44": {
                "tensor": {
                    "value": "flat_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reverse(flat_outputs, 1) if sequence_length is None else tf.reverse_sequence(flat_outputs, sequence_length, 1)",
                            "IfExp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reverse_sequence_45": {
                "input": {
                    "value": "flat_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reverse(flat_outputs, 1) if sequence_length is None else tf.reverse_sequence(flat_outputs, sequence_length, 1)",
                            "IfExp"
                        ]
                    ]
                },
                "seq_lengths": {
                    "value": "sequence_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "seq_axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_58": {
                "x": {
                    "value": "flatten(sequence_length, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int64",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "python/my/tensorflow/rnn_cell.py": {
        "tensorflow": {
            "cond_19": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "self.is_train",
                    "type": "Attribute",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : outputs_do",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : outputs",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "get_variable_scope_17": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cond_24": {
                "variable": {
                    "value": "new_state",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "self.is_train",
                    "type": "Attribute",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : new_state_do",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : new_state",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "slice_43": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, self._input_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_44": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, self._input_size]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_46": {
                "variable": {
                    "value": "prev_state",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reshape(state, [-1, B, d])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_47": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(tf.reshape(mask, [-1, B, B]), -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, 1, d]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_50": {
                "variable": {
                    "value": "prev_state",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "prev_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.reshape(state, [-1, B, d]), 1)",
                            "Call"
                        ],
                        [
                            "self._reduce_func(exp_mask(prev_state, mask), 2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(prev_state, [-1, d])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, d]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_103": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, self._input_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_104": {
                "variable": {
                    "value": "q_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, self._input_size]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, self._q_len]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_105": {
                "variable": {
                    "value": "qs",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, self._input_size + self._q_len]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_106": {
                "variable": {
                    "value": "qs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "qs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(inputs, [0, self._input_size + self._q_len], [-1, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(qs, [-1, self._q_len, self._input_size])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self._q_len, self._input_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_107": {
                "variable": {
                    "value": "x_tiled",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(x, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, self._q_len, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_108": {
                "variable": {
                    "value": "h_prev_tiled",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(h_prev, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, self._q_len, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tanh_109": {
                "variable": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "linear([qs, x_tiled, h_prev_tiled], self._input_size, True, scope='f')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_110": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "exp_mask(linear(f, 1, True, squeeze=True, scope='a'), q_mask)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_111": {
                "variable": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "qs * tf.expand_dims(a, -1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_112": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "[x, q]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_167": {
                "variable": {
                    "value": "tiled_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(inputs, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, _memory_size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_175": {
                "variable": {
                    "value": "in_",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "[tiled_inputs] + tiled_states + [memory]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tile_186": {
                "variable": {
                    "value": "tiled_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(inputs, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, _memory_size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_194": {
                "variable": {
                    "value": "in_",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "[tiled_inputs] + tiled_states + [memory]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_41": {
                "name_or_scope": {
                    "value": "scope or self.__class__.__name__",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "variable_scope_101": {
                "name_or_scope": {
                    "value": "scope or self.__class__.__name__",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "variable_scope_149": {
                "name_or_scope": {
                    "value": "scope or 'AttentionCell'",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "shape_45": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(inputs, [0, self._input_size], [-1, -1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(tf.reshape(mask, [-1, B, B]), -1), [1, 1, 1, d])",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reshape_46": {
                "tensor": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, B, d]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_47": {
                "input": {
                    "value": "tf.reshape(mask, [-1, B, B])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_107": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(inputs, [0, 0], [-1, self._input_size])",
                            "Call"
                        ],
                        [
                            "tf.slice(inputs, [0, 0], [-1, self._input_size])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_108": {
                "input": {
                    "value": "h_prev",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_166": {
                "input": {
                    "value": "memory",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "expand_dims_167": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_185": {
                "input": {
                    "value": "memory",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "expand_dims_186": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_209": {
                "values": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "[inputs, sel_mem]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_222": {
                "values": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "[inputs, sel_mem, inputs * sel_mem, tf.abs(inputs - sel_mem)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_47": {
                "tensor": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(inputs, [0, self._input_size], [-1, -1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(tf.reshape(mask, [-1, B, B]), -1), [1, 1, 1, d])",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, B, B]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_111": {
                "input": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(exp_mask(linear(f, 1, True, squeeze=True, scope='a'), q_mask))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tile_169": {
                "input": {
                    "value": "tf.expand_dims(each, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, _memory_size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_172": {
                "input": {
                    "value": "tf.expand_dims(state, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, _memory_size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_188": {
                "input": {
                    "value": "tf.expand_dims(each, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, _memory_size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_191": {
                "input": {
                    "value": "tf.expand_dims(state, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, _memory_size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cond_21": {
                "pred": {
                    "value": "self.is_train",
                    "type": "Attribute",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : new_state_do_i",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : new_state_i",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "expand_dims_169": {
                "input": {
                    "value": "each",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_172": {
                "input": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_188": {
                "input": {
                    "value": "each",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_191": {
                "input": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_222": {
                "x": {
                    "value": "inputs - sel_mem",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "python/train_mnli.py": {
        "tensorflow": {
            "FileWriter_132": {
                "variable": {
                    "value": "self.tb_writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logdir": {
                    "value": "config.tbpath",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_135": {
                "variable": {
                    "value": "self.init",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_137": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConfigProto_176": {
                "variable": {
                    "value": "sess_config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_178": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "config": {
                    "value": "sess_config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "trainable_variables_125": {
                "variable": {
                    "value": "tvars",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_by_global_norm_126": {
                "variable": {
                    "value": "(grads, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "tf.gradients(self.model.total_cost, tvars)",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "config.gradient_clip_value",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdadeltaOptimizer_127": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_378": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_441": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "gradients_126": {
                "ys": {
                    "value": "self.model.total_cost",
                    "type": "Attribute",
                    "possible_values": []
                },
                "xs": {
                    "value": "tvars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "python/train_quora.py": {
        "tensorflow": {
            "FileWriter_146": {
                "variable": {
                    "value": "self.tb_writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logdir": {
                    "value": "config.tbpath",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_149": {
                "variable": {
                    "value": "self.init",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_151": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConfigProto_218": {
                "variable": {
                    "value": "sess_config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_220": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "config": {
                    "value": "sess_config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "exponential_decay_111": {
                "variable": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "global_step": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "decay_steps": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                },
                "decay_rate": {
                    "value": "config.lr_decay_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "staircase": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "trainable_variables_118": {
                "variable": {
                    "value": "tvars",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_by_global_norm_119": {
                "variable": {
                    "value": "(grads, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "tf.gradients(self.model.total_cost, tvars)",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Session_382": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_447": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "scalar_112": {
                "name": {
                    "value": "learning_rate",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdagradOptimizer_121": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gradients_119": {
                "ys": {
                    "value": "self.model.total_cost",
                    "type": "Attribute",
                    "possible_values": []
                },
                "xs": {
                    "value": "tvars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                }
            },
            "AdadeltaOptimizer_124": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_130": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "python/util/blocks.py": {
        "tensorflow": {
            "sign_21": {
                "variable": {
                    "value": "populated",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.abs(sequence)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_22": {
                "variable": {
                    "value": "length",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(populated, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_23": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.expand_dims(populated, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_55": {
                "variable": {
                    "value": "length_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.one_hot(true_length - 1, max_length, on_value=1.0, off_value=0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_56": {
                "variable": {
                    "value": "last_output",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.multiply(output, length_mask)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_68": {
                "variable": {
                    "value": "denominator",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "numerator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(tf.subtract(scores, tf.reduce_max(scores, 1, keep_dims=True))) * mask",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "div_69": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "numerator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(tf.subtract(scores, tf.reduce_max(scores, 1, keep_dims=True))) * mask",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "denominator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(numerator, 1, keep_dims=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "bidirectional_dynamic_rnn_41": {
                "variable": {
                    "value": "(hidden_states, cell_states)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell_fw": {
                    "value": "lstm_fwd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.LSTMCell(num_units=dim)",
                            "Call"
                        ]
                    ]
                },
                "cell_bw": {
                    "value": "lstm_bwd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.LSTMCell(num_units=dim)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "sequence_length": {
                    "value": "seq_len",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "abs_21": {
                "x": {
                    "value": "sequence",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_sum_22": {
                "input_tensor": {
                    "value": "populated",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sign(tf.abs(sequence))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_23": {
                "input": {
                    "value": "populated",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sign(tf.abs(sequence))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "name_scope_35": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LSTMCell_37": {
                "variable": {
                    "value": "lstm_fwd",
                    "type": "variable",
                    "possible_values": []
                },
                "num_units": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LSTMCell_39": {
                "variable": {
                    "value": "lstm_bwd",
                    "type": "variable",
                    "possible_values": []
                },
                "num_units": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "one_hot_55": {
                "indices": {
                    "value": "true_length - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "depth": {
                    "value": "max_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(output.get_shape()[1])",
                            "Call"
                        ]
                    ]
                },
                "on_value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "off_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "multiply_56": {
                "x": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "length_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.one_hot(true_length - 1, max_length, on_value=1.0, off_value=0.0), -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_67": {
                "x": {
                    "value": "tf.subtract(scores, tf.reduce_max(scores, 1, keep_dims=True))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_36": {
                "name_or_scope": {
                    "value": "'forward' + name",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_38": {
                "name_or_scope": {
                    "value": "'backward' + name",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "subtract_67": {
                "x": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.reduce_max(scores, 1, keep_dims=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_max_67": {
                "input_tensor": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    }
}