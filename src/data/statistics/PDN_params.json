{
    "src/utils.py": {
        "sklearn": {
            "train_test_split_45": {
                "variable": {
                    "value": "(self._train_index, self._test_index)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "test_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "test_size",
                            "Method Argument"
                        ]
                    ]
                },
                "random_state": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seed",
                            "Method Argument"
                        ]
                    ]
                }
            }
        },
        "torch": {}
    },
    "src/main.py": {
        "torch": {
            "manual_seed_12": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/pdn.py": {
        "torch": {
            "Linear_10": {
                "variable": {
                    "value": "self.dense_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "edge_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset['edge_features']",
                            "Subscript"
                        ],
                        [
                            "edge_features",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "edge_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "edge_filters",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_11": {
                "variable": {
                    "value": "self.dense_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "edge_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "edge_filters",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_16": {
                "variable": {
                    "value": "edge_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.dense_1(edge_x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_17": {
                "variable": {
                    "value": "edge_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.dense_2(edge_x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_19": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.convolution_1(x, edge_index, edge_x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.convolution_2(x, edge_index, edge_x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dropout_20": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.convolution_1(x, edge_index, edge_x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.convolution_2(x, edge_index, edge_x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_43": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_softmax_22": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.convolution_1(x, edge_index, edge_x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.convolution_2(x, edge_index, edge_x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "nll_loss_51": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prediction[train_index]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "target[train_index]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    }
}