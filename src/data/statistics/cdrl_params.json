{
    "CDRL/a3c.py": {
        "tensorflow": {
            "Summary_140": {
                "variable": {
                    "value": "summary",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_186": {
                "device_name": {
                    "value": "tf.train.replica_device_setter(1, worker_device=worker_device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_189": {
                "variable": {
                    "value": "self.global_step[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_variable_193": {
                "variable": {
                    "value": "self.global_step[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_201": {
                "device_name": {
                    "value": "worker_device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'/job:worker/task:{}/cpu:0'.format(workerid)",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_254": {
                "variable": {
                    "value": "self.ac[ii]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, envs[ii].action_space.n]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "'ac' + str(ii)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_255": {
                "variable": {
                    "value": "self.adv[ii]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "'adv' + str(ii)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_256": {
                "variable": {
                    "value": "self.r[ii]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "'r' + str(ii)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_softmax_258": {
                "variable": {
                    "value": "log_prob_tf[ii]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "logits": {
                    "value": "pi[ii].logits",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_259": {
                "variable": {
                    "value": "prob_tf[ii]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "logits": {
                    "value": "pi[ii].logits",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "to_float_270": {
                "variable": {
                    "value": "bs[ii]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.shape(pi[ii].x)[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "gradients_283": {
                "variable": {
                    "value": "grads[ii]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ys": {
                    "value": "self.loss[ii]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "xs": {
                    "value": "pi[ii].var_list",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_global_norm_299": {
                "variable": {
                    "value": "(grads[ii], _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "grads[ii]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "40.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "group_303": {
                "variable": {
                    "value": "self.sync[ii]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "*[v1.assign(v2) for (v1, v2) in zipvars_lp]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "AdamOptimizer_309": {
                "variable": {
                    "value": "opt[ii]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "group_310": {
                "variable": {
                    "value": "self.train_op[ii]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "opt[ii].apply_gradients(grads_and_vars[ii])",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "self.inc_step[ii]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "placeholder_313": {
                "variable": {
                    "value": "self.target_logits[ii]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, envs[ii].action_space.n]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "target_logits",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_316": {
                "variable": {
                    "value": "soft_p_temperature[ii]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "logits": {
                    "value": "pi[ii].logits_fordistill",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_318": {
                "variable": {
                    "value": "soft_t_temperature[ii]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "logits": {
                    "value": "tf.truediv(self.target_logits[ii], Tao)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_320": {
                "variable": {
                    "value": "kl_loss[ii]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reduce_sum(soft_t_temperature[ii] * tf.log(1e-10 + tf.truediv(soft_t_temperature[ii], soft_p_temperature[ii])), 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gradients_323": {
                "variable": {
                    "value": "grads_kd[ii]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ys": {
                    "value": "kl_loss[ii]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "xs": {
                    "value": "pi[ii].var_list",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_global_norm_324": {
                "variable": {
                    "value": "(grads_kd[ii], _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "grads_kd[ii]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "40.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "AdamOptimizer_326": {
                "variable": {
                    "value": "optkd[ii]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "group_332": {
                "variable": {
                    "value": "self.sync_logits[ii]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "*[v1.assign(v2) for (v1, v2) in zipvars_lp]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "placeholder_334": {
                "variable": {
                    "value": "self.logits_stu[ii]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, envs[ii].action_space.n]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_335": {
                "variable": {
                    "value": "soft_student_logits[ii]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.logits_stu[ii]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "softmax_336": {
                "variable": {
                    "value": "soft_teacher_logits[ii]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.local_logitProjnet[ii].logits_out",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_337": {
                "variable": {
                    "value": "self.proj_loss[ii]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reduce_sum(soft_teacher_logits[ii] * tf.log(1e-10 + tf.truediv(soft_teacher_logits[ii], soft_student_logits[ii])), 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gradients_339": {
                "variable": {
                    "value": "grad_logproj[ii]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ys": {
                    "value": "proj_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "xs": {
                    "value": "self.local_logitProjnet[ii].var_list",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_global_norm_340": {
                "variable": {
                    "value": "(grad_logproj[ii], _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "grad_logproj[ii]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "40.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "AdamOptimizer_342": {
                "variable": {
                    "value": "optlgproj[ii]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "replica_device_setter_186": {
                "ps_tasks": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "worker_device": {
                    "value": "worker_device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'/job:worker/task:{}/cpu:0'.format(workerid)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_187": {
                "name_or_scope": {
                    "value": "'global' + str(0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_191": {
                "name_or_scope": {
                    "value": "'global' + str(1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_195": {
                "name_or_scope": {
                    "value": "globallogits0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_198": {
                "name_or_scope": {
                    "value": "globallogits1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_202": {
                "name_or_scope": {
                    "value": "'local' + str(0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_206": {
                "name_or_scope": {
                    "value": "'local' + str(1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_210": {
                "name_or_scope": {
                    "value": "local + logits0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_213": {
                "name_or_scope": {
                    "value": "local + logits1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_264": {
                "input_tensor": {
                    "value": "log_prob_tf[ii] * self.ac[ii]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_267": {
                "input_tensor": {
                    "value": "tf.square(pi[ii].vf - self.r[ii])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_268": {
                "input_tensor": {
                    "value": "prob_tf[ii] * log_prob_tf[ii]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "truediv_318": {
                "x": {
                    "value": "self.target_logits[ii]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "Tao",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "float"
                        ]
                    ]
                }
            },
            "reduce_sum_320": {
                "input_tensor": {
                    "value": "soft_t_temperature[ii] * tf.log(1e-10 + tf.truediv(soft_t_temperature[ii], soft_p_temperature[ii]))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_337": {
                "input_tensor": {
                    "value": "soft_teacher_logits[ii] * tf.log(1e-10 + tf.truediv(soft_teacher_logits[ii], soft_student_logits[ii]))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "square_267": {
                "x": {
                    "value": "pi[ii].vf - self.r[ii]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_270": {
                "input": {
                    "value": "pi[ii].x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_norm_289": {
                "t_list": {
                    "value": "grads[ii]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "global_norm_290": {
                "t_list": {
                    "value": "pi[ii].var_list",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_306": {
                "input": {
                    "value": "pi[ii].x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_321": {
                "x": {
                    "value": "1e-10 + tf.truediv(soft_t_temperature[ii], soft_p_temperature[ii])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_338": {
                "x": {
                    "value": "1e-10 + tf.truediv(soft_teacher_logits[ii], soft_student_logits[ii])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "truediv_321": {
                "x": {
                    "value": "soft_t_temperature[ii]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "soft_p_temperature[ii]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "truediv_338": {
                "x": {
                    "value": "soft_teacher_logits[ii]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "soft_student_logits[ii]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "CDRL/model.py": {
        "tensorflow": {
            "get_variable_37": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name + '/w'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[x.get_shape()[1], size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_38": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name + '/b'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(bias_init)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_43": {
                "variable": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.multinomial(logits - tf.reduce_max(logits, [1], keep_dims=True), 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_13": {
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.elu(conv2d(x, 32, 'l{}'.format(i + 1), [3, 3], [2, 2]))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(flatten(x), [0])",
                            "Call"
                        ],
                        [
                            "tf.reshape(lstm_outputs, [-1, size])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, np.prod(x.get_shape().as_list()[1:])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_30": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "filter_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[filter_size[0], filter_size[1], int(x.get_shape()[3]), num_filters]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.random_uniform_initializer(-w_bound, w_bound)",
                    "type": "Call",
                    "possible_values": []
                },
                "collections": {
                    "value": "collections",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_32": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 1, 1, num_filters]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collections": {
                    "value": "collections",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "one_hot_44": {
                "indices": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(tf.multinomial(logits - tf.reduce_max(logits, [1], keep_dims=True), 1), [1])",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "placeholder_50": {
                "variable": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, ac_space]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_collection_58": {
                "variable": {
                    "value": "self.var_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "tf.get_variable_scope().name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_62": {
                "variable": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None] + list(ob_space)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "expand_dims_67": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "flatten(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "BasicLSTMCell_70": {
                "variable": {
                    "value": "lstm",
                    "type": "variable",
                    "possible_values": []
                },
                "num_units": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "int"
                        ]
                    ]
                },
                "state_is_tuple": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "placeholder_77": {
                "variable": {
                    "value": "c_in",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, lstm.state_size.c]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_78": {
                "variable": {
                    "value": "h_in",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, lstm.state_size.h]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "LSTMStateTuple_81": {
                "variable": {
                    "value": "state_in",
                    "type": "variable",
                    "possible_values": []
                },
                "c": {
                    "value": "c_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [1, lstm.state_size.c])",
                            "Call"
                        ]
                    ]
                },
                "h": {
                    "value": "h_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [1, lstm.state_size.h])",
                            "Call"
                        ]
                    ]
                }
            },
            "dynamic_rnn_82": {
                "variable": {
                    "value": "(lstm_outputs, lstm_state)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell": {
                    "value": "lstm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.rnn_cell.BasicLSTMCell(size, state_is_tuple=True)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.elu(conv2d(x, 32, 'l{}'.format(i + 1), [3, 3], [2, 2]))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(flatten(x), [0])",
                            "Call"
                        ],
                        [
                            "tf.reshape(lstm_outputs, [-1, size])",
                            "Call"
                        ]
                    ]
                },
                "initial_state": {
                    "value": "state_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.rnn_cell.LSTMStateTuple(c_in, h_in)",
                            "Call"
                        ]
                    ]
                },
                "sequence_length": {
                    "value": "step_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(self.x)[:1]",
                            "Subscript"
                        ]
                    ]
                },
                "time_major": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reshape_86": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "lstm_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_89": {
                "variable": {
                    "value": "self.vf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "linear(x, 1, 'value', normalized_columns_initializer(1.0))",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_collection_92": {
                "variable": {
                    "value": "self.var_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "tf.get_variable_scope().name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_default_session_98": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_default_session_103": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_9": {
                "value": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.randn(*shape).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "out * (std / np.sqrt(np.square(out).sum(axis=0, keepdims=True)))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "variable_scope_16": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "matmul_40": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.elu(conv2d(x, 32, 'l{}'.format(i + 1), [3, 3], [2, 2]))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(flatten(x), [0])",
                            "Call"
                        ],
                        [
                            "tf.reshape(lstm_outputs, [-1, size])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('W', filter_shape, dtype, tf.random_uniform_initializer(-w_bound, w_bound), collections=collections)",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name + '/w', [x.get_shape()[1], size], initializer=initializer)",
                            "Call"
                        ]
                    ]
                }
            },
            "multinomial_43": {
                "logits": {
                    "value": "logits - tf.reduce_max(logits, [1], keep_dims=True)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_54": {
                "variable": {
                    "value": "fc",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.elu(conv2d(x, 32, 'l{}'.format(i + 1), [3, 3], [2, 2]))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(flatten(x), [0])",
                            "Call"
                        ],
                        [
                            "tf.reshape(lstm_outputs, [-1, size])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "slim.fully_connected",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "n_hiddens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[512, 512, 512, 512]",
                            "List"
                        ]
                    ]
                },
                "scope": {
                    "value": "logitsProjection",
                    "type": "str",
                    "possible_values": []
                }
            },
            "elu_65": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "conv2d(x, 32, 'l{}'.format(i + 1), [3, 3], [2, 2])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "random_uniform_initializer_30": {
                "minval": {
                    "value": "-w_bound",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "maxval": {
                    "value": "w_bound",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.sqrt(6.0 / (fan_in + fan_out))",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_34": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.elu(conv2d(x, 32, 'l{}'.format(i + 1), [3, 3], [2, 2]))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(flatten(x), [0])",
                            "Call"
                        ],
                        [
                            "tf.reshape(lstm_outputs, [-1, size])",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('W', filter_shape, dtype, tf.random_uniform_initializer(-w_bound, w_bound), collections=collections)",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name + '/w', [x.get_shape()[1], size], initializer=initializer)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "stride_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1, stride[0], stride[1], 1]",
                            "List"
                        ]
                    ]
                },
                "padding": {
                    "value": "pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'SAME'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "constant_initializer_38": {
                "value": {
                    "value": "bias_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_72": {
                "input": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_max_43": {
                "input_tensor": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_variable_scope_58": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_scope_92": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "CDRL/train.py": {
        "tensorflow": {}
    },
    "CDRL/worker.py": {
        "tensorflow": {}
    },
    "heterogeneousTransfer/a3c.py": {
        "tensorflow": {
            "group_312": {
                "variable": {
                    "value": "self.sync_logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "*[v1.assign(v2) for (v1, v2) in zipvars]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "placeholder_314": {
                "variable": {
                    "value": "self.logits_stu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, envs[1].action_space.n]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_315": {
                "variable": {
                    "value": "soft_student_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.logits_stu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_316": {
                "variable": {
                    "value": "soft_teacher_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.local_logitProjnet.logits_out",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_317": {
                "variable": {
                    "value": "self.proj_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reduce_sum(soft_teacher_logits * tf.log(1e-12 + tf.truediv(soft_teacher_logits, soft_student_logits)), 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gradients_319": {
                "variable": {
                    "value": "grad_logproj",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "proj_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "xs": {
                    "value": "self.local_logitProjnet.var_list",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_global_norm_320": {
                "variable": {
                    "value": "(grad_logproj, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "grad_logproj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gradients(proj_loss, self.local_logitProjnet.var_list)",
                            "Call"
                        ]
                    ]
                },
                "clip_norm": {
                    "value": "40.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "AdamOptimizer_322": {
                "variable": {
                    "value": "optlgproj",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Summary_140": {
                "variable": {
                    "value": "summary",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_183": {
                "device_name": {
                    "value": "tf.train.replica_device_setter(1, worker_device=worker_device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_186": {
                "variable": {
                    "value": "self.global_step[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_variable_190": {
                "variable": {
                    "value": "self.global_step[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_195": {
                "device_name": {
                    "value": "worker_device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'/job:worker/task:{}/cpu:0'.format(workerid)",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_236": {
                "variable": {
                    "value": "self.ac[ii]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, envs[ii].action_space.n]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "'ac' + str(ii)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_237": {
                "variable": {
                    "value": "self.adv[ii]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "'adv' + str(ii)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_238": {
                "variable": {
                    "value": "self.r[ii]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "'r' + str(ii)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_softmax_240": {
                "variable": {
                    "value": "log_prob_tf[ii]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "logits": {
                    "value": "pi[ii].logits",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_241": {
                "variable": {
                    "value": "prob_tf[ii]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "logits": {
                    "value": "pi[ii].logits",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "to_float_252": {
                "variable": {
                    "value": "bs[ii]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.shape(pi[ii].x)[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "gradients_264": {
                "variable": {
                    "value": "grads[ii]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ys": {
                    "value": "self.loss[ii]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "xs": {
                    "value": "pi[ii].var_list",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_global_norm_280": {
                "variable": {
                    "value": "(grads[ii], _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "grads[ii]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "40.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "group_284": {
                "variable": {
                    "value": "self.sync[ii]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "*[v1.assign(v2) for (v1, v2) in zipvars]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "AdamOptimizer_290": {
                "variable": {
                    "value": "opt[ii]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "group_291": {
                "variable": {
                    "value": "self.train_op[ii]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "opt[ii].apply_gradients(grads_and_vars[ii])",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "self.inc_step[ii]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "placeholder_294": {
                "variable": {
                    "value": "self.target_logits[ii]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, envs[ii].action_space.n]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "target_logits",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_296": {
                "variable": {
                    "value": "soft_p_temperature[ii]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "logits": {
                    "value": "pi[ii].logits_fordistill",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_298": {
                "variable": {
                    "value": "soft_t_temperature[ii]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "logits": {
                    "value": "tf.truediv(self.target_logits[ii], Tao)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_300": {
                "variable": {
                    "value": "kl_loss[ii]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reduce_sum(soft_t_temperature[ii] * tf.log(1e-12 + tf.truediv(soft_t_temperature[ii], soft_p_temperature[ii])), 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gradients_303": {
                "variable": {
                    "value": "grads_kd[ii]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ys": {
                    "value": "kl_loss[ii]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "xs": {
                    "value": "pi[ii].var_list",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_global_norm_304": {
                "variable": {
                    "value": "(grads_kd[ii], _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "grads_kd[ii]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "40.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "AdamOptimizer_306": {
                "variable": {
                    "value": "optkd[ii]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "replica_device_setter_183": {
                "ps_tasks": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "worker_device": {
                    "value": "worker_device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'/job:worker/task:{}/cpu:0'.format(workerid)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_184": {
                "name_or_scope": {
                    "value": "'global' + str(0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_188": {
                "name_or_scope": {
                    "value": "'global' + str(1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_192": {
                "name_or_scope": {
                    "value": "globallogits",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_196": {
                "name_or_scope": {
                    "value": "'local' + str(0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_200": {
                "name_or_scope": {
                    "value": "'local' + str(1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_204": {
                "name_or_scope": {
                    "value": "local + logits",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_317": {
                "input_tensor": {
                    "value": "soft_teacher_logits * tf.log(1e-12 + tf.truediv(soft_teacher_logits, soft_student_logits))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_246": {
                "input_tensor": {
                    "value": "log_prob_tf[ii] * self.ac[ii]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_249": {
                "input_tensor": {
                    "value": "tf.square(pi[ii].vf - self.r[ii])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_250": {
                "input_tensor": {
                    "value": "prob_tf[ii] * log_prob_tf[ii]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "truediv_298": {
                "x": {
                    "value": "self.target_logits[ii]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "Tao",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "float"
                        ]
                    ]
                }
            },
            "reduce_sum_300": {
                "input_tensor": {
                    "value": "soft_t_temperature[ii] * tf.log(1e-12 + tf.truediv(soft_t_temperature[ii], soft_p_temperature[ii]))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "square_249": {
                "x": {
                    "value": "pi[ii].vf - self.r[ii]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_252": {
                "input": {
                    "value": "pi[ii].x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_norm_270": {
                "t_list": {
                    "value": "grads[ii]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "global_norm_271": {
                "t_list": {
                    "value": "pi[ii].var_list",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_287": {
                "input": {
                    "value": "pi[ii].x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_318": {
                "x": {
                    "value": "1e-12 + tf.truediv(soft_teacher_logits, soft_student_logits)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_301": {
                "x": {
                    "value": "1e-12 + tf.truediv(soft_t_temperature[ii], soft_p_temperature[ii])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "truediv_318": {
                "x": {
                    "value": "soft_teacher_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(self.local_logitProjnet.logits_out)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "soft_student_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(self.logits_stu)",
                            "Call"
                        ]
                    ]
                }
            },
            "truediv_301": {
                "x": {
                    "value": "soft_t_temperature[ii]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "soft_p_temperature[ii]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "heterogeneousTransfer/model.py": {
        "tensorflow": {
            "get_variable_37": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name + '/w'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[x.get_shape()[1], size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_38": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name + '/b'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(bias_init)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_43": {
                "variable": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.multinomial(logits - tf.reduce_max(logits, [1], keep_dims=True), 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_13": {
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.elu(conv2d(x, 32, 'l{}'.format(i + 1), [3, 3], [2, 2]))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(flatten(x), [0])",
                            "Call"
                        ],
                        [
                            "tf.reshape(lstm_outputs, [-1, size])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, np.prod(x.get_shape().as_list()[1:])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_30": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "filter_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[filter_size[0], filter_size[1], int(x.get_shape()[3]), num_filters]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.random_uniform_initializer(-w_bound, w_bound)",
                    "type": "Call",
                    "possible_values": []
                },
                "collections": {
                    "value": "collections",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_32": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 1, 1, num_filters]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collections": {
                    "value": "collections",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "one_hot_44": {
                "indices": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(tf.multinomial(logits - tf.reduce_max(logits, [1], keep_dims=True), 1), [1])",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "placeholder_50": {
                "variable": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, ac_space]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_collection_58": {
                "variable": {
                    "value": "self.var_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "tf.get_variable_scope().name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_62": {
                "variable": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None] + list(ob_space)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "expand_dims_67": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "flatten(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "BasicLSTMCell_70": {
                "variable": {
                    "value": "lstm",
                    "type": "variable",
                    "possible_values": []
                },
                "num_units": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "int"
                        ]
                    ]
                },
                "state_is_tuple": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "placeholder_77": {
                "variable": {
                    "value": "c_in",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, lstm.state_size.c]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_78": {
                "variable": {
                    "value": "h_in",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, lstm.state_size.h]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "LSTMStateTuple_81": {
                "variable": {
                    "value": "state_in",
                    "type": "variable",
                    "possible_values": []
                },
                "c": {
                    "value": "c_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [1, lstm.state_size.c])",
                            "Call"
                        ]
                    ]
                },
                "h": {
                    "value": "h_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [1, lstm.state_size.h])",
                            "Call"
                        ]
                    ]
                }
            },
            "dynamic_rnn_82": {
                "variable": {
                    "value": "(lstm_outputs, lstm_state)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell": {
                    "value": "lstm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.rnn_cell.BasicLSTMCell(size, state_is_tuple=True)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.elu(conv2d(x, 32, 'l{}'.format(i + 1), [3, 3], [2, 2]))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(flatten(x), [0])",
                            "Call"
                        ],
                        [
                            "tf.reshape(lstm_outputs, [-1, size])",
                            "Call"
                        ]
                    ]
                },
                "initial_state": {
                    "value": "state_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.rnn_cell.LSTMStateTuple(c_in, h_in)",
                            "Call"
                        ]
                    ]
                },
                "sequence_length": {
                    "value": "step_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(self.x)[:1]",
                            "Subscript"
                        ]
                    ]
                },
                "time_major": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reshape_86": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "lstm_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_89": {
                "variable": {
                    "value": "self.vf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "linear(x, 1, 'value', normalized_columns_initializer(1.0))",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_collection_92": {
                "variable": {
                    "value": "self.var_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "tf.get_variable_scope().name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_default_session_98": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_default_session_103": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_9": {
                "value": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.randn(*shape).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "out * (std / np.sqrt(np.square(out).sum(axis=0, keepdims=True)))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "variable_scope_16": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "matmul_40": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.elu(conv2d(x, 32, 'l{}'.format(i + 1), [3, 3], [2, 2]))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(flatten(x), [0])",
                            "Call"
                        ],
                        [
                            "tf.reshape(lstm_outputs, [-1, size])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('W', filter_shape, dtype, tf.random_uniform_initializer(-w_bound, w_bound), collections=collections)",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name + '/w', [x.get_shape()[1], size], initializer=initializer)",
                            "Call"
                        ]
                    ]
                }
            },
            "multinomial_43": {
                "logits": {
                    "value": "logits - tf.reduce_max(logits, [1], keep_dims=True)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_54": {
                "variable": {
                    "value": "fc",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.elu(conv2d(x, 32, 'l{}'.format(i + 1), [3, 3], [2, 2]))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(flatten(x), [0])",
                            "Call"
                        ],
                        [
                            "tf.reshape(lstm_outputs, [-1, size])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "slim.fully_connected",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "n_hiddens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[512, 512, 512, 512]",
                            "List"
                        ]
                    ]
                },
                "scope": {
                    "value": "logitsProjection",
                    "type": "str",
                    "possible_values": []
                }
            },
            "elu_65": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "conv2d(x, 32, 'l{}'.format(i + 1), [3, 3], [2, 2])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "random_uniform_initializer_30": {
                "minval": {
                    "value": "-w_bound",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "maxval": {
                    "value": "w_bound",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.sqrt(6.0 / (fan_in + fan_out))",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_34": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.elu(conv2d(x, 32, 'l{}'.format(i + 1), [3, 3], [2, 2]))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(flatten(x), [0])",
                            "Call"
                        ],
                        [
                            "tf.reshape(lstm_outputs, [-1, size])",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('W', filter_shape, dtype, tf.random_uniform_initializer(-w_bound, w_bound), collections=collections)",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name + '/w', [x.get_shape()[1], size], initializer=initializer)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "stride_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1, stride[0], stride[1], 1]",
                            "List"
                        ]
                    ]
                },
                "padding": {
                    "value": "pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'SAME'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "constant_initializer_38": {
                "value": {
                    "value": "bias_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_72": {
                "input": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_max_43": {
                "input_tensor": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_variable_scope_58": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_scope_92": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "heterogeneousTransfer/train.py": {
        "tensorflow": {}
    },
    "heterogeneousTransfer/worker.py": {
        "tensorflow": {}
    }
}