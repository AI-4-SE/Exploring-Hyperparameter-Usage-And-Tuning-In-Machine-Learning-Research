{
    "src/scruples/baselines/labels.py": {
        "sklearn": {
            "Pipeline_9": {
                "variable": {
                    "value": "PriorBaseline",
                    "type": "Variable",
                    "possible_values": []
                },
                "steps": {
                    "value": "[('classifier', DummyClassifier(strategy='prior'))]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Pipeline_20": {
                "variable": {
                    "value": "StratifiedBaseline",
                    "type": "Variable",
                    "possible_values": []
                },
                "steps": {
                    "value": "[('classifier', DummyClassifier(strategy='stratified'))]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "DummyClassifier_10": {
                "strategy": {
                    "value": "prior",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DummyClassifier_21": {
                "strategy": {
                    "value": "stratified",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "src/scruples/baselines/linear.py": {
        "sklearn": {
            "Pipeline_15": {
                "variable": {
                    "value": "LogisticRegressionBaseline",
                    "type": "Variable",
                    "possible_values": []
                },
                "steps": {
                    "value": "[('concatenator', FunctionTransformer(func=utils.concat_title_and_text, validate=False)), ('vectorizer', CountVectorizer(input='content', encoding='utf-8', decode_error='strict', preprocessor=None, tokenizer=None, token_pattern='(?u)\\\\b\\\\w\\\\w+\\\\b', max_features=None, vocabulary=None)), ('tfidf', TfidfTransformer(smooth_idf=True)), ('scaler', MaxAbsScaler()), ('classifier', LogisticRegression(penalty='l2', dual=False, tol=0.0001, intercept_scaling=1.0, solver='lbfgs', max_iter=100, warm_start=True))]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Pipeline_80": {
                "variable": {
                    "value": "LogisticRankerBaseline",
                    "type": "Variable",
                    "possible_values": []
                },
                "steps": {
                    "value": "[('featurizer', utils.ResourceTransformer(transformer=Pipeline([('vectorizer', CountVectorizer(input='content', encoding='utf-8', decode_error='featurizer', preprocessor=None, tokenizer=None, token_pattern='(?u)\\\\b\\\\w\\\\w+\\\\b', max_features=None, vocabulary=None)), ('tfidf', TfidfTransformer(smooth_idf=True)), ('scaler', MaxAbsScaler())]))), ('classifier', LogisticRegression(penalty='l2', dual=False, tol=0.0001, fit_intercept=False, intercept_scaling=1.0, solver='lbfgs', max_iter=100, warm_start=True))]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "FunctionTransformer_18": {
                "func": {
                    "value": "utils.concat_title_and_text",
                    "type": "Attribute",
                    "possible_values": []
                },
                "validate": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "CountVectorizer_22": {
                "input": {
                    "value": "content",
                    "type": "str",
                    "possible_values": []
                },
                "encoding": {
                    "value": "utf-8",
                    "type": "str",
                    "possible_values": []
                },
                "decode_error": {
                    "value": "strict",
                    "type": "str",
                    "possible_values": []
                },
                "preprocessor": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "tokenizer": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "token_pattern": {
                    "value": "(?u)\\\\b\\\\w\\\\w+\\\\b",
                    "type": "str",
                    "possible_values": []
                },
                "max_features": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "vocabulary": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "TfidfTransformer_34": {
                "smooth_idf": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxAbsScaler_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LogisticRegression_42": {
                "penalty": {
                    "value": "l2",
                    "type": "str",
                    "possible_values": []
                },
                "dual": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "tol": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "intercept_scaling": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "solver": {
                    "value": "lbfgs",
                    "type": "str",
                    "possible_values": []
                },
                "max_iter": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "warm_start": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LogisticRegression_109": {
                "penalty": {
                    "value": "l2",
                    "type": "str",
                    "possible_values": []
                },
                "dual": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "tol": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "fit_intercept": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "intercept_scaling": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "solver": {
                    "value": "lbfgs",
                    "type": "str",
                    "possible_values": []
                },
                "max_iter": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "warm_start": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Pipeline_84": {
                "steps": {
                    "value": "[('vectorizer', CountVectorizer(input='content', encoding='utf-8', decode_error='featurizer', preprocessor=None, tokenizer=None, token_pattern='(?u)\\\\b\\\\w\\\\w+\\\\b', max_features=None, vocabulary=None)), ('tfidf', TfidfTransformer(smooth_idf=True)), ('scaler', MaxAbsScaler())]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "CountVectorizer_87": {
                "input": {
                    "value": "content",
                    "type": "str",
                    "possible_values": []
                },
                "encoding": {
                    "value": "utf-8",
                    "type": "str",
                    "possible_values": []
                },
                "decode_error": {
                    "value": "featurizer",
                    "type": "str",
                    "possible_values": []
                },
                "preprocessor": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "tokenizer": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "token_pattern": {
                    "value": "(?u)\\\\b\\\\w\\\\w+\\\\b",
                    "type": "str",
                    "possible_values": []
                },
                "max_features": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "vocabulary": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "TfidfTransformer_99": {
                "smooth_idf": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxAbsScaler_103": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/scruples/baselines/metrics.py": {
        "sklearn": {
            "precision_score_25": {
                "y_true": {
                    "value": "y_true",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "average": {
                    "value": "micro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "recall_score_36": {
                "y_true": {
                    "value": "y_true",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "average": {
                    "value": "micro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "f1_score_47": {
                "y_true": {
                    "value": "y_true",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "average": {
                    "value": "micro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "precision_score_58": {
                "y_true": {
                    "value": "y_true",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "recall_score_69": {
                "y_true": {
                    "value": "y_true",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "f1_score_80": {
                "y_true": {
                    "value": "y_true",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "f1_score_91": {
                "y_true": {
                    "value": "y_true",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "average": {
                    "value": "weighted",
                    "type": "str",
                    "possible_values": []
                }
            },
            "log_loss_102": {
                "y_true": {
                    "value": "y_true",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-09",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "src/scruples/baselines/naivebayes.py": {
        "sklearn": {
            "Pipeline_16": {
                "variable": {
                    "value": "BernoulliNBBaseline",
                    "type": "Variable",
                    "possible_values": []
                },
                "steps": {
                    "value": "[('concatenator', FunctionTransformer(func=utils.concat_title_and_text, validate=False)), ('vectorizer', CountVectorizer(input='content', encoding='utf-8', decode_error='strict', preprocessor=None, tokenizer=None, token_pattern='(?u)\\\\b\\\\w\\\\w+\\\\b', max_features=None, vocabulary=None, binary=True)), ('classifier', BernoulliNB(binarize=None, fit_prior=True))]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Pipeline_60": {
                "variable": {
                    "value": "MultinomialNBBaseline",
                    "type": "Variable",
                    "possible_values": []
                },
                "steps": {
                    "value": "[('concatenator', FunctionTransformer(func=utils.concat_title_and_text, validate=False)), ('vectorizer', CountVectorizer(input='content', encoding='utf-8', decode_error='strict', preprocessor=None, tokenizer=None, token_pattern='(?u)\\\\b\\\\w\\\\w+\\\\b', max_features=None, vocabulary=None, binary=False)), ('classifier', MultinomialNB(fit_prior=True))]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Pipeline_104": {
                "variable": {
                    "value": "ComplementNBBaseline",
                    "type": "Variable",
                    "possible_values": []
                },
                "steps": {
                    "value": "[('concatenator', FunctionTransformer(func=utils.concat_title_and_text, validate=False)), ('vectorizer', CountVectorizer(input='content', encoding='utf-8', decode_error='strict', preprocessor=None, tokenizer=None, token_pattern='(?u)\\\\b\\\\w\\\\w+\\\\b', max_features=None, vocabulary=None, binary=False)), ('classifier', ComplementNB(fit_prior=True))]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "FunctionTransformer_19": {
                "func": {
                    "value": "utils.concat_title_and_text",
                    "type": "Attribute",
                    "possible_values": []
                },
                "validate": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "CountVectorizer_23": {
                "input": {
                    "value": "content",
                    "type": "str",
                    "possible_values": []
                },
                "encoding": {
                    "value": "utf-8",
                    "type": "str",
                    "possible_values": []
                },
                "decode_error": {
                    "value": "strict",
                    "type": "str",
                    "possible_values": []
                },
                "preprocessor": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "tokenizer": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "token_pattern": {
                    "value": "(?u)\\\\b\\\\w\\\\w+\\\\b",
                    "type": "str",
                    "possible_values": []
                },
                "max_features": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "vocabulary": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "binary": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BernoulliNB_36": {
                "binarize": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "fit_prior": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "FunctionTransformer_63": {
                "func": {
                    "value": "utils.concat_title_and_text",
                    "type": "Attribute",
                    "possible_values": []
                },
                "validate": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "CountVectorizer_67": {
                "input": {
                    "value": "content",
                    "type": "str",
                    "possible_values": []
                },
                "encoding": {
                    "value": "utf-8",
                    "type": "str",
                    "possible_values": []
                },
                "decode_error": {
                    "value": "strict",
                    "type": "str",
                    "possible_values": []
                },
                "preprocessor": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "tokenizer": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "token_pattern": {
                    "value": "(?u)\\\\b\\\\w\\\\w+\\\\b",
                    "type": "str",
                    "possible_values": []
                },
                "max_features": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "vocabulary": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "binary": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MultinomialNB_80": {
                "fit_prior": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "FunctionTransformer_107": {
                "func": {
                    "value": "utils.concat_title_and_text",
                    "type": "Attribute",
                    "possible_values": []
                },
                "validate": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "CountVectorizer_111": {
                "input": {
                    "value": "content",
                    "type": "str",
                    "possible_values": []
                },
                "encoding": {
                    "value": "utf-8",
                    "type": "str",
                    "possible_values": []
                },
                "decode_error": {
                    "value": "strict",
                    "type": "str",
                    "possible_values": []
                },
                "preprocessor": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "tokenizer": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "token_pattern": {
                    "value": "(?u)\\\\b\\\\w\\\\w+\\\\b",
                    "type": "str",
                    "possible_values": []
                },
                "max_features": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "vocabulary": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "binary": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ComplementNB_124": {
                "fit_prior": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "src/scruples/baselines/style.py": {
        "sklearn": {
            "Pipeline_315": {
                "variable": {
                    "value": "StylisticXGBoostBaseline",
                    "type": "Variable",
                    "possible_values": []
                },
                "steps": {
                    "value": "[('featurizer', ColumnTransformer([('title_style', StyleFeaturizer(), 'title'), ('text_style', StyleFeaturizer(), 'text')], remainder='drop')), ('classifier', XGBClassifier(n_estimators=100, verbosity=0, objective='multi:softprob', booster='gbtree', n_jobs=1, max_delta_step=0, colsample_bylevel=1.0, colsample_bynode=1.0))]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Pipeline_365": {
                "variable": {
                    "value": "FewestWordsBaseline",
                    "type": "Variable",
                    "possible_values": []
                },
                "steps": {
                    "value": "[('classifier', LengthRanker(choose='shortest', length='words'))]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Pipeline_373": {
                "variable": {
                    "value": "MostWordsBaseline",
                    "type": "Variable",
                    "possible_values": []
                },
                "steps": {
                    "value": "[('classifier', LengthRanker(choose='longest', length='words'))]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Pipeline_381": {
                "variable": {
                    "value": "FewestCharactersBaseline",
                    "type": "Variable",
                    "possible_values": []
                },
                "steps": {
                    "value": "[('classifier', LengthRanker(choose='shortest', length='characters'))]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Pipeline_389": {
                "variable": {
                    "value": "MostCharactersBaseline",
                    "type": "Variable",
                    "possible_values": []
                },
                "steps": {
                    "value": "[('classifier', LengthRanker(choose='longest', length='characters'))]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Pipeline_400": {
                "variable": {
                    "value": "StyleRankerBaseline",
                    "type": "Variable",
                    "possible_values": []
                },
                "steps": {
                    "value": "[('featurizer', utils.ResourceTransformer(transformer=Pipeline([('featurizer', StyleFeaturizer()), ('scaler', MaxAbsScaler())]))), ('classifier', LogisticRegression(penalty='l2', dual=False, tol=0.0001, fit_intercept=False, intercept_scaling=1.0, solver='lbfgs', max_iter=100, warm_start=True))]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "check_is_fitted_244": {
                "estimator": {
                    "value": "self",
                    "type": "Variable",
                    "possible_values": []
                },
                "attributes": {
                    "value": "_fitted",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ColumnTransformer_318": {
                "transformers": {
                    "value": "[('title_style', StyleFeaturizer(), 'title'), ('text_style', StyleFeaturizer(), 'text')]",
                    "type": "List",
                    "possible_values": []
                },
                "remainder": {
                    "value": "drop",
                    "type": "str",
                    "possible_values": []
                }
            },
            "LogisticRegression_417": {
                "penalty": {
                    "value": "l2",
                    "type": "str",
                    "possible_values": []
                },
                "dual": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "tol": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "fit_intercept": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "intercept_scaling": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "solver": {
                    "value": "lbfgs",
                    "type": "str",
                    "possible_values": []
                },
                "max_iter": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "warm_start": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Pipeline_404": {
                "steps": {
                    "value": "[('featurizer', StyleFeaturizer()), ('scaler', MaxAbsScaler())]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "MaxAbsScaler_411": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/scruples/baselines/trees.py": {
        "sklearn": {
            "Pipeline_15": {
                "variable": {
                    "value": "RandomForestBaseline",
                    "type": "Variable",
                    "possible_values": []
                },
                "steps": {
                    "value": "[('concatenator', FunctionTransformer(func=utils.concat_title_and_text, validate=False)), ('vectorizer', CountVectorizer(input='content', encoding='utf-8', decode_error='strict', preprocessor=None, tokenizer=None, token_pattern='(?u)\\\\b\\\\w\\\\w+\\\\b', max_features=None, vocabulary=None)), ('tfidf', TfidfTransformer(smooth_idf=True)), ('classifier', RandomForestClassifier(n_estimators=100, max_depth=None, max_features='auto', max_leaf_nodes=None, min_impurity_decrease=0.0, oob_score=False, n_jobs=1, verbose=0, warm_start=False))]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "FunctionTransformer_18": {
                "func": {
                    "value": "utils.concat_title_and_text",
                    "type": "Attribute",
                    "possible_values": []
                },
                "validate": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "CountVectorizer_22": {
                "input": {
                    "value": "content",
                    "type": "str",
                    "possible_values": []
                },
                "encoding": {
                    "value": "utf-8",
                    "type": "str",
                    "possible_values": []
                },
                "decode_error": {
                    "value": "strict",
                    "type": "str",
                    "possible_values": []
                },
                "preprocessor": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "tokenizer": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "token_pattern": {
                    "value": "(?u)\\\\b\\\\w\\\\w+\\\\b",
                    "type": "str",
                    "possible_values": []
                },
                "max_features": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "vocabulary": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "TfidfTransformer_34": {
                "smooth_idf": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "RandomForestClassifier_38": {
                "n_estimators": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "max_depth": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "max_features": {
                    "value": "auto",
                    "type": "str",
                    "possible_values": []
                },
                "max_leaf_nodes": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "min_impurity_decrease": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "oob_score": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "n_jobs": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "verbose": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "warm_start": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "src/scruples/baselines/utils.py": {
        "sklearn": {
            "check_is_fitted_154": {
                "estimator": {
                    "value": "self",
                    "type": "Variable",
                    "possible_values": []
                },
                "attributes": {
                    "value": "_fitted",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "src/scruples/demos/scoracle/app.py": {
        "sklearn": {}
    },
    "src/scruples/scripts/analyze/corpus/extractions.py": {
        "sklearn": {
            "classification_report_395": {
                "y_true": {
                    "value": "comment_annotation_spam",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "['spam' if annotation['spam'] else 'ham' for (_, annotation) in comment_and_annotations]",
                            "ListComp"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "comment_spam",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "['spam' if comment.is_spam or comment.label is None else 'ham' for (comment, _) in comment_and_annotations]",
                            "ListComp"
                        ]
                    ]
                },
                "labels": {
                    "value": "['spam', 'ham']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "classification_report_403": {
                "y_true": {
                    "value": "comment_annotation_explicit_label",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[annotation['label'] or 'null' for (_, annotation) in comment_and_annotations if not annotation['spam'] and (not annotation['implied'])]",
                            "ListComp"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "comment_explicit_label",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[getattr(comment.label, 'name', 'null') for (comment, annotation) in comment_and_annotations if not annotation['spam'] and (not annotation['implied'])]",
                            "ListComp"
                        ]
                    ]
                },
                "labels": {
                    "value": "label_names",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[label.name for label in Label]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "classification_report_412": {
                "y_true": {
                    "value": "comment_annotation_all_label",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[annotation['label'] or 'null' for (_, annotation) in comment_and_annotations if not annotation['spam']]",
                            "ListComp"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "comment_all_label",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[getattr(comment.label, 'name', 'null') for (comment, annotation) in comment_and_annotations if not annotation['spam']]",
                            "ListComp"
                        ]
                    ]
                },
                "labels": {
                    "value": "label_names",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[label.name for label in Label]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "classification_report_441": {
                "y_true": {
                    "value": "post_annotation_spam",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "['spam' if annotation['spam'] else 'ham' for (_, annotation) in post_and_annotations]",
                            "ListComp"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "post_spam",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "['spam' if post.is_spam or post.post_type is None else 'ham' for (post, _) in post_and_annotations]",
                            "ListComp"
                        ]
                    ]
                },
                "labels": {
                    "value": "['spam', 'ham']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "classification_report_449": {
                "y_true": {
                    "value": "post_annotation_explicit_post_type",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[annotation['post_type'] or 'null' for (_, annotation) in post_and_annotations if not annotation['spam'] and (not annotation['implied'])]",
                            "ListComp"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "post_explicit_post_type",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[getattr(post.post_type, 'name', 'null') for (post, annotation) in post_and_annotations if not annotation['spam'] and (not annotation['implied'])]",
                            "ListComp"
                        ]
                    ]
                },
                "labels": {
                    "value": "post_types",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[post_type.name for post_type in PostType]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "classification_report_458": {
                "y_true": {
                    "value": "post_annotation_all_post_type",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[annotation['post_type'] or 'null' for (_, annotation) in post_and_annotations if not annotation['spam']]",
                            "ListComp"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "post_all_post_type",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[getattr(post.post_type, 'name', 'null') for (post, annotation) in post_and_annotations if not annotation['spam']]",
                            "ListComp"
                        ]
                    ]
                },
                "labels": {
                    "value": "post_types",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[post_type.name for post_type in PostType]",
                            "ListComp"
                        ]
                    ]
                }
            }
        }
    },
    "src/scruples/scripts/analyze/corpus/predictions.py": {
        "sklearn": {
            "classification_report_198": {
                "variable": {
                    "value": "classification_report",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "dataset_labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[label for (label, _) in dataset_labels_and_label_scores]",
                            "ListComp"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "predicted_labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[label for (label, _) in predicted_labels_and_label_scores]",
                            "ListComp"
                        ]
                    ]
                },
                "labels": {
                    "value": "label_names",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[label.name for label in Label]",
                            "ListComp"
                        ]
                    ]
                }
            }
        }
    },
    "src/scruples/scripts/analyze/oracle_estimator.py": {
        "sklearn": {
            "f1_score_29": {
                "y_pred": {
                    "value": "y_pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true",
                    "type": "Variable",
                    "possible_values": []
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "src/scruples/scripts/analyze/resource/predictions.py": {
        "sklearn": {
            "classification_report_197": {
                "variable": {
                    "value": "classification_report",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "[str(label) for label in dataset_labels]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "[str(label) for label in predicted_labels]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "labels": {
                    "value": "label_names",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "['0', '1']",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "src/scruples/scripts/analyze/resource/topics.py": {
        "sklearn": {
            "Pipeline_46": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "steps": {
                    "value": "[('vectorizer', CountVectorizer(input='content', encoding='utf-8', decode_error='strict', strip_accents=None, lowercase=True, preprocessor=None, tokenizer=None, stop_words='english', token_pattern='(?u)\\\\b\\\\w\\\\w+\\\\b', ngram_range=(1, 1), analyzer='word', max_df=1.0, min_df=2, max_features=None, vocabulary=None, binary=False)), ('topic_model', LatentDirichletAllocation(n_components=N_COMPONENTS))]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "CountVectorizer_49": {
                "input": {
                    "value": "content",
                    "type": "str",
                    "possible_values": []
                },
                "encoding": {
                    "value": "utf-8",
                    "type": "str",
                    "possible_values": []
                },
                "decode_error": {
                    "value": "strict",
                    "type": "str",
                    "possible_values": []
                },
                "strip_accents": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "lowercase": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "preprocessor": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "tokenizer": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "stop_words": {
                    "value": "english",
                    "type": "str",
                    "possible_values": []
                },
                "token_pattern": {
                    "value": "(?u)\\\\b\\\\w\\\\w+\\\\b",
                    "type": "str",
                    "possible_values": []
                },
                "ngram_range": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "analyzer": {
                    "value": "word",
                    "type": "str",
                    "possible_values": []
                },
                "max_df": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "min_df": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "max_features": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "vocabulary": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "binary": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LatentDirichletAllocation_70": {
                "n_components": {
                    "value": "N_COMPONENTS",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "5",
                            "Constant"
                        ]
                    ]
                }
            }
        }
    },
    "src/scruples/scripts/evaluate/corpus/run_shallow.py": {
        "sklearn": {
            "make_scorer_113": {
                "score_func": {
                    "value": "METRICS[metric][1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "src/scruples/scripts/evaluate/resource/run_shallow.py": {
        "sklearn": {
            "make_scorer_113": {
                "score_func": {
                    "value": "METRICS[metric][1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "src/scruples/utils.py": {
        "sklearn": {
            "confusion_matrix_163": {
                "variable": {
                    "value": "confusion_matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ys / np.expand_dims(np.sum(ys, axis=-1), axis=-1)",
                            "BinOp"
                        ],
                        [
                            "make_predictions(y_true)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.random.gamma(posterior)",
                            "Call"
                        ],
                        [
                            "y_pred / np.expand_dims(np.sum(y_pred, axis=-1), axis=-1)",
                            "BinOp"
                        ],
                        [
                            "make_predictions(y_pred)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "labels or [str(label) for label in sorted(list(set(y_true).union(set(y_pred))))]",
                            "BoolOp"
                        ],
                        [
                            "labels or [str(label) for label in sorted(list(set(y_true)))]",
                            "BoolOp"
                        ]
                    ]
                }
            }
        }
    },
    "tests/scruples/baselines/test_style.py": {
        "sklearn": {
            "accuracy_score_526": {
                "y_true": {
                    "value": "self.dev_easy['label']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "predictions",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "style.LengthRanker(choose='shortest', length='characters').fit([['word', 'word', 'word']], y=[0]).predict([['', '', 'aaaa'], ['aaaa', 'aa', 'aa']]).tolist()",
                            "Call"
                        ],
                        [
                            "baseline.predict(self.dev_easy[['title', 'text']])",
                            "Call"
                        ],
                        [
                            "baseline.predict(self.dev_easy[['title', 'text']])",
                            "Call"
                        ],
                        [
                            "baseline.predict(self.FEATURES)",
                            "Call"
                        ],
                        [
                            "baseline.predict(self.FEATURES)",
                            "Call"
                        ],
                        [
                            "baseline.predict(self.FEATURES)",
                            "Call"
                        ],
                        [
                            "baseline.predict(self.FEATURES)",
                            "Call"
                        ],
                        [
                            "baseline.predict(self.dev_easy[['action0', 'action1']])",
                            "Call"
                        ],
                        [
                            "baseline.predict(self.dev_easy[['action0', 'action1']])",
                            "Call"
                        ]
                    ]
                }
            },
            "accuracy_score_547": {
                "y_true": {
                    "value": "self.dev_easy['label']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "predictions",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "style.LengthRanker(choose='shortest', length='characters').fit([['word', 'word', 'word']], y=[0]).predict([['', '', 'aaaa'], ['aaaa', 'aa', 'aa']]).tolist()",
                            "Call"
                        ],
                        [
                            "baseline.predict(self.dev_easy[['title', 'text']])",
                            "Call"
                        ],
                        [
                            "baseline.predict(self.dev_easy[['title', 'text']])",
                            "Call"
                        ],
                        [
                            "baseline.predict(self.FEATURES)",
                            "Call"
                        ],
                        [
                            "baseline.predict(self.FEATURES)",
                            "Call"
                        ],
                        [
                            "baseline.predict(self.FEATURES)",
                            "Call"
                        ],
                        [
                            "baseline.predict(self.FEATURES)",
                            "Call"
                        ],
                        [
                            "baseline.predict(self.dev_easy[['action0', 'action1']])",
                            "Call"
                        ],
                        [
                            "baseline.predict(self.dev_easy[['action0', 'action1']])",
                            "Call"
                        ]
                    ]
                }
            },
            "accuracy_score_692": {
                "y_true": {
                    "value": "self.dev_easy['label']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "predictions",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "style.LengthRanker(choose='shortest', length='characters').fit([['word', 'word', 'word']], y=[0]).predict([['', '', 'aaaa'], ['aaaa', 'aa', 'aa']]).tolist()",
                            "Call"
                        ],
                        [
                            "baseline.predict(self.dev_easy[['title', 'text']])",
                            "Call"
                        ],
                        [
                            "baseline.predict(self.dev_easy[['title', 'text']])",
                            "Call"
                        ],
                        [
                            "baseline.predict(self.FEATURES)",
                            "Call"
                        ],
                        [
                            "baseline.predict(self.FEATURES)",
                            "Call"
                        ],
                        [
                            "baseline.predict(self.FEATURES)",
                            "Call"
                        ],
                        [
                            "baseline.predict(self.FEATURES)",
                            "Call"
                        ],
                        [
                            "baseline.predict(self.dev_easy[['action0', 'action1']])",
                            "Call"
                        ],
                        [
                            "baseline.predict(self.dev_easy[['action0', 'action1']])",
                            "Call"
                        ]
                    ]
                }
            },
            "accuracy_score_713": {
                "y_true": {
                    "value": "self.dev_easy['label']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "predictions",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "style.LengthRanker(choose='shortest', length='characters').fit([['word', 'word', 'word']], y=[0]).predict([['', '', 'aaaa'], ['aaaa', 'aa', 'aa']]).tolist()",
                            "Call"
                        ],
                        [
                            "baseline.predict(self.dev_easy[['title', 'text']])",
                            "Call"
                        ],
                        [
                            "baseline.predict(self.dev_easy[['title', 'text']])",
                            "Call"
                        ],
                        [
                            "baseline.predict(self.FEATURES)",
                            "Call"
                        ],
                        [
                            "baseline.predict(self.FEATURES)",
                            "Call"
                        ],
                        [
                            "baseline.predict(self.FEATURES)",
                            "Call"
                        ],
                        [
                            "baseline.predict(self.FEATURES)",
                            "Call"
                        ],
                        [
                            "baseline.predict(self.dev_easy[['action0', 'action1']])",
                            "Call"
                        ],
                        [
                            "baseline.predict(self.dev_easy[['action0', 'action1']])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tests/scruples/baselines/utils.py": {
        "sklearn": {
            "accuracy_score_124": {
                "y_true": {
                    "value": "dev_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "predictions",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "baseline.predict(dev_features)",
                            "Call"
                        ],
                        [
                            "baseline.predict(dev_features)",
                            "Call"
                        ]
                    ]
                }
            },
            "accuracy_score_152": {
                "y_true": {
                    "value": "dev_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "predictions",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "baseline.predict(dev_features)",
                            "Call"
                        ],
                        [
                            "baseline.predict(dev_features)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tests/scruples/demos/scoracle/test_app.py": {
        "sklearn": {
            "f1_score_525": {
                "y_true": {
                    "value": "y_true",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "src/scruples/analysis/traits.py": {
        "torch": {
            "tensor_111": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "th.tensor(data, device=device)",
                            "Call"
                        ],
                        [
                            "th.tensor(data, device=device)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Parameter_120": {
                "variable": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "(2.0 / (self.latent_dim + n_variables)) ** 0.5 * th.randn(self.latent_dim, n_variables, requires_grad=True, device=device)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_128": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "th.zeros(n_variables, requires_grad=True, device=device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "SGD_135": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[W, b]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_136": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "th.optim.SGD([W, b], lr=lr)",
                            "Call"
                        ],
                        [
                            "th.optim.SGD([zs], lr=lr)",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "min",
                    "type": "str",
                    "possible_values": []
                },
                "factor": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "patience": {
                    "value": "patience",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_312": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "th.tensor(data, device=device)",
                            "Call"
                        ],
                        [
                            "th.tensor(data, device=device)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Parameter_327": {
                "variable": {
                    "value": "zs",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "th.zeros(n_samples, self.latent_dim, requires_grad=True, device=device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "SGD_335": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[zs]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_336": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "th.optim.SGD([W, b], lr=lr)",
                            "Call"
                        ],
                        [
                            "th.optim.SGD([zs], lr=lr)",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "min",
                    "type": "str",
                    "possible_values": []
                },
                "factor": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "patience": {
                    "value": "patience",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_404": {
                "variable": {
                    "value": "zs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "self.latent_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "device_79": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_252": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_381": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_129": {
                "*size": {
                    "value": "n_variables",
                    "type": "Variable",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_151": {
                "variable": {
                    "value": "mb_latents",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_latent_samples",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "self.latent_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "mean_167": {
                "variable": {
                    "value": "mb_likelihoods",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "th.prod(mb_labels.float().unsqueeze(-1) * mb_latent_probs.t() + (1 - mb_labels.float()).unsqueeze(-1) * (1 - mb_latent_probs.t()), dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "no_grad_189": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_194": {
                "variable": {
                    "value": "mb_latents",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_latent_samples",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "self.latent_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "mean_210": {
                "variable": {
                    "value": "mb_likelihoods",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "th.prod(mb_labels.float().unsqueeze(-1) * mb_latent_probs.t() + (1 - mb_labels.float()).unsqueeze(-1) * (1 - mb_latent_probs.t()), dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_328": {
                "*size": {
                    "value": "n_samples",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "self.latent_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sigmoid_357": {
                "variable": {
                    "value": "mb_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "th.matmul(mb_latents, W) + b",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_406": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_122": {
                "*size": {
                    "value": "self.latent_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "n_variables",
                    "type": "Variable",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sigmoid_160": {
                "variable": {
                    "value": "mb_latent_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "th.matmul(mb_latents, W) + b",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_163": {
                "variable": {
                    "value": "mb_latent_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "b.repeat(n_latent_samples, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_203": {
                "variable": {
                    "value": "mb_latent_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "th.matmul(mb_latents, W) + b",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_206": {
                "variable": {
                    "value": "mb_latent_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "b.repeat(n_latent_samples, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_408": {
                "input": {
                    "value": "th.matmul(zs, W) + b",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rand_409": {
                "*size": {
                    "value": "size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "self.n_variables_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "prod_168": {
                "input": {
                    "value": "mb_labels.float().unsqueeze(-1) * mb_latent_probs.t() + (1 - mb_labels.float()).unsqueeze(-1) * (1 - mb_latent_probs.t())",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_177": {
                "input": {
                    "value": "th.log(mb_likelihoods)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "prod_211": {
                "input": {
                    "value": "mb_labels.float().unsqueeze(-1) * mb_latent_probs.t() + (1 - mb_labels.float()).unsqueeze(-1) * (1 - mb_latent_probs.t())",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_220": {
                "input": {
                    "value": "th.log(mb_likelihoods)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_360": {
                "input": {
                    "value": "th.sum(mb_labels.float() * th.log(mb_probs) + (1 - mb_labels.float()) * th.log(1 - mb_probs), dim=-1) - th.matmul(mb_latents, mb_latents.t()) / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_177": {
                "input": {
                    "value": "mb_likelihoods",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "th.mean(th.prod(mb_labels.float().unsqueeze(-1) * mb_latent_probs.t() + (1 - mb_labels.float()).unsqueeze(-1) * (1 - mb_latent_probs.t()), dim=1), dim=-1)",
                            "Call"
                        ],
                        [
                            "th.mean(th.prod(mb_labels.float().unsqueeze(-1) * mb_latent_probs.t() + (1 - mb_labels.float()).unsqueeze(-1) * (1 - mb_latent_probs.t()), dim=1), dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_220": {
                "input": {
                    "value": "mb_likelihoods",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "th.mean(th.prod(mb_labels.float().unsqueeze(-1) * mb_latent_probs.t() + (1 - mb_labels.float()).unsqueeze(-1) * (1 - mb_latent_probs.t()), dim=1), dim=-1)",
                            "Call"
                        ],
                        [
                            "th.mean(th.prod(mb_labels.float().unsqueeze(-1) * mb_latent_probs.t() + (1 - mb_labels.float()).unsqueeze(-1) * (1 - mb_latent_probs.t()), dim=1), dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_357": {
                "input": {
                    "value": "mb_latents",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "th.randn(n_latent_samples, self.latent_dim, device=device)",
                            "Call"
                        ],
                        [
                            "th.randn(n_latent_samples, self.latent_dim, device=device)",
                            "Call"
                        ],
                        [
                            "zs[epoch_perm[i:i + n_batch_size]]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "th.nn.Parameter((2.0 / (self.latent_dim + n_variables)) ** 0.5 * th.randn(self.latent_dim, n_variables, requires_grad=True, device=device))",
                            "Call"
                        ],
                        [
                            "self.W_.to(device)",
                            "Call"
                        ],
                        [
                            "self.W_.to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_408": {
                "input": {
                    "value": "zs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "th.nn.Parameter(th.zeros(n_samples, self.latent_dim, requires_grad=True, device=device))",
                            "Call"
                        ],
                        [
                            "th.randn(size, self.latent_dim, device=device)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "th.nn.Parameter((2.0 / (self.latent_dim + n_variables)) ** 0.5 * th.randn(self.latent_dim, n_variables, requires_grad=True, device=device))",
                            "Call"
                        ],
                        [
                            "self.W_.to(device)",
                            "Call"
                        ],
                        [
                            "self.W_.to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_161": {
                "input": {
                    "value": "mb_latents",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "th.randn(n_latent_samples, self.latent_dim, device=device)",
                            "Call"
                        ],
                        [
                            "th.randn(n_latent_samples, self.latent_dim, device=device)",
                            "Call"
                        ],
                        [
                            "zs[epoch_perm[i:i + n_batch_size]]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "th.nn.Parameter((2.0 / (self.latent_dim + n_variables)) ** 0.5 * th.randn(self.latent_dim, n_variables, requires_grad=True, device=device))",
                            "Call"
                        ],
                        [
                            "self.W_.to(device)",
                            "Call"
                        ],
                        [
                            "self.W_.to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_204": {
                "input": {
                    "value": "mb_latents",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "th.randn(n_latent_samples, self.latent_dim, device=device)",
                            "Call"
                        ],
                        [
                            "th.randn(n_latent_samples, self.latent_dim, device=device)",
                            "Call"
                        ],
                        [
                            "zs[epoch_perm[i:i + n_batch_size]]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "th.nn.Parameter((2.0 / (self.latent_dim + n_variables)) ** 0.5 * th.randn(self.latent_dim, n_variables, requires_grad=True, device=device))",
                            "Call"
                        ],
                        [
                            "self.W_.to(device)",
                            "Call"
                        ],
                        [
                            "self.W_.to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_361": {
                "input": {
                    "value": "mb_labels.float() * th.log(mb_probs) + (1 - mb_labels.float()) * th.log(1 - mb_probs)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_365": {
                "input": {
                    "value": "mb_latents",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "th.randn(n_latent_samples, self.latent_dim, device=device)",
                            "Call"
                        ],
                        [
                            "th.randn(n_latent_samples, self.latent_dim, device=device)",
                            "Call"
                        ],
                        [
                            "zs[epoch_perm[i:i + n_batch_size]]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "mb_latents.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_362": {
                "input": {
                    "value": "mb_probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "th.sigmoid(th.matmul(mb_latents, W) + b)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_363": {
                "input": {
                    "value": "1 - mb_probs",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "src/scruples/baselines/bert.py": {
        "torch": {
            "tensor_87": {
                "data": {
                    "value": "d['input_ids']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_88": {
                "data": {
                    "value": "d['input_mask']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_89": {
                "data": {
                    "value": "d['segment_ids']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "stack_164": {
                "tensors": {
                    "value": "[torch.tensor(d['input_ids']) for d in ds]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_168": {
                "tensors": {
                    "value": "[torch.tensor(d['input_mask']) for d in ds]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_172": {
                "tensors": {
                    "value": "[torch.tensor(d['segment_ids']) for d in ds]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_165": {
                "data": {
                    "value": "d['input_ids']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_169": {
                "data": {
                    "value": "d['input_mask']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_173": {
                "data": {
                    "value": "d['segment_ids']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "src/scruples/baselines/loss.py": {
        "torch": {
            "exp_31": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "th.exp(inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_18": {
                "input": {
                    "value": "th.sum(target * F.log_softmax(input, dim=-1), dim=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_32": {
                "input": {
                    "value": "th.lgamma(th.sum(inputs, dim=-1)) + th.sum(th.lgamma(inputs + targets), dim=-1) - th.lgamma(th.sum(inputs + targets, dim=-1)) - th.sum(th.lgamma(inputs), dim=-1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_19": {
                "input": {
                    "value": "target * F.log_softmax(input, dim=-1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_36": {
                "input": {
                    "value": "th.lgamma(inputs)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_softmax_19": {
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "lgamma_35": {
                "input": {
                    "value": "th.sum(inputs + targets, dim=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "lgamma_36": {
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "th.exp(inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "lgamma_33": {
                "input": {
                    "value": "th.sum(inputs, dim=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_34": {
                "input": {
                    "value": "th.lgamma(inputs + targets)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_35": {
                "input": {
                    "value": "inputs + targets",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_33": {
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "th.exp(inputs)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "lgamma_34": {
                "input": {
                    "value": "inputs + targets",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "src/scruples/baselines/roberta.py": {
        "torch": {
            "tensor_88": {
                "data": {
                    "value": "d['input_ids']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_89": {
                "data": {
                    "value": "d['input_mask']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "stack_167": {
                "tensors": {
                    "value": "[torch.tensor(d['input_ids']) for d in ds]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_171": {
                "tensors": {
                    "value": "[torch.tensor(d['input_mask']) for d in ds]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_168": {
                "data": {
                    "value": "d['input_ids']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_172": {
                "data": {
                    "value": "d['input_mask']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "src/scruples/baselines/train.py": {
        "torch": {
            "DataLoader_228": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Dataset(data_dir=data_dir, split='train', transform=featurize, label_transform=labelize, label_scores_transform=labelize_scores)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "train_batch_size // n_gradient_accumulation",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "len(gpu_ids)",
                    "type": "Call",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "bool(gpu_ids)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_234": {
                "variable": {
                    "value": "dev_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dev",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Dataset(data_dir=data_dir, split='dev', transform=featurize, label_transform=labelize, label_scores_transform=labelize_scores)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "predict_batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "len(gpu_ids)",
                    "type": "Call",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "bool(gpu_ids)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataParallel_294": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Model(**baseline_config['model'])",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_163": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_168": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_275": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_449": {
                "obj": {
                    "value": "{'epoch': epoch, 'model': model.state_dict(), 'optimizer': optimizer.state_dict(), 'calibration_factor': calibration_factor}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "last_checkpoint_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(checkpoints_dir, 'last.checkpoint.pkl')",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_160": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_369": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "unsqueeze_330": {
                "input": {
                    "value": "torch.sum(label_scores, dim=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_331": {
                "input": {
                    "value": "label_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_323": {
                "input": {
                    "value": "torch.sum(label_scores, dim=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_324": {
                "input": {
                    "value": "label_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_388": {
                "input": {
                    "value": "torch.sum(label_scores, dim=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_389": {
                "input": {
                    "value": "label_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_410": {
                "input": {
                    "value": "torch.sum(label_scores, dim=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_410": {
                "input": {
                    "value": "label_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "src/scruples/dataset/readers.py": {
        "torch": {}
    },
    "src/scruples/demos/norms/app.py": {
        "torch": {
            "DataLoader_241": {
                "variable": {
                    "value": "data_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "utils.PredictionDataset(features=[[instance['action1'], instance['action2']] for instance in instances], transform=featurize)",
                            "Call"
                        ],
                        [
                            "utils.PredictionDataset(features=[[instance['title'], instance['text']] for instance in instances], transform=featurize)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "settings.NORMS_PREDICT_BATCH_SIZE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_411": {
                "variable": {
                    "value": "data_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "utils.PredictionDataset(features=[[instance['action1'], instance['action2']] for instance in instances], transform=featurize)",
                            "Call"
                        ],
                        [
                            "utils.PredictionDataset(features=[[instance['title'], instance['text']] for instance in instances], transform=featurize)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "settings.NORMS_PREDICT_BATCH_SIZE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_60": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_62": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DataParallel_112": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "Model(**baseline_config['model'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_247": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "exp_250": {
                "variable": {
                    "value": "mb_alphas",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "model(**mb_features)[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "no_grad_417": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "exp_420": {
                "variable": {
                    "value": "mb_alphas",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "model(**mb_features)[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "is_available_57": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/scruples/demos/norms/utils.py": {
        "torch": {}
    },
    "src/scruples/scripts/analyze/resource/latent_traits.py": {
        "torch": {
            "device_136": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_140": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "is_available_133": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/scruples/scripts/evaluate/corpus/predict_lm.py": {
        "torch": {
            "DataParallel_109": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "Model(**baseline_config['model'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_101": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_105": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DataLoader_133": {
                "variable": {
                    "value": "data_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ScruplesCorpusDataset(data_dir=data_dir, split=split, transform=featurize, label_transform=labelize)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "predict_batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "is_available_98": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_110": {
                "f": {
                    "value": "checkpoint_file_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(model_dir, 'checkpoints', 'best.checkpoint.pkl')",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_149": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_163": {
                "variable": {
                    "value": "(_, mb_predictions)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "mb_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model(**mb_features)[0]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "src/scruples/scripts/evaluate/resource/predict_lm.py": {
        "torch": {
            "DataParallel_110": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "Model(**baseline_config['model'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_100": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_104": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DataLoader_131": {
                "variable": {
                    "value": "data_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ScruplesResourceDataset(data_dir=data_dir, split=split, transform=featurize)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "predict_batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "is_available_97": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_111": {
                "f": {
                    "value": "checkpoint_file_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(model_dir, 'checkpoints', 'best.checkpoint.pkl')",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_147": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_162": {
                "variable": {
                    "value": "(_, mb_predictions)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "mb_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model(**mb_features)[0]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "tests/scruples/analysis/test_traits.py": {
        "torch": {
            "tensor_122": {
                "variable": {
                    "value": "model.W_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.random.randn(latent_dim, n_variables)",
                            "Call"
                        ],
                        [
                            "np.random.randn(latent_dim, n_variables)",
                            "Call"
                        ],
                        [
                            "np.random.randn(latent_dim, n_variables)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_123": {
                "variable": {
                    "value": "model.b_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.random.randn(n_variables)",
                            "Call"
                        ],
                        [
                            "np.random.randn(n_variables)",
                            "Call"
                        ],
                        [
                            "np.random.randn(n_variables)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_183": {
                "variable": {
                    "value": "model.W_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.random.randn(latent_dim, n_variables)",
                            "Call"
                        ],
                        [
                            "np.random.randn(latent_dim, n_variables)",
                            "Call"
                        ],
                        [
                            "np.random.randn(latent_dim, n_variables)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_184": {
                "variable": {
                    "value": "model.b_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.random.randn(n_variables)",
                            "Call"
                        ],
                        [
                            "np.random.randn(n_variables)",
                            "Call"
                        ],
                        [
                            "np.random.randn(n_variables)",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_252": {
                "*size": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_52": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_51": {
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_53": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "is_available_134": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_133": {
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_135": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "is_available_191": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_190": {
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_192": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "tests/scruples/baselines/test_loss.py": {
        "torch": {}
    }
}