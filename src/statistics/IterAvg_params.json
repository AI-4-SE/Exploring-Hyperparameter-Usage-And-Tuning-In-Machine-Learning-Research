{
    "CIFAR10/ResNet/cifar10.py": {
        "sklearn": {},
        "torch": {}
    },
    "CIFAR10/VGG/cifar10.py": {
        "sklearn": {},
        "torch": {}
    },
    "CIFAR100/ResNet/cifar100.py": {
        "sklearn": {},
        "torch": {
            "device_101": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "possible_values": []
                }
            },
            "is_available_101": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "MNIST/mnist.py": {
        "sklearn": {},
        "torch": {
            "device_63": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "possible_values": []
                }
            },
            "is_available_63": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "2Dim/gd.py": {
        "torch": {
            "device_51": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "possible_values": []
                }
            },
            "is_available_51": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "grad_34": {
                "outputs": {
                    "value": "loss",
                    "possible_values": [
                        [
                            "model.loss() + model.L2(l2regu)",
                            "BinOp"
                        ]
                    ]
                },
                "inputs": {
                    "value": "model.w",
                    "possible_values": []
                }
            }
        }
    },
    "2Dim/model.py": {
        "torch": {
            "Basin_8": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Parameter_21": {
                    "variable": {
                        "value": "self.w",
                        "possible_values": []
                    },
                    "data": {
                        "value": "torch.zeros(1, 2)",
                        "possible_values": []
                    },
                    "requires_grad": {
                        "value": "True",
                        "possible_values": []
                    }
                }
            },
            "zeros_21": {
                "*size": {
                    "value": "1",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "matmul_33": {
                "input": {
                    "value": "diff",
                    "possible_values": [
                        [
                            "self.w - self.w_star",
                            "BinOp"
                        ],
                        [
                            "w - self.w_star_np",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "self.Sigma",
                    "possible_values": []
                }
            },
            "matmul_39": {
                "input": {
                    "value": "self.w",
                    "possible_values": []
                },
                "other": {
                    "value": "self.Q",
                    "possible_values": []
                }
            }
        }
    },
    "2Dim/ngd.py": {
        "torch": {
            "device_65": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "possible_values": []
                }
            },
            "zeros_like_35": {
                "input": {
                    "value": "model.w",
                    "possible_values": []
                }
            },
            "is_available_65": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "grad_44": {
                "outputs": {
                    "value": "loss",
                    "possible_values": [
                        [
                            "model.loss() + model.L2(l2regu)",
                            "BinOp"
                        ]
                    ]
                },
                "inputs": {
                    "value": "model.w",
                    "possible_values": []
                }
            }
        }
    },
    "2Dim/pgd.py": {
        "torch": {
            "device_52": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "possible_values": []
                }
            },
            "matmul_35": {
                "variable": {
                    "value": "dw",
                    "possible_values": []
                },
                "input": {
                    "value": "dw",
                    "possible_values": [
                        [
                            "-lr * grad(loss, model.w)[0]",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(dw, model.Q_inv)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "model.Q_inv",
                    "possible_values": []
                }
            },
            "is_available_52": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "grad_34": {
                "outputs": {
                    "value": "loss",
                    "possible_values": [
                        [
                            "model.loss() + model.generalL2(l2regu)",
                            "BinOp"
                        ]
                    ]
                },
                "inputs": {
                    "value": "model.w",
                    "possible_values": []
                }
            }
        }
    },
    "2Dim/regupath.py": {
        "torch": {
            "device_55": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "possible_values": []
                }
            },
            "is_available_55": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "grad_28": {
                "outputs": {
                    "value": "loss",
                    "possible_values": [
                        [
                            "model.loss() + model.L1(l1regu)",
                            "BinOp"
                        ]
                    ]
                },
                "inputs": {
                    "value": "model.w",
                    "possible_values": []
                }
            }
        }
    },
    "2Dim/utils.py": {
        "torch": {}
    },
    "CIFAR10/ResNet/iteravg.py": {
        "torch": {
            "SGD_33": {
                "variable": {
                    "value": "base_opt",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "possible_values": []
                }
            },
            "device_48": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_62": {
                "variable": {
                    "value": "criterion",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "load_20": {
                "f": {
                    "value": "ckpt_files[0]",
                    "possible_values": []
                }
            },
            "zeros_like_23": {
                "input": {
                    "value": "ckpt_ave[key]",
                    "possible_values": []
                }
            },
            "load_26": {
                "f": {
                    "value": "ckpt_files[i]",
                    "possible_values": []
                }
            },
            "is_available_48": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "CIFAR10/ResNet/resnet.py": {
        "torch": {
            "BasicBlock_14": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Conv2d_19": {
                    "variable": {
                        "value": "self.conv1",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "in_planes",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "planes",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "3",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "stride",
                        "possible_values": [
                            [
                                "strides",
                                "Name"
                            ],
                            [
                                "1",
                                "MethodArgument"
                            ],
                            [
                                "1",
                                "MethodArgument"
                            ]
                        ]
                    },
                    "padding": {
                        "value": "1",
                        "possible_values": []
                    },
                    "bias": {
                        "value": "False",
                        "possible_values": []
                    }
                },
                "BatchNorm2d_20": {
                    "variable": {
                        "value": "self.bn1",
                        "possible_values": []
                    },
                    "num_features": {
                        "value": "planes",
                        "possible_values": []
                    }
                },
                "Conv2d_21": {
                    "variable": {
                        "value": "self.conv2",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "planes",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "planes",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "3",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "1",
                        "possible_values": []
                    },
                    "padding": {
                        "value": "1",
                        "possible_values": []
                    },
                    "bias": {
                        "value": "False",
                        "possible_values": []
                    }
                },
                "BatchNorm2d_22": {
                    "variable": {
                        "value": "self.bn2",
                        "possible_values": []
                    },
                    "num_features": {
                        "value": "planes",
                        "possible_values": []
                    }
                },
                "Sequential_24": {
                    "variable": {
                        "value": "self.shortcut",
                        "possible_values": []
                    },
                    "params": {
                        "value": "default",
                        "possible_values": []
                    }
                }
            },
            "Bottleneck_39": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Conv2d_44": {
                    "variable": {
                        "value": "self.conv1",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "in_planes",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "planes",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "1",
                        "possible_values": []
                    },
                    "bias": {
                        "value": "False",
                        "possible_values": []
                    }
                },
                "BatchNorm2d_45": {
                    "variable": {
                        "value": "self.bn1",
                        "possible_values": []
                    },
                    "num_features": {
                        "value": "planes",
                        "possible_values": []
                    }
                },
                "Conv2d_46": {
                    "variable": {
                        "value": "self.conv2",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "planes",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "planes",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "3",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "stride",
                        "possible_values": [
                            [
                                "strides",
                                "Name"
                            ],
                            [
                                "1",
                                "MethodArgument"
                            ],
                            [
                                "1",
                                "MethodArgument"
                            ]
                        ]
                    },
                    "padding": {
                        "value": "1",
                        "possible_values": []
                    },
                    "bias": {
                        "value": "False",
                        "possible_values": []
                    }
                },
                "BatchNorm2d_47": {
                    "variable": {
                        "value": "self.bn2",
                        "possible_values": []
                    },
                    "num_features": {
                        "value": "planes",
                        "possible_values": []
                    }
                },
                "Conv2d_48": {
                    "variable": {
                        "value": "self.conv3",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "planes",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "self.expansion * planes",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "1",
                        "possible_values": []
                    },
                    "bias": {
                        "value": "False",
                        "possible_values": []
                    }
                },
                "BatchNorm2d_49": {
                    "variable": {
                        "value": "self.bn3",
                        "possible_values": []
                    },
                    "num_features": {
                        "value": "self.expansion * planes",
                        "possible_values": []
                    }
                },
                "Sequential_51": {
                    "variable": {
                        "value": "self.shortcut",
                        "possible_values": []
                    },
                    "params": {
                        "value": "default",
                        "possible_values": []
                    }
                }
            },
            "ResNet_67": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Conv2d_72": {
                    "variable": {
                        "value": "self.conv1",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "3",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "64",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "3",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "1",
                        "possible_values": []
                    },
                    "padding": {
                        "value": "1",
                        "possible_values": []
                    },
                    "bias": {
                        "value": "False",
                        "possible_values": []
                    }
                },
                "BatchNorm2d_73": {
                    "variable": {
                        "value": "self.bn1",
                        "possible_values": []
                    },
                    "num_features": {
                        "value": "64",
                        "possible_values": []
                    }
                },
                "Linear_78": {
                    "variable": {
                        "value": "self.linear",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "512 * block.expansion",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "num_classes",
                        "possible_values": [
                            [
                                "10",
                                "MethodArgument"
                            ]
                        ]
                    }
                }
            },
            "relu_32": {
                "variable": {
                    "value": "out",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "possible_values": []
                }
            },
            "relu_35": {
                "variable": {
                    "value": "out",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x)",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(out)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(out))",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "self.layer4(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 4)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_59": {
                "variable": {
                    "value": "out",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "possible_values": []
                }
            },
            "relu_60": {
                "variable": {
                    "value": "out",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(self.conv2(out))",
                    "possible_values": []
                }
            },
            "relu_63": {
                "variable": {
                    "value": "out",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x)",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(out)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(out))",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "self.layer4(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 4)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_89": {
                "variable": {
                    "value": "out",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "possible_values": []
                }
            },
            "avg_pool2d_94": {
                "variable": {
                    "value": "out",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x)",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(out)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(out))",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "self.layer4(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 4)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "possible_values": []
                }
            },
            "Sequential_26": {
                "variable": {
                    "value": "self.shortcut",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_planes, self.expansion * planes, kernel_size=1, stride=stride, bias=False)",
                    "possible_values": []
                }
            },
            "Sequential_53": {
                "variable": {
                    "value": "self.shortcut",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_planes, self.expansion * planes, kernel_size=1, stride=stride, bias=False)",
                    "possible_values": []
                }
            },
            "Sequential_86": {
                "*args": {
                    "value": "*layers",
                    "possible_values": []
                }
            },
            "randn_118": {
                "*size": {
                    "value": "1",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "possible_values": []
                }
            },
            "Conv2d_27": {
                "in_channels": {
                    "value": "in_planes",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.expansion * planes",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "BatchNorm2d_28": {
                "num_features": {
                    "value": "self.expansion * planes",
                    "possible_values": []
                }
            },
            "Conv2d_54": {
                "in_channels": {
                    "value": "in_planes",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.expansion * planes",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "BatchNorm2d_55": {
                "num_features": {
                    "value": "self.expansion * planes",
                    "possible_values": []
                }
            }
        }
    },
    "CIFAR10/ResNet/sgd.py": {
        "torch": {
            "device_30": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_45": {
                "variable": {
                    "value": "criterion",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "SGD_46": {
                "variable": {
                    "value": "optimizer",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "possible_values": [
                        [
                            "args.lr",
                            "Attribute"
                        ],
                        [
                            "checkpoint['lr']",
                            "Subscript"
                        ],
                        [
                            "lr * 0.1",
                            "BinOp"
                        ]
                    ]
                },
                "momentum": {
                    "value": "args.momentum",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weightdecay",
                    "possible_values": []
                }
            },
            "load_48": {
                "variable": {
                    "value": "checkpoint",
                    "possible_values": []
                },
                "f": {
                    "value": "args.resume",
                    "possible_values": []
                }
            },
            "save_89": {
                "obj": {
                    "value": "state",
                    "possible_values": [
                        [
                            "{'epoch': i, 'lr': lr, 'model': model.state_dict(), 'optimizer': optimizer.state_dict()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "args.logdir + '/epoch-' + str(i) + '.pth.tar'",
                    "possible_values": []
                }
            },
            "is_available_30": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "CIFAR10/ResNet/swa.py": {
        "torch": {
            "SWA_8": {
                "base_class_0": {
                    "value": "torch.optim.Optimizer",
                    "possible_values": []
                },
                "self.swa_lr": {
                    "value": "swa_lr",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.optimizer": {
                    "value": "optimizer",
                    "possible_values": []
                }
            },
            "zeros_like_333": {
                "variable": {
                    "value": "module.running_mean",
                    "possible_values": []
                },
                "input": {
                    "value": "module.running_mean",
                    "possible_values": []
                }
            },
            "ones_like_334": {
                "variable": {
                    "value": "module.running_var",
                    "possible_values": []
                },
                "input": {
                    "value": "module.running_var",
                    "possible_values": []
                }
            },
            "zeros_like_174": {
                "variable": {
                    "value": "param_state[swa_buffer]",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "possible_values": []
                }
            },
            "empty_like_204": {
                "variable": {
                    "value": "tmp",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "possible_values": []
                }
            }
        }
    },
    "CIFAR10/ResNet/utils.py": {
        "torch": {
            "Tensor_35": {
                "variable": {
                    "value": "exponent",
                    "possible_values": []
                }
            },
            "log_softmax_42": {
                "variable": {
                    "value": "input",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "possible_values": [
                        [
                            "F.log_softmax(input, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "ones_34": {
                "*size": {
                    "value": "length",
                    "possible_values": []
                }
            }
        }
    },
    "CIFAR10/VGG/iteravg.py": {
        "torch": {
            "SGD_33": {
                "variable": {
                    "value": "base_opt",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "possible_values": []
                }
            },
            "device_48": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_62": {
                "variable": {
                    "value": "criterion",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "load_20": {
                "f": {
                    "value": "ckpt_files[0]",
                    "possible_values": []
                }
            },
            "zeros_like_23": {
                "input": {
                    "value": "ckpt_ave[key]",
                    "possible_values": []
                }
            },
            "load_26": {
                "f": {
                    "value": "ckpt_files[i]",
                    "possible_values": []
                }
            },
            "is_available_48": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "CIFAR10/VGG/sgd.py": {
        "torch": {
            "device_30": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_45": {
                "variable": {
                    "value": "criterion",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "SGD_46": {
                "variable": {
                    "value": "optimizer",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "possible_values": [
                        [
                            "args.lr",
                            "Attribute"
                        ],
                        [
                            "checkpoint['lr']",
                            "Subscript"
                        ],
                        [
                            "lr * 0.1",
                            "BinOp"
                        ]
                    ]
                },
                "momentum": {
                    "value": "args.momentum",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weightdecay",
                    "possible_values": []
                }
            },
            "load_48": {
                "variable": {
                    "value": "checkpoint",
                    "possible_values": []
                },
                "f": {
                    "value": "args.resume",
                    "possible_values": []
                }
            },
            "save_89": {
                "obj": {
                    "value": "state",
                    "possible_values": [
                        [
                            "{'epoch': i, 'lr': lr, 'model': model.state_dict(), 'optimizer': optimizer.state_dict()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "args.logdir + '/epoch-' + str(i) + '.pth.tar'",
                    "possible_values": []
                }
            },
            "is_available_30": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "CIFAR10/VGG/swa.py": {
        "torch": {
            "SWA_8": {
                "base_class_0": {
                    "value": "torch.optim.Optimizer",
                    "possible_values": []
                },
                "self.swa_lr": {
                    "value": "swa_lr",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.optimizer": {
                    "value": "optimizer",
                    "possible_values": []
                }
            },
            "zeros_like_333": {
                "variable": {
                    "value": "module.running_mean",
                    "possible_values": []
                },
                "input": {
                    "value": "module.running_mean",
                    "possible_values": []
                }
            },
            "ones_like_334": {
                "variable": {
                    "value": "module.running_var",
                    "possible_values": []
                },
                "input": {
                    "value": "module.running_var",
                    "possible_values": []
                }
            },
            "zeros_like_174": {
                "variable": {
                    "value": "param_state[swa_buffer]",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "possible_values": []
                }
            },
            "empty_like_204": {
                "variable": {
                    "value": "tmp",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "possible_values": []
                }
            }
        }
    },
    "CIFAR10/VGG/utils.py": {
        "torch": {
            "Tensor_35": {
                "variable": {
                    "value": "exponent",
                    "possible_values": []
                }
            },
            "log_softmax_42": {
                "variable": {
                    "value": "input",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "possible_values": [
                        [
                            "F.log_softmax(input, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "ones_34": {
                "*size": {
                    "value": "length",
                    "possible_values": []
                }
            }
        }
    },
    "CIFAR10/VGG/vgg.py": {
        "torch": {
            "VGG_15": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.features": {
                    "value": "features",
                    "possible_values": []
                },
                "Sequential_22": {
                    "variable": {
                        "value": "self.classifier",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "nn.Linear(512, 512)",
                        "possible_values": []
                    }
                }
            },
            "Sequential_59": {
                "*args": {
                    "value": "*layers",
                    "possible_values": []
                }
            },
            "Conv2d_53": {
                "variable": {
                    "value": "conv2d",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "v",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "v",
                    "possible_values": [
                        [
                            "cfg",
                            "Name"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Linear_24": {
                "in_features": {
                    "value": "512",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "possible_values": []
                }
            },
            "ReLU_25": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Linear_27": {
                "in_features": {
                    "value": "512",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "possible_values": []
                }
            },
            "ReLU_28": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Linear_29": {
                "in_features": {
                    "value": "512",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "possible_values": []
                }
            },
            "MaxPool2d_51": {
                "kernel_size": {
                    "value": "2",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "BatchNorm2d_55": {
                "num_features": {
                    "value": "v",
                    "possible_values": [
                        [
                            "cfg",
                            "Name"
                        ]
                    ]
                }
            },
            "ReLU_55": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "ReLU_57": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            }
        }
    },
    "CIFAR100/ResNet/iteravg.py": {
        "torch": {
            "SGD_33": {
                "variable": {
                    "value": "base_opt",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "possible_values": []
                }
            },
            "device_48": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_62": {
                "variable": {
                    "value": "criterion",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "load_20": {
                "f": {
                    "value": "ckpt_files[0]",
                    "possible_values": []
                }
            },
            "zeros_like_23": {
                "input": {
                    "value": "ckpt_ave[key]",
                    "possible_values": []
                }
            },
            "load_26": {
                "f": {
                    "value": "ckpt_files[i]",
                    "possible_values": []
                }
            },
            "is_available_48": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "CIFAR100/ResNet/resnet.py": {
        "torch": {
            "BasicBlock_14": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Conv2d_19": {
                    "variable": {
                        "value": "self.conv1",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "in_planes",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "planes",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "3",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "stride",
                        "possible_values": [
                            [
                                "strides",
                                "Name"
                            ],
                            [
                                "1",
                                "MethodArgument"
                            ],
                            [
                                "1",
                                "MethodArgument"
                            ]
                        ]
                    },
                    "padding": {
                        "value": "1",
                        "possible_values": []
                    },
                    "bias": {
                        "value": "False",
                        "possible_values": []
                    }
                },
                "BatchNorm2d_20": {
                    "variable": {
                        "value": "self.bn1",
                        "possible_values": []
                    },
                    "num_features": {
                        "value": "planes",
                        "possible_values": []
                    }
                },
                "Conv2d_21": {
                    "variable": {
                        "value": "self.conv2",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "planes",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "planes",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "3",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "1",
                        "possible_values": []
                    },
                    "padding": {
                        "value": "1",
                        "possible_values": []
                    },
                    "bias": {
                        "value": "False",
                        "possible_values": []
                    }
                },
                "BatchNorm2d_22": {
                    "variable": {
                        "value": "self.bn2",
                        "possible_values": []
                    },
                    "num_features": {
                        "value": "planes",
                        "possible_values": []
                    }
                },
                "Sequential_24": {
                    "variable": {
                        "value": "self.shortcut",
                        "possible_values": []
                    },
                    "params": {
                        "value": "default",
                        "possible_values": []
                    }
                }
            },
            "Bottleneck_39": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Conv2d_44": {
                    "variable": {
                        "value": "self.conv1",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "in_planes",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "planes",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "1",
                        "possible_values": []
                    },
                    "bias": {
                        "value": "False",
                        "possible_values": []
                    }
                },
                "BatchNorm2d_45": {
                    "variable": {
                        "value": "self.bn1",
                        "possible_values": []
                    },
                    "num_features": {
                        "value": "planes",
                        "possible_values": []
                    }
                },
                "Conv2d_46": {
                    "variable": {
                        "value": "self.conv2",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "planes",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "planes",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "3",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "stride",
                        "possible_values": [
                            [
                                "strides",
                                "Name"
                            ],
                            [
                                "1",
                                "MethodArgument"
                            ],
                            [
                                "1",
                                "MethodArgument"
                            ]
                        ]
                    },
                    "padding": {
                        "value": "1",
                        "possible_values": []
                    },
                    "bias": {
                        "value": "False",
                        "possible_values": []
                    }
                },
                "BatchNorm2d_47": {
                    "variable": {
                        "value": "self.bn2",
                        "possible_values": []
                    },
                    "num_features": {
                        "value": "planes",
                        "possible_values": []
                    }
                },
                "Conv2d_48": {
                    "variable": {
                        "value": "self.conv3",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "planes",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "self.expansion * planes",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "1",
                        "possible_values": []
                    },
                    "bias": {
                        "value": "False",
                        "possible_values": []
                    }
                },
                "BatchNorm2d_49": {
                    "variable": {
                        "value": "self.bn3",
                        "possible_values": []
                    },
                    "num_features": {
                        "value": "self.expansion * planes",
                        "possible_values": []
                    }
                },
                "Sequential_51": {
                    "variable": {
                        "value": "self.shortcut",
                        "possible_values": []
                    },
                    "params": {
                        "value": "default",
                        "possible_values": []
                    }
                }
            },
            "ResNet_67": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Conv2d_72": {
                    "variable": {
                        "value": "self.conv1",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "3",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "64",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "3",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "1",
                        "possible_values": []
                    },
                    "padding": {
                        "value": "1",
                        "possible_values": []
                    },
                    "bias": {
                        "value": "False",
                        "possible_values": []
                    }
                },
                "BatchNorm2d_73": {
                    "variable": {
                        "value": "self.bn1",
                        "possible_values": []
                    },
                    "num_features": {
                        "value": "64",
                        "possible_values": []
                    }
                },
                "Linear_78": {
                    "variable": {
                        "value": "self.linear",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "512 * block.expansion",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "num_classes",
                        "possible_values": [
                            [
                                "100",
                                "MethodArgument"
                            ]
                        ]
                    }
                }
            },
            "relu_32": {
                "variable": {
                    "value": "out",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "possible_values": []
                }
            },
            "relu_35": {
                "variable": {
                    "value": "out",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x)",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(out)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(out))",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "self.layer4(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 4)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_59": {
                "variable": {
                    "value": "out",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "possible_values": []
                }
            },
            "relu_60": {
                "variable": {
                    "value": "out",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(self.conv2(out))",
                    "possible_values": []
                }
            },
            "relu_63": {
                "variable": {
                    "value": "out",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x)",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(out)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(out))",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "self.layer4(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 4)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_89": {
                "variable": {
                    "value": "out",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "possible_values": []
                }
            },
            "avg_pool2d_94": {
                "variable": {
                    "value": "out",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x)",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(out)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(out))",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "self.layer4(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 4)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "possible_values": []
                }
            },
            "Sequential_26": {
                "variable": {
                    "value": "self.shortcut",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_planes, self.expansion * planes, kernel_size=1, stride=stride, bias=False)",
                    "possible_values": []
                }
            },
            "Sequential_53": {
                "variable": {
                    "value": "self.shortcut",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_planes, self.expansion * planes, kernel_size=1, stride=stride, bias=False)",
                    "possible_values": []
                }
            },
            "Sequential_86": {
                "*args": {
                    "value": "*layers",
                    "possible_values": []
                }
            },
            "randn_118": {
                "*size": {
                    "value": "1",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "possible_values": []
                }
            },
            "Conv2d_27": {
                "in_channels": {
                    "value": "in_planes",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.expansion * planes",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "BatchNorm2d_28": {
                "num_features": {
                    "value": "self.expansion * planes",
                    "possible_values": []
                }
            },
            "Conv2d_54": {
                "in_channels": {
                    "value": "in_planes",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.expansion * planes",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "BatchNorm2d_55": {
                "num_features": {
                    "value": "self.expansion * planes",
                    "possible_values": []
                }
            }
        }
    },
    "CIFAR100/ResNet/sgd.py": {
        "torch": {
            "device_30": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_45": {
                "variable": {
                    "value": "criterion",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "SGD_46": {
                "variable": {
                    "value": "optimizer",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "possible_values": [
                        [
                            "args.lr",
                            "Attribute"
                        ],
                        [
                            "checkpoint['lr']",
                            "Subscript"
                        ],
                        [
                            "lr * 0.1",
                            "BinOp"
                        ]
                    ]
                },
                "momentum": {
                    "value": "args.momentum",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weightdecay",
                    "possible_values": []
                }
            },
            "load_48": {
                "variable": {
                    "value": "checkpoint",
                    "possible_values": []
                },
                "f": {
                    "value": "args.resume",
                    "possible_values": []
                }
            },
            "save_89": {
                "obj": {
                    "value": "state",
                    "possible_values": [
                        [
                            "{'epoch': i, 'lr': lr, 'model': model.state_dict(), 'optimizer': optimizer.state_dict()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "args.logdir + '/epoch-' + str(i) + '.pth.tar'",
                    "possible_values": []
                }
            },
            "is_available_30": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "CIFAR100/ResNet/swa.py": {
        "torch": {
            "SWA_8": {
                "base_class_0": {
                    "value": "torch.optim.Optimizer",
                    "possible_values": []
                },
                "self.swa_lr": {
                    "value": "swa_lr",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.optimizer": {
                    "value": "optimizer",
                    "possible_values": []
                }
            },
            "zeros_like_333": {
                "variable": {
                    "value": "module.running_mean",
                    "possible_values": []
                },
                "input": {
                    "value": "module.running_mean",
                    "possible_values": []
                }
            },
            "ones_like_334": {
                "variable": {
                    "value": "module.running_var",
                    "possible_values": []
                },
                "input": {
                    "value": "module.running_var",
                    "possible_values": []
                }
            },
            "zeros_like_174": {
                "variable": {
                    "value": "param_state[swa_buffer]",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "possible_values": []
                }
            },
            "empty_like_204": {
                "variable": {
                    "value": "tmp",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "possible_values": []
                }
            }
        }
    },
    "CIFAR100/ResNet/utils.py": {
        "torch": {
            "Tensor_35": {
                "variable": {
                    "value": "exponent",
                    "possible_values": []
                }
            },
            "log_softmax_42": {
                "variable": {
                    "value": "input",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "possible_values": [
                        [
                            "F.log_softmax(input, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "ones_34": {
                "*size": {
                    "value": "length",
                    "possible_values": []
                }
            }
        }
    },
    "MNIST/eval-hess.py": {
        "torch": {}
    },
    "MNIST/model.py": {
        "torch": {
            "Linear_9": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Parameter_13": {
                    "variable": {
                        "value": "self.weight",
                        "possible_values": []
                    },
                    "data": {
                        "value": "torch.zeros(self.n_weights)",
                        "possible_values": []
                    },
                    "requires_grad": {
                        "value": "True",
                        "possible_values": []
                    }
                }
            },
            "LinearBias_42": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Parameter_46": {
                    "variable": {
                        "value": "self.weight",
                        "possible_values": []
                    },
                    "data": {
                        "value": "torch.zeros(self.n_weights)",
                        "possible_values": []
                    },
                    "requires_grad": {
                        "value": "True",
                        "possible_values": []
                    }
                }
            },
            "linear_21": {
                "variable": {
                    "value": "out",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "possible_values": [
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "F.linear(out, fc1_weight, bias=None)",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "F.linear(out, fc1_weight, bias=fc1_bias)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "fc1_weight",
                    "possible_values": [
                        [
                            "self.weight[:7840].view(10, 784)",
                            "Call"
                        ],
                        [
                            "self.weight[:7840].view(10, 784)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "None",
                    "possible_values": []
                }
            },
            "log_softmax_30": {
                "variable": {
                    "value": "output",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "possible_values": [
                        [
                            "F.log_softmax(output, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(output, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "linear_55": {
                "variable": {
                    "value": "out",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "possible_values": [
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "F.linear(out, fc1_weight, bias=None)",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "F.linear(out, fc1_weight, bias=fc1_bias)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "fc1_weight",
                    "possible_values": [
                        [
                            "self.weight[:7840].view(10, 784)",
                            "Call"
                        ],
                        [
                            "self.weight[:7840].view(10, 784)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "fc1_bias",
                    "possible_values": [
                        [
                            "self.weight[7840:7850].view(10)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_softmax_64": {
                "variable": {
                    "value": "output",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "possible_values": [
                        [
                            "F.log_softmax(output, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(output, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "eye_6": {
                "n": {
                    "value": "num_classes",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_13": {
                "*size": {
                    "value": "self.n_weights",
                    "possible_values": []
                }
            },
            "zeros_46": {
                "*size": {
                    "value": "self.n_weights",
                    "possible_values": []
                }
            },
            "matmul_40": {
                "input": {
                    "value": "self.weight",
                    "possible_values": []
                },
                "other": {
                    "value": "Q",
                    "possible_values": []
                }
            },
            "matmul_74": {
                "input": {
                    "value": "self.weight",
                    "possible_values": []
                },
                "other": {
                    "value": "Q",
                    "possible_values": []
                }
            }
        }
    },
    "MNIST/nsgd-linreg.py": {
        "torch": {
            "device_66": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "possible_values": []
                }
            },
            "zeros_like_34": {
                "input": {
                    "value": "model.weight.data",
                    "possible_values": []
                }
            },
            "is_available_66": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "grad_45": {
                "outputs": {
                    "value": "loss",
                    "possible_values": [
                        [
                            "model.MSE(out, y) + model.L2(l2regu)",
                            "BinOp"
                        ]
                    ]
                },
                "inputs": {
                    "value": "model.weight",
                    "possible_values": []
                }
            }
        }
    },
    "MNIST/nsgd-logreg.py": {
        "torch": {
            "device_67": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "possible_values": []
                }
            },
            "zeros_like_35": {
                "input": {
                    "value": "model.weight.data",
                    "possible_values": []
                }
            },
            "is_available_67": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "grad_46": {
                "outputs": {
                    "value": "loss",
                    "possible_values": [
                        [
                            "model.CE(out, y) + model.L2(l2regu)",
                            "BinOp"
                        ]
                    ]
                },
                "inputs": {
                    "value": "model.weight",
                    "possible_values": []
                }
            }
        }
    },
    "MNIST/plot.py": {
        "torch": {}
    },
    "MNIST/psgd-linreg.py": {
        "torch": {
            "device_57": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "possible_values": []
                }
            },
            "matmul_38": {
                "variable": {
                    "value": "dw",
                    "possible_values": []
                },
                "input": {
                    "value": "dw",
                    "possible_values": [
                        [
                            "-lr * grad(loss, model.weight)[0]",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(dw, Q_inv)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "Q_inv",
                    "possible_values": [
                        [
                            "np.load('HessFull_inv.npy')",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(Q_inv).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_57": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "grad_37": {
                "outputs": {
                    "value": "loss",
                    "possible_values": [
                        [
                            "model.MSE(out, y) + model.generalL2(Q, l2regu)",
                            "BinOp"
                        ]
                    ]
                },
                "inputs": {
                    "value": "model.weight",
                    "possible_values": []
                }
            }
        }
    },
    "MNIST/psgd-logreg.py": {
        "torch": {
            "device_58": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "possible_values": []
                }
            },
            "matmul_39": {
                "variable": {
                    "value": "dw",
                    "possible_values": []
                },
                "input": {
                    "value": "dw",
                    "possible_values": [
                        [
                            "-lr * grad(loss, model.weight)[0]",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(dw, Q_inv)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "Q_inv",
                    "possible_values": [
                        [
                            "np.load('HessFull_inv.npy')",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(Q_inv).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_58": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "grad_38": {
                "outputs": {
                    "value": "loss",
                    "possible_values": [
                        [
                            "model.CE(out, y) + model.generalL2(Q, l2regu)",
                            "BinOp"
                        ]
                    ]
                },
                "inputs": {
                    "value": "model.weight",
                    "possible_values": []
                }
            }
        }
    },
    "MNIST/sgd-linreg.py": {
        "torch": {
            "device_56": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "possible_values": []
                }
            },
            "is_available_56": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "grad_37": {
                "outputs": {
                    "value": "loss",
                    "possible_values": [
                        [
                            "model.MSE(out, y) + model.L2(l2regu)",
                            "BinOp"
                        ]
                    ]
                },
                "inputs": {
                    "value": "model.weight",
                    "possible_values": []
                }
            }
        }
    },
    "MNIST/sgd-logreg.py": {
        "torch": {
            "device_57": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "possible_values": []
                }
            },
            "is_available_57": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "grad_38": {
                "outputs": {
                    "value": "loss",
                    "possible_values": [
                        [
                            "model.CE(out, y) + model.L2(l2regu)",
                            "BinOp"
                        ]
                    ]
                },
                "inputs": {
                    "value": "model.weight",
                    "possible_values": []
                }
            }
        }
    },
    "MNIST/utils.py": {
        "torch": {}
    }
}