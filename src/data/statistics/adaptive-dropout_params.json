{
    "dropout/extern.py": {
        "torch": {
            "Parameter_16": {
                "variable": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_features, in_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_17": {
                "variable": {
                    "value": "self.log_alpha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_features, in_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_18": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_29": {
                "variable": {
                    "value": "self.log_sigma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.log_sigma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "min": {
                    "value": "-10",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_59": {
                "variable": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_features, in_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_60": {
                "variable": {
                    "value": "self.log_sigma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_features, in_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_61": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_72": {
                "variable": {
                    "value": "self.log_alpha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.log_alpha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "min": {
                    "value": "-10",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_102": {
                "variable": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_features, in_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_103": {
                "variable": {
                    "value": "self.log_alpha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_features, in_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_104": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_150": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_151": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_softmax_152": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc3(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_33": {
                "variable": {
                    "value": "lrt_std",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.linear(x * x, torch.exp(self.log_sigma * 2.0)) + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_76": {
                "variable": {
                    "value": "lrt_std",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.linear(x * x, torch.exp(self.log_sigma * 2.0)) + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_28": {
                "input": {
                    "value": "1e-16 + torch.abs(self.W)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "linear_37": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(x.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "F.log_softmax(self.fc3(x), dim=1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.W * (self.log_alpha < self.threshold).float()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_41": {
                "input": {
                    "value": "self.log_alpha > self.threshold",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "numel_41": {
                "input": {
                    "value": "self.log_alpha",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_47": {
                "input": {
                    "value": "kl",
                    "type": "variable",
                    "possible_values": [
                        [
                            "k1 * torch.sigmoid(k2 + k3 * self.log_alpha) - 0.5 * torch.log1p(torch.exp(-self.log_alpha))",
                            "BinOp"
                        ],
                        [
                            "k1 * torch.sigmoid(k2 + k3 * self.log_alpha) - 0.5 * torch.log1p(torch.exp(-self.log_alpha))",
                            "BinOp"
                        ],
                        [
                            "k1 * torch.sigmoid(k2 + k3 * self.log_alpha) - 0.5 * torch.log1p(torch.exp(-self.log_alpha))",
                            "BinOp"
                        ],
                        [
                            "0.0",
                            "float"
                        ],
                        [
                            "kl + module.kl_reg()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "linear_80": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(x.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "F.log_softmax(self.fc3(x), dim=1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.W * (self.log_alpha < self.threshold).float()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_84": {
                "input": {
                    "value": "self.log_alpha > self.threshold",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "numel_84": {
                "input": {
                    "value": "self.log_alpha",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_90": {
                "input": {
                    "value": "kl",
                    "type": "variable",
                    "possible_values": [
                        [
                            "k1 * torch.sigmoid(k2 + k3 * self.log_alpha) - 0.5 * torch.log1p(torch.exp(-self.log_alpha))",
                            "BinOp"
                        ],
                        [
                            "k1 * torch.sigmoid(k2 + k3 * self.log_alpha) - 0.5 * torch.log1p(torch.exp(-self.log_alpha))",
                            "BinOp"
                        ],
                        [
                            "k1 * torch.sigmoid(k2 + k3 * self.log_alpha) - 0.5 * torch.log1p(torch.exp(-self.log_alpha))",
                            "BinOp"
                        ],
                        [
                            "0.0",
                            "float"
                        ],
                        [
                            "kl + module.kl_reg()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "linear_119": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(x.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "F.log_softmax(self.fc3(x), dim=1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.W * (self.log_alpha < self.threshold).float()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_123": {
                "input": {
                    "value": "self.log_alpha > self.threshold",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "numel_123": {
                "input": {
                    "value": "self.log_alpha",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_129": {
                "input": {
                    "value": "kl",
                    "type": "variable",
                    "possible_values": [
                        [
                            "k1 * torch.sigmoid(k2 + k3 * self.log_alpha) - 0.5 * torch.log1p(torch.exp(-self.log_alpha))",
                            "BinOp"
                        ],
                        [
                            "k1 * torch.sigmoid(k2 + k3 * self.log_alpha) - 0.5 * torch.log1p(torch.exp(-self.log_alpha))",
                            "BinOp"
                        ],
                        [
                            "k1 * torch.sigmoid(k2 + k3 * self.log_alpha) - 0.5 * torch.log1p(torch.exp(-self.log_alpha))",
                            "BinOp"
                        ],
                        [
                            "0.0",
                            "float"
                        ],
                        [
                            "kl + module.kl_reg()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "linear_32": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(x.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "F.log_softmax(self.fc3(x), dim=1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_46": {
                "input": {
                    "value": "k2 + k3 * self.log_alpha",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log1p_46": {
                "input": {
                    "value": "torch.exp(-self.log_alpha)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_71": {
                "input": {
                    "value": "1e-16 + torch.abs(self.W)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "linear_75": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(x.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "F.log_softmax(self.fc3(x), dim=1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_89": {
                "input": {
                    "value": "k2 + k3 * self.log_alpha",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log1p_89": {
                "input": {
                    "value": "torch.exp(-self.log_alpha)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linear_117": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(x.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "F.log_softmax(self.fc3(x), dim=1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.W * mask",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_128": {
                "input": {
                    "value": "k2 + k3 * self.log_alpha",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log1p_128": {
                "input": {
                    "value": "torch.exp(-self.log_alpha)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cross_entropy_176": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "abs_28": {
                "input": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linear_33": {
                "input": {
                    "value": "x * x",
                    "type": "BinOp",
                    "possible_values": []
                },
                "weight": {
                    "value": "torch.exp(self.log_sigma * 2.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_46": {
                "input": {
                    "value": "-self.log_alpha",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "linear_76": {
                "input": {
                    "value": "x * x",
                    "type": "BinOp",
                    "possible_values": []
                },
                "weight": {
                    "value": "torch.exp(self.log_sigma * 2.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_89": {
                "input": {
                    "value": "-self.log_alpha",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "randn_like_116": {
                "input": {
                    "value": "self.log_alpha",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_116": {
                "input": {
                    "value": "self.log_alpha / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_128": {
                "input": {
                    "value": "-self.log_alpha",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_33": {
                "input": {
                    "value": "self.log_sigma * 2.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_71": {
                "input": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_76": {
                "input": {
                    "value": "self.log_sigma * 2.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "dropout/nn.py": {
        "torch": {
            "Linear_15": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_features",
                            "Method Argument"
                        ],
                        [
                            "in_features",
                            "Method Argument"
                        ],
                        [
                            "in_features",
                            "Method Argument"
                        ],
                        [
                            "in_features",
                            "Method Argument"
                        ],
                        [
                            "in_features",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_features",
                            "Method Argument"
                        ],
                        [
                            "out_features",
                            "Method Argument"
                        ],
                        [
                            "out_features",
                            "Method Argument"
                        ],
                        [
                            "out_features",
                            "Method Argument"
                        ],
                        [
                            "out_features",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_16": {
                "variable": {
                    "value": "self.alpha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "Tensor(out_features, in_features)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ones_like_62": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.linear.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_65": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_like_86": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.linear.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_89": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_like_114": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.alpha",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_120": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_133": {
                "variable": {
                    "value": "self.linears",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_165": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_302": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_308": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_315": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "abs_365": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.abs(w)",
                            "Call"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sqrt_380": {
                "variable": {
                    "value": "sqrt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.epsilon ** 2 + 4 * eta",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "linear_29": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.linear.weight * mask",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.linear.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_36": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.linear.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_78": {
                "variable": {
                    "value": "self.log_eta_lamda",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros_like(self.linear.weight) + 5",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_80": {
                "variable": {
                    "value": "self.log_eta_lamda",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros_like(self.linear.weight)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_143": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "linear(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_278": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "linear.alpha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "min": {
                    "value": "self.alpha_min",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_324": {
                "variable": {
                    "value": "sqrt_v_hat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "state['exp_avg_sq'] / (1 - beta_2 ** state['step'])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_361": {
                "input": {
                    "value": "torch.log(torch.abs(input) + self.epsilon)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_51": {
                "input": {
                    "value": "self.alpha < self.tol",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "numel_51": {
                "input": {
                    "value": "self.alpha",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_92": {
                "input": {
                    "value": "self.log_eta_lamda",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_like_115": {
                "input": {
                    "value": "self.alpha",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_361": {
                "input": {
                    "value": "torch.abs(input) + self.epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_382": {
                "input": {
                    "value": "torch.log((sqrt + self.epsilon) / 2) - (sqrt - self.epsilon) ** 2 / (4 * eta)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_like_80": {
                "input": {
                    "value": "self.linear.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_81": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_like_103": {
                "input": {
                    "value": "self.log_eta_lamda",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_103": {
                "input": {
                    "value": "-self.log_eta_lamda / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_240": {
                "input": {
                    "value": "linear.log_eta_lamda",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_241": {
                "input": {
                    "value": "linear.linear.weight ** 2 / eta",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_like_78": {
                "input": {
                    "value": "self.linear.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_82": {
                "input": {
                    "value": "eta_hat(self.linear.weight)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_243": {
                "input": {
                    "value": "linear.log_eta_lamda",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_281": {
                "input": {
                    "value": "linear.linear.weight ** 2 / eta_lamda",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_361": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_382": {
                "input": {
                    "value": "(sqrt + self.epsilon) / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_204": {
                "input": {
                    "value": "linear.log_eta_lamda",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}