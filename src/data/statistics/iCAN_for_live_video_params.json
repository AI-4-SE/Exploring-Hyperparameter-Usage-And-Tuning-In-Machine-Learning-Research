{
    "frcnn/lib/layer_utils/proposal_layer.py": {
        "tensorflow": {
            "reshape_65": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rpn_cls_prob[:, :, :, num_anchors:]",
                            "Subscript"
                        ],
                        [
                            "scores.reshape((-1, 1))",
                            "Call"
                        ],
                        [
                            "scores[order]",
                            "Subscript"
                        ],
                        [
                            "scores[keep]",
                            "Subscript"
                        ],
                        [
                            "rpn_cls_prob[:, :, :, num_anchors:]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(scores, shape=(-1,))",
                            "Call"
                        ],
                        [
                            "tf.gather(scores, indices)",
                            "Call"
                        ],
                        [
                            "tf.reshape(scores, shape=(-1, 1))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_66": {
                "variable": {
                    "value": "rpn_bbox_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "rpn_bbox_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rpn_bbox_pred.reshape((-1, 4))",
                            "Call"
                        ],
                        [
                            "tf.reshape(rpn_bbox_pred, shape=(-1, 4))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "non_max_suppression_72": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "boxes": {
                    "value": "proposals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bbox_transform_inv(anchors, rpn_bbox_pred)",
                            "Call"
                        ],
                        [
                            "clip_boxes(proposals, im_info[:2])",
                            "Call"
                        ],
                        [
                            "proposals[order, :]",
                            "Subscript"
                        ],
                        [
                            "proposals[keep, :]",
                            "Subscript"
                        ],
                        [
                            "bbox_transform_inv_tf(anchors, rpn_bbox_pred)",
                            "Call"
                        ],
                        [
                            "clip_boxes_tf(proposals, im_info[:2])",
                            "Call"
                        ]
                    ]
                },
                "scores": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rpn_cls_prob[:, :, :, num_anchors:]",
                            "Subscript"
                        ],
                        [
                            "scores.reshape((-1, 1))",
                            "Call"
                        ],
                        [
                            "scores[order]",
                            "Subscript"
                        ],
                        [
                            "scores[keep]",
                            "Subscript"
                        ],
                        [
                            "rpn_cls_prob[:, :, :, num_anchors:]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(scores, shape=(-1,))",
                            "Call"
                        ],
                        [
                            "tf.gather(scores, indices)",
                            "Call"
                        ],
                        [
                            "tf.reshape(scores, shape=(-1, 1))",
                            "Call"
                        ]
                    ]
                },
                "max_output_size": {
                    "value": "post_nms_topN",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg[cfg_key].RPN_POST_NMS_TOP_N",
                            "Attribute"
                        ],
                        [
                            "cfg[cfg_key].RPN_POST_NMS_TOP_N",
                            "Attribute"
                        ]
                    ]
                },
                "iou_threshold": {
                    "value": "nms_thresh",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg[cfg_key].RPN_NMS_THRESH",
                            "Attribute"
                        ],
                        [
                            "cfg[cfg_key].RPN_NMS_THRESH",
                            "Attribute"
                        ]
                    ]
                }
            },
            "gather_74": {
                "variable": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "proposals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bbox_transform_inv(anchors, rpn_bbox_pred)",
                            "Call"
                        ],
                        [
                            "clip_boxes(proposals, im_info[:2])",
                            "Call"
                        ],
                        [
                            "proposals[order, :]",
                            "Subscript"
                        ],
                        [
                            "proposals[keep, :]",
                            "Subscript"
                        ],
                        [
                            "bbox_transform_inv_tf(anchors, rpn_bbox_pred)",
                            "Call"
                        ],
                        [
                            "clip_boxes_tf(proposals, im_info[:2])",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.non_max_suppression(proposals, scores, max_output_size=post_nms_topN, iou_threshold=nms_thresh)",
                            "Call"
                        ]
                    ]
                }
            },
            "to_float_75": {
                "variable": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(proposals, indices)",
                            "Call"
                        ],
                        [
                            "tf.to_float(boxes)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_76": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rpn_cls_prob[:, :, :, num_anchors:]",
                            "Subscript"
                        ],
                        [
                            "scores.reshape((-1, 1))",
                            "Call"
                        ],
                        [
                            "scores[order]",
                            "Subscript"
                        ],
                        [
                            "scores[keep]",
                            "Subscript"
                        ],
                        [
                            "rpn_cls_prob[:, :, :, num_anchors:]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(scores, shape=(-1,))",
                            "Call"
                        ],
                        [
                            "tf.gather(scores, indices)",
                            "Call"
                        ],
                        [
                            "tf.reshape(scores, shape=(-1, 1))",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.non_max_suppression(proposals, scores, max_output_size=post_nms_topN, iou_threshold=nms_thresh)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_77": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rpn_cls_prob[:, :, :, num_anchors:]",
                            "Subscript"
                        ],
                        [
                            "scores.reshape((-1, 1))",
                            "Call"
                        ],
                        [
                            "scores[order]",
                            "Subscript"
                        ],
                        [
                            "scores[keep]",
                            "Subscript"
                        ],
                        [
                            "rpn_cls_prob[:, :, :, num_anchors:]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(scores, shape=(-1,))",
                            "Call"
                        ],
                        [
                            "tf.gather(scores, indices)",
                            "Call"
                        ],
                        [
                            "tf.reshape(scores, shape=(-1, 1))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_80": {
                "variable": {
                    "value": "batch_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(tf.shape(indices)[0], 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_81": {
                "variable": {
                    "value": "blob",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[batch_inds, boxes]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_80": {
                "input": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.non_max_suppression(proposals, scores, max_output_size=post_nms_topN, iou_threshold=nms_thresh)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "frcnn/lib/layer_utils/proposal_top_layer.py": {
        "tensorflow": {
            "reshape_66": {
                "variable": {
                    "value": "rpn_bbox_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "rpn_bbox_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rpn_bbox_pred.reshape((-1, 4))",
                            "Call"
                        ],
                        [
                            "rpn_bbox_pred[top_inds, :]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(rpn_bbox_pred, shape=(-1, 4))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_67": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rpn_cls_prob[:, :, :, num_anchors:]",
                            "Subscript"
                        ],
                        [
                            "scores.reshape((-1, 1))",
                            "Call"
                        ],
                        [
                            "scores[top_inds]",
                            "Subscript"
                        ],
                        [
                            "rpn_cls_prob[:, :, :, num_anchors:]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(scores, shape=(-1,))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "top_k_70": {
                "variable": {
                    "value": "(top_scores, top_inds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rpn_cls_prob[:, :, :, num_anchors:]",
                            "Subscript"
                        ],
                        [
                            "scores.reshape((-1, 1))",
                            "Call"
                        ],
                        [
                            "scores[top_inds]",
                            "Subscript"
                        ],
                        [
                            "rpn_cls_prob[:, :, :, num_anchors:]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(scores, shape=(-1,))",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "rpn_top_n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.TEST.RPN_TOP_N",
                            "Attribute"
                        ],
                        [
                            "cfg.TEST.RPN_TOP_N",
                            "Attribute"
                        ]
                    ]
                }
            },
            "reshape_71": {
                "variable": {
                    "value": "top_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "top_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(top_scores, shape=(-1, 1))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "gather_72": {
                "variable": {
                    "value": "top_anchors",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "anchors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "anchors[top_inds, :]",
                            "Subscript"
                        ]
                    ]
                },
                "indices": {
                    "value": "top_inds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "npr.choice(length, size=rpn_top_n, replace=True)",
                            "Call"
                        ],
                        [
                            "scores.argsort(0)[::-1]",
                            "Subscript"
                        ],
                        [
                            "top_inds[:rpn_top_n]",
                            "Subscript"
                        ],
                        [
                            "top_inds.reshape(rpn_top_n)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_73": {
                "variable": {
                    "value": "top_rpn_bbox",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "rpn_bbox_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rpn_bbox_pred.reshape((-1, 4))",
                            "Call"
                        ],
                        [
                            "rpn_bbox_pred[top_inds, :]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(rpn_bbox_pred, shape=(-1, 4))",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "top_inds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "npr.choice(length, size=rpn_top_n, replace=True)",
                            "Call"
                        ],
                        [
                            "scores.argsort(0)[::-1]",
                            "Subscript"
                        ],
                        [
                            "top_inds[:rpn_top_n]",
                            "Subscript"
                        ],
                        [
                            "top_inds.reshape(rpn_top_n)",
                            "Call"
                        ]
                    ]
                }
            },
            "to_float_82": {
                "variable": {
                    "value": "proposals",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "proposals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bbox_transform_inv(anchors, rpn_bbox_pred)",
                            "Call"
                        ],
                        [
                            "clip_boxes(proposals, im_info[:2])",
                            "Call"
                        ],
                        [
                            "bbox_transform_inv_tf(top_anchors, top_rpn_bbox)",
                            "Call"
                        ],
                        [
                            "clip_boxes_tf(proposals, im_info[:2])",
                            "Call"
                        ],
                        [
                            "tf.to_float(proposals)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_83": {
                "variable": {
                    "value": "batch_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(rpn_top_n, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "concat_84": {
                "variable": {
                    "value": "blob",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[batch_inds, proposals]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "frcnn/lib/layer_utils/snippets.py": {
        "tensorflow": {
            "meshgrid_35": {
                "variable": {
                    "value": "(shift_x, shift_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*args": {
                    "value": "shift_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.arange(0, width) * feat_stride",
                            "BinOp"
                        ],
                        [
                            "tf.range(width) * feat_stride",
                            "BinOp"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "shift_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.arange(0, height) * feat_stride",
                            "BinOp"
                        ],
                        [
                            "tf.range(height) * feat_stride",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_36": {
                "variable": {
                    "value": "sx",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "shift_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.arange(0, width) * feat_stride",
                            "BinOp"
                        ],
                        [
                            "tf.range(width) * feat_stride",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_37": {
                "variable": {
                    "value": "sy",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "shift_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.arange(0, height) * feat_stride",
                            "BinOp"
                        ],
                        [
                            "tf.range(height) * feat_stride",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_38": {
                "variable": {
                    "value": "shifts",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.stack([sx, sy, sx, sy])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_39": {
                "variable": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "height",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "transpose_40": {
                "variable": {
                    "value": "shifts",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.reshape(shifts, shape=[1, K, 4])",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "(1, 0, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "constant_44": {
                "variable": {
                    "value": "anchor_constant",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "anchors.reshape((1, A, 4))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_47": {
                "variable": {
                    "value": "anchors_tf",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.add(anchor_constant, shifts)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(length, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "stack_38": {
                "values": {
                    "value": "[sx, sy, sx, sy]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_40": {
                "tensor": {
                    "value": "shifts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.vstack((shift_x.ravel(), shift_y.ravel(), shift_x.ravel(), shift_y.ravel())).transpose()",
                            "Call"
                        ],
                        [
                            "tf.transpose(tf.stack([sx, sy, sx, sy]))",
                            "Call"
                        ],
                        [
                            "tf.transpose(tf.reshape(shifts, shape=[1, K, 4]), perm=(1, 0, 2))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, K, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "add_47": {
                "x": {
                    "value": "anchor_constant",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(anchors.reshape((1, A, 4)), dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "shifts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.vstack((shift_x.ravel(), shift_y.ravel(), shift_x.ravel(), shift_y.ravel())).transpose()",
                            "Call"
                        ],
                        [
                            "tf.transpose(tf.stack([sx, sy, sx, sy]))",
                            "Call"
                        ],
                        [
                            "tf.transpose(tf.reshape(shifts, shape=[1, K, 4]), perm=(1, 0, 2))",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_49": {
                "x": {
                    "value": "anchors_tf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.add(anchor_constant, shifts), shape=(length, 4))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "frcnn/lib/model/bbox_transform.py": {
        "tensorflow": {
            "cast_86": {
                "variable": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "boxes.astype(deltas.dtype, copy=False)",
                            "Call"
                        ],
                        [
                            "tf.cast(boxes, deltas.dtype)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "deltas.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_89": {
                "variable": {
                    "value": "ctr_x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "boxes[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "widths * 0.5",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "add_90": {
                "variable": {
                    "value": "ctr_y",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "boxes[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "heights * 0.5",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "add_97": {
                "variable": {
                    "value": "pred_ctr_x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.multiply(dx, widths)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "ctr_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "boxes[:, 0] + 0.5 * widths",
                            "BinOp"
                        ],
                        [
                            "tf.add(boxes[:, 0], widths * 0.5)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_98": {
                "variable": {
                    "value": "pred_ctr_y",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.multiply(dy, heights)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "ctr_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "boxes[:, 1] + 0.5 * heights",
                            "BinOp"
                        ],
                        [
                            "tf.add(boxes[:, 1], heights * 0.5)",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_99": {
                "variable": {
                    "value": "pred_w",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.exp(dw)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "widths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "boxes[:, 2] - boxes[:, 0] + 1.0",
                            "BinOp"
                        ],
                        [
                            "tf.subtract(boxes[:, 2], boxes[:, 0]) + 1.0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "multiply_100": {
                "variable": {
                    "value": "pred_h",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.exp(dh)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "heights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "boxes[:, 3] - boxes[:, 1] + 1.0",
                            "BinOp"
                        ],
                        [
                            "tf.subtract(boxes[:, 3], boxes[:, 1]) + 1.0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "subtract_102": {
                "variable": {
                    "value": "pred_boxes0",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "pred_ctr_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dx * widths[:, np.newaxis] + ctr_x[:, np.newaxis]",
                            "BinOp"
                        ],
                        [
                            "tf.add(tf.multiply(dx, widths), ctr_x)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "pred_w * 0.5",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "subtract_103": {
                "variable": {
                    "value": "pred_boxes1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "pred_ctr_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dy * heights[:, np.newaxis] + ctr_y[:, np.newaxis]",
                            "BinOp"
                        ],
                        [
                            "tf.add(tf.multiply(dy, heights), ctr_y)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "pred_h * 0.5",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "add_104": {
                "variable": {
                    "value": "pred_boxes2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "pred_ctr_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dx * widths[:, np.newaxis] + ctr_x[:, np.newaxis]",
                            "BinOp"
                        ],
                        [
                            "tf.add(tf.multiply(dx, widths), ctr_x)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "pred_w * 0.5",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "add_105": {
                "variable": {
                    "value": "pred_boxes3",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "pred_ctr_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dy * heights[:, np.newaxis] + ctr_y[:, np.newaxis]",
                            "BinOp"
                        ],
                        [
                            "tf.add(tf.multiply(dy, heights), ctr_y)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "pred_h * 0.5",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_111": {
                "variable": {
                    "value": "b0",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.minimum(boxes[:, 0], im_info[1] - 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "maximum_112": {
                "variable": {
                    "value": "b1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.minimum(boxes[:, 1], im_info[0] - 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "maximum_113": {
                "variable": {
                    "value": "b2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.minimum(boxes[:, 2], im_info[1] - 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "maximum_114": {
                "variable": {
                    "value": "b3",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.minimum(boxes[:, 3], im_info[0] - 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_107": {
                "values": {
                    "value": "[pred_boxes0, pred_boxes1, pred_boxes2, pred_boxes3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_115": {
                "values": {
                    "value": "[b0, b1, b2, b3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "subtract_87": {
                "x": {
                    "value": "boxes[:, 2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "boxes[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "subtract_88": {
                "x": {
                    "value": "boxes[:, 3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "boxes[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "multiply_97": {
                "x": {
                    "value": "dx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "deltas[:, 0::4]",
                            "Subscript"
                        ],
                        [
                            "deltas[:, 0]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "widths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "boxes[:, 2] - boxes[:, 0] + 1.0",
                            "BinOp"
                        ],
                        [
                            "tf.subtract(boxes[:, 2], boxes[:, 0]) + 1.0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "multiply_98": {
                "x": {
                    "value": "dy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "deltas[:, 1::4]",
                            "Subscript"
                        ],
                        [
                            "deltas[:, 1]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "heights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "boxes[:, 3] - boxes[:, 1] + 1.0",
                            "BinOp"
                        ],
                        [
                            "tf.subtract(boxes[:, 3], boxes[:, 1]) + 1.0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "exp_99": {
                "x": {
                    "value": "dw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "deltas[:, 2::4]",
                            "Subscript"
                        ],
                        [
                            "deltas[:, 2]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "exp_100": {
                "x": {
                    "value": "dh",
                    "type": "variable",
                    "possible_values": [
                        [
                            "deltas[:, 3::4]",
                            "Subscript"
                        ],
                        [
                            "deltas[:, 3]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "minimum_111": {
                "x": {
                    "value": "boxes[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "im_info[1] - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "minimum_112": {
                "x": {
                    "value": "boxes[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "im_info[0] - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "minimum_113": {
                "x": {
                    "value": "boxes[:, 2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "im_info[1] - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "minimum_114": {
                "x": {
                    "value": "boxes[:, 3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "im_info[0] - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "frcnn/lib/model/train_val.py": {
        "tensorflow": {
            "ConfigProto_370": {
                "variable": {
                    "value": "tfconfig",
                    "type": "variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "global_variables_183": {
                "variable": {
                    "value": "variables",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_190": {
                "variable": {
                    "value": "restorer",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "variables_to_restore",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.net.get_variables_to_restore(variables, var_keep_dic)",
                            "Call"
                        ]
                    ]
                }
            },
            "NewCheckpointReader_107": {
                "variable": {
                    "value": "reader",
                    "type": "variable",
                    "possible_values": []
                },
                "filepattern": {
                    "value": "file_name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Variable_127": {
                "variable": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "cfg.TRAIN.LEARNING_RATE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MomentumOptimizer_128": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(cfg.TRAIN.LEARNING_RATE, trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "momentum": {
                    "value": "cfg.TRAIN.MOMENTUM",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_148": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "100000",
                    "type": "int",
                    "possible_values": []
                }
            },
            "FileWriter_150": {
                "variable": {
                    "value": "self.writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logdir": {
                    "value": "self.tbdir",
                    "type": "Attribute",
                    "possible_values": []
                },
                "graph": {
                    "value": "sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FileWriter_151": {
                "variable": {
                    "value": "self.valwriter",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logdir": {
                    "value": "self.tbvaldir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_373": {
                "config": {
                    "value": "tfconfig",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "set_random_seed_119": {
                "seed": {
                    "value": "cfg.RNG_SEED",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variables_initializer_185": {
                "var_list": {
                    "value": "variables",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.global_variables()",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "init",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_135": {
                "name_or_scope": {
                    "value": "Gradient_Mult",
                    "type": "str",
                    "possible_values": []
                }
            },
            "assign_273": {
                "ref": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(cfg.TRAIN.LEARNING_RATE, trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.TRAIN.LEARNING_RATE",
                            "Attribute"
                        ],
                        [
                            "cfg.TRAIN.LEARNING_RATE",
                            "Attribute"
                        ],
                        [
                            "rate * cfg.TRAIN.GAMMA",
                            "BinOp"
                        ]
                    ]
                }
            },
            "multiply_141": {
                "variable": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(grad, scale)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "float"
                        ],
                        [
                            "scale * 2.0",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "frcnn/lib/nets/.ipynb_checkpoints/resnet_v1-checkpoint.py": {
        "tensorflow": {
            "squeeze_61": {
                "variable": {
                    "value": "batch_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.slice(rois, [0, 0], [-1, 1], name='batch_id')",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_63": {
                "variable": {
                    "value": "bottom_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bottom",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stop_gradient_71": {
                "variable": {
                    "value": "bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.concat([y1, x1, y2, x2], 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_87": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "resnet_utils.conv2d_same(self._image, 64, 7, stride=2, scope='conv1')",
                            "Call"
                        ],
                        [
                            "tf.pad(net, [[0, 0], [1, 1], [1, 1], [0, 0]])",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [3, 3], stride=2, padding='VALID', scope='pool1')",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [1, 1], [1, 1], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "max_pool2d_88": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "resnet_utils.conv2d_same(self._image, 64, 7, stride=2, scope='conv1')",
                            "Call"
                        ],
                        [
                            "tf.pad(net, [[0, 0], [1, 1], [1, 1], [0, 0]])",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [3, 3], stride=2, padding='VALID', scope='pool1')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "scope": {
                    "value": "pool1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_128": {
                "variable": {
                    "value": "fc7",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "fc7",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(fc7, axis=[1, 2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_60": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "crop_and_resize_74": {
                "variable": {
                    "value": "crops",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "bottom",
                    "type": "variable",
                    "possible_values": []
                },
                "boxes": {
                    "value": "bboxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stop_gradient(tf.concat([y1, x1, y2, x2], 1))",
                            "Call"
                        ]
                    ]
                },
                "box_indices": {
                    "value": "tf.to_int32(batch_ids)",
                    "type": "Call",
                    "possible_values": []
                },
                "crop_size": {
                    "value": "[pre_pool_size, pre_pool_size]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "crops",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool2d_76": {
                "variable": {
                    "value": "crops",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "crops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.crop_and_resize(bottom, bboxes, tf.to_int32(batch_ids), [pre_pool_size, pre_pool_size], name='crops')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(crops, [2, 2], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.image.crop_and_resize(bottom, bboxes, tf.to_int32(batch_ids), [cfg.POOLING_SIZE, cfg.POOLING_SIZE], name='crops')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "crop_and_resize_78": {
                "variable": {
                    "value": "crops",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "bottom",
                    "type": "variable",
                    "possible_values": []
                },
                "boxes": {
                    "value": "bboxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stop_gradient(tf.concat([y1, x1, y2, x2], 1))",
                            "Call"
                        ]
                    ]
                },
                "box_indices": {
                    "value": "tf.to_int32(batch_ids)",
                    "type": "Call",
                    "possible_values": []
                },
                "crop_size": {
                    "value": "[cfg.POOLING_SIZE, cfg.POOLING_SIZE]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "crops",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_85": {
                "name_or_scope": {
                    "value": "self._scope",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_name": {
                    "value": "self._scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_180": {
                "name_or_scope": {
                    "value": "Fix_Resnet_V1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_183": {
                "variable": {
                    "value": "conv1_rgb",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "conv1_rgb",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[7, 7, 3, 64]",
                    "type": "List",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Saver_184": {
                "variable": {
                    "value": "restorer_fc",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "{self._scope + '/conv1/weights': conv1_rgb}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "slice_61": {
                "input_": {
                    "value": "rois",
                    "type": "variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "batch_id",
                    "type": "str",
                    "possible_values": []
                }
            },
            "slice_66": {
                "input_": {
                    "value": "rois",
                    "type": "variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "x1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "slice_67": {
                "input_": {
                    "value": "rois",
                    "type": "variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "y1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "slice_68": {
                "input_": {
                    "value": "rois",
                    "type": "variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "x2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "slice_69": {
                "input_": {
                    "value": "rois",
                    "type": "variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "y2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_71": {
                "values": {
                    "value": "[y1, x1, y2, x2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_181": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "to_float_64": {
                "x": {
                    "value": "bottom_shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "to_float_65": {
                "x": {
                    "value": "bottom_shape[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "to_int32_74": {
                "x": {
                    "value": "batch_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(tf.slice(rois, [0, 0], [-1, 1], name='batch_id'), [1])",
                            "Call"
                        ]
                    ]
                }
            },
            "to_int32_78": {
                "x": {
                    "value": "batch_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(tf.slice(rois, [0, 0], [-1, 1], name='batch_id'), [1])",
                            "Call"
                        ]
                    ]
                }
            },
            "assign_187": {
                "ref": {
                    "value": "self._variables_to_fix[self._scope + '/conv1/weights:0']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.reverse(conv1_rgb, [2])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reverse_188": {
                "tensor": {
                    "value": "conv1_rgb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('conv1_rgb', [7, 7, 3, 64], trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "frcnn/lib/nets/mobilenet_v1.py": {
        "tensorflow": {
            "truncated_normal_initializer_187": {
                "variable": {
                    "value": "weights_init",
                    "type": "variable",
                    "possible_values": []
                },
                "stddev": {
                    "value": "stddev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.09",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pad_45": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(inputs, [[0, 0], [pad_beg, pad_end], [pad_beg, pad_end], [0, 0]])",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [pad_beg, pad_end], [pad_beg, pad_end], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "separable_conv2d_37": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(inputs, [[0, 0], [pad_beg, pad_end], [pad_beg, pad_end], [0, 0]])",
                            "Call"
                        ]
                    ]
                },
                "depthwise_filter": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "pointwise_filter": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": []
                },
                "depth_multiplier": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "rate": {
                    "value": "rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "rate * conv_def.stride",
                            "BinOp"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "separable_conv2d_47": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(inputs, [[0, 0], [pad_beg, pad_end], [pad_beg, pad_end], [0, 0]])",
                            "Call"
                        ]
                    ]
                },
                "depthwise_filter": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "pointwise_filter": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": []
                },
                "depth_multiplier": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                },
                "rate": {
                    "value": "rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "rate * conv_def.stride",
                            "BinOp"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_121": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "MobilenetV1",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_mean_249": {
                "variable": {
                    "value": "fc7",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "fc7",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mobilenet_v1_base(pool5, _CONV_DEFS[12:], starting_layer=12, depth_multiplier=self._depth_multiplier, reuse=reuse, scope=self._scope)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fc7, axis=[1, 2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_268": {
                "name_or_scope": {
                    "value": "Fix_MobileNet_V1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_271": {
                "variable": {
                    "value": "Conv2d_0_rgb",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "Conv2d_0_rgb",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[3, 3, 3, max(int(32 * self._depth_multiplier), 8)]",
                    "type": "List",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Saver_274": {
                "variable": {
                    "value": "restorer_fc",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "{self._scope + '/Conv2d_0/weights': Conv2d_0_rgb}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "conv2d_164": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "resnet_utils.conv2d_same(net, depth(conv_def.depth), conv_def.kernel, stride=conv_def.stride, scope=end_point)",
                            "Call"
                        ],
                        [
                            "separable_conv2d_same(net, conv_def.kernel, stride=layer_stride, rate=layer_rate, scope=end_point)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, depth(conv_def.depth), [1, 1], stride=1, scope=end_point)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "depth(conv_def.depth)",
                    "type": "Call",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "end_point",
                    "type": "variable",
                    "possible_values": [
                        [
                            "end_point_base",
                            "variable"
                        ],
                        [
                            "end_point_base + '_depthwise'",
                            "BinOp"
                        ],
                        [
                            "end_point_base + '_pointwise'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "device_269": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "assign_277": {
                "ref": {
                    "value": "self._variables_to_fix[self._scope + '/Conv2d_0/weights:0']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.reverse(Conv2d_0_rgb / (255.0 / 2.0), [2])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reverse_278": {
                "tensor": {
                    "value": "Conv2d_0_rgb / (255.0 / 2.0)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "frcnn/lib/nets/network.py": {
        "tensorflow": {
            "resize_bilinear_44": {
                "variable": {
                    "value": "resized",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._image + cfg.PIXEL_MEANS",
                            "BinOp"
                        ],
                        [
                            "tf.py_func(draw_bounding_boxes, [self._gt_image, self._gt_boxes, self._im_info], tf.float32, name='gt_boxes')",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "tf.to_int32(self._im_info[:2] / self._im_info[2])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reverse_45": {
                "variable": {
                    "value": "self._gt_image",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "resized",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_bilinear(image, tf.to_int32(self._im_info[:2] / self._im_info[2]))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "py_func_51": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "draw_bounding_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[self._gt_image, self._gt_boxes, self._im_info]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "gt_boxes",
                    "type": "str",
                    "possible_values": []
                }
            },
            "shape_69": {
                "variable": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bottom",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "abs_268": {
                "variable": {
                    "value": "abs_in_box_diff",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "in_box_diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bbox_inside_weights * box_diff",
                            "BinOp"
                        ]
                    ]
                }
            },
            "stop_gradient_269": {
                "variable": {
                    "value": "smoothL1_sign",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.to_float(tf.less(abs_in_box_diff, 1.0 / sigma_2))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_273": {
                "variable": {
                    "value": "loss_box",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reduce_sum(out_loss_box, axis=dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_324": {
                "variable": {
                    "value": "rpn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net_conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._image_to_head(is_training)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "cfg.RPN_CHANNELS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "trainable": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.truncated_normal_initializer(mean=0.0, stddev=0.01)",
                            "Call"
                        ],
                        [
                            "tf.random_normal_initializer(mean=0.0, stddev=0.01)",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "rpn_conv/3x3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_327": {
                "variable": {
                    "value": "rpn_cls_score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rpn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(net_conv, cfg.RPN_CHANNELS, [3, 3], trainable=is_training, weights_initializer=initializer, scope='rpn_conv/3x3')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "self._num_anchors * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "trainable": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.truncated_normal_initializer(mean=0.0, stddev=0.01)",
                            "Call"
                        ],
                        [
                            "tf.random_normal_initializer(mean=0.0, stddev=0.01)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "scope": {
                    "value": "rpn_cls_score",
                    "type": "str",
                    "possible_values": []
                }
            },
            "argmax_333": {
                "variable": {
                    "value": "rpn_cls_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reshape(rpn_cls_score_reshape, [-1, 2])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "rpn_cls_pred",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_335": {
                "variable": {
                    "value": "rpn_bbox_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rpn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(net_conv, cfg.RPN_CHANNELS, [3, 3], trainable=is_training, weights_initializer=initializer, scope='rpn_conv/3x3')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "self._num_anchors * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "trainable": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.truncated_normal_initializer(mean=0.0, stddev=0.01)",
                            "Call"
                        ],
                        [
                            "tf.random_normal_initializer(mean=0.0, stddev=0.01)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "scope": {
                    "value": "rpn_bbox_pred",
                    "type": "str",
                    "possible_values": []
                }
            },
            "argmax_367": {
                "variable": {
                    "value": "cls_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cls_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._predictions['cls_score']",
                            "Subscript"
                        ],
                        [
                            "slim.fully_connected(fc7, self._num_classes, weights_initializer=initializer, trainable=is_training, activation_fn=None, scope='cls_score')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "cls_pred",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_388": {
                "variable": {
                    "value": "self._image",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, None, None, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_389": {
                "variable": {
                    "value": "self._im_info",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_390": {
                "variable": {
                    "value": "self._gt_boxes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "image_55": {
                "name": {
                    "value": "GROUND_TRUTH",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._image + cfg.PIXEL_MEANS",
                            "BinOp"
                        ],
                        [
                            "tf.py_func(draw_bounding_boxes, [self._gt_image, self._gt_boxes, self._im_info], tf.float32, name='gt_boxes')",
                            "Call"
                        ]
                    ]
                }
            },
            "histogram_58": {
                "name": {
                    "value": "ACT/ + tensor.op.name + /activations",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "scalar_59": {
                "name": {
                    "value": "ACT/ + tensor.op.name + /zero_fraction",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.nn.zero_fraction(tensor)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "histogram_63": {
                "name": {
                    "value": "SCORE/ + tensor.op.name + / + key + /scores",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "histogram_66": {
                "name": {
                    "value": "'TRAIN/' + var.op.name",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ],
                        [
                            "self._act_summaries",
                            "Attribute"
                        ],
                        [
                            "self._train_summaries",
                            "Attribute"
                        ]
                    ]
                }
            },
            "transpose_72": {
                "variable": {
                    "value": "to_caffe",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "bottom",
                    "type": "variable",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_74": {
                "variable": {
                    "value": "reshaped",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "to_caffe",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(bottom, [0, 3, 1, 2])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.concat(axis=0, values=[[1, num_dim, -1], [input_shape[2]]])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_77": {
                "variable": {
                    "value": "to_tf",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "reshaped",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(to_caffe, tf.concat(axis=0, values=[[1, num_dim, -1], [input_shape[2]]]))",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_82": {
                "variable": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bottom",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reshape_83": {
                "variable": {
                    "value": "bottom_reshaped",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "bottom",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, input_shape[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_84": {
                "variable": {
                    "value": "reshaped_score",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "bottom_reshaped",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(bottom, [-1, input_shape[-1]])",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "softmax_86": {
                "logits": {
                    "value": "bottom",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "squeeze_143": {
                "variable": {
                    "value": "batch_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.slice(rois, [0, 0], [-1, 1], name='batch_id')",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_145": {
                "variable": {
                    "value": "bottom_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bottom",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stop_gradient_153": {
                "variable": {
                    "value": "bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.concat([y1, x1, y2, x2], axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "crop_and_resize_155": {
                "variable": {
                    "value": "crops",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "bottom",
                    "type": "variable",
                    "possible_values": []
                },
                "boxes": {
                    "value": "bboxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stop_gradient(tf.concat([y1, x1, y2, x2], axis=1))",
                            "Call"
                        ]
                    ]
                },
                "box_indices": {
                    "value": "tf.to_int32(batch_ids)",
                    "type": "Call",
                    "possible_values": []
                },
                "crop_size": {
                    "value": "[pre_pool_size, pre_pool_size]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "crops",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool2d_157": {
                "input": {
                    "value": "crops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.crop_and_resize(bottom, bboxes, tf.to_int32(batch_ids), [pre_pool_size, pre_pool_size], name='crops')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dropout_160": {
                "x": {
                    "value": "bottom",
                    "type": "variable",
                    "possible_values": []
                },
                "rate": {
                    "value": "ratio",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "py_func_164": {
                "variable": {
                    "value": "(rpn_labels, rpn_bbox_targets, rpn_bbox_inside_weights, rpn_bbox_outside_weights)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "func": {
                    "value": "anchor_target_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[rpn_cls_score, self._gt_boxes, self._im_info, self._feat_stride, self._anchors, self._num_anchors]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "[tf.float32, tf.float32, tf.float32, tf.float32]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "anchor_target",
                    "type": "str",
                    "possible_values": []
                }
            },
            "to_int32_175": {
                "variable": {
                    "value": "rpn_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "rpn_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_int32(rpn_labels, name='to_int32')",
                            "Call"
                        ],
                        [
                            "self._anchor_target_layer(rpn_cls_score, 'anchor')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "to_int32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "py_func_187": {
                "variable": {
                    "value": "(rois, roi_scores, labels, bbox_targets, bbox_inside_weights, bbox_outside_weights)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "func": {
                    "value": "proposal_target_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[rois, roi_scores, self._gt_boxes, self._num_classes]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "[tf.float32, tf.float32, tf.float32, tf.float32, tf.float32, tf.float32]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "proposal_target",
                    "type": "str",
                    "possible_values": []
                }
            },
            "to_int32_201": {
                "variable": {
                    "value": "self._proposal_targets[labels]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "to_int32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "to_int32_213": {
                "variable": {
                    "value": "height",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.ceil(self._im_info[0] / np.float32(self._feat_stride[0]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "to_int32_214": {
                "variable": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.ceil(self._im_info[1] / np.float32(self._feat_stride[0]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_236": {
                "variable": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": []
                },
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_237": {
                "variable": {
                    "value": "initializer_bbox",
                    "type": "variable",
                    "possible_values": []
                },
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "random_normal_initializer_239": {
                "variable": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": []
                },
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "random_normal_initializer_240": {
                "variable": {
                    "value": "initializer_bbox",
                    "type": "variable",
                    "possible_values": []
                },
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reshape_282": {
                "variable": {
                    "value": "rpn_cls_score",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self._predictions['rpn_cls_score_reshape']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_283": {
                "variable": {
                    "value": "rpn_label",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self._anchor_targets['rpn_labels']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "where_284": {
                "variable": {
                    "value": "rpn_select",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.not_equal(rpn_label, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_285": {
                "variable": {
                    "value": "rpn_cls_score",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.gather(rpn_cls_score, rpn_select)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_286": {
                "variable": {
                    "value": "rpn_label",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.gather(rpn_label, rpn_select)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_287": {
                "variable": {
                    "value": "rpn_cross_entropy",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sparse_softmax_cross_entropy_with_logits(logits=rpn_cls_score, labels=rpn_label)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_300": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self._proposal_targets['labels']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_301": {
                "variable": {
                    "value": "cross_entropy",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sparse_softmax_cross_entropy_with_logits(logits=cls_score, labels=label)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_n_316": {
                "variable": {
                    "value": "regularization_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "tf.losses.get_regularization_losses()",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "regu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "trainable_variables_425": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "merge_all_449": {
                "variable": {
                    "value": "self._summary_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "merge_450": {
                "variable": {
                    "value": "self._summary_op_val",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "val_summaries",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "to_int32_44": {
                "x": {
                    "value": "self._im_info[:2] / self._im_info[2]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zero_fraction_60": {
                "value": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_70": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reshape_85": {
                "tensor": {
                    "value": "reshaped_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(bottom_reshaped, name=name)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(bottom)",
                            "Call"
                        ],
                        [
                            "tf.shape(bottom)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_89": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "py_func_100": {
                "variable": {
                    "value": "(rois, rpn_scores)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "func": {
                    "value": "proposal_top_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[rpn_cls_prob, rpn_bbox_pred, self._im_info, self._feat_stride, self._anchors, self._num_anchors]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "[tf.float32, tf.float32]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "proposal_top",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_111": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "py_func_123": {
                "variable": {
                    "value": "(rois, rpn_scores)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "func": {
                    "value": "proposal_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[rpn_cls_prob, rpn_bbox_pred, self._im_info, self._mode, self._feat_stride, self._anchors, self._num_anchors]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "[tf.float32, tf.float32]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "proposal",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_135": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_142": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_163": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_186": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_211": {
                "name_or_scope": {
                    "value": "'ANCHOR_' + self._tag",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "py_func_224": {
                "variable": {
                    "value": "(anchors, anchor_length)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "func": {
                    "value": "generate_anchors_pre",
                    "type": "variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[height, width, self._feat_stride, self._anchor_scales, self._anchor_ratios]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "[tf.float32, tf.int32]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "generate_anchors",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_243": {
                "name_or_scope": {
                    "value": "self._scope",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_name": {
                    "value": "self._scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_255": {
                "name_or_scope": {
                    "value": "self._scope",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_name": {
                    "value": "self._scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "to_float_269": {
                "x": {
                    "value": "tf.less(abs_in_box_diff, 1.0 / sigma_2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_273": {
                "input_tensor": {
                    "value": "out_loss_box",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bbox_outside_weights * in_loss_box",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1]",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_280": {
                "name_or_scope": {
                    "value": "'LOSS_' + self._tag",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_333": {
                "tensor": {
                    "value": "rpn_cls_score_reshape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._reshape_layer(rpn_cls_score, 2, 'rpn_cls_score_reshape')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_75": {
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[[1, num_dim, -1], [input_shape[2]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_143": {
                "input_": {
                    "value": "rois",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._region_proposal(net_conv, is_training, initializer)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "batch_id",
                    "type": "str",
                    "possible_values": []
                }
            },
            "slice_148": {
                "input_": {
                    "value": "rois",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._region_proposal(net_conv, is_training, initializer)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "x1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "slice_149": {
                "input_": {
                    "value": "rois",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._region_proposal(net_conv, is_training, initializer)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "y1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "slice_150": {
                "input_": {
                    "value": "rois",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._region_proposal(net_conv, is_training, initializer)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "x2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "slice_151": {
                "input_": {
                    "value": "rois",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._region_proposal(net_conv, is_training, initializer)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "y2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_153": {
                "values": {
                    "value": "[y1, x1, y2, x2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "to_int32_155": {
                "x": {
                    "value": "batch_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(tf.slice(rois, [0, 0], [-1, 1], name='batch_id'), [1])",
                            "Call"
                        ]
                    ]
                }
            },
            "ceil_213": {
                "x": {
                    "value": "self._im_info[0] / np.float32(self._feat_stride[0])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ceil_214": {
                "x": {
                    "value": "self._im_info[1] / np.float32(self._feat_stride[0])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "less_269": {
                "x": {
                    "value": "abs_in_box_diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.abs(in_box_diff)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1.0 / sigma_2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "not_equal_284": {
                "x": {
                    "value": "rpn_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(self._anchor_targets['rpn_labels'], [-1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.gather(rpn_label, rpn_select), [-1])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_285": {
                "params": {
                    "value": "rpn_cls_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(self._predictions['rpn_cls_score_reshape'], [-1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.gather(rpn_cls_score, rpn_select), [-1, 2])",
                            "Call"
                        ],
                        [
                            "slim.conv2d(rpn, self._num_anchors * 2, [1, 1], trainable=is_training, weights_initializer=initializer, padding='VALID', activation_fn=None, scope='rpn_cls_score')",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "rpn_select",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(tf.not_equal(rpn_label, -1))",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_286": {
                "params": {
                    "value": "rpn_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(self._anchor_targets['rpn_labels'], [-1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.gather(rpn_label, rpn_select), [-1])",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "rpn_select",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(tf.not_equal(rpn_label, -1))",
                            "Call"
                        ]
                    ]
                }
            },
            "sparse_softmax_cross_entropy_with_logits_288": {
                "logits": {
                    "value": "rpn_cls_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(self._predictions['rpn_cls_score_reshape'], [-1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.gather(rpn_cls_score, rpn_select), [-1, 2])",
                            "Call"
                        ],
                        [
                            "slim.conv2d(rpn, self._num_anchors * 2, [1, 1], trainable=is_training, weights_initializer=initializer, padding='VALID', activation_fn=None, scope='rpn_cls_score')",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "rpn_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(self._anchor_targets['rpn_labels'], [-1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.gather(rpn_label, rpn_select), [-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "sparse_softmax_cross_entropy_with_logits_301": {
                "logits": {
                    "value": "cls_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._predictions['cls_score']",
                            "Subscript"
                        ],
                        [
                            "slim.fully_connected(fc7, self._num_classes, weights_initializer=initializer, trainable=is_training, activation_fn=None, scope='cls_score')",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(self._proposal_targets['labels'], [-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "get_regularization_losses_316": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "control_dependencies_342": {
                "control_inputs": {
                    "value": "[rpn_labels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "device_438": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "to_float_146": {
                "x": {
                    "value": "bottom_shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "to_float_147": {
                "x": {
                    "value": "bottom_shape[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "pow_270": {
                "x": {
                    "value": "in_box_diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bbox_inside_weights * box_diff",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_initializer_420": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "scalar_441": {
                "name": {
                    "value": "key",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ],
                        [
                            "self._act_summaries",
                            "Attribute"
                        ],
                        [
                            "self._train_summaries",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "frcnn/lib/nets/resnet_v1.py": {
        "tensorflow": {
            "squeeze_61": {
                "variable": {
                    "value": "batch_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.slice(rois, [0, 0], [-1, 1], name='batch_id')",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_63": {
                "variable": {
                    "value": "bottom_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bottom",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stop_gradient_71": {
                "variable": {
                    "value": "bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.concat([y1, x1, y2, x2], 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_87": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "resnet_utils.conv2d_same(self._image, 64, 7, stride=2, scope='conv1')",
                            "Call"
                        ],
                        [
                            "tf.pad(net, [[0, 0], [1, 1], [1, 1], [0, 0]])",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [3, 3], stride=2, padding='VALID', scope='pool1')",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [1, 1], [1, 1], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "max_pool2d_88": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "resnet_utils.conv2d_same(self._image, 64, 7, stride=2, scope='conv1')",
                            "Call"
                        ],
                        [
                            "tf.pad(net, [[0, 0], [1, 1], [1, 1], [0, 0]])",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [3, 3], stride=2, padding='VALID', scope='pool1')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "scope": {
                    "value": "pool1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_128": {
                "variable": {
                    "value": "fc7",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "fc7",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(fc7, axis=[1, 2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_60": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "crop_and_resize_74": {
                "variable": {
                    "value": "crops",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "bottom",
                    "type": "variable",
                    "possible_values": []
                },
                "boxes": {
                    "value": "bboxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stop_gradient(tf.concat([y1, x1, y2, x2], 1))",
                            "Call"
                        ]
                    ]
                },
                "box_indices": {
                    "value": "tf.to_int32(batch_ids)",
                    "type": "Call",
                    "possible_values": []
                },
                "crop_size": {
                    "value": "[pre_pool_size, pre_pool_size]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "crops",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool2d_76": {
                "variable": {
                    "value": "crops",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "crops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.crop_and_resize(bottom, bboxes, tf.to_int32(batch_ids), [pre_pool_size, pre_pool_size], name='crops')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(crops, [2, 2], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.image.crop_and_resize(bottom, bboxes, tf.to_int32(batch_ids), [cfg.POOLING_SIZE, cfg.POOLING_SIZE], name='crops')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "crop_and_resize_78": {
                "variable": {
                    "value": "crops",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "bottom",
                    "type": "variable",
                    "possible_values": []
                },
                "boxes": {
                    "value": "bboxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stop_gradient(tf.concat([y1, x1, y2, x2], 1))",
                            "Call"
                        ]
                    ]
                },
                "box_indices": {
                    "value": "tf.to_int32(batch_ids)",
                    "type": "Call",
                    "possible_values": []
                },
                "crop_size": {
                    "value": "[cfg.POOLING_SIZE, cfg.POOLING_SIZE]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "crops",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_85": {
                "name_or_scope": {
                    "value": "self._scope",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_name": {
                    "value": "self._scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_180": {
                "name_or_scope": {
                    "value": "Fix_Resnet_V1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_183": {
                "variable": {
                    "value": "conv1_rgb",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "conv1_rgb",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[7, 7, 3, 64]",
                    "type": "List",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Saver_184": {
                "variable": {
                    "value": "restorer_fc",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "{self._scope + '/conv1/weights': conv1_rgb}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "slice_61": {
                "input_": {
                    "value": "rois",
                    "type": "variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "batch_id",
                    "type": "str",
                    "possible_values": []
                }
            },
            "slice_66": {
                "input_": {
                    "value": "rois",
                    "type": "variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "x1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "slice_67": {
                "input_": {
                    "value": "rois",
                    "type": "variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "y1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "slice_68": {
                "input_": {
                    "value": "rois",
                    "type": "variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "x2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "slice_69": {
                "input_": {
                    "value": "rois",
                    "type": "variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "y2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_71": {
                "values": {
                    "value": "[y1, x1, y2, x2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_181": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "to_float_64": {
                "x": {
                    "value": "bottom_shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "to_float_65": {
                "x": {
                    "value": "bottom_shape[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "to_int32_74": {
                "x": {
                    "value": "batch_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(tf.slice(rois, [0, 0], [-1, 1], name='batch_id'), [1])",
                            "Call"
                        ]
                    ]
                }
            },
            "to_int32_78": {
                "x": {
                    "value": "batch_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(tf.slice(rois, [0, 0], [-1, 1], name='batch_id'), [1])",
                            "Call"
                        ]
                    ]
                }
            },
            "assign_187": {
                "ref": {
                    "value": "self._variables_to_fix[self._scope + '/conv1/weights:0']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.reverse(conv1_rgb, [2])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reverse_188": {
                "tensor": {
                    "value": "conv1_rgb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('conv1_rgb', [7, 7, 3, 64], trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "frcnn/lib/nets/vgg16.py": {
        "tensorflow": {
            "repeat_28": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self._image",
                    "type": "Attribute",
                    "possible_values": []
                },
                "repeats": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "slim.conv2d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool2d_30": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.repeat(self._image, 2, slim.conv2d, 64, [3, 3], trainable=False, scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], padding='SAME', scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], trainable=False, scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], padding='SAME', scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], trainable=is_training, scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], padding='SAME', scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], trainable=is_training, scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], padding='SAME', scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], trainable=is_training, scope='conv5')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "scope": {
                    "value": "pool1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "repeat_31": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.repeat(self._image, 2, slim.conv2d, 64, [3, 3], trainable=False, scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], padding='SAME', scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], trainable=False, scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], padding='SAME', scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], trainable=is_training, scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], padding='SAME', scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], trainable=is_training, scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], padding='SAME', scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], trainable=is_training, scope='conv5')",
                            "Call"
                        ]
                    ]
                },
                "repeats": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "slim.conv2d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool2d_33": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.repeat(self._image, 2, slim.conv2d, 64, [3, 3], trainable=False, scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], padding='SAME', scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], trainable=False, scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], padding='SAME', scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], trainable=is_training, scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], padding='SAME', scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], trainable=is_training, scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], padding='SAME', scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], trainable=is_training, scope='conv5')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "scope": {
                    "value": "pool2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "repeat_34": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.repeat(self._image, 2, slim.conv2d, 64, [3, 3], trainable=False, scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], padding='SAME', scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], trainable=False, scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], padding='SAME', scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], trainable=is_training, scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], padding='SAME', scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], trainable=is_training, scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], padding='SAME', scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], trainable=is_training, scope='conv5')",
                            "Call"
                        ]
                    ]
                },
                "repeats": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "slim.conv2d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool2d_36": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.repeat(self._image, 2, slim.conv2d, 64, [3, 3], trainable=False, scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], padding='SAME', scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], trainable=False, scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], padding='SAME', scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], trainable=is_training, scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], padding='SAME', scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], trainable=is_training, scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], padding='SAME', scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], trainable=is_training, scope='conv5')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "scope": {
                    "value": "pool3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "repeat_37": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.repeat(self._image, 2, slim.conv2d, 64, [3, 3], trainable=False, scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], padding='SAME', scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], trainable=False, scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], padding='SAME', scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], trainable=is_training, scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], padding='SAME', scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], trainable=is_training, scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], padding='SAME', scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], trainable=is_training, scope='conv5')",
                            "Call"
                        ]
                    ]
                },
                "repeats": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "slim.conv2d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv4",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool2d_39": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.repeat(self._image, 2, slim.conv2d, 64, [3, 3], trainable=False, scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], padding='SAME', scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], trainable=False, scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], padding='SAME', scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], trainable=is_training, scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], padding='SAME', scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], trainable=is_training, scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], padding='SAME', scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], trainable=is_training, scope='conv5')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "scope": {
                    "value": "pool4",
                    "type": "str",
                    "possible_values": []
                }
            },
            "repeat_40": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.repeat(self._image, 2, slim.conv2d, 64, [3, 3], trainable=False, scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], padding='SAME', scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], trainable=False, scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], padding='SAME', scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], trainable=is_training, scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], padding='SAME', scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], trainable=is_training, scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], padding='SAME', scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], trainable=is_training, scope='conv5')",
                            "Call"
                        ]
                    ]
                },
                "repeats": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "slim.conv2d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv5",
                    "type": "str",
                    "possible_values": []
                }
            },
            "flatten_50": {
                "variable": {
                    "value": "pool5_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "pool5",
                    "type": "variable",
                    "possible_values": []
                },
                "scope": {
                    "value": "flatten",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_27": {
                "name_or_scope": {
                    "value": "self._scope",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_name": {
                    "value": "self._scope",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_49": {
                "name_or_scope": {
                    "value": "self._scope",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_name": {
                    "value": "self._scope",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dropout_53": {
                "variable": {
                    "value": "fc6",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fc6",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.fully_connected(pool5_flat, 4096, scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(fc6, keep_prob=0.5, is_training=True, scope='dropout6')",
                            "Call"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "is_training": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "scope": {
                    "value": "dropout6",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dropout_57": {
                "variable": {
                    "value": "fc7",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fc7",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.fully_connected(fc6, 4096, scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(fc7, keep_prob=0.5, is_training=True, scope='dropout7')",
                            "Call"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "is_training": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "scope": {
                    "value": "dropout7",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_83": {
                "name_or_scope": {
                    "value": "Fix_VGG16",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_87": {
                "variable": {
                    "value": "fc6_conv",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "fc6_conv",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[7, 7, 512, 4096]",
                    "type": "List",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_variable_88": {
                "variable": {
                    "value": "fc7_conv",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "fc7_conv",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 1, 4096, 4096]",
                    "type": "List",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_variable_89": {
                "variable": {
                    "value": "conv1_rgb",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "conv1_rgb",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[3, 3, 3, 64]",
                    "type": "List",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Saver_90": {
                "variable": {
                    "value": "restorer_fc",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "{self._scope + '/fc6/weights': fc6_conv, self._scope + '/fc7/weights': fc7_conv, self._scope + '/conv1/conv1_1/weights': conv1_rgb}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "device_84": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "assign_95": {
                "ref": {
                    "value": "self._variables_to_fix[self._scope + '/fc6/weights:0']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.reshape(fc6_conv, self._variables_to_fix[self._scope + '/fc6/weights:0'].get_shape())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "assign_97": {
                "ref": {
                    "value": "self._variables_to_fix[self._scope + '/fc7/weights:0']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.reshape(fc7_conv, self._variables_to_fix[self._scope + '/fc7/weights:0'].get_shape())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "assign_99": {
                "ref": {
                    "value": "self._variables_to_fix[self._scope + '/conv1/conv1_1/weights:0']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.reverse(conv1_rgb, [2])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_95": {
                "tensor": {
                    "value": "fc6_conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('fc6_conv', [7, 7, 512, 4096], trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "self._variables_to_fix[self._scope + '/fc6/weights:0'].get_shape()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_97": {
                "tensor": {
                    "value": "fc7_conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('fc7_conv', [1, 1, 4096, 4096], trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "self._variables_to_fix[self._scope + '/fc7/weights:0'].get_shape()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reverse_100": {
                "tensor": {
                    "value": "conv1_rgb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('conv1_rgb', [3, 3, 3, 64], trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "frcnn/tools/.ipynb_checkpoints/Object_Detector-checkpoint.py": {
        "tensorflow": {
            "Graph_44": {
                "variable": {
                    "value": "g1",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConfigProto_48": {
                "variable": {
                    "value": "tfconfig",
                    "type": "variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_default_graph_52": {
                "variable": {
                    "value": "frcnn_graph",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_53": {
                "variable": {
                    "value": "frcnn_sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "tfconfig",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ]
                    ]
                },
                "graph": {
                    "value": "frcnn_graph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_default_graph()",
                            "Call"
                        ]
                    ]
                }
            },
            "Saver_62": {
                "variable": {
                    "value": "object_detection_saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "frcnn/tools/.ipynb_checkpoints/demo-checkpoint.py": {
        "tensorflow": {
            "ConfigProto_129": {
                "variable": {
                    "value": "tfconfig",
                    "type": "variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Session_133": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "tfconfig",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "Saver_143": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "frcnn/tools/.ipynb_checkpoints/test_net-checkpoint.py": {
        "tensorflow": {
            "ConfigProto_86": {
                "variable": {
                    "value": "tfconfig",
                    "type": "variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Session_90": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "tfconfig",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "Saver_112": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_117": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "frcnn/tools/.ipynb_checkpoints/trainval_net-checkpoint.py": {
        "tensorflow": {}
    },
    "frcnn/tools/Object_Detector.py": {
        "tensorflow": {
            "Graph_44": {
                "variable": {
                    "value": "g1",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConfigProto_48": {
                "variable": {
                    "value": "tfconfig",
                    "type": "variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_default_graph_52": {
                "variable": {
                    "value": "frcnn_graph",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_53": {
                "variable": {
                    "value": "frcnn_sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "tfconfig",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ]
                    ]
                },
                "graph": {
                    "value": "frcnn_graph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_default_graph()",
                            "Call"
                        ]
                    ]
                }
            },
            "Saver_62": {
                "variable": {
                    "value": "object_detection_saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "frcnn/tools/convert_from_depre.py": {
        "tensorflow": {
            "ConfigProto_125": {
                "variable": {
                    "value": "tfconfig",
                    "type": "variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Session_127": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "tfconfig",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "NewCheckpointReader_96": {
                "variable": {
                    "value": "reader",
                    "type": "variable",
                    "possible_values": []
                },
                "filepattern": {
                    "value": "file_name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Variable_137": {
                "variable": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "cfg.TRAIN.LEARNING_RATE * cfg.TRAIN.GAMMA",
                    "type": "BinOp",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MomentumOptimizer_139": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(cfg.TRAIN.LEARNING_RATE * cfg.TRAIN.GAMMA, trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "momentum": {
                    "value": "momentum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.TRAIN.MOMENTUM",
                            "Attribute"
                        ]
                    ]
                }
            },
            "global_variables_156": {
                "variable": {
                    "value": "variables",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_159": {
                "variable": {
                    "value": "restorer",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "name2var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{convert_names(v.name): v for v in variables}",
                            "DictComp"
                        ]
                    ]
                }
            },
            "Saver_160": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_random_seed_131": {
                "seed": {
                    "value": "cfg.RNG_SEED",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_143": {
                "name_or_scope": {
                    "value": "Gradient_Mult",
                    "type": "str",
                    "possible_values": []
                }
            },
            "multiply_149": {
                "variable": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(grad, scale)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "float"
                        ],
                        [
                            "scale * 2.0",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "frcnn/tools/demo.py": {
        "tensorflow": {
            "ConfigProto_129": {
                "variable": {
                    "value": "tfconfig",
                    "type": "variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Session_133": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "tfconfig",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "Saver_143": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "frcnn/tools/test_net.py": {
        "tensorflow": {
            "ConfigProto_86": {
                "variable": {
                    "value": "tfconfig",
                    "type": "variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Session_90": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "tfconfig",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "Saver_112": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_117": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "frcnn/tools/trainval_net.py": {
        "tensorflow": {}
    },
    "ican/lib/models/.ipynb_checkpoints/test_HICO-checkpoint.py": {
        "tensorflow": {}
    },
    "ican/lib/models/.ipynb_checkpoints/test_VCOCO-checkpoint.py": {
        "tensorflow": {}
    },
    "ican/lib/models/.ipynb_checkpoints/test_demo-checkpoint.py": {
        "tensorflow": {}
    },
    "ican/lib/models/.ipynb_checkpoints/train_Solver_HICO-checkpoint.py": {
        "tensorflow": {
            "ConfigProto_251": {
                "variable": {
                    "value": "tfconfig",
                    "type": "variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Variable_68": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "exponential_decay_69": {
                "variable": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "cfg.TRAIN.LEARNING_RATE * 10",
                    "type": "BinOp",
                    "possible_values": []
                },
                "global_step": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(0, trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "decay_steps": {
                    "value": "cfg.TRAIN.STEPSIZE * 5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "decay_rate": {
                    "value": "cfg.TRAIN.GAMMA",
                    "type": "Attribute",
                    "possible_values": []
                },
                "staircase": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MomentumOptimizer_70": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.exponential_decay(cfg.TRAIN.LEARNING_RATE * 10, global_step, cfg.TRAIN.STEPSIZE * 5, cfg.TRAIN.GAMMA, staircase=True)",
                            "Call"
                        ]
                    ]
                },
                "momentum": {
                    "value": "cfg.TRAIN.MOMENTUM",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_75": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "cfg.TRAIN.SNAPSHOT_KEPT",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FileWriter_77": {
                "variable": {
                    "value": "self.writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logdir": {
                    "value": "self.tbdir",
                    "type": "Attribute",
                    "possible_values": []
                },
                "graph": {
                    "value": "sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_101": {
                "variable": {
                    "value": "self.saver_restore",
                    "type": "Attribute",
                    "possible_values": []
                },
                "var_list": {
                    "value": "saver_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[var for var in tf.model_variables() if 'conv1' in var.name and 'conv1_sp' not in var.name]",
                            "ListComp"
                        ],
                        [
                            "saver_t + [var for var in tf.model_variables() if 'shortcut' in var.name]",
                            "BinOp"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                }
            },
            "Saver_142": {
                "variable": {
                    "value": "self.saver_restore",
                    "type": "Attribute",
                    "possible_values": []
                },
                "var_list": {
                    "value": "saver_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[var for var in tf.model_variables() if 'conv1' in var.name and 'conv1_sp' not in var.name]",
                            "ListComp"
                        ],
                        [
                            "saver_t + [var for var in tf.model_variables() if 'shortcut' in var.name]",
                            "BinOp"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                }
            },
            "trainable_variables_182": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_255": {
                "config": {
                    "value": "tfconfig",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "set_random_seed_60": {
                "seed": {
                    "value": "cfg.RNG_SEED",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "trainable_variables_96": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_104": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_111": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "model_variables_119": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "model_variables_123": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "model_variables_128": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "model_variables_133": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "model_variables_138": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_154": {
                "variable": {
                    "value": "self.saver_restore",
                    "type": "Attribute",
                    "possible_values": []
                },
                "var_list": {
                    "value": "saver_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[var for var in tf.model_variables() if 'conv1' in var.name and 'conv1_sp' not in var.name]",
                            "ListComp"
                        ],
                        [
                            "saver_t + [var for var in tf.model_variables() if 'shortcut' in var.name]",
                            "BinOp"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                }
            },
            "Saver_166": {
                "variable": {
                    "value": "self.saver_restore",
                    "type": "Attribute",
                    "possible_values": []
                },
                "var_list": {
                    "value": "saver_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[var for var in tf.model_variables() if 'conv1' in var.name and 'conv1_sp' not in var.name]",
                            "ListComp"
                        ],
                        [
                            "saver_t + [var for var in tf.model_variables() if 'shortcut' in var.name]",
                            "BinOp"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                }
            },
            "Saver_178": {
                "variable": {
                    "value": "self.saver_restore",
                    "type": "Attribute",
                    "possible_values": []
                },
                "var_list": {
                    "value": "saver_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[var for var in tf.model_variables() if 'conv1' in var.name and 'conv1_sp' not in var.name]",
                            "ListComp"
                        ],
                        [
                            "saver_t + [var for var in tf.model_variables() if 'shortcut' in var.name]",
                            "BinOp"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                }
            },
            "trainable_variables_71": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_95": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_110": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "model_variables_149": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "model_variables_161": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "model_variables_173": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_189": {
                "device_name": {
                    "value": "'/gpu:' + str(i)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clip_by_norm_72": {
                "t": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "model_variables_88": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "model_variables_89": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "model_variables_90": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "model_variables_91": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "model_variables_92": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "model_variables_93": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "model_variables_151": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "model_variables_163": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "model_variables_175": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "ican/lib/models/test_HICO.py": {
        "tensorflow": {}
    },
    "ican/lib/models/test_VCOCO.py": {
        "tensorflow": {}
    },
    "ican/lib/models/test_demo.py": {
        "tensorflow": {}
    },
    "ican/lib/models/train_Solver_HICO.py": {
        "tensorflow": {
            "ConfigProto_250": {
                "variable": {
                    "value": "tfconfig",
                    "type": "variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Variable_68": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "exponential_decay_69": {
                "variable": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "cfg.TRAIN.LEARNING_RATE * 10",
                    "type": "BinOp",
                    "possible_values": []
                },
                "global_step": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(0, trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "decay_steps": {
                    "value": "cfg.TRAIN.STEPSIZE * 5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "decay_rate": {
                    "value": "cfg.TRAIN.GAMMA",
                    "type": "Attribute",
                    "possible_values": []
                },
                "staircase": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MomentumOptimizer_70": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.exponential_decay(cfg.TRAIN.LEARNING_RATE * 10, global_step, cfg.TRAIN.STEPSIZE * 5, cfg.TRAIN.GAMMA, staircase=True)",
                            "Call"
                        ]
                    ]
                },
                "momentum": {
                    "value": "cfg.TRAIN.MOMENTUM",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_75": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "cfg.TRAIN.SNAPSHOT_KEPT",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FileWriter_77": {
                "variable": {
                    "value": "self.writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logdir": {
                    "value": "self.tbdir",
                    "type": "Attribute",
                    "possible_values": []
                },
                "graph": {
                    "value": "sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_101": {
                "variable": {
                    "value": "self.saver_restore",
                    "type": "Attribute",
                    "possible_values": []
                },
                "var_list": {
                    "value": "saver_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[var for var in tf.model_variables() if 'conv1' in var.name and 'conv1_sp' not in var.name]",
                            "ListComp"
                        ],
                        [
                            "saver_t + [var for var in tf.model_variables() if 'shortcut' in var.name]",
                            "BinOp"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                }
            },
            "Saver_142": {
                "variable": {
                    "value": "self.saver_restore",
                    "type": "Attribute",
                    "possible_values": []
                },
                "var_list": {
                    "value": "saver_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[var for var in tf.model_variables() if 'conv1' in var.name and 'conv1_sp' not in var.name]",
                            "ListComp"
                        ],
                        [
                            "saver_t + [var for var in tf.model_variables() if 'shortcut' in var.name]",
                            "BinOp"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                }
            },
            "trainable_variables_182": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_254": {
                "config": {
                    "value": "tfconfig",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "set_random_seed_60": {
                "seed": {
                    "value": "cfg.RNG_SEED",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "trainable_variables_96": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_104": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_111": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "model_variables_119": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "model_variables_123": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "model_variables_128": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "model_variables_133": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "model_variables_138": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_154": {
                "variable": {
                    "value": "self.saver_restore",
                    "type": "Attribute",
                    "possible_values": []
                },
                "var_list": {
                    "value": "saver_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[var for var in tf.model_variables() if 'conv1' in var.name and 'conv1_sp' not in var.name]",
                            "ListComp"
                        ],
                        [
                            "saver_t + [var for var in tf.model_variables() if 'shortcut' in var.name]",
                            "BinOp"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                }
            },
            "Saver_166": {
                "variable": {
                    "value": "self.saver_restore",
                    "type": "Attribute",
                    "possible_values": []
                },
                "var_list": {
                    "value": "saver_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[var for var in tf.model_variables() if 'conv1' in var.name and 'conv1_sp' not in var.name]",
                            "ListComp"
                        ],
                        [
                            "saver_t + [var for var in tf.model_variables() if 'shortcut' in var.name]",
                            "BinOp"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                }
            },
            "Saver_178": {
                "variable": {
                    "value": "self.saver_restore",
                    "type": "Attribute",
                    "possible_values": []
                },
                "var_list": {
                    "value": "saver_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[var for var in tf.model_variables() if 'conv1' in var.name and 'conv1_sp' not in var.name]",
                            "ListComp"
                        ],
                        [
                            "saver_t + [var for var in tf.model_variables() if 'shortcut' in var.name]",
                            "BinOp"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                }
            },
            "trainable_variables_71": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_95": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_110": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "model_variables_149": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "model_variables_161": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "model_variables_173": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_by_norm_72": {
                "t": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "model_variables_88": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "model_variables_89": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "model_variables_90": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "model_variables_91": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "model_variables_92": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "model_variables_93": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "model_variables_151": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "model_variables_163": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "model_variables_175": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "ican/lib/models/train_Solver_VCOCO.py": {
        "tensorflow": {
            "ConfigProto_257": {
                "variable": {
                    "value": "tfconfig",
                    "type": "variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Variable_71": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "exponential_decay_72": {
                "variable": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "cfg.TRAIN.LEARNING_RATE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "global_step": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(0, trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "decay_steps": {
                    "value": "cfg.TRAIN.STEPSIZE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "decay_rate": {
                    "value": "cfg.TRAIN.GAMMA",
                    "type": "Attribute",
                    "possible_values": []
                },
                "staircase": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MomentumOptimizer_73": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.exponential_decay(cfg.TRAIN.LEARNING_RATE, global_step, cfg.TRAIN.STEPSIZE, cfg.TRAIN.GAMMA, staircase=True)",
                            "Call"
                        ]
                    ]
                },
                "momentum": {
                    "value": "cfg.TRAIN.MOMENTUM",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_78": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "cfg.TRAIN.SNAPSHOT_KEPT",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FileWriter_80": {
                "variable": {
                    "value": "self.writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logdir": {
                    "value": "self.tbdir",
                    "type": "Attribute",
                    "possible_values": []
                },
                "graph": {
                    "value": "sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_104": {
                "variable": {
                    "value": "self.saver_restore",
                    "type": "Attribute",
                    "possible_values": []
                },
                "var_list": {
                    "value": "saver_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[var for var in tf.model_variables() if 'conv1' in var.name and 'conv1_sp' not in var.name]",
                            "ListComp"
                        ],
                        [
                            "saver_t + [var for var in tf.model_variables() if 'shortcut' in var.name]",
                            "BinOp"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                }
            },
            "Saver_145": {
                "variable": {
                    "value": "self.saver_restore",
                    "type": "Attribute",
                    "possible_values": []
                },
                "var_list": {
                    "value": "saver_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[var for var in tf.model_variables() if 'conv1' in var.name and 'conv1_sp' not in var.name]",
                            "ListComp"
                        ],
                        [
                            "saver_t + [var for var in tf.model_variables() if 'shortcut' in var.name]",
                            "BinOp"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                }
            },
            "trainable_variables_185": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_260": {
                "config": {
                    "value": "tfconfig",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "set_random_seed_63": {
                "seed": {
                    "value": "cfg.RNG_SEED",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "trainable_variables_99": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_107": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_114": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "model_variables_122": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "model_variables_126": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "model_variables_131": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "model_variables_136": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "model_variables_141": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_157": {
                "variable": {
                    "value": "self.saver_restore",
                    "type": "Attribute",
                    "possible_values": []
                },
                "var_list": {
                    "value": "saver_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[var for var in tf.model_variables() if 'conv1' in var.name and 'conv1_sp' not in var.name]",
                            "ListComp"
                        ],
                        [
                            "saver_t + [var for var in tf.model_variables() if 'shortcut' in var.name]",
                            "BinOp"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                }
            },
            "Saver_169": {
                "variable": {
                    "value": "self.saver_restore",
                    "type": "Attribute",
                    "possible_values": []
                },
                "var_list": {
                    "value": "saver_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[var for var in tf.model_variables() if 'conv1' in var.name and 'conv1_sp' not in var.name]",
                            "ListComp"
                        ],
                        [
                            "saver_t + [var for var in tf.model_variables() if 'shortcut' in var.name]",
                            "BinOp"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                }
            },
            "Saver_181": {
                "variable": {
                    "value": "self.saver_restore",
                    "type": "Attribute",
                    "possible_values": []
                },
                "var_list": {
                    "value": "saver_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[var for var in tf.model_variables() if 'conv1' in var.name and 'conv1_sp' not in var.name]",
                            "ListComp"
                        ],
                        [
                            "saver_t + [var for var in tf.model_variables() if 'shortcut' in var.name]",
                            "BinOp"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                }
            },
            "trainable_variables_74": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_98": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_113": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "model_variables_152": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "model_variables_164": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "model_variables_176": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_by_norm_75": {
                "t": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "model_variables_91": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "model_variables_92": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "model_variables_93": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "model_variables_94": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "model_variables_95": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "model_variables_96": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "model_variables_154": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "model_variables_166": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "model_variables_178": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "ican/lib/networks/.ipynb_checkpoints/iCAN_ResNet50_HICO-checkpoint.py": {
        "tensorflow": {
            "placeholder_66": {
                "variable": {
                    "value": "self.image",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, None, None, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "image",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_67": {
                "variable": {
                    "value": "self.spatial",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 64, 64, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "sp",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_68": {
                "variable": {
                    "value": "self.Hsp_boxes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 5]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "Hsp_boxes",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_69": {
                "variable": {
                    "value": "self.H_boxes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 5]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "H_boxes",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_70": {
                "variable": {
                    "value": "self.O_boxes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 5]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "O_boxes",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_71": {
                "variable": {
                    "value": "self.gt_class_HO",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 600]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "gt_class_HO",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_72": {
                "variable": {
                    "value": "self.H_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_77": {
                "variable": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "random_normal_initializer_288": {
                "variable": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": []
                },
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "conv2d_299": {
                "variable": {
                    "value": "head_phi",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "head",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.image_to_head(is_training)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "scope": {
                    "value": "head_phi",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_302": {
                "variable": {
                    "value": "head_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "head",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.image_to_head(is_training)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "scope": {
                    "value": "head_g",
                    "type": "str",
                    "possible_values": []
                }
            },
            "multiply_306": {
                "variable": {
                    "value": "att_head_H",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "head_g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(head, 512, [1, 1], scope='head_g')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "Att_H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.attention_pool_layer_H(head_phi, fc7_H, is_training, 'Att_H')",
                            "Call"
                        ],
                        [
                            "self.attention_norm_H(Att_H, 'Norm_Att_H')",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_310": {
                "variable": {
                    "value": "att_head_O",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "head_g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(head, 512, [1, 1], scope='head_g')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "Att_O",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.attention_pool_layer_O(head_phi, fc7_O, is_training, 'Att_O')",
                            "Call"
                        ],
                        [
                            "self.attention_norm_O(Att_O, 'Norm_Att_O')",
                            "Call"
                        ]
                    ]
                }
            },
            "merge_all_353": {
                "variable": {
                    "value": "self.summary_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "merge_354": {
                "variable": {
                    "value": "self.summary_op_val",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "val_summaries",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "py_func_385": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "draw_bounding_boxes_HOI",
                    "type": "variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[tf.reverse(self.image + cfg.PIXEL_MEANS, axis=[-1]), self.H_boxes, self.gt_class_HO]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "gt_boxes_H",
                    "type": "str",
                    "possible_values": []
                }
            },
            "py_func_392": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "draw_bounding_boxes_HOI",
                    "type": "variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[tf.reverse(self.image + cfg.PIXEL_MEANS, axis=[-1]), self.O_boxes, self.gt_class_HO]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "gt_boxes_HO",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_95": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "resnet_utils.conv2d_same(self.image, 64, 7, stride=2, scope='conv1')",
                            "Call"
                        ],
                        [
                            "tf.pad(net, [[0, 0], [1, 1], [1, 1], [0, 0]])",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [3, 3], stride=2, padding='VALID', scope='pool1')",
                            "Call"
                        ],
                        [
                            "self.build_base()",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [1, 1], [1, 1], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "max_pool2d_96": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "resnet_utils.conv2d_same(self.image, 64, 7, stride=2, scope='conv1')",
                            "Call"
                        ],
                        [
                            "tf.pad(net, [[0, 0], [1, 1], [1, 1], [0, 0]])",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [3, 3], stride=2, padding='VALID', scope='pool1')",
                            "Call"
                        ],
                        [
                            "self.build_base()",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "scope": {
                    "value": "pool1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_119": {
                "variable": {
                    "value": "conv1_sp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.spatial",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[5, 5]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv1_sp",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool2d_120": {
                "variable": {
                    "value": "pool1_sp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv1_sp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(self.spatial, 64, [5, 5], padding='VALID', scope='conv1_sp')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "scope": {
                    "value": "pool1_sp",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_121": {
                "variable": {
                    "value": "conv2_sp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pool1_sp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.max_pool2d(conv1_sp, [2, 2], scope='pool1_sp')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[5, 5]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv2_sp",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool2d_122": {
                "variable": {
                    "value": "pool2_sp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv2_sp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(pool1_sp, 32, [5, 5], padding='VALID', scope='conv2_sp')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "scope": {
                    "value": "pool2_sp",
                    "type": "str",
                    "possible_values": []
                }
            },
            "flatten_123": {
                "variable": {
                    "value": "pool2_flat_sp",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "pool2_sp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.max_pool2d(conv2_sp, [2, 2], scope='pool2_sp')",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_137": {
                "variable": {
                    "value": "fc7_H",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "fc7_H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(fc7_H, axis=[1, 2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_147": {
                "variable": {
                    "value": "fc7_O",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "fc7_O",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(fc7_O, axis=[1, 2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_154": {
                "variable": {
                    "value": "fc7_SH",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "pool5_SH",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bottleneck(att_head_H, is_training, 'bottleneck', False)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_155": {
                "variable": {
                    "value": "fc7_SO",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "pool5_SO",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bottleneck(att_head_O, is_training, 'bottleneck', True)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_157": {
                "variable": {
                    "value": "Concat_SH",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[fc7_H, fc7_SH]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_159": {
                "variable": {
                    "value": "fc8_SH",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fc8_SH",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.fully_connected(Concat_SH, self.num_fc, scope='fc8_SH')",
                            "Call"
                        ],
                        [
                            "slim.dropout(fc8_SH, keep_prob=0.5, is_training=is_training, scope='dropout8_SH')",
                            "Call"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "is_training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "scope": {
                    "value": "dropout8_SH",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dropout_161": {
                "variable": {
                    "value": "fc9_SH",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fc9_SH",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.fully_connected(fc8_SH, self.num_fc, scope='fc9_SH')",
                            "Call"
                        ],
                        [
                            "slim.dropout(fc9_SH, keep_prob=0.5, is_training=is_training, scope='dropout9_SH')",
                            "Call"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "is_training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "scope": {
                    "value": "dropout9_SH",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_163": {
                "variable": {
                    "value": "Concat_SO",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[fc7_O, fc7_SO]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_165": {
                "variable": {
                    "value": "fc8_SO",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fc8_SO",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.fully_connected(Concat_SO, self.num_fc, scope='fc8_SO')",
                            "Call"
                        ],
                        [
                            "slim.dropout(fc8_SO, keep_prob=0.5, is_training=is_training, scope='dropout8_SO')",
                            "Call"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "is_training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "scope": {
                    "value": "dropout8_SO",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dropout_167": {
                "variable": {
                    "value": "fc9_SO",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fc9_SO",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.fully_connected(fc8_SO, self.num_fc, scope='fc9_SO')",
                            "Call"
                        ],
                        [
                            "slim.dropout(fc9_SO, keep_prob=0.5, is_training=is_training, scope='dropout9_SO')",
                            "Call"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "is_training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "scope": {
                    "value": "dropout9_SO",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_169": {
                "variable": {
                    "value": "Concat_SHsp",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[fc7_H, sp]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_171": {
                "variable": {
                    "value": "Concat_SHsp",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "Concat_SHsp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([fc7_H, sp], 1)",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(Concat_SHsp, self.num_fc, scope='Concat_SHsp')",
                            "Call"
                        ],
                        [
                            "slim.dropout(Concat_SHsp, keep_prob=0.5, is_training=is_training, scope='dropout6_SHsp')",
                            "Call"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "is_training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "scope": {
                    "value": "dropout6_SHsp",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dropout_173": {
                "variable": {
                    "value": "fc7_SHsp",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fc7_SHsp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.fully_connected(Concat_SHsp, self.num_fc, scope='fc7_SHsp')",
                            "Call"
                        ],
                        [
                            "slim.dropout(fc7_SHsp, keep_prob=0.5, is_training=is_training, scope='dropout7_SHsp')",
                            "Call"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "is_training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "scope": {
                    "value": "dropout7_SHsp",
                    "type": "str",
                    "possible_values": []
                }
            },
            "squeeze_181": {
                "variable": {
                    "value": "batch_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.slice(rois, [0, 0], [-1, 1], name='batch_id')",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_182": {
                "variable": {
                    "value": "bottom_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bottom",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stop_gradient_190": {
                "variable": {
                    "value": "bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.concat([y1, x1, y2, x2], axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_203": {
                "variable": {
                    "value": "fc1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fc1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.fully_connected(fc7_H, 512, scope='fc1_b')",
                            "Call"
                        ],
                        [
                            "slim.dropout(fc1, keep_prob=0.8, is_training=is_training, scope='dropout1_b')",
                            "Call"
                        ],
                        [
                            "tf.reshape(fc1, [tf.shape(fc1)[0], 1, 1, tf.shape(fc1)[1]])",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(fc7_O, 512, scope='fc1_b')",
                            "Call"
                        ],
                        [
                            "slim.dropout(fc1, keep_prob=0.8, is_training=is_training, scope='dropout1_b')",
                            "Call"
                        ],
                        [
                            "tf.reshape(fc1, [tf.shape(fc1)[0], 1, 1, tf.shape(fc1)[1]])",
                            "Call"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "0.8",
                    "type": "float",
                    "possible_values": []
                },
                "is_training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "scope": {
                    "value": "dropout1_b",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_204": {
                "variable": {
                    "value": "fc1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "fc1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.fully_connected(fc7_H, 512, scope='fc1_b')",
                            "Call"
                        ],
                        [
                            "slim.dropout(fc1, keep_prob=0.8, is_training=is_training, scope='dropout1_b')",
                            "Call"
                        ],
                        [
                            "tf.reshape(fc1, [tf.shape(fc1)[0], 1, 1, tf.shape(fc1)[1]])",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(fc7_O, 512, scope='fc1_b')",
                            "Call"
                        ],
                        [
                            "slim.dropout(fc1, keep_prob=0.8, is_training=is_training, scope='dropout1_b')",
                            "Call"
                        ],
                        [
                            "tf.reshape(fc1, [tf.shape(fc1)[0], 1, 1, tf.shape(fc1)[1]])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[tf.shape(fc1)[0], 1, 1, tf.shape(fc1)[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_205": {
                "variable": {
                    "value": "att",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.multiply(bottom, fc1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "transpose_212": {
                "variable": {
                    "value": "att",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "att",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.multiply(bottom, fc1), 3, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, [att_shape[0], att_shape[1], -1])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(att)",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, att_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.multiply(bottom, fc1), 3, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, [att_shape[0], att_shape[1], -1])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(att)",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, att_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_213": {
                "variable": {
                    "value": "att_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "att",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.multiply(bottom, fc1), 3, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, [att_shape[0], att_shape[1], -1])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(att)",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, att_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.multiply(bottom, fc1), 3, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, [att_shape[0], att_shape[1], -1])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(att)",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, att_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_214": {
                "variable": {
                    "value": "att",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "att",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.multiply(bottom, fc1), 3, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, [att_shape[0], att_shape[1], -1])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(att)",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, att_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.multiply(bottom, fc1), 3, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, [att_shape[0], att_shape[1], -1])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(att)",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, att_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[att_shape[0], att_shape[1], -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_215": {
                "variable": {
                    "value": "att",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "att",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.multiply(bottom, fc1), 3, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, [att_shape[0], att_shape[1], -1])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(att)",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, att_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.multiply(bottom, fc1), 3, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, [att_shape[0], att_shape[1], -1])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(att)",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, att_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_216": {
                "variable": {
                    "value": "att",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "att",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.multiply(bottom, fc1), 3, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, [att_shape[0], att_shape[1], -1])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(att)",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, att_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.multiply(bottom, fc1), 3, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, [att_shape[0], att_shape[1], -1])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(att)",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, att_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "att_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(att)",
                            "Call"
                        ],
                        [
                            "tf.shape(att)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_217": {
                "variable": {
                    "value": "att",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "att",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.multiply(bottom, fc1), 3, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, [att_shape[0], att_shape[1], -1])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(att)",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, att_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.multiply(bottom, fc1), 3, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, [att_shape[0], att_shape[1], -1])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(att)",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, att_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dropout_224": {
                "variable": {
                    "value": "fc1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fc1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.fully_connected(fc7_H, 512, scope='fc1_b')",
                            "Call"
                        ],
                        [
                            "slim.dropout(fc1, keep_prob=0.8, is_training=is_training, scope='dropout1_b')",
                            "Call"
                        ],
                        [
                            "tf.reshape(fc1, [tf.shape(fc1)[0], 1, 1, tf.shape(fc1)[1]])",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(fc7_O, 512, scope='fc1_b')",
                            "Call"
                        ],
                        [
                            "slim.dropout(fc1, keep_prob=0.8, is_training=is_training, scope='dropout1_b')",
                            "Call"
                        ],
                        [
                            "tf.reshape(fc1, [tf.shape(fc1)[0], 1, 1, tf.shape(fc1)[1]])",
                            "Call"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "0.8",
                    "type": "float",
                    "possible_values": []
                },
                "is_training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "scope": {
                    "value": "dropout1_b",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_225": {
                "variable": {
                    "value": "fc1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "fc1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.fully_connected(fc7_H, 512, scope='fc1_b')",
                            "Call"
                        ],
                        [
                            "slim.dropout(fc1, keep_prob=0.8, is_training=is_training, scope='dropout1_b')",
                            "Call"
                        ],
                        [
                            "tf.reshape(fc1, [tf.shape(fc1)[0], 1, 1, tf.shape(fc1)[1]])",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(fc7_O, 512, scope='fc1_b')",
                            "Call"
                        ],
                        [
                            "slim.dropout(fc1, keep_prob=0.8, is_training=is_training, scope='dropout1_b')",
                            "Call"
                        ],
                        [
                            "tf.reshape(fc1, [tf.shape(fc1)[0], 1, 1, tf.shape(fc1)[1]])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[tf.shape(fc1)[0], 1, 1, tf.shape(fc1)[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_226": {
                "variable": {
                    "value": "att",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.multiply(bottom, fc1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "transpose_233": {
                "variable": {
                    "value": "att",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "att",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.multiply(bottom, fc1), 3, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, [att_shape[0], att_shape[1], -1])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(att)",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, att_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.multiply(bottom, fc1), 3, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, [att_shape[0], att_shape[1], -1])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(att)",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, att_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_234": {
                "variable": {
                    "value": "att_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "att",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.multiply(bottom, fc1), 3, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, [att_shape[0], att_shape[1], -1])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(att)",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, att_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.multiply(bottom, fc1), 3, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, [att_shape[0], att_shape[1], -1])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(att)",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, att_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_235": {
                "variable": {
                    "value": "att",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "att",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.multiply(bottom, fc1), 3, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, [att_shape[0], att_shape[1], -1])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(att)",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, att_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.multiply(bottom, fc1), 3, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, [att_shape[0], att_shape[1], -1])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(att)",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, att_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[att_shape[0], att_shape[1], -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_236": {
                "variable": {
                    "value": "att",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "att",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.multiply(bottom, fc1), 3, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, [att_shape[0], att_shape[1], -1])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(att)",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, att_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.multiply(bottom, fc1), 3, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, [att_shape[0], att_shape[1], -1])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(att)",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, att_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_237": {
                "variable": {
                    "value": "att",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "att",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.multiply(bottom, fc1), 3, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, [att_shape[0], att_shape[1], -1])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(att)",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, att_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.multiply(bottom, fc1), 3, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, [att_shape[0], att_shape[1], -1])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(att)",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, att_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "att_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(att)",
                            "Call"
                        ],
                        [
                            "tf.shape(att)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_238": {
                "variable": {
                    "value": "att",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "att",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.multiply(bottom, fc1), 3, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, [att_shape[0], att_shape[1], -1])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(att)",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, att_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.multiply(bottom, fc1), 3, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, [att_shape[0], att_shape[1], -1])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(att)",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, att_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sigmoid_248": {
                "variable": {
                    "value": "cls_prob_H",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "cls_score_H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.fully_connected(fc7_H, self.num_classes, weights_initializer=initializer, trainable=is_training, activation_fn=None, scope='cls_score_H')",
                            "Call"
                        ],
                        [
                            "self.predictions['cls_score_H']",
                            "Subscript"
                        ]
                    ]
                },
                "name": {
                    "value": "cls_prob_H",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sigmoid_255": {
                "variable": {
                    "value": "cls_prob_O",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "cls_score_O",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.fully_connected(fc7_O, self.num_classes, weights_initializer=initializer, trainable=is_training, activation_fn=None, scope='cls_score_O')",
                            "Call"
                        ],
                        [
                            "self.predictions['cls_score_O']",
                            "Subscript"
                        ]
                    ]
                },
                "name": {
                    "value": "cls_prob_O",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sigmoid_262": {
                "variable": {
                    "value": "cls_prob_sp",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "cls_score_sp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.fully_connected(fc7_SHsp, self.num_classes, weights_initializer=initializer, trainable=is_training, activation_fn=None, scope='cls_score_sp')",
                            "Call"
                        ],
                        [
                            "self.predictions['cls_score_sp']",
                            "Subscript"
                        ]
                    ]
                },
                "name": {
                    "value": "cls_prob_sp",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_283": {
                "variable": {
                    "value": "head_bottleneck",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bottom",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "trainable_variables_332": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_mean_367": {
                "variable": {
                    "value": "H_cross_entropy",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(labels=label_HO[:self.H_num, :], logits=cls_score_H[:self.H_num, :])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_368": {
                "variable": {
                    "value": "O_cross_entropy",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(labels=label_HO[:self.H_num, :], logits=cls_score_O[:self.H_num, :])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_369": {
                "variable": {
                    "value": "sp_cross_entropy",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(labels=label_HO, logits=cls_score_sp)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "image_388": {
                "name": {
                    "value": "GROUND_TRUTH_H",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.py_func(draw_bounding_boxes_HOI, [tf.reverse(self.image + cfg.PIXEL_MEANS, axis=[-1]), self.H_boxes, self.gt_class_HO], tf.float32, name='gt_boxes_H')",
                            "Call"
                        ],
                        [
                            "tf.py_func(draw_bounding_boxes_HOI, [tf.reverse(self.image + cfg.PIXEL_MEANS, axis=[-1]), self.O_boxes, self.gt_class_HO], tf.float32, name='gt_boxes_HO')",
                            "Call"
                        ]
                    ]
                }
            },
            "image_395": {
                "name": {
                    "value": "GROUND_TRUTH_HO",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.py_func(draw_bounding_boxes_HOI, [tf.reverse(self.image + cfg.PIXEL_MEANS, axis=[-1]), self.H_boxes, self.gt_class_HO], tf.float32, name='gt_boxes_H')",
                            "Call"
                        ],
                        [
                            "tf.py_func(draw_bounding_boxes_HOI, [tf.reverse(self.image + cfg.PIXEL_MEANS, axis=[-1]), self.O_boxes, self.gt_class_HO], tf.float32, name='gt_boxes_HO')",
                            "Call"
                        ]
                    ]
                }
            },
            "histogram_400": {
                "name": {
                    "value": "SCORE/ + tensor.op.name + / + key + /scores",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "histogram_404": {
                "name": {
                    "value": "'TRAIN/' + var.op.name",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_93": {
                "name_or_scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_name": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_118": {
                "name_or_scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_name": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_179": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "crop_and_resize_193": {
                "variable": {
                    "value": "crops",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "bottom",
                    "type": "variable",
                    "possible_values": []
                },
                "boxes": {
                    "value": "bboxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stop_gradient(tf.concat([y1, x1, y2, x2], axis=1))",
                            "Call"
                        ]
                    ]
                },
                "box_indices": {
                    "value": "tf.to_int32(batch_ids)",
                    "type": "Call",
                    "possible_values": []
                },
                "crop_size": {
                    "value": "[pre_pool_size, pre_pool_size]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "crops",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool2d_194": {
                "variable": {
                    "value": "crops",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "crops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.crop_and_resize(bottom, bboxes, tf.to_int32(batch_ids), [pre_pool_size, pre_pool_size], name='crops')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(crops, [2, 2], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.image.crop_and_resize(bottom, bboxes, tf.to_int32(batch_ids), [cfg.POOLING_SIZE, cfg.POOLING_SIZE], name='crops')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "crop_and_resize_196": {
                "variable": {
                    "value": "crops",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "bottom",
                    "type": "variable",
                    "possible_values": []
                },
                "boxes": {
                    "value": "bboxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stop_gradient(tf.concat([y1, x1, y2, x2], axis=1))",
                            "Call"
                        ]
                    ]
                },
                "box_indices": {
                    "value": "tf.to_int32(batch_ids)",
                    "type": "Call",
                    "possible_values": []
                },
                "crop_size": {
                    "value": "[cfg.POOLING_SIZE, cfg.POOLING_SIZE]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "crops",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_200": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_210": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_221": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_231": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_242": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reshape_249": {
                "tensor": {
                    "value": "cls_prob_H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid(cls_score_H, name='cls_prob_H')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, self.num_classes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_256": {
                "tensor": {
                    "value": "cls_prob_O",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid(cls_score_O, name='cls_prob_O')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, self.num_classes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_263": {
                "tensor": {
                    "value": "cls_prob_sp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid(cls_score_sp, name='cls_prob_sp')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, self.num_classes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_278": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_max_321": {
                "input_tensor": {
                    "value": "Att_H[0, :, :, :] - tf.reduce_min(Att_H[0, :, :, :])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_max_322": {
                "input_tensor": {
                    "value": "Att_O[0, :, :, :] - tf.reduce_min(Att_O[0, :, :, :])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "device_340": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "image_343": {
                "name": {
                    "value": "ATTENTION_MAP_H",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.visualize['attention_map_H']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "max_outputs": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "image_344": {
                "name": {
                    "value": "ATTENTION_MAP_O",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.visualize['attention_map_O']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "max_outputs": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "scalar_352": {
                "name": {
                    "value": "lr",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_361": {
                "name_or_scope": {
                    "value": "LOSS",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_initializer_46": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "slice_181": {
                "input_": {
                    "value": "rois",
                    "type": "variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "batch_id",
                    "type": "str",
                    "possible_values": []
                }
            },
            "slice_185": {
                "input_": {
                    "value": "rois",
                    "type": "variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "x1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "slice_186": {
                "input_": {
                    "value": "rois",
                    "type": "variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "y1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "slice_187": {
                "input_": {
                    "value": "rois",
                    "type": "variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "x2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "slice_188": {
                "input_": {
                    "value": "rois",
                    "type": "variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "y2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_190": {
                "values": {
                    "value": "[y1, x1, y2, x2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multiply_205": {
                "x": {
                    "value": "bottom",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "fc1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.fully_connected(fc7_H, 512, scope='fc1_b')",
                            "Call"
                        ],
                        [
                            "slim.dropout(fc1, keep_prob=0.8, is_training=is_training, scope='dropout1_b')",
                            "Call"
                        ],
                        [
                            "tf.reshape(fc1, [tf.shape(fc1)[0], 1, 1, tf.shape(fc1)[1]])",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(fc7_O, 512, scope='fc1_b')",
                            "Call"
                        ],
                        [
                            "slim.dropout(fc1, keep_prob=0.8, is_training=is_training, scope='dropout1_b')",
                            "Call"
                        ],
                        [
                            "tf.reshape(fc1, [tf.shape(fc1)[0], 1, 1, tf.shape(fc1)[1]])",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_226": {
                "x": {
                    "value": "bottom",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "fc1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.fully_connected(fc7_H, 512, scope='fc1_b')",
                            "Call"
                        ],
                        [
                            "slim.dropout(fc1, keep_prob=0.8, is_training=is_training, scope='dropout1_b')",
                            "Call"
                        ],
                        [
                            "tf.reshape(fc1, [tf.shape(fc1)[0], 1, 1, tf.shape(fc1)[1]])",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(fc7_O, 512, scope='fc1_b')",
                            "Call"
                        ],
                        [
                            "slim.dropout(fc1, keep_prob=0.8, is_training=is_training, scope='dropout1_b')",
                            "Call"
                        ],
                        [
                            "tf.reshape(fc1, [tf.shape(fc1)[0], 1, 1, tf.shape(fc1)[1]])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_min_321": {
                "input_tensor": {
                    "value": "Att_H[0, :, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_min_322": {
                "input_tensor": {
                    "value": "Att_O[0, :, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_367": {
                "labels": {
                    "value": "label_HO[:self.H_num, :]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "self.gt_class_HO",
                            "Attribute"
                        ]
                    ]
                },
                "logits": {
                    "value": "cls_score_H[:self.H_num, :]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "slim.fully_connected(fc7_H, self.num_classes, weights_initializer=initializer, trainable=is_training, activation_fn=None, scope='cls_score_H')",
                            "Call"
                        ],
                        [
                            "self.predictions['cls_score_H']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sigmoid_cross_entropy_with_logits_368": {
                "labels": {
                    "value": "label_HO[:self.H_num, :]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "self.gt_class_HO",
                            "Attribute"
                        ]
                    ]
                },
                "logits": {
                    "value": "cls_score_O[:self.H_num, :]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "slim.fully_connected(fc7_O, self.num_classes, weights_initializer=initializer, trainable=is_training, activation_fn=None, scope='cls_score_O')",
                            "Call"
                        ],
                        [
                            "self.predictions['cls_score_O']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sigmoid_cross_entropy_with_logits_369": {
                "labels": {
                    "value": "label_HO",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.gt_class_HO",
                            "Attribute"
                        ]
                    ]
                },
                "logits": {
                    "value": "cls_score_sp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.fully_connected(fc7_SHsp, self.num_classes, weights_initializer=initializer, trainable=is_training, activation_fn=None, scope='cls_score_sp')",
                            "Call"
                        ],
                        [
                            "self.predictions['cls_score_sp']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "reverse_386": {
                "tensor": {
                    "value": "self.image + cfg.PIXEL_MEANS",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reverse_393": {
                "tensor": {
                    "value": "self.image + cfg.PIXEL_MEANS",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_float_183": {
                "x": {
                    "value": "bottom_shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "to_float_184": {
                "x": {
                    "value": "bottom_shape[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "to_int32_193": {
                "x": {
                    "value": "batch_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(tf.slice(rois, [0, 0], [-1, 1], name='batch_id'), [1])",
                            "Call"
                        ]
                    ]
                }
            },
            "to_int32_196": {
                "x": {
                    "value": "batch_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(tf.slice(rois, [0, 0], [-1, 1], name='batch_id'), [1])",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_346": {
                "name": {
                    "value": "key",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_204": {
                "input": {
                    "value": "fc1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.fully_connected(fc7_H, 512, scope='fc1_b')",
                            "Call"
                        ],
                        [
                            "slim.dropout(fc1, keep_prob=0.8, is_training=is_training, scope='dropout1_b')",
                            "Call"
                        ],
                        [
                            "tf.reshape(fc1, [tf.shape(fc1)[0], 1, 1, tf.shape(fc1)[1]])",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(fc7_O, 512, scope='fc1_b')",
                            "Call"
                        ],
                        [
                            "slim.dropout(fc1, keep_prob=0.8, is_training=is_training, scope='dropout1_b')",
                            "Call"
                        ],
                        [
                            "tf.reshape(fc1, [tf.shape(fc1)[0], 1, 1, tf.shape(fc1)[1]])",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_225": {
                "input": {
                    "value": "fc1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.fully_connected(fc7_H, 512, scope='fc1_b')",
                            "Call"
                        ],
                        [
                            "slim.dropout(fc1, keep_prob=0.8, is_training=is_training, scope='dropout1_b')",
                            "Call"
                        ],
                        [
                            "tf.reshape(fc1, [tf.shape(fc1)[0], 1, 1, tf.shape(fc1)[1]])",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(fc7_O, 512, scope='fc1_b')",
                            "Call"
                        ],
                        [
                            "slim.dropout(fc1, keep_prob=0.8, is_training=is_training, scope='dropout1_b')",
                            "Call"
                        ],
                        [
                            "tf.reshape(fc1, [tf.shape(fc1)[0], 1, 1, tf.shape(fc1)[1]])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "ican/lib/networks/.ipynb_checkpoints/iCAN_ResNet50_VCOCO-checkpoint.py": {
        "tensorflow": {
            "placeholder_66": {
                "variable": {
                    "value": "self.image",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, None, None, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "image",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_67": {
                "variable": {
                    "value": "self.spatial",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 64, 64, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "sp",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_68": {
                "variable": {
                    "value": "self.Hsp_boxes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 5]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "Hsp_boxes",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_69": {
                "variable": {
                    "value": "self.O_boxes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 5]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "O_boxes",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_70": {
                "variable": {
                    "value": "self.gt_class_H",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 29]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "gt_class_H",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_71": {
                "variable": {
                    "value": "self.gt_class_HO",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 29]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "gt_class_HO",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_72": {
                "variable": {
                    "value": "self.gt_class_sp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 29]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "gt_class_sp",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_73": {
                "variable": {
                    "value": "self.Mask_HO",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 29]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "HO_mask",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_74": {
                "variable": {
                    "value": "self.Mask_H",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 29]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "H_mask",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_75": {
                "variable": {
                    "value": "self.Mask_sp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 29]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "sp_mask",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_76": {
                "variable": {
                    "value": "self.H_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_81": {
                "variable": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "random_normal_initializer_298": {
                "variable": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": []
                },
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "conv2d_309": {
                "variable": {
                    "value": "head_phi",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "head",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.image_to_head(is_training)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "scope": {
                    "value": "head_phi",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_312": {
                "variable": {
                    "value": "head_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "head",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.image_to_head(is_training)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "scope": {
                    "value": "head_g",
                    "type": "str",
                    "possible_values": []
                }
            },
            "multiply_317": {
                "variable": {
                    "value": "att_head_H",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "head_g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(head, 512, [1, 1], scope='head_g')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "Att_H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.attention_pool_layer_H(head_phi, fc7_H[:self.H_num, :], is_training, 'Att_H')",
                            "Call"
                        ],
                        [
                            "self.attention_norm_H(Att_H, 'Norm_Att_H')",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_321": {
                "variable": {
                    "value": "att_head_O",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "head_g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(head, 512, [1, 1], scope='head_g')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "Att_O",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.attention_pool_layer_O(head_phi, fc7_O, is_training, 'Att_O')",
                            "Call"
                        ],
                        [
                            "self.attention_norm_O(Att_O, 'Norm_Att_O')",
                            "Call"
                        ]
                    ]
                }
            },
            "merge_all_364": {
                "variable": {
                    "value": "self.summary_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "merge_365": {
                "variable": {
                    "value": "self.summary_op_val",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "val_summaries",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "py_func_404": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "draw_bounding_boxes_HOI",
                    "type": "variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[tf.reverse(self.image + cfg.PIXEL_MEANS, axis=[-1]), self.Hsp_boxes, self.gt_class_H]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "gt_boxes_H",
                    "type": "str",
                    "possible_values": []
                }
            },
            "py_func_411": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "draw_bounding_boxes_HOI",
                    "type": "variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[tf.reverse(self.image + cfg.PIXEL_MEANS, axis=[-1]), self.O_boxes, self.gt_class_HO]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "gt_boxes_HO",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_99": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "resnet_utils.conv2d_same(self.image, 64, 7, stride=2, scope='conv1')",
                            "Call"
                        ],
                        [
                            "tf.pad(net, [[0, 0], [1, 1], [1, 1], [0, 0]])",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [3, 3], stride=2, padding='VALID', scope='pool1')",
                            "Call"
                        ],
                        [
                            "self.build_base()",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [1, 1], [1, 1], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "max_pool2d_100": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "resnet_utils.conv2d_same(self.image, 64, 7, stride=2, scope='conv1')",
                            "Call"
                        ],
                        [
                            "tf.pad(net, [[0, 0], [1, 1], [1, 1], [0, 0]])",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [3, 3], stride=2, padding='VALID', scope='pool1')",
                            "Call"
                        ],
                        [
                            "self.build_base()",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "scope": {
                    "value": "pool1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_123": {
                "variable": {
                    "value": "conv1_sp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.spatial",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[5, 5]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv1_sp",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool2d_124": {
                "variable": {
                    "value": "pool1_sp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv1_sp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(self.spatial, 64, [5, 5], padding='VALID', scope='conv1_sp')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "scope": {
                    "value": "pool1_sp",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_125": {
                "variable": {
                    "value": "conv2_sp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pool1_sp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.max_pool2d(conv1_sp, [2, 2], scope='pool1_sp')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[5, 5]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv2_sp",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool2d_126": {
                "variable": {
                    "value": "pool2_sp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv2_sp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(pool1_sp, 32, [5, 5], padding='VALID', scope='conv2_sp')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "scope": {
                    "value": "pool2_sp",
                    "type": "str",
                    "possible_values": []
                }
            },
            "flatten_127": {
                "variable": {
                    "value": "pool2_flat_sp",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "pool2_sp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.max_pool2d(conv2_sp, [2, 2], scope='pool2_sp')",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_142": {
                "variable": {
                    "value": "fc7_H",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "fc7_H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(fc7_H, axis=[1, 2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_152": {
                "variable": {
                    "value": "fc7_O",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "fc7_O",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(fc7_O, axis=[1, 2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_159": {
                "variable": {
                    "value": "fc7_SH",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "pool5_SH",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bottleneck(att_head_H, is_training, 'bottleneck', False)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_160": {
                "variable": {
                    "value": "fc7_SO",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "pool5_SO",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bottleneck(att_head_O, is_training, 'bottleneck', True)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_162": {
                "variable": {
                    "value": "Concat_SH",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[fc7_H[:self.H_num, :], fc7_SH]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_165": {
                "variable": {
                    "value": "fc8_SH",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fc8_SH",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.fully_connected(Concat_SH, self.num_fc, scope='fc8_SH')",
                            "Call"
                        ],
                        [
                            "slim.dropout(fc8_SH, keep_prob=0.5, is_training=is_training, scope='dropout8_SH')",
                            "Call"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "is_training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "scope": {
                    "value": "dropout8_SH",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dropout_167": {
                "variable": {
                    "value": "fc9_SH",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fc9_SH",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.fully_connected(fc8_SH, self.num_fc, scope='fc9_SH')",
                            "Call"
                        ],
                        [
                            "slim.dropout(fc9_SH, keep_prob=0.5, is_training=is_training, scope='dropout9_SH')",
                            "Call"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "is_training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "scope": {
                    "value": "dropout9_SH",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_170": {
                "variable": {
                    "value": "Concat_SO",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[fc7_O, fc7_SO]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_173": {
                "variable": {
                    "value": "fc8_SO",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fc8_SO",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.fully_connected(Concat_SO, self.num_fc, scope='fc8_SO')",
                            "Call"
                        ],
                        [
                            "slim.dropout(fc8_SO, keep_prob=0.5, is_training=is_training, scope='dropout8_SO')",
                            "Call"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "is_training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "scope": {
                    "value": "dropout8_SO",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dropout_175": {
                "variable": {
                    "value": "fc9_SO",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fc9_SO",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.fully_connected(fc8_SO, self.num_fc, scope='fc9_SO')",
                            "Call"
                        ],
                        [
                            "slim.dropout(fc9_SO, keep_prob=0.5, is_training=is_training, scope='dropout9_SO')",
                            "Call"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "is_training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "scope": {
                    "value": "dropout9_SO",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_178": {
                "variable": {
                    "value": "Concat_SHsp",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[fc7_H, sp]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_180": {
                "variable": {
                    "value": "Concat_SHsp",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "Concat_SHsp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([fc7_H, sp], 1)",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(Concat_SHsp, self.num_fc, scope='Concat_SHsp')",
                            "Call"
                        ],
                        [
                            "slim.dropout(Concat_SHsp, keep_prob=0.5, is_training=is_training, scope='dropout6_SHsp')",
                            "Call"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "is_training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "scope": {
                    "value": "dropout6_SHsp",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dropout_182": {
                "variable": {
                    "value": "fc7_SHsp",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fc7_SHsp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.fully_connected(Concat_SHsp, self.num_fc, scope='fc7_SHsp')",
                            "Call"
                        ],
                        [
                            "slim.dropout(fc7_SHsp, keep_prob=0.5, is_training=is_training, scope='dropout7_SHsp')",
                            "Call"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "is_training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "scope": {
                    "value": "dropout7_SHsp",
                    "type": "str",
                    "possible_values": []
                }
            },
            "squeeze_190": {
                "variable": {
                    "value": "batch_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.slice(rois, [0, 0], [-1, 1], name='batch_id')",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_191": {
                "variable": {
                    "value": "bottom_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bottom",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stop_gradient_199": {
                "variable": {
                    "value": "bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.concat([y1, x1, y2, x2], axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_212": {
                "variable": {
                    "value": "fc1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fc1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.fully_connected(fc7_H, 512, scope='fc1_b')",
                            "Call"
                        ],
                        [
                            "slim.dropout(fc1, keep_prob=0.8, is_training=is_training, scope='dropout1_b')",
                            "Call"
                        ],
                        [
                            "tf.reshape(fc1, [tf.shape(fc1)[0], 1, 1, tf.shape(fc1)[1]])",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(fc7_O, 512, scope='fc1_b')",
                            "Call"
                        ],
                        [
                            "slim.dropout(fc1, keep_prob=0.8, is_training=is_training, scope='dropout1_b')",
                            "Call"
                        ],
                        [
                            "tf.reshape(fc1, [tf.shape(fc1)[0], 1, 1, tf.shape(fc1)[1]])",
                            "Call"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "0.8",
                    "type": "float",
                    "possible_values": []
                },
                "is_training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "scope": {
                    "value": "dropout1_b",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_213": {
                "variable": {
                    "value": "fc1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "fc1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.fully_connected(fc7_H, 512, scope='fc1_b')",
                            "Call"
                        ],
                        [
                            "slim.dropout(fc1, keep_prob=0.8, is_training=is_training, scope='dropout1_b')",
                            "Call"
                        ],
                        [
                            "tf.reshape(fc1, [tf.shape(fc1)[0], 1, 1, tf.shape(fc1)[1]])",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(fc7_O, 512, scope='fc1_b')",
                            "Call"
                        ],
                        [
                            "slim.dropout(fc1, keep_prob=0.8, is_training=is_training, scope='dropout1_b')",
                            "Call"
                        ],
                        [
                            "tf.reshape(fc1, [tf.shape(fc1)[0], 1, 1, tf.shape(fc1)[1]])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[tf.shape(fc1)[0], 1, 1, tf.shape(fc1)[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_214": {
                "variable": {
                    "value": "att",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.multiply(bottom, fc1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "transpose_221": {
                "variable": {
                    "value": "att",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "att",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.multiply(bottom, fc1), 3, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, [att_shape[0], att_shape[1], -1])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(att)",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, att_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.multiply(bottom, fc1), 3, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, [att_shape[0], att_shape[1], -1])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(att)",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, att_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_222": {
                "variable": {
                    "value": "att_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "att",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.multiply(bottom, fc1), 3, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, [att_shape[0], att_shape[1], -1])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(att)",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, att_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.multiply(bottom, fc1), 3, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, [att_shape[0], att_shape[1], -1])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(att)",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, att_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_223": {
                "variable": {
                    "value": "att",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "att",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.multiply(bottom, fc1), 3, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, [att_shape[0], att_shape[1], -1])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(att)",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, att_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.multiply(bottom, fc1), 3, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, [att_shape[0], att_shape[1], -1])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(att)",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, att_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[att_shape[0], att_shape[1], -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_224": {
                "variable": {
                    "value": "att",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "att",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.multiply(bottom, fc1), 3, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, [att_shape[0], att_shape[1], -1])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(att)",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, att_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.multiply(bottom, fc1), 3, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, [att_shape[0], att_shape[1], -1])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(att)",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, att_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_225": {
                "variable": {
                    "value": "att",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "att",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.multiply(bottom, fc1), 3, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, [att_shape[0], att_shape[1], -1])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(att)",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, att_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.multiply(bottom, fc1), 3, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, [att_shape[0], att_shape[1], -1])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(att)",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, att_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "att_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(att)",
                            "Call"
                        ],
                        [
                            "tf.shape(att)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_226": {
                "variable": {
                    "value": "att",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "att",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.multiply(bottom, fc1), 3, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, [att_shape[0], att_shape[1], -1])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(att)",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, att_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.multiply(bottom, fc1), 3, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, [att_shape[0], att_shape[1], -1])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(att)",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, att_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dropout_233": {
                "variable": {
                    "value": "fc1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fc1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.fully_connected(fc7_H, 512, scope='fc1_b')",
                            "Call"
                        ],
                        [
                            "slim.dropout(fc1, keep_prob=0.8, is_training=is_training, scope='dropout1_b')",
                            "Call"
                        ],
                        [
                            "tf.reshape(fc1, [tf.shape(fc1)[0], 1, 1, tf.shape(fc1)[1]])",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(fc7_O, 512, scope='fc1_b')",
                            "Call"
                        ],
                        [
                            "slim.dropout(fc1, keep_prob=0.8, is_training=is_training, scope='dropout1_b')",
                            "Call"
                        ],
                        [
                            "tf.reshape(fc1, [tf.shape(fc1)[0], 1, 1, tf.shape(fc1)[1]])",
                            "Call"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "0.8",
                    "type": "float",
                    "possible_values": []
                },
                "is_training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "scope": {
                    "value": "dropout1_b",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_234": {
                "variable": {
                    "value": "fc1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "fc1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.fully_connected(fc7_H, 512, scope='fc1_b')",
                            "Call"
                        ],
                        [
                            "slim.dropout(fc1, keep_prob=0.8, is_training=is_training, scope='dropout1_b')",
                            "Call"
                        ],
                        [
                            "tf.reshape(fc1, [tf.shape(fc1)[0], 1, 1, tf.shape(fc1)[1]])",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(fc7_O, 512, scope='fc1_b')",
                            "Call"
                        ],
                        [
                            "slim.dropout(fc1, keep_prob=0.8, is_training=is_training, scope='dropout1_b')",
                            "Call"
                        ],
                        [
                            "tf.reshape(fc1, [tf.shape(fc1)[0], 1, 1, tf.shape(fc1)[1]])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[tf.shape(fc1)[0], 1, 1, tf.shape(fc1)[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_235": {
                "variable": {
                    "value": "att",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.multiply(bottom, fc1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "transpose_242": {
                "variable": {
                    "value": "att",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "att",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.multiply(bottom, fc1), 3, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, [att_shape[0], att_shape[1], -1])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(att)",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, att_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.multiply(bottom, fc1), 3, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, [att_shape[0], att_shape[1], -1])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(att)",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, att_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_243": {
                "variable": {
                    "value": "att_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "att",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.multiply(bottom, fc1), 3, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, [att_shape[0], att_shape[1], -1])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(att)",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, att_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.multiply(bottom, fc1), 3, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, [att_shape[0], att_shape[1], -1])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(att)",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, att_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_244": {
                "variable": {
                    "value": "att",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "att",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.multiply(bottom, fc1), 3, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, [att_shape[0], att_shape[1], -1])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(att)",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, att_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.multiply(bottom, fc1), 3, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, [att_shape[0], att_shape[1], -1])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(att)",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, att_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[att_shape[0], att_shape[1], -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_245": {
                "variable": {
                    "value": "att",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "att",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.multiply(bottom, fc1), 3, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, [att_shape[0], att_shape[1], -1])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(att)",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, att_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.multiply(bottom, fc1), 3, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, [att_shape[0], att_shape[1], -1])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(att)",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, att_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_246": {
                "variable": {
                    "value": "att",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "att",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.multiply(bottom, fc1), 3, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, [att_shape[0], att_shape[1], -1])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(att)",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, att_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.multiply(bottom, fc1), 3, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, [att_shape[0], att_shape[1], -1])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(att)",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, att_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "att_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(att)",
                            "Call"
                        ],
                        [
                            "tf.shape(att)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_247": {
                "variable": {
                    "value": "att",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "att",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.multiply(bottom, fc1), 3, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, [att_shape[0], att_shape[1], -1])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(att)",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, att_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.multiply(bottom, fc1), 3, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, [att_shape[0], att_shape[1], -1])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(att)",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, att_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sigmoid_256": {
                "variable": {
                    "value": "cls_prob_H",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "cls_score_H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.fully_connected(fc7_H, self.num_classes, weights_initializer=initializer, trainable=is_training, activation_fn=None, scope='cls_score_H')",
                            "Call"
                        ],
                        [
                            "self.predictions['cls_score_H']",
                            "Subscript"
                        ]
                    ]
                },
                "name": {
                    "value": "cls_prob_H",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sigmoid_263": {
                "variable": {
                    "value": "cls_prob_O",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "cls_score_O",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.fully_connected(fc7_O, self.num_classes, weights_initializer=initializer, trainable=is_training, activation_fn=None, scope='cls_score_O')",
                            "Call"
                        ],
                        [
                            "self.predictions['cls_score_O']",
                            "Subscript"
                        ]
                    ]
                },
                "name": {
                    "value": "cls_prob_O",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sigmoid_270": {
                "variable": {
                    "value": "cls_prob_sp",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "cls_score_sp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.fully_connected(fc7_SHsp, self.num_classes, weights_initializer=initializer, trainable=is_training, activation_fn=None, scope='cls_score_sp')",
                            "Call"
                        ],
                        [
                            "self.predictions['cls_score_sp']",
                            "Subscript"
                        ]
                    ]
                },
                "name": {
                    "value": "cls_prob_sp",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_291": {
                "variable": {
                    "value": "head_bottleneck",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bottom",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "trainable_variables_343": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_mean_385": {
                "variable": {
                    "value": "H_cross_entropy",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.multiply(tf.nn.sigmoid_cross_entropy_with_logits(labels=label_H, logits=cls_score_H), H_mask)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_386": {
                "variable": {
                    "value": "HO_cross_entropy",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.multiply(tf.nn.sigmoid_cross_entropy_with_logits(labels=label_HO, logits=cls_score_O), HO_mask)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_387": {
                "variable": {
                    "value": "sp_cross_entropy",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.multiply(tf.nn.sigmoid_cross_entropy_with_logits(labels=label_sp, logits=cls_score_sp), sp_mask)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "image_407": {
                "name": {
                    "value": "GROUND_TRUTH_H",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.py_func(draw_bounding_boxes_HOI, [tf.reverse(self.image + cfg.PIXEL_MEANS, axis=[-1]), self.Hsp_boxes, self.gt_class_H], tf.float32, name='gt_boxes_H')",
                            "Call"
                        ],
                        [
                            "tf.py_func(draw_bounding_boxes_HOI, [tf.reverse(self.image + cfg.PIXEL_MEANS, axis=[-1]), self.O_boxes, self.gt_class_HO], tf.float32, name='gt_boxes_HO')",
                            "Call"
                        ]
                    ]
                }
            },
            "image_414": {
                "name": {
                    "value": "GROUND_TRUTH_HO)",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.py_func(draw_bounding_boxes_HOI, [tf.reverse(self.image + cfg.PIXEL_MEANS, axis=[-1]), self.Hsp_boxes, self.gt_class_H], tf.float32, name='gt_boxes_H')",
                            "Call"
                        ],
                        [
                            "tf.py_func(draw_bounding_boxes_HOI, [tf.reverse(self.image + cfg.PIXEL_MEANS, axis=[-1]), self.O_boxes, self.gt_class_HO], tf.float32, name='gt_boxes_HO')",
                            "Call"
                        ]
                    ]
                }
            },
            "histogram_418": {
                "name": {
                    "value": "SCORE/ + tensor.op.name + / + key + /scores",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "histogram_422": {
                "name": {
                    "value": "'TRAIN/' + var.op.name",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_97": {
                "name_or_scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_name": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_122": {
                "name_or_scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_name": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_188": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "crop_and_resize_202": {
                "variable": {
                    "value": "crops",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "bottom",
                    "type": "variable",
                    "possible_values": []
                },
                "boxes": {
                    "value": "bboxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stop_gradient(tf.concat([y1, x1, y2, x2], axis=1))",
                            "Call"
                        ]
                    ]
                },
                "box_indices": {
                    "value": "tf.to_int32(batch_ids)",
                    "type": "Call",
                    "possible_values": []
                },
                "crop_size": {
                    "value": "[pre_pool_size, pre_pool_size]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "crops",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool2d_203": {
                "variable": {
                    "value": "crops",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "crops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.crop_and_resize(bottom, bboxes, tf.to_int32(batch_ids), [pre_pool_size, pre_pool_size], name='crops')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(crops, [2, 2], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.image.crop_and_resize(bottom, bboxes, tf.to_int32(batch_ids), [cfg.POOLING_SIZE, cfg.POOLING_SIZE], name='crops')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "crop_and_resize_205": {
                "variable": {
                    "value": "crops",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "bottom",
                    "type": "variable",
                    "possible_values": []
                },
                "boxes": {
                    "value": "bboxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stop_gradient(tf.concat([y1, x1, y2, x2], axis=1))",
                            "Call"
                        ]
                    ]
                },
                "box_indices": {
                    "value": "tf.to_int32(batch_ids)",
                    "type": "Call",
                    "possible_values": []
                },
                "crop_size": {
                    "value": "[cfg.POOLING_SIZE, cfg.POOLING_SIZE]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "crops",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_209": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_219": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_230": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_240": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_251": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reshape_257": {
                "tensor": {
                    "value": "cls_prob_H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid(cls_score_H, name='cls_prob_H')",
                            "Call"
                        ],
                        [
                            "sess.run([self.predictions['cls_prob_H']], feed_dict=feed_dict)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, self.num_classes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_264": {
                "tensor": {
                    "value": "cls_prob_O",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid(cls_score_O, name='cls_prob_O')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, self.num_classes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_271": {
                "tensor": {
                    "value": "cls_prob_sp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid(cls_score_sp, name='cls_prob_sp')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, self.num_classes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_286": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_max_333": {
                "input_tensor": {
                    "value": "Att_H[0, :, :, :] - tf.reduce_min(Att_H[0, :, :, :])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_max_334": {
                "input_tensor": {
                    "value": "Att_O[0, :, :, :] - tf.reduce_min(Att_O[0, :, :, :])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "device_351": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "image_354": {
                "name": {
                    "value": "ATTENTION_MAP_H",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.visualize['attention_map_H']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "max_outputs": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "image_355": {
                "name": {
                    "value": "ATTENTION_MAP_O",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.visualize['attention_map_O']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "max_outputs": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "scalar_363": {
                "name": {
                    "value": "lr",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_372": {
                "name_or_scope": {
                    "value": "LOSS",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_initializer_46": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "slice_190": {
                "input_": {
                    "value": "rois",
                    "type": "variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "batch_id",
                    "type": "str",
                    "possible_values": []
                }
            },
            "slice_194": {
                "input_": {
                    "value": "rois",
                    "type": "variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "x1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "slice_195": {
                "input_": {
                    "value": "rois",
                    "type": "variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "y1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "slice_196": {
                "input_": {
                    "value": "rois",
                    "type": "variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "x2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "slice_197": {
                "input_": {
                    "value": "rois",
                    "type": "variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "y2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_199": {
                "values": {
                    "value": "[y1, x1, y2, x2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multiply_214": {
                "x": {
                    "value": "bottom",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "fc1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.fully_connected(fc7_H, 512, scope='fc1_b')",
                            "Call"
                        ],
                        [
                            "slim.dropout(fc1, keep_prob=0.8, is_training=is_training, scope='dropout1_b')",
                            "Call"
                        ],
                        [
                            "tf.reshape(fc1, [tf.shape(fc1)[0], 1, 1, tf.shape(fc1)[1]])",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(fc7_O, 512, scope='fc1_b')",
                            "Call"
                        ],
                        [
                            "slim.dropout(fc1, keep_prob=0.8, is_training=is_training, scope='dropout1_b')",
                            "Call"
                        ],
                        [
                            "tf.reshape(fc1, [tf.shape(fc1)[0], 1, 1, tf.shape(fc1)[1]])",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_235": {
                "x": {
                    "value": "bottom",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "fc1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.fully_connected(fc7_H, 512, scope='fc1_b')",
                            "Call"
                        ],
                        [
                            "slim.dropout(fc1, keep_prob=0.8, is_training=is_training, scope='dropout1_b')",
                            "Call"
                        ],
                        [
                            "tf.reshape(fc1, [tf.shape(fc1)[0], 1, 1, tf.shape(fc1)[1]])",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(fc7_O, 512, scope='fc1_b')",
                            "Call"
                        ],
                        [
                            "slim.dropout(fc1, keep_prob=0.8, is_training=is_training, scope='dropout1_b')",
                            "Call"
                        ],
                        [
                            "tf.reshape(fc1, [tf.shape(fc1)[0], 1, 1, tf.shape(fc1)[1]])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_min_333": {
                "input_tensor": {
                    "value": "Att_H[0, :, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_min_334": {
                "input_tensor": {
                    "value": "Att_O[0, :, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "multiply_385": {
                "x": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(labels=label_H, logits=cls_score_H)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "H_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.Mask_H",
                            "Attribute"
                        ]
                    ]
                }
            },
            "multiply_386": {
                "x": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(labels=label_HO, logits=cls_score_O)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "HO_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.Mask_HO",
                            "Attribute"
                        ]
                    ]
                }
            },
            "multiply_387": {
                "x": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(labels=label_sp, logits=cls_score_sp)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "sp_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.Mask_sp",
                            "Attribute"
                        ]
                    ]
                }
            },
            "reverse_405": {
                "tensor": {
                    "value": "self.image + cfg.PIXEL_MEANS",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reverse_412": {
                "tensor": {
                    "value": "self.image + cfg.PIXEL_MEANS",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_float_192": {
                "x": {
                    "value": "bottom_shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "to_float_193": {
                "x": {
                    "value": "bottom_shape[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "to_int32_202": {
                "x": {
                    "value": "batch_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(tf.slice(rois, [0, 0], [-1, 1], name='batch_id'), [1])",
                            "Call"
                        ]
                    ]
                }
            },
            "to_int32_205": {
                "x": {
                    "value": "batch_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(tf.slice(rois, [0, 0], [-1, 1], name='batch_id'), [1])",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_357": {
                "name": {
                    "value": "key",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_cross_entropy_with_logits_385": {
                "labels": {
                    "value": "label_H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.gt_class_H",
                            "Attribute"
                        ]
                    ]
                },
                "logits": {
                    "value": "cls_score_H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.fully_connected(fc7_H, self.num_classes, weights_initializer=initializer, trainable=is_training, activation_fn=None, scope='cls_score_H')",
                            "Call"
                        ],
                        [
                            "self.predictions['cls_score_H']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sigmoid_cross_entropy_with_logits_386": {
                "labels": {
                    "value": "label_HO",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.gt_class_HO",
                            "Attribute"
                        ]
                    ]
                },
                "logits": {
                    "value": "cls_score_O",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.fully_connected(fc7_O, self.num_classes, weights_initializer=initializer, trainable=is_training, activation_fn=None, scope='cls_score_O')",
                            "Call"
                        ],
                        [
                            "self.predictions['cls_score_O']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sigmoid_cross_entropy_with_logits_387": {
                "labels": {
                    "value": "label_sp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.gt_class_sp",
                            "Attribute"
                        ]
                    ]
                },
                "logits": {
                    "value": "cls_score_sp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.fully_connected(fc7_SHsp, self.num_classes, weights_initializer=initializer, trainable=is_training, activation_fn=None, scope='cls_score_sp')",
                            "Call"
                        ],
                        [
                            "self.predictions['cls_score_sp']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "shape_213": {
                "input": {
                    "value": "fc1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.fully_connected(fc7_H, 512, scope='fc1_b')",
                            "Call"
                        ],
                        [
                            "slim.dropout(fc1, keep_prob=0.8, is_training=is_training, scope='dropout1_b')",
                            "Call"
                        ],
                        [
                            "tf.reshape(fc1, [tf.shape(fc1)[0], 1, 1, tf.shape(fc1)[1]])",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(fc7_O, 512, scope='fc1_b')",
                            "Call"
                        ],
                        [
                            "slim.dropout(fc1, keep_prob=0.8, is_training=is_training, scope='dropout1_b')",
                            "Call"
                        ],
                        [
                            "tf.reshape(fc1, [tf.shape(fc1)[0], 1, 1, tf.shape(fc1)[1]])",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_234": {
                "input": {
                    "value": "fc1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.fully_connected(fc7_H, 512, scope='fc1_b')",
                            "Call"
                        ],
                        [
                            "slim.dropout(fc1, keep_prob=0.8, is_training=is_training, scope='dropout1_b')",
                            "Call"
                        ],
                        [
                            "tf.reshape(fc1, [tf.shape(fc1)[0], 1, 1, tf.shape(fc1)[1]])",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(fc7_O, 512, scope='fc1_b')",
                            "Call"
                        ],
                        [
                            "slim.dropout(fc1, keep_prob=0.8, is_training=is_training, scope='dropout1_b')",
                            "Call"
                        ],
                        [
                            "tf.reshape(fc1, [tf.shape(fc1)[0], 1, 1, tf.shape(fc1)[1]])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "ican/lib/networks/iCAN_ResNet50_HICO.py": {
        "tensorflow": {
            "placeholder_66": {
                "variable": {
                    "value": "self.image",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, None, None, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "image",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_67": {
                "variable": {
                    "value": "self.spatial",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 64, 64, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "sp",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_68": {
                "variable": {
                    "value": "self.Hsp_boxes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 5]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "Hsp_boxes",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_69": {
                "variable": {
                    "value": "self.H_boxes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 5]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "H_boxes",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_70": {
                "variable": {
                    "value": "self.O_boxes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 5]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "O_boxes",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_71": {
                "variable": {
                    "value": "self.gt_class_HO",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 600]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "gt_class_HO",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_72": {
                "variable": {
                    "value": "self.H_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_77": {
                "variable": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "random_normal_initializer_288": {
                "variable": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": []
                },
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "conv2d_299": {
                "variable": {
                    "value": "head_phi",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "head",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.image_to_head(is_training)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "scope": {
                    "value": "head_phi",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_302": {
                "variable": {
                    "value": "head_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "head",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.image_to_head(is_training)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "scope": {
                    "value": "head_g",
                    "type": "str",
                    "possible_values": []
                }
            },
            "multiply_306": {
                "variable": {
                    "value": "att_head_H",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "head_g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(head, 512, [1, 1], scope='head_g')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "Att_H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.attention_pool_layer_H(head_phi, fc7_H, is_training, 'Att_H')",
                            "Call"
                        ],
                        [
                            "self.attention_norm_H(Att_H, 'Norm_Att_H')",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_310": {
                "variable": {
                    "value": "att_head_O",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "head_g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(head, 512, [1, 1], scope='head_g')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "Att_O",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.attention_pool_layer_O(head_phi, fc7_O, is_training, 'Att_O')",
                            "Call"
                        ],
                        [
                            "self.attention_norm_O(Att_O, 'Norm_Att_O')",
                            "Call"
                        ]
                    ]
                }
            },
            "merge_all_353": {
                "variable": {
                    "value": "self.summary_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "merge_354": {
                "variable": {
                    "value": "self.summary_op_val",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "val_summaries",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "py_func_385": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "draw_bounding_boxes_HOI",
                    "type": "variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[tf.reverse(self.image + cfg.PIXEL_MEANS, axis=[-1]), self.H_boxes, self.gt_class_HO]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "gt_boxes_H",
                    "type": "str",
                    "possible_values": []
                }
            },
            "py_func_392": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "draw_bounding_boxes_HOI",
                    "type": "variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[tf.reverse(self.image + cfg.PIXEL_MEANS, axis=[-1]), self.O_boxes, self.gt_class_HO]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "gt_boxes_HO",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_95": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "resnet_utils.conv2d_same(self.image, 64, 7, stride=2, scope='conv1')",
                            "Call"
                        ],
                        [
                            "tf.pad(net, [[0, 0], [1, 1], [1, 1], [0, 0]])",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [3, 3], stride=2, padding='VALID', scope='pool1')",
                            "Call"
                        ],
                        [
                            "self.build_base()",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [1, 1], [1, 1], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "max_pool2d_96": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "resnet_utils.conv2d_same(self.image, 64, 7, stride=2, scope='conv1')",
                            "Call"
                        ],
                        [
                            "tf.pad(net, [[0, 0], [1, 1], [1, 1], [0, 0]])",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [3, 3], stride=2, padding='VALID', scope='pool1')",
                            "Call"
                        ],
                        [
                            "self.build_base()",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "scope": {
                    "value": "pool1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_119": {
                "variable": {
                    "value": "conv1_sp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.spatial",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[5, 5]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv1_sp",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool2d_120": {
                "variable": {
                    "value": "pool1_sp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv1_sp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(self.spatial, 64, [5, 5], padding='VALID', scope='conv1_sp')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "scope": {
                    "value": "pool1_sp",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_121": {
                "variable": {
                    "value": "conv2_sp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pool1_sp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.max_pool2d(conv1_sp, [2, 2], scope='pool1_sp')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[5, 5]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv2_sp",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool2d_122": {
                "variable": {
                    "value": "pool2_sp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv2_sp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(pool1_sp, 32, [5, 5], padding='VALID', scope='conv2_sp')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "scope": {
                    "value": "pool2_sp",
                    "type": "str",
                    "possible_values": []
                }
            },
            "flatten_123": {
                "variable": {
                    "value": "pool2_flat_sp",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "pool2_sp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.max_pool2d(conv2_sp, [2, 2], scope='pool2_sp')",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_137": {
                "variable": {
                    "value": "fc7_H",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "fc7_H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(fc7_H, axis=[1, 2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_147": {
                "variable": {
                    "value": "fc7_O",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "fc7_O",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(fc7_O, axis=[1, 2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_154": {
                "variable": {
                    "value": "fc7_SH",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "pool5_SH",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bottleneck(att_head_H, is_training, 'bottleneck', False)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_155": {
                "variable": {
                    "value": "fc7_SO",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "pool5_SO",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bottleneck(att_head_O, is_training, 'bottleneck', True)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_157": {
                "variable": {
                    "value": "Concat_SH",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[fc7_H, fc7_SH]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_159": {
                "variable": {
                    "value": "fc8_SH",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fc8_SH",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.fully_connected(Concat_SH, self.num_fc, scope='fc8_SH')",
                            "Call"
                        ],
                        [
                            "slim.dropout(fc8_SH, keep_prob=0.5, is_training=is_training, scope='dropout8_SH')",
                            "Call"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "is_training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "scope": {
                    "value": "dropout8_SH",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dropout_161": {
                "variable": {
                    "value": "fc9_SH",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fc9_SH",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.fully_connected(fc8_SH, self.num_fc, scope='fc9_SH')",
                            "Call"
                        ],
                        [
                            "slim.dropout(fc9_SH, keep_prob=0.5, is_training=is_training, scope='dropout9_SH')",
                            "Call"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "is_training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "scope": {
                    "value": "dropout9_SH",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_163": {
                "variable": {
                    "value": "Concat_SO",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[fc7_O, fc7_SO]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_165": {
                "variable": {
                    "value": "fc8_SO",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fc8_SO",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.fully_connected(Concat_SO, self.num_fc, scope='fc8_SO')",
                            "Call"
                        ],
                        [
                            "slim.dropout(fc8_SO, keep_prob=0.5, is_training=is_training, scope='dropout8_SO')",
                            "Call"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "is_training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "scope": {
                    "value": "dropout8_SO",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dropout_167": {
                "variable": {
                    "value": "fc9_SO",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fc9_SO",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.fully_connected(fc8_SO, self.num_fc, scope='fc9_SO')",
                            "Call"
                        ],
                        [
                            "slim.dropout(fc9_SO, keep_prob=0.5, is_training=is_training, scope='dropout9_SO')",
                            "Call"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "is_training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "scope": {
                    "value": "dropout9_SO",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_169": {
                "variable": {
                    "value": "Concat_SHsp",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[fc7_H, sp]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_171": {
                "variable": {
                    "value": "Concat_SHsp",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "Concat_SHsp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([fc7_H, sp], 1)",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(Concat_SHsp, self.num_fc, scope='Concat_SHsp')",
                            "Call"
                        ],
                        [
                            "slim.dropout(Concat_SHsp, keep_prob=0.5, is_training=is_training, scope='dropout6_SHsp')",
                            "Call"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "is_training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "scope": {
                    "value": "dropout6_SHsp",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dropout_173": {
                "variable": {
                    "value": "fc7_SHsp",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fc7_SHsp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.fully_connected(Concat_SHsp, self.num_fc, scope='fc7_SHsp')",
                            "Call"
                        ],
                        [
                            "slim.dropout(fc7_SHsp, keep_prob=0.5, is_training=is_training, scope='dropout7_SHsp')",
                            "Call"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "is_training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "scope": {
                    "value": "dropout7_SHsp",
                    "type": "str",
                    "possible_values": []
                }
            },
            "squeeze_181": {
                "variable": {
                    "value": "batch_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.slice(rois, [0, 0], [-1, 1], name='batch_id')",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_182": {
                "variable": {
                    "value": "bottom_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bottom",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stop_gradient_190": {
                "variable": {
                    "value": "bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.concat([y1, x1, y2, x2], axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_203": {
                "variable": {
                    "value": "fc1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fc1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.fully_connected(fc7_H, 512, scope='fc1_b')",
                            "Call"
                        ],
                        [
                            "slim.dropout(fc1, keep_prob=0.8, is_training=is_training, scope='dropout1_b')",
                            "Call"
                        ],
                        [
                            "tf.reshape(fc1, [tf.shape(fc1)[0], 1, 1, tf.shape(fc1)[1]])",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(fc7_O, 512, scope='fc1_b')",
                            "Call"
                        ],
                        [
                            "slim.dropout(fc1, keep_prob=0.8, is_training=is_training, scope='dropout1_b')",
                            "Call"
                        ],
                        [
                            "tf.reshape(fc1, [tf.shape(fc1)[0], 1, 1, tf.shape(fc1)[1]])",
                            "Call"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "0.8",
                    "type": "float",
                    "possible_values": []
                },
                "is_training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "scope": {
                    "value": "dropout1_b",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_204": {
                "variable": {
                    "value": "fc1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "fc1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.fully_connected(fc7_H, 512, scope='fc1_b')",
                            "Call"
                        ],
                        [
                            "slim.dropout(fc1, keep_prob=0.8, is_training=is_training, scope='dropout1_b')",
                            "Call"
                        ],
                        [
                            "tf.reshape(fc1, [tf.shape(fc1)[0], 1, 1, tf.shape(fc1)[1]])",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(fc7_O, 512, scope='fc1_b')",
                            "Call"
                        ],
                        [
                            "slim.dropout(fc1, keep_prob=0.8, is_training=is_training, scope='dropout1_b')",
                            "Call"
                        ],
                        [
                            "tf.reshape(fc1, [tf.shape(fc1)[0], 1, 1, tf.shape(fc1)[1]])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[tf.shape(fc1)[0], 1, 1, tf.shape(fc1)[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_205": {
                "variable": {
                    "value": "att",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.multiply(bottom, fc1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "transpose_212": {
                "variable": {
                    "value": "att",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "att",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.multiply(bottom, fc1), 3, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, [att_shape[0], att_shape[1], -1])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(att)",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, att_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.multiply(bottom, fc1), 3, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, [att_shape[0], att_shape[1], -1])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(att)",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, att_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_213": {
                "variable": {
                    "value": "att_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "att",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.multiply(bottom, fc1), 3, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, [att_shape[0], att_shape[1], -1])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(att)",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, att_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.multiply(bottom, fc1), 3, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, [att_shape[0], att_shape[1], -1])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(att)",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, att_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_214": {
                "variable": {
                    "value": "att",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "att",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.multiply(bottom, fc1), 3, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, [att_shape[0], att_shape[1], -1])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(att)",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, att_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.multiply(bottom, fc1), 3, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, [att_shape[0], att_shape[1], -1])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(att)",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, att_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[att_shape[0], att_shape[1], -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_215": {
                "variable": {
                    "value": "att",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "att",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.multiply(bottom, fc1), 3, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, [att_shape[0], att_shape[1], -1])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(att)",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, att_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.multiply(bottom, fc1), 3, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, [att_shape[0], att_shape[1], -1])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(att)",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, att_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_216": {
                "variable": {
                    "value": "att",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "att",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.multiply(bottom, fc1), 3, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, [att_shape[0], att_shape[1], -1])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(att)",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, att_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.multiply(bottom, fc1), 3, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, [att_shape[0], att_shape[1], -1])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(att)",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, att_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "att_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(att)",
                            "Call"
                        ],
                        [
                            "tf.shape(att)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_217": {
                "variable": {
                    "value": "att",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "att",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.multiply(bottom, fc1), 3, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, [att_shape[0], att_shape[1], -1])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(att)",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, att_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.multiply(bottom, fc1), 3, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, [att_shape[0], att_shape[1], -1])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(att)",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, att_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dropout_224": {
                "variable": {
                    "value": "fc1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fc1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.fully_connected(fc7_H, 512, scope='fc1_b')",
                            "Call"
                        ],
                        [
                            "slim.dropout(fc1, keep_prob=0.8, is_training=is_training, scope='dropout1_b')",
                            "Call"
                        ],
                        [
                            "tf.reshape(fc1, [tf.shape(fc1)[0], 1, 1, tf.shape(fc1)[1]])",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(fc7_O, 512, scope='fc1_b')",
                            "Call"
                        ],
                        [
                            "slim.dropout(fc1, keep_prob=0.8, is_training=is_training, scope='dropout1_b')",
                            "Call"
                        ],
                        [
                            "tf.reshape(fc1, [tf.shape(fc1)[0], 1, 1, tf.shape(fc1)[1]])",
                            "Call"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "0.8",
                    "type": "float",
                    "possible_values": []
                },
                "is_training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "scope": {
                    "value": "dropout1_b",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_225": {
                "variable": {
                    "value": "fc1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "fc1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.fully_connected(fc7_H, 512, scope='fc1_b')",
                            "Call"
                        ],
                        [
                            "slim.dropout(fc1, keep_prob=0.8, is_training=is_training, scope='dropout1_b')",
                            "Call"
                        ],
                        [
                            "tf.reshape(fc1, [tf.shape(fc1)[0], 1, 1, tf.shape(fc1)[1]])",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(fc7_O, 512, scope='fc1_b')",
                            "Call"
                        ],
                        [
                            "slim.dropout(fc1, keep_prob=0.8, is_training=is_training, scope='dropout1_b')",
                            "Call"
                        ],
                        [
                            "tf.reshape(fc1, [tf.shape(fc1)[0], 1, 1, tf.shape(fc1)[1]])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[tf.shape(fc1)[0], 1, 1, tf.shape(fc1)[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_226": {
                "variable": {
                    "value": "att",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.multiply(bottom, fc1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "transpose_233": {
                "variable": {
                    "value": "att",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "att",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.multiply(bottom, fc1), 3, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, [att_shape[0], att_shape[1], -1])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(att)",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, att_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.multiply(bottom, fc1), 3, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, [att_shape[0], att_shape[1], -1])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(att)",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, att_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_234": {
                "variable": {
                    "value": "att_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "att",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.multiply(bottom, fc1), 3, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, [att_shape[0], att_shape[1], -1])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(att)",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, att_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.multiply(bottom, fc1), 3, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, [att_shape[0], att_shape[1], -1])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(att)",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, att_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_235": {
                "variable": {
                    "value": "att",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "att",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.multiply(bottom, fc1), 3, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, [att_shape[0], att_shape[1], -1])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(att)",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, att_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.multiply(bottom, fc1), 3, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, [att_shape[0], att_shape[1], -1])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(att)",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, att_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[att_shape[0], att_shape[1], -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_236": {
                "variable": {
                    "value": "att",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "att",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.multiply(bottom, fc1), 3, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, [att_shape[0], att_shape[1], -1])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(att)",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, att_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.multiply(bottom, fc1), 3, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, [att_shape[0], att_shape[1], -1])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(att)",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, att_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_237": {
                "variable": {
                    "value": "att",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "att",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.multiply(bottom, fc1), 3, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, [att_shape[0], att_shape[1], -1])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(att)",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, att_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.multiply(bottom, fc1), 3, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, [att_shape[0], att_shape[1], -1])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(att)",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, att_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "att_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(att)",
                            "Call"
                        ],
                        [
                            "tf.shape(att)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_238": {
                "variable": {
                    "value": "att",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "att",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.multiply(bottom, fc1), 3, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, [att_shape[0], att_shape[1], -1])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(att)",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, att_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.multiply(bottom, fc1), 3, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, [att_shape[0], att_shape[1], -1])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(att)",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, att_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sigmoid_248": {
                "variable": {
                    "value": "cls_prob_H",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "cls_score_H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.fully_connected(fc7_H, self.num_classes, weights_initializer=initializer, trainable=is_training, activation_fn=None, scope='cls_score_H')",
                            "Call"
                        ],
                        [
                            "self.predictions['cls_score_H']",
                            "Subscript"
                        ]
                    ]
                },
                "name": {
                    "value": "cls_prob_H",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sigmoid_255": {
                "variable": {
                    "value": "cls_prob_O",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "cls_score_O",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.fully_connected(fc7_O, self.num_classes, weights_initializer=initializer, trainable=is_training, activation_fn=None, scope='cls_score_O')",
                            "Call"
                        ],
                        [
                            "self.predictions['cls_score_O']",
                            "Subscript"
                        ]
                    ]
                },
                "name": {
                    "value": "cls_prob_O",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sigmoid_262": {
                "variable": {
                    "value": "cls_prob_sp",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "cls_score_sp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.fully_connected(fc7_SHsp, self.num_classes, weights_initializer=initializer, trainable=is_training, activation_fn=None, scope='cls_score_sp')",
                            "Call"
                        ],
                        [
                            "self.predictions['cls_score_sp']",
                            "Subscript"
                        ]
                    ]
                },
                "name": {
                    "value": "cls_prob_sp",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_283": {
                "variable": {
                    "value": "head_bottleneck",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bottom",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "trainable_variables_332": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_mean_367": {
                "variable": {
                    "value": "H_cross_entropy",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(labels=label_HO[:self.H_num, :], logits=cls_score_H[:self.H_num, :])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_368": {
                "variable": {
                    "value": "O_cross_entropy",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(labels=label_HO[:self.H_num, :], logits=cls_score_O[:self.H_num, :])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_369": {
                "variable": {
                    "value": "sp_cross_entropy",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(labels=label_HO, logits=cls_score_sp)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "image_388": {
                "name": {
                    "value": "GROUND_TRUTH_H",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.py_func(draw_bounding_boxes_HOI, [tf.reverse(self.image + cfg.PIXEL_MEANS, axis=[-1]), self.H_boxes, self.gt_class_HO], tf.float32, name='gt_boxes_H')",
                            "Call"
                        ],
                        [
                            "tf.py_func(draw_bounding_boxes_HOI, [tf.reverse(self.image + cfg.PIXEL_MEANS, axis=[-1]), self.O_boxes, self.gt_class_HO], tf.float32, name='gt_boxes_HO')",
                            "Call"
                        ]
                    ]
                }
            },
            "image_395": {
                "name": {
                    "value": "GROUND_TRUTH_HO",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.py_func(draw_bounding_boxes_HOI, [tf.reverse(self.image + cfg.PIXEL_MEANS, axis=[-1]), self.H_boxes, self.gt_class_HO], tf.float32, name='gt_boxes_H')",
                            "Call"
                        ],
                        [
                            "tf.py_func(draw_bounding_boxes_HOI, [tf.reverse(self.image + cfg.PIXEL_MEANS, axis=[-1]), self.O_boxes, self.gt_class_HO], tf.float32, name='gt_boxes_HO')",
                            "Call"
                        ]
                    ]
                }
            },
            "histogram_400": {
                "name": {
                    "value": "SCORE/ + tensor.op.name + / + key + /scores",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "histogram_404": {
                "name": {
                    "value": "'TRAIN/' + var.op.name",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_93": {
                "name_or_scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_name": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_118": {
                "name_or_scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_name": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_179": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "crop_and_resize_193": {
                "variable": {
                    "value": "crops",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "bottom",
                    "type": "variable",
                    "possible_values": []
                },
                "boxes": {
                    "value": "bboxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stop_gradient(tf.concat([y1, x1, y2, x2], axis=1))",
                            "Call"
                        ]
                    ]
                },
                "box_indices": {
                    "value": "tf.to_int32(batch_ids)",
                    "type": "Call",
                    "possible_values": []
                },
                "crop_size": {
                    "value": "[pre_pool_size, pre_pool_size]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "crops",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool2d_194": {
                "variable": {
                    "value": "crops",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "crops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.crop_and_resize(bottom, bboxes, tf.to_int32(batch_ids), [pre_pool_size, pre_pool_size], name='crops')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(crops, [2, 2], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.image.crop_and_resize(bottom, bboxes, tf.to_int32(batch_ids), [cfg.POOLING_SIZE, cfg.POOLING_SIZE], name='crops')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "crop_and_resize_196": {
                "variable": {
                    "value": "crops",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "bottom",
                    "type": "variable",
                    "possible_values": []
                },
                "boxes": {
                    "value": "bboxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stop_gradient(tf.concat([y1, x1, y2, x2], axis=1))",
                            "Call"
                        ]
                    ]
                },
                "box_indices": {
                    "value": "tf.to_int32(batch_ids)",
                    "type": "Call",
                    "possible_values": []
                },
                "crop_size": {
                    "value": "[cfg.POOLING_SIZE, cfg.POOLING_SIZE]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "crops",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_200": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_210": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_221": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_231": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_242": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reshape_249": {
                "tensor": {
                    "value": "cls_prob_H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid(cls_score_H, name='cls_prob_H')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, self.num_classes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_256": {
                "tensor": {
                    "value": "cls_prob_O",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid(cls_score_O, name='cls_prob_O')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, self.num_classes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_263": {
                "tensor": {
                    "value": "cls_prob_sp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid(cls_score_sp, name='cls_prob_sp')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, self.num_classes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_278": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_max_321": {
                "input_tensor": {
                    "value": "Att_H[0, :, :, :] - tf.reduce_min(Att_H[0, :, :, :])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_max_322": {
                "input_tensor": {
                    "value": "Att_O[0, :, :, :] - tf.reduce_min(Att_O[0, :, :, :])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "device_340": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "image_343": {
                "name": {
                    "value": "ATTENTION_MAP_H",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.visualize['attention_map_H']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "max_outputs": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "image_344": {
                "name": {
                    "value": "ATTENTION_MAP_O",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.visualize['attention_map_O']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "max_outputs": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "scalar_352": {
                "name": {
                    "value": "lr",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_361": {
                "name_or_scope": {
                    "value": "LOSS",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_initializer_46": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "slice_181": {
                "input_": {
                    "value": "rois",
                    "type": "variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "batch_id",
                    "type": "str",
                    "possible_values": []
                }
            },
            "slice_185": {
                "input_": {
                    "value": "rois",
                    "type": "variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "x1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "slice_186": {
                "input_": {
                    "value": "rois",
                    "type": "variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "y1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "slice_187": {
                "input_": {
                    "value": "rois",
                    "type": "variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "x2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "slice_188": {
                "input_": {
                    "value": "rois",
                    "type": "variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "y2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_190": {
                "values": {
                    "value": "[y1, x1, y2, x2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multiply_205": {
                "x": {
                    "value": "bottom",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "fc1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.fully_connected(fc7_H, 512, scope='fc1_b')",
                            "Call"
                        ],
                        [
                            "slim.dropout(fc1, keep_prob=0.8, is_training=is_training, scope='dropout1_b')",
                            "Call"
                        ],
                        [
                            "tf.reshape(fc1, [tf.shape(fc1)[0], 1, 1, tf.shape(fc1)[1]])",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(fc7_O, 512, scope='fc1_b')",
                            "Call"
                        ],
                        [
                            "slim.dropout(fc1, keep_prob=0.8, is_training=is_training, scope='dropout1_b')",
                            "Call"
                        ],
                        [
                            "tf.reshape(fc1, [tf.shape(fc1)[0], 1, 1, tf.shape(fc1)[1]])",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_226": {
                "x": {
                    "value": "bottom",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "fc1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.fully_connected(fc7_H, 512, scope='fc1_b')",
                            "Call"
                        ],
                        [
                            "slim.dropout(fc1, keep_prob=0.8, is_training=is_training, scope='dropout1_b')",
                            "Call"
                        ],
                        [
                            "tf.reshape(fc1, [tf.shape(fc1)[0], 1, 1, tf.shape(fc1)[1]])",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(fc7_O, 512, scope='fc1_b')",
                            "Call"
                        ],
                        [
                            "slim.dropout(fc1, keep_prob=0.8, is_training=is_training, scope='dropout1_b')",
                            "Call"
                        ],
                        [
                            "tf.reshape(fc1, [tf.shape(fc1)[0], 1, 1, tf.shape(fc1)[1]])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_min_321": {
                "input_tensor": {
                    "value": "Att_H[0, :, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_min_322": {
                "input_tensor": {
                    "value": "Att_O[0, :, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_367": {
                "labels": {
                    "value": "label_HO[:self.H_num, :]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "self.gt_class_HO",
                            "Attribute"
                        ]
                    ]
                },
                "logits": {
                    "value": "cls_score_H[:self.H_num, :]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "slim.fully_connected(fc7_H, self.num_classes, weights_initializer=initializer, trainable=is_training, activation_fn=None, scope='cls_score_H')",
                            "Call"
                        ],
                        [
                            "self.predictions['cls_score_H']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sigmoid_cross_entropy_with_logits_368": {
                "labels": {
                    "value": "label_HO[:self.H_num, :]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "self.gt_class_HO",
                            "Attribute"
                        ]
                    ]
                },
                "logits": {
                    "value": "cls_score_O[:self.H_num, :]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "slim.fully_connected(fc7_O, self.num_classes, weights_initializer=initializer, trainable=is_training, activation_fn=None, scope='cls_score_O')",
                            "Call"
                        ],
                        [
                            "self.predictions['cls_score_O']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sigmoid_cross_entropy_with_logits_369": {
                "labels": {
                    "value": "label_HO",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.gt_class_HO",
                            "Attribute"
                        ]
                    ]
                },
                "logits": {
                    "value": "cls_score_sp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.fully_connected(fc7_SHsp, self.num_classes, weights_initializer=initializer, trainable=is_training, activation_fn=None, scope='cls_score_sp')",
                            "Call"
                        ],
                        [
                            "self.predictions['cls_score_sp']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "reverse_386": {
                "tensor": {
                    "value": "self.image + cfg.PIXEL_MEANS",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reverse_393": {
                "tensor": {
                    "value": "self.image + cfg.PIXEL_MEANS",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_float_183": {
                "x": {
                    "value": "bottom_shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "to_float_184": {
                "x": {
                    "value": "bottom_shape[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "to_int32_193": {
                "x": {
                    "value": "batch_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(tf.slice(rois, [0, 0], [-1, 1], name='batch_id'), [1])",
                            "Call"
                        ]
                    ]
                }
            },
            "to_int32_196": {
                "x": {
                    "value": "batch_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(tf.slice(rois, [0, 0], [-1, 1], name='batch_id'), [1])",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_346": {
                "name": {
                    "value": "key",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_204": {
                "input": {
                    "value": "fc1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.fully_connected(fc7_H, 512, scope='fc1_b')",
                            "Call"
                        ],
                        [
                            "slim.dropout(fc1, keep_prob=0.8, is_training=is_training, scope='dropout1_b')",
                            "Call"
                        ],
                        [
                            "tf.reshape(fc1, [tf.shape(fc1)[0], 1, 1, tf.shape(fc1)[1]])",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(fc7_O, 512, scope='fc1_b')",
                            "Call"
                        ],
                        [
                            "slim.dropout(fc1, keep_prob=0.8, is_training=is_training, scope='dropout1_b')",
                            "Call"
                        ],
                        [
                            "tf.reshape(fc1, [tf.shape(fc1)[0], 1, 1, tf.shape(fc1)[1]])",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_225": {
                "input": {
                    "value": "fc1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.fully_connected(fc7_H, 512, scope='fc1_b')",
                            "Call"
                        ],
                        [
                            "slim.dropout(fc1, keep_prob=0.8, is_training=is_training, scope='dropout1_b')",
                            "Call"
                        ],
                        [
                            "tf.reshape(fc1, [tf.shape(fc1)[0], 1, 1, tf.shape(fc1)[1]])",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(fc7_O, 512, scope='fc1_b')",
                            "Call"
                        ],
                        [
                            "slim.dropout(fc1, keep_prob=0.8, is_training=is_training, scope='dropout1_b')",
                            "Call"
                        ],
                        [
                            "tf.reshape(fc1, [tf.shape(fc1)[0], 1, 1, tf.shape(fc1)[1]])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "ican/lib/networks/iCAN_ResNet50_VCOCO.py": {
        "tensorflow": {
            "placeholder_66": {
                "variable": {
                    "value": "self.image",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, None, None, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "image",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_67": {
                "variable": {
                    "value": "self.spatial",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 64, 64, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "sp",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_68": {
                "variable": {
                    "value": "self.Hsp_boxes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 5]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "Hsp_boxes",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_69": {
                "variable": {
                    "value": "self.O_boxes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 5]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "O_boxes",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_70": {
                "variable": {
                    "value": "self.gt_class_H",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 29]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "gt_class_H",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_71": {
                "variable": {
                    "value": "self.gt_class_HO",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 29]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "gt_class_HO",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_72": {
                "variable": {
                    "value": "self.gt_class_sp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 29]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "gt_class_sp",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_73": {
                "variable": {
                    "value": "self.Mask_HO",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 29]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "HO_mask",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_74": {
                "variable": {
                    "value": "self.Mask_H",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 29]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "H_mask",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_75": {
                "variable": {
                    "value": "self.Mask_sp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 29]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "sp_mask",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_76": {
                "variable": {
                    "value": "self.H_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_81": {
                "variable": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "random_normal_initializer_298": {
                "variable": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": []
                },
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "conv2d_309": {
                "variable": {
                    "value": "head_phi",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "head",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.image_to_head(is_training)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "scope": {
                    "value": "head_phi",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_312": {
                "variable": {
                    "value": "head_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "head",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.image_to_head(is_training)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "scope": {
                    "value": "head_g",
                    "type": "str",
                    "possible_values": []
                }
            },
            "multiply_317": {
                "variable": {
                    "value": "att_head_H",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "head_g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(head, 512, [1, 1], scope='head_g')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "Att_H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.attention_pool_layer_H(head_phi, fc7_H[:self.H_num, :], is_training, 'Att_H')",
                            "Call"
                        ],
                        [
                            "self.attention_norm_H(Att_H, 'Norm_Att_H')",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_321": {
                "variable": {
                    "value": "att_head_O",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "head_g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(head, 512, [1, 1], scope='head_g')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "Att_O",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.attention_pool_layer_O(head_phi, fc7_O, is_training, 'Att_O')",
                            "Call"
                        ],
                        [
                            "self.attention_norm_O(Att_O, 'Norm_Att_O')",
                            "Call"
                        ]
                    ]
                }
            },
            "merge_all_364": {
                "variable": {
                    "value": "self.summary_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "merge_365": {
                "variable": {
                    "value": "self.summary_op_val",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "val_summaries",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "py_func_404": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "draw_bounding_boxes_HOI",
                    "type": "variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[tf.reverse(self.image + cfg.PIXEL_MEANS, axis=[-1]), self.Hsp_boxes, self.gt_class_H]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "gt_boxes_H",
                    "type": "str",
                    "possible_values": []
                }
            },
            "py_func_411": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "draw_bounding_boxes_HOI",
                    "type": "variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[tf.reverse(self.image + cfg.PIXEL_MEANS, axis=[-1]), self.O_boxes, self.gt_class_HO]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "gt_boxes_HO",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_99": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "resnet_utils.conv2d_same(self.image, 64, 7, stride=2, scope='conv1')",
                            "Call"
                        ],
                        [
                            "tf.pad(net, [[0, 0], [1, 1], [1, 1], [0, 0]])",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [3, 3], stride=2, padding='VALID', scope='pool1')",
                            "Call"
                        ],
                        [
                            "self.build_base()",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [1, 1], [1, 1], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "max_pool2d_100": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "resnet_utils.conv2d_same(self.image, 64, 7, stride=2, scope='conv1')",
                            "Call"
                        ],
                        [
                            "tf.pad(net, [[0, 0], [1, 1], [1, 1], [0, 0]])",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [3, 3], stride=2, padding='VALID', scope='pool1')",
                            "Call"
                        ],
                        [
                            "self.build_base()",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "scope": {
                    "value": "pool1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_123": {
                "variable": {
                    "value": "conv1_sp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.spatial",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[5, 5]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv1_sp",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool2d_124": {
                "variable": {
                    "value": "pool1_sp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv1_sp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(self.spatial, 64, [5, 5], padding='VALID', scope='conv1_sp')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "scope": {
                    "value": "pool1_sp",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_125": {
                "variable": {
                    "value": "conv2_sp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pool1_sp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.max_pool2d(conv1_sp, [2, 2], scope='pool1_sp')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[5, 5]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv2_sp",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool2d_126": {
                "variable": {
                    "value": "pool2_sp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv2_sp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(pool1_sp, 32, [5, 5], padding='VALID', scope='conv2_sp')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "scope": {
                    "value": "pool2_sp",
                    "type": "str",
                    "possible_values": []
                }
            },
            "flatten_127": {
                "variable": {
                    "value": "pool2_flat_sp",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "pool2_sp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.max_pool2d(conv2_sp, [2, 2], scope='pool2_sp')",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_142": {
                "variable": {
                    "value": "fc7_H",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "fc7_H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(fc7_H, axis=[1, 2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_152": {
                "variable": {
                    "value": "fc7_O",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "fc7_O",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(fc7_O, axis=[1, 2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_159": {
                "variable": {
                    "value": "fc7_SH",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "pool5_SH",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bottleneck(att_head_H, is_training, 'bottleneck', False)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_160": {
                "variable": {
                    "value": "fc7_SO",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "pool5_SO",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bottleneck(att_head_O, is_training, 'bottleneck', True)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_162": {
                "variable": {
                    "value": "Concat_SH",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[fc7_H[:self.H_num, :], fc7_SH]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_165": {
                "variable": {
                    "value": "fc8_SH",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fc8_SH",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.fully_connected(Concat_SH, self.num_fc, scope='fc8_SH')",
                            "Call"
                        ],
                        [
                            "slim.dropout(fc8_SH, keep_prob=0.5, is_training=is_training, scope='dropout8_SH')",
                            "Call"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "is_training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "scope": {
                    "value": "dropout8_SH",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dropout_167": {
                "variable": {
                    "value": "fc9_SH",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fc9_SH",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.fully_connected(fc8_SH, self.num_fc, scope='fc9_SH')",
                            "Call"
                        ],
                        [
                            "slim.dropout(fc9_SH, keep_prob=0.5, is_training=is_training, scope='dropout9_SH')",
                            "Call"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "is_training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "scope": {
                    "value": "dropout9_SH",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_170": {
                "variable": {
                    "value": "Concat_SO",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[fc7_O, fc7_SO]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_173": {
                "variable": {
                    "value": "fc8_SO",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fc8_SO",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.fully_connected(Concat_SO, self.num_fc, scope='fc8_SO')",
                            "Call"
                        ],
                        [
                            "slim.dropout(fc8_SO, keep_prob=0.5, is_training=is_training, scope='dropout8_SO')",
                            "Call"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "is_training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "scope": {
                    "value": "dropout8_SO",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dropout_175": {
                "variable": {
                    "value": "fc9_SO",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fc9_SO",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.fully_connected(fc8_SO, self.num_fc, scope='fc9_SO')",
                            "Call"
                        ],
                        [
                            "slim.dropout(fc9_SO, keep_prob=0.5, is_training=is_training, scope='dropout9_SO')",
                            "Call"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "is_training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "scope": {
                    "value": "dropout9_SO",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_178": {
                "variable": {
                    "value": "Concat_SHsp",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[fc7_H, sp]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_180": {
                "variable": {
                    "value": "Concat_SHsp",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "Concat_SHsp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([fc7_H, sp], 1)",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(Concat_SHsp, self.num_fc, scope='Concat_SHsp')",
                            "Call"
                        ],
                        [
                            "slim.dropout(Concat_SHsp, keep_prob=0.5, is_training=is_training, scope='dropout6_SHsp')",
                            "Call"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "is_training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "scope": {
                    "value": "dropout6_SHsp",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dropout_182": {
                "variable": {
                    "value": "fc7_SHsp",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fc7_SHsp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.fully_connected(Concat_SHsp, self.num_fc, scope='fc7_SHsp')",
                            "Call"
                        ],
                        [
                            "slim.dropout(fc7_SHsp, keep_prob=0.5, is_training=is_training, scope='dropout7_SHsp')",
                            "Call"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "is_training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "scope": {
                    "value": "dropout7_SHsp",
                    "type": "str",
                    "possible_values": []
                }
            },
            "squeeze_190": {
                "variable": {
                    "value": "batch_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.slice(rois, [0, 0], [-1, 1], name='batch_id')",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_191": {
                "variable": {
                    "value": "bottom_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bottom",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stop_gradient_199": {
                "variable": {
                    "value": "bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.concat([y1, x1, y2, x2], axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_212": {
                "variable": {
                    "value": "fc1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fc1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.fully_connected(fc7_H, 512, scope='fc1_b')",
                            "Call"
                        ],
                        [
                            "slim.dropout(fc1, keep_prob=0.8, is_training=is_training, scope='dropout1_b')",
                            "Call"
                        ],
                        [
                            "tf.reshape(fc1, [tf.shape(fc1)[0], 1, 1, tf.shape(fc1)[1]])",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(fc7_O, 512, scope='fc1_b')",
                            "Call"
                        ],
                        [
                            "slim.dropout(fc1, keep_prob=0.8, is_training=is_training, scope='dropout1_b')",
                            "Call"
                        ],
                        [
                            "tf.reshape(fc1, [tf.shape(fc1)[0], 1, 1, tf.shape(fc1)[1]])",
                            "Call"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "0.8",
                    "type": "float",
                    "possible_values": []
                },
                "is_training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "scope": {
                    "value": "dropout1_b",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_213": {
                "variable": {
                    "value": "fc1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "fc1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.fully_connected(fc7_H, 512, scope='fc1_b')",
                            "Call"
                        ],
                        [
                            "slim.dropout(fc1, keep_prob=0.8, is_training=is_training, scope='dropout1_b')",
                            "Call"
                        ],
                        [
                            "tf.reshape(fc1, [tf.shape(fc1)[0], 1, 1, tf.shape(fc1)[1]])",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(fc7_O, 512, scope='fc1_b')",
                            "Call"
                        ],
                        [
                            "slim.dropout(fc1, keep_prob=0.8, is_training=is_training, scope='dropout1_b')",
                            "Call"
                        ],
                        [
                            "tf.reshape(fc1, [tf.shape(fc1)[0], 1, 1, tf.shape(fc1)[1]])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[tf.shape(fc1)[0], 1, 1, tf.shape(fc1)[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_214": {
                "variable": {
                    "value": "att",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.multiply(bottom, fc1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "transpose_221": {
                "variable": {
                    "value": "att",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "att",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.multiply(bottom, fc1), 3, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, [att_shape[0], att_shape[1], -1])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(att)",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, att_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.multiply(bottom, fc1), 3, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, [att_shape[0], att_shape[1], -1])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(att)",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, att_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_222": {
                "variable": {
                    "value": "att_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "att",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.multiply(bottom, fc1), 3, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, [att_shape[0], att_shape[1], -1])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(att)",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, att_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.multiply(bottom, fc1), 3, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, [att_shape[0], att_shape[1], -1])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(att)",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, att_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_223": {
                "variable": {
                    "value": "att",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "att",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.multiply(bottom, fc1), 3, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, [att_shape[0], att_shape[1], -1])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(att)",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, att_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.multiply(bottom, fc1), 3, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, [att_shape[0], att_shape[1], -1])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(att)",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, att_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[att_shape[0], att_shape[1], -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_224": {
                "variable": {
                    "value": "att",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "att",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.multiply(bottom, fc1), 3, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, [att_shape[0], att_shape[1], -1])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(att)",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, att_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.multiply(bottom, fc1), 3, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, [att_shape[0], att_shape[1], -1])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(att)",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, att_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_225": {
                "variable": {
                    "value": "att",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "att",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.multiply(bottom, fc1), 3, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, [att_shape[0], att_shape[1], -1])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(att)",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, att_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.multiply(bottom, fc1), 3, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, [att_shape[0], att_shape[1], -1])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(att)",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, att_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "att_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(att)",
                            "Call"
                        ],
                        [
                            "tf.shape(att)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_226": {
                "variable": {
                    "value": "att",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "att",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.multiply(bottom, fc1), 3, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, [att_shape[0], att_shape[1], -1])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(att)",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, att_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.multiply(bottom, fc1), 3, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, [att_shape[0], att_shape[1], -1])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(att)",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, att_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dropout_233": {
                "variable": {
                    "value": "fc1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fc1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.fully_connected(fc7_H, 512, scope='fc1_b')",
                            "Call"
                        ],
                        [
                            "slim.dropout(fc1, keep_prob=0.8, is_training=is_training, scope='dropout1_b')",
                            "Call"
                        ],
                        [
                            "tf.reshape(fc1, [tf.shape(fc1)[0], 1, 1, tf.shape(fc1)[1]])",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(fc7_O, 512, scope='fc1_b')",
                            "Call"
                        ],
                        [
                            "slim.dropout(fc1, keep_prob=0.8, is_training=is_training, scope='dropout1_b')",
                            "Call"
                        ],
                        [
                            "tf.reshape(fc1, [tf.shape(fc1)[0], 1, 1, tf.shape(fc1)[1]])",
                            "Call"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "0.8",
                    "type": "float",
                    "possible_values": []
                },
                "is_training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "scope": {
                    "value": "dropout1_b",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_234": {
                "variable": {
                    "value": "fc1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "fc1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.fully_connected(fc7_H, 512, scope='fc1_b')",
                            "Call"
                        ],
                        [
                            "slim.dropout(fc1, keep_prob=0.8, is_training=is_training, scope='dropout1_b')",
                            "Call"
                        ],
                        [
                            "tf.reshape(fc1, [tf.shape(fc1)[0], 1, 1, tf.shape(fc1)[1]])",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(fc7_O, 512, scope='fc1_b')",
                            "Call"
                        ],
                        [
                            "slim.dropout(fc1, keep_prob=0.8, is_training=is_training, scope='dropout1_b')",
                            "Call"
                        ],
                        [
                            "tf.reshape(fc1, [tf.shape(fc1)[0], 1, 1, tf.shape(fc1)[1]])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[tf.shape(fc1)[0], 1, 1, tf.shape(fc1)[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_235": {
                "variable": {
                    "value": "att",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.multiply(bottom, fc1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "transpose_242": {
                "variable": {
                    "value": "att",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "att",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.multiply(bottom, fc1), 3, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, [att_shape[0], att_shape[1], -1])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(att)",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, att_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.multiply(bottom, fc1), 3, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, [att_shape[0], att_shape[1], -1])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(att)",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, att_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_243": {
                "variable": {
                    "value": "att_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "att",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.multiply(bottom, fc1), 3, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, [att_shape[0], att_shape[1], -1])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(att)",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, att_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.multiply(bottom, fc1), 3, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, [att_shape[0], att_shape[1], -1])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(att)",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, att_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_244": {
                "variable": {
                    "value": "att",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "att",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.multiply(bottom, fc1), 3, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, [att_shape[0], att_shape[1], -1])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(att)",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, att_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.multiply(bottom, fc1), 3, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, [att_shape[0], att_shape[1], -1])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(att)",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, att_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[att_shape[0], att_shape[1], -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_245": {
                "variable": {
                    "value": "att",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "att",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.multiply(bottom, fc1), 3, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, [att_shape[0], att_shape[1], -1])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(att)",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, att_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.multiply(bottom, fc1), 3, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, [att_shape[0], att_shape[1], -1])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(att)",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, att_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_246": {
                "variable": {
                    "value": "att",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "att",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.multiply(bottom, fc1), 3, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, [att_shape[0], att_shape[1], -1])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(att)",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, att_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.multiply(bottom, fc1), 3, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, [att_shape[0], att_shape[1], -1])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(att)",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, att_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "att_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(att)",
                            "Call"
                        ],
                        [
                            "tf.shape(att)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_247": {
                "variable": {
                    "value": "att",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "att",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.multiply(bottom, fc1), 3, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, [att_shape[0], att_shape[1], -1])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(att)",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, att_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.multiply(bottom, fc1), 3, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, [att_shape[0], att_shape[1], -1])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(att)",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, att_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sigmoid_256": {
                "variable": {
                    "value": "cls_prob_H",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "cls_score_H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.fully_connected(fc7_H, self.num_classes, weights_initializer=initializer, trainable=is_training, activation_fn=None, scope='cls_score_H')",
                            "Call"
                        ],
                        [
                            "self.predictions['cls_score_H']",
                            "Subscript"
                        ]
                    ]
                },
                "name": {
                    "value": "cls_prob_H",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sigmoid_263": {
                "variable": {
                    "value": "cls_prob_O",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "cls_score_O",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.fully_connected(fc7_O, self.num_classes, weights_initializer=initializer, trainable=is_training, activation_fn=None, scope='cls_score_O')",
                            "Call"
                        ],
                        [
                            "self.predictions['cls_score_O']",
                            "Subscript"
                        ]
                    ]
                },
                "name": {
                    "value": "cls_prob_O",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sigmoid_270": {
                "variable": {
                    "value": "cls_prob_sp",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "cls_score_sp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.fully_connected(fc7_SHsp, self.num_classes, weights_initializer=initializer, trainable=is_training, activation_fn=None, scope='cls_score_sp')",
                            "Call"
                        ],
                        [
                            "self.predictions['cls_score_sp']",
                            "Subscript"
                        ]
                    ]
                },
                "name": {
                    "value": "cls_prob_sp",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_291": {
                "variable": {
                    "value": "head_bottleneck",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bottom",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "trainable_variables_343": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_mean_385": {
                "variable": {
                    "value": "H_cross_entropy",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.multiply(tf.nn.sigmoid_cross_entropy_with_logits(labels=label_H, logits=cls_score_H), H_mask)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_386": {
                "variable": {
                    "value": "HO_cross_entropy",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.multiply(tf.nn.sigmoid_cross_entropy_with_logits(labels=label_HO, logits=cls_score_O), HO_mask)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_387": {
                "variable": {
                    "value": "sp_cross_entropy",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.multiply(tf.nn.sigmoid_cross_entropy_with_logits(labels=label_sp, logits=cls_score_sp), sp_mask)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "image_407": {
                "name": {
                    "value": "GROUND_TRUTH_H",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.py_func(draw_bounding_boxes_HOI, [tf.reverse(self.image + cfg.PIXEL_MEANS, axis=[-1]), self.Hsp_boxes, self.gt_class_H], tf.float32, name='gt_boxes_H')",
                            "Call"
                        ],
                        [
                            "tf.py_func(draw_bounding_boxes_HOI, [tf.reverse(self.image + cfg.PIXEL_MEANS, axis=[-1]), self.O_boxes, self.gt_class_HO], tf.float32, name='gt_boxes_HO')",
                            "Call"
                        ]
                    ]
                }
            },
            "image_414": {
                "name": {
                    "value": "GROUND_TRUTH_HO)",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.py_func(draw_bounding_boxes_HOI, [tf.reverse(self.image + cfg.PIXEL_MEANS, axis=[-1]), self.Hsp_boxes, self.gt_class_H], tf.float32, name='gt_boxes_H')",
                            "Call"
                        ],
                        [
                            "tf.py_func(draw_bounding_boxes_HOI, [tf.reverse(self.image + cfg.PIXEL_MEANS, axis=[-1]), self.O_boxes, self.gt_class_HO], tf.float32, name='gt_boxes_HO')",
                            "Call"
                        ]
                    ]
                }
            },
            "histogram_418": {
                "name": {
                    "value": "SCORE/ + tensor.op.name + / + key + /scores",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "histogram_422": {
                "name": {
                    "value": "'TRAIN/' + var.op.name",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_97": {
                "name_or_scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_name": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_122": {
                "name_or_scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_name": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_188": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "crop_and_resize_202": {
                "variable": {
                    "value": "crops",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "bottom",
                    "type": "variable",
                    "possible_values": []
                },
                "boxes": {
                    "value": "bboxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stop_gradient(tf.concat([y1, x1, y2, x2], axis=1))",
                            "Call"
                        ]
                    ]
                },
                "box_indices": {
                    "value": "tf.to_int32(batch_ids)",
                    "type": "Call",
                    "possible_values": []
                },
                "crop_size": {
                    "value": "[pre_pool_size, pre_pool_size]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "crops",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool2d_203": {
                "variable": {
                    "value": "crops",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "crops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.crop_and_resize(bottom, bboxes, tf.to_int32(batch_ids), [pre_pool_size, pre_pool_size], name='crops')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(crops, [2, 2], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.image.crop_and_resize(bottom, bboxes, tf.to_int32(batch_ids), [cfg.POOLING_SIZE, cfg.POOLING_SIZE], name='crops')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "crop_and_resize_205": {
                "variable": {
                    "value": "crops",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "bottom",
                    "type": "variable",
                    "possible_values": []
                },
                "boxes": {
                    "value": "bboxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stop_gradient(tf.concat([y1, x1, y2, x2], axis=1))",
                            "Call"
                        ]
                    ]
                },
                "box_indices": {
                    "value": "tf.to_int32(batch_ids)",
                    "type": "Call",
                    "possible_values": []
                },
                "crop_size": {
                    "value": "[cfg.POOLING_SIZE, cfg.POOLING_SIZE]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "crops",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_209": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_219": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_230": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_240": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_251": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reshape_257": {
                "tensor": {
                    "value": "cls_prob_H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid(cls_score_H, name='cls_prob_H')",
                            "Call"
                        ],
                        [
                            "sess.run([self.predictions['cls_prob_H']], feed_dict=feed_dict)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, self.num_classes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_264": {
                "tensor": {
                    "value": "cls_prob_O",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid(cls_score_O, name='cls_prob_O')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, self.num_classes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_271": {
                "tensor": {
                    "value": "cls_prob_sp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid(cls_score_sp, name='cls_prob_sp')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, self.num_classes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_286": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_max_333": {
                "input_tensor": {
                    "value": "Att_H[0, :, :, :] - tf.reduce_min(Att_H[0, :, :, :])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_max_334": {
                "input_tensor": {
                    "value": "Att_O[0, :, :, :] - tf.reduce_min(Att_O[0, :, :, :])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "device_351": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "image_354": {
                "name": {
                    "value": "ATTENTION_MAP_H",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.visualize['attention_map_H']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "max_outputs": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "image_355": {
                "name": {
                    "value": "ATTENTION_MAP_O",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.visualize['attention_map_O']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "max_outputs": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "scalar_363": {
                "name": {
                    "value": "lr",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_372": {
                "name_or_scope": {
                    "value": "LOSS",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_initializer_46": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "slice_190": {
                "input_": {
                    "value": "rois",
                    "type": "variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "batch_id",
                    "type": "str",
                    "possible_values": []
                }
            },
            "slice_194": {
                "input_": {
                    "value": "rois",
                    "type": "variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "x1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "slice_195": {
                "input_": {
                    "value": "rois",
                    "type": "variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "y1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "slice_196": {
                "input_": {
                    "value": "rois",
                    "type": "variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "x2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "slice_197": {
                "input_": {
                    "value": "rois",
                    "type": "variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "y2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_199": {
                "values": {
                    "value": "[y1, x1, y2, x2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multiply_214": {
                "x": {
                    "value": "bottom",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "fc1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.fully_connected(fc7_H, 512, scope='fc1_b')",
                            "Call"
                        ],
                        [
                            "slim.dropout(fc1, keep_prob=0.8, is_training=is_training, scope='dropout1_b')",
                            "Call"
                        ],
                        [
                            "tf.reshape(fc1, [tf.shape(fc1)[0], 1, 1, tf.shape(fc1)[1]])",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(fc7_O, 512, scope='fc1_b')",
                            "Call"
                        ],
                        [
                            "slim.dropout(fc1, keep_prob=0.8, is_training=is_training, scope='dropout1_b')",
                            "Call"
                        ],
                        [
                            "tf.reshape(fc1, [tf.shape(fc1)[0], 1, 1, tf.shape(fc1)[1]])",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_235": {
                "x": {
                    "value": "bottom",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "fc1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.fully_connected(fc7_H, 512, scope='fc1_b')",
                            "Call"
                        ],
                        [
                            "slim.dropout(fc1, keep_prob=0.8, is_training=is_training, scope='dropout1_b')",
                            "Call"
                        ],
                        [
                            "tf.reshape(fc1, [tf.shape(fc1)[0], 1, 1, tf.shape(fc1)[1]])",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(fc7_O, 512, scope='fc1_b')",
                            "Call"
                        ],
                        [
                            "slim.dropout(fc1, keep_prob=0.8, is_training=is_training, scope='dropout1_b')",
                            "Call"
                        ],
                        [
                            "tf.reshape(fc1, [tf.shape(fc1)[0], 1, 1, tf.shape(fc1)[1]])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_min_333": {
                "input_tensor": {
                    "value": "Att_H[0, :, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_min_334": {
                "input_tensor": {
                    "value": "Att_O[0, :, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "multiply_385": {
                "x": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(labels=label_H, logits=cls_score_H)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "H_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.Mask_H",
                            "Attribute"
                        ]
                    ]
                }
            },
            "multiply_386": {
                "x": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(labels=label_HO, logits=cls_score_O)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "HO_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.Mask_HO",
                            "Attribute"
                        ]
                    ]
                }
            },
            "multiply_387": {
                "x": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(labels=label_sp, logits=cls_score_sp)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "sp_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.Mask_sp",
                            "Attribute"
                        ]
                    ]
                }
            },
            "reverse_405": {
                "tensor": {
                    "value": "self.image + cfg.PIXEL_MEANS",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reverse_412": {
                "tensor": {
                    "value": "self.image + cfg.PIXEL_MEANS",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_float_192": {
                "x": {
                    "value": "bottom_shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "to_float_193": {
                "x": {
                    "value": "bottom_shape[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "to_int32_202": {
                "x": {
                    "value": "batch_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(tf.slice(rois, [0, 0], [-1, 1], name='batch_id'), [1])",
                            "Call"
                        ]
                    ]
                }
            },
            "to_int32_205": {
                "x": {
                    "value": "batch_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(tf.slice(rois, [0, 0], [-1, 1], name='batch_id'), [1])",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_357": {
                "name": {
                    "value": "key",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_cross_entropy_with_logits_385": {
                "labels": {
                    "value": "label_H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.gt_class_H",
                            "Attribute"
                        ]
                    ]
                },
                "logits": {
                    "value": "cls_score_H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.fully_connected(fc7_H, self.num_classes, weights_initializer=initializer, trainable=is_training, activation_fn=None, scope='cls_score_H')",
                            "Call"
                        ],
                        [
                            "self.predictions['cls_score_H']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sigmoid_cross_entropy_with_logits_386": {
                "labels": {
                    "value": "label_HO",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.gt_class_HO",
                            "Attribute"
                        ]
                    ]
                },
                "logits": {
                    "value": "cls_score_O",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.fully_connected(fc7_O, self.num_classes, weights_initializer=initializer, trainable=is_training, activation_fn=None, scope='cls_score_O')",
                            "Call"
                        ],
                        [
                            "self.predictions['cls_score_O']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sigmoid_cross_entropy_with_logits_387": {
                "labels": {
                    "value": "label_sp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.gt_class_sp",
                            "Attribute"
                        ]
                    ]
                },
                "logits": {
                    "value": "cls_score_sp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.fully_connected(fc7_SHsp, self.num_classes, weights_initializer=initializer, trainable=is_training, activation_fn=None, scope='cls_score_sp')",
                            "Call"
                        ],
                        [
                            "self.predictions['cls_score_sp']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "shape_213": {
                "input": {
                    "value": "fc1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.fully_connected(fc7_H, 512, scope='fc1_b')",
                            "Call"
                        ],
                        [
                            "slim.dropout(fc1, keep_prob=0.8, is_training=is_training, scope='dropout1_b')",
                            "Call"
                        ],
                        [
                            "tf.reshape(fc1, [tf.shape(fc1)[0], 1, 1, tf.shape(fc1)[1]])",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(fc7_O, 512, scope='fc1_b')",
                            "Call"
                        ],
                        [
                            "slim.dropout(fc1, keep_prob=0.8, is_training=is_training, scope='dropout1_b')",
                            "Call"
                        ],
                        [
                            "tf.reshape(fc1, [tf.shape(fc1)[0], 1, 1, tf.shape(fc1)[1]])",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_234": {
                "input": {
                    "value": "fc1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.fully_connected(fc7_H, 512, scope='fc1_b')",
                            "Call"
                        ],
                        [
                            "slim.dropout(fc1, keep_prob=0.8, is_training=is_training, scope='dropout1_b')",
                            "Call"
                        ],
                        [
                            "tf.reshape(fc1, [tf.shape(fc1)[0], 1, 1, tf.shape(fc1)[1]])",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(fc7_O, 512, scope='fc1_b')",
                            "Call"
                        ],
                        [
                            "slim.dropout(fc1, keep_prob=0.8, is_training=is_training, scope='dropout1_b')",
                            "Call"
                        ],
                        [
                            "tf.reshape(fc1, [tf.shape(fc1)[0], 1, 1, tf.shape(fc1)[1]])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "ican/lib/networks/iCAN_ResNet50_VCOCO_Early.py": {
        "tensorflow": {
            "placeholder_66": {
                "variable": {
                    "value": "self.image",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, None, None, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "image",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_67": {
                "variable": {
                    "value": "self.spatial",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 64, 64, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "sp",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_68": {
                "variable": {
                    "value": "self.H_boxes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 5]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "H_boxes",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_69": {
                "variable": {
                    "value": "self.O_boxes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 5]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "O_boxes",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_70": {
                "variable": {
                    "value": "self.gt_class_H",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 29]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "gt_class_H",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_71": {
                "variable": {
                    "value": "self.gt_class_HO",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 29]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "gt_class_HO",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_72": {
                "variable": {
                    "value": "self.Mask_HO",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 29]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "HO_mask",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_73": {
                "variable": {
                    "value": "self.Mask_H",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 29]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "H_mask",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_74": {
                "variable": {
                    "value": "self.H_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_79": {
                "variable": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "random_normal_initializer_276": {
                "variable": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": []
                },
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "conv2d_287": {
                "variable": {
                    "value": "head_phi",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "head",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.image_to_head(is_training)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "scope": {
                    "value": "head_phi",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_290": {
                "variable": {
                    "value": "head_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "head",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.image_to_head(is_training)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "scope": {
                    "value": "head_g",
                    "type": "str",
                    "possible_values": []
                }
            },
            "multiply_295": {
                "variable": {
                    "value": "att_head_H",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "head_g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(head, 512, [1, 1], scope='head_g')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "Att_H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.attention_pool_layer_H(head_phi, fc7_H, is_training, 'Att_H')",
                            "Call"
                        ],
                        [
                            "self.attention_norm_H(Att_H, 'Norm_Att_H')",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_299": {
                "variable": {
                    "value": "att_head_O",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "head_g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(head, 512, [1, 1], scope='head_g')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "Att_O",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.attention_pool_layer_O(head_phi, fc7_O, is_training, 'Att_O')",
                            "Call"
                        ],
                        [
                            "self.attention_norm_O(Att_O, 'Norm_Att_O')",
                            "Call"
                        ]
                    ]
                }
            },
            "merge_all_334": {
                "variable": {
                    "value": "self.summary_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "merge_335": {
                "variable": {
                    "value": "self.summary_op_val",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "val_summaries",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "py_func_366": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "draw_bounding_boxes_HOI",
                    "type": "variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[tf.reverse(self.image + cfg.PIXEL_MEANS, axis=[-1]), self.H_boxes, self.gt_class_H]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "gt_boxes_H",
                    "type": "str",
                    "possible_values": []
                }
            },
            "py_func_373": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "draw_bounding_boxes_HOI",
                    "type": "variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[tf.reverse(self.image + cfg.PIXEL_MEANS, axis=[-1]), self.O_boxes, self.gt_class_HO]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "gt_boxes_HO",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_97": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "resnet_utils.conv2d_same(self.image, 64, 7, stride=2, scope='conv1')",
                            "Call"
                        ],
                        [
                            "tf.pad(net, [[0, 0], [1, 1], [1, 1], [0, 0]])",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [3, 3], stride=2, padding='VALID', scope='pool1')",
                            "Call"
                        ],
                        [
                            "self.build_base()",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [1, 1], [1, 1], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "max_pool2d_98": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "resnet_utils.conv2d_same(self.image, 64, 7, stride=2, scope='conv1')",
                            "Call"
                        ],
                        [
                            "tf.pad(net, [[0, 0], [1, 1], [1, 1], [0, 0]])",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [3, 3], stride=2, padding='VALID', scope='pool1')",
                            "Call"
                        ],
                        [
                            "self.build_base()",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "scope": {
                    "value": "pool1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_121": {
                "variable": {
                    "value": "conv1_sp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.spatial",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[5, 5]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv1_sp",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool2d_122": {
                "variable": {
                    "value": "pool1_sp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv1_sp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(self.spatial, 64, [5, 5], padding='VALID', scope='conv1_sp')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "scope": {
                    "value": "pool1_sp",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_123": {
                "variable": {
                    "value": "conv2_sp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pool1_sp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.max_pool2d(conv1_sp, [2, 2], scope='pool1_sp')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[5, 5]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv2_sp",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool2d_124": {
                "variable": {
                    "value": "pool2_sp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv2_sp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(pool1_sp, 32, [5, 5], padding='VALID', scope='conv2_sp')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "scope": {
                    "value": "pool2_sp",
                    "type": "str",
                    "possible_values": []
                }
            },
            "flatten_125": {
                "variable": {
                    "value": "pool2_flat_sp",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "pool2_sp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.max_pool2d(conv2_sp, [2, 2], scope='pool2_sp')",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_139": {
                "variable": {
                    "value": "fc7_H",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "fc7_H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(fc7_H, axis=[1, 2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_149": {
                "variable": {
                    "value": "fc7_O",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "fc7_O",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(fc7_O, axis=[1, 2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_156": {
                "variable": {
                    "value": "fc7_SH",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "pool5_SH",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bottleneck(att_head_H, is_training, 'bottleneck', False)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_157": {
                "variable": {
                    "value": "fc7_SO",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "pool5_SO",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bottleneck(att_head_O, is_training, 'bottleneck', True)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_159": {
                "variable": {
                    "value": "Concat_SH",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[fc7_H[:self.H_num, :], fc7_SH[:self.H_num, :]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_162": {
                "variable": {
                    "value": "fc8_SH",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fc8_SH",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.fully_connected(Concat_SH, self.num_fc, scope='fc8_SH')",
                            "Call"
                        ],
                        [
                            "slim.dropout(fc8_SH, keep_prob=0.5, is_training=is_training, scope='dropout8_SH')",
                            "Call"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "is_training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "scope": {
                    "value": "dropout8_SH",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dropout_164": {
                "variable": {
                    "value": "fc9_SH",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fc9_SH",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.fully_connected(fc8_SH, self.num_fc, scope='fc9_SH')",
                            "Call"
                        ],
                        [
                            "slim.dropout(fc9_SH, keep_prob=0.5, is_training=is_training, scope='dropout9_SH')",
                            "Call"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "is_training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "scope": {
                    "value": "dropout9_SH",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_166": {
                "variable": {
                    "value": "Concat_HOS",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[fc7_H, fc7_O, fc7_SH, fc7_SO, sp]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_172": {
                "variable": {
                    "value": "fc8_HOS",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fc8_HOS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.fully_connected(Concat_HOS, self.num_fc, scope='fc8_HOS')",
                            "Call"
                        ],
                        [
                            "slim.dropout(fc8_HOS, keep_prob=0.5, is_training=is_training, scope='dropout8_HOS')",
                            "Call"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "is_training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "scope": {
                    "value": "dropout8_HOS",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dropout_174": {
                "variable": {
                    "value": "fc9_HOS",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fc9_HOS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.fully_connected(fc8_HOS, self.num_fc, scope='fc9_HOS')",
                            "Call"
                        ],
                        [
                            "slim.dropout(fc9_HOS, keep_prob=0.5, is_training=is_training, scope='dropout9_HOS')",
                            "Call"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "is_training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "scope": {
                    "value": "dropout9_HOS",
                    "type": "str",
                    "possible_values": []
                }
            },
            "squeeze_181": {
                "variable": {
                    "value": "batch_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.slice(rois, [0, 0], [-1, 1], name='batch_id')",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_182": {
                "variable": {
                    "value": "bottom_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bottom",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stop_gradient_190": {
                "variable": {
                    "value": "bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.concat([y1, x1, y2, x2], axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_203": {
                "variable": {
                    "value": "fc1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fc1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.fully_connected(fc7_H, 512, scope='fc1_b')",
                            "Call"
                        ],
                        [
                            "slim.dropout(fc1, keep_prob=0.8, is_training=is_training, scope='dropout1_b')",
                            "Call"
                        ],
                        [
                            "tf.reshape(fc1, [tf.shape(fc1)[0], 1, 1, tf.shape(fc1)[1]])",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(fc7_O, 512, scope='fc1_b')",
                            "Call"
                        ],
                        [
                            "slim.dropout(fc1, keep_prob=0.8, is_training=is_training, scope='dropout1_b')",
                            "Call"
                        ],
                        [
                            "tf.reshape(fc1, [tf.shape(fc1)[0], 1, 1, tf.shape(fc1)[1]])",
                            "Call"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "0.8",
                    "type": "float",
                    "possible_values": []
                },
                "is_training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "scope": {
                    "value": "dropout1_b",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_204": {
                "variable": {
                    "value": "fc1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "fc1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.fully_connected(fc7_H, 512, scope='fc1_b')",
                            "Call"
                        ],
                        [
                            "slim.dropout(fc1, keep_prob=0.8, is_training=is_training, scope='dropout1_b')",
                            "Call"
                        ],
                        [
                            "tf.reshape(fc1, [tf.shape(fc1)[0], 1, 1, tf.shape(fc1)[1]])",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(fc7_O, 512, scope='fc1_b')",
                            "Call"
                        ],
                        [
                            "slim.dropout(fc1, keep_prob=0.8, is_training=is_training, scope='dropout1_b')",
                            "Call"
                        ],
                        [
                            "tf.reshape(fc1, [tf.shape(fc1)[0], 1, 1, tf.shape(fc1)[1]])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[tf.shape(fc1)[0], 1, 1, tf.shape(fc1)[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_205": {
                "variable": {
                    "value": "att",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.multiply(bottom, fc1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "transpose_212": {
                "variable": {
                    "value": "att",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "att",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.multiply(bottom, fc1), 3, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, [att_shape[0], att_shape[1], -1])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(att)",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, att_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.multiply(bottom, fc1), 3, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, [att_shape[0], att_shape[1], -1])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(att)",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, att_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_213": {
                "variable": {
                    "value": "att_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "att",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.multiply(bottom, fc1), 3, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, [att_shape[0], att_shape[1], -1])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(att)",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, att_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.multiply(bottom, fc1), 3, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, [att_shape[0], att_shape[1], -1])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(att)",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, att_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_214": {
                "variable": {
                    "value": "att",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "att",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.multiply(bottom, fc1), 3, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, [att_shape[0], att_shape[1], -1])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(att)",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, att_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.multiply(bottom, fc1), 3, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, [att_shape[0], att_shape[1], -1])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(att)",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, att_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[att_shape[0], att_shape[1], -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_215": {
                "variable": {
                    "value": "att",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "att",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.multiply(bottom, fc1), 3, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, [att_shape[0], att_shape[1], -1])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(att)",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, att_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.multiply(bottom, fc1), 3, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, [att_shape[0], att_shape[1], -1])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(att)",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, att_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_216": {
                "variable": {
                    "value": "att",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "att",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.multiply(bottom, fc1), 3, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, [att_shape[0], att_shape[1], -1])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(att)",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, att_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.multiply(bottom, fc1), 3, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, [att_shape[0], att_shape[1], -1])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(att)",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, att_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "att_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(att)",
                            "Call"
                        ],
                        [
                            "tf.shape(att)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_217": {
                "variable": {
                    "value": "att",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "att",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.multiply(bottom, fc1), 3, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, [att_shape[0], att_shape[1], -1])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(att)",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, att_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.multiply(bottom, fc1), 3, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, [att_shape[0], att_shape[1], -1])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(att)",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, att_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dropout_224": {
                "variable": {
                    "value": "fc1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fc1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.fully_connected(fc7_H, 512, scope='fc1_b')",
                            "Call"
                        ],
                        [
                            "slim.dropout(fc1, keep_prob=0.8, is_training=is_training, scope='dropout1_b')",
                            "Call"
                        ],
                        [
                            "tf.reshape(fc1, [tf.shape(fc1)[0], 1, 1, tf.shape(fc1)[1]])",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(fc7_O, 512, scope='fc1_b')",
                            "Call"
                        ],
                        [
                            "slim.dropout(fc1, keep_prob=0.8, is_training=is_training, scope='dropout1_b')",
                            "Call"
                        ],
                        [
                            "tf.reshape(fc1, [tf.shape(fc1)[0], 1, 1, tf.shape(fc1)[1]])",
                            "Call"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "0.8",
                    "type": "float",
                    "possible_values": []
                },
                "is_training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "scope": {
                    "value": "dropout1_b",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_225": {
                "variable": {
                    "value": "fc1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "fc1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.fully_connected(fc7_H, 512, scope='fc1_b')",
                            "Call"
                        ],
                        [
                            "slim.dropout(fc1, keep_prob=0.8, is_training=is_training, scope='dropout1_b')",
                            "Call"
                        ],
                        [
                            "tf.reshape(fc1, [tf.shape(fc1)[0], 1, 1, tf.shape(fc1)[1]])",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(fc7_O, 512, scope='fc1_b')",
                            "Call"
                        ],
                        [
                            "slim.dropout(fc1, keep_prob=0.8, is_training=is_training, scope='dropout1_b')",
                            "Call"
                        ],
                        [
                            "tf.reshape(fc1, [tf.shape(fc1)[0], 1, 1, tf.shape(fc1)[1]])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[tf.shape(fc1)[0], 1, 1, tf.shape(fc1)[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_226": {
                "variable": {
                    "value": "att",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.multiply(bottom, fc1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "transpose_233": {
                "variable": {
                    "value": "att",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "att",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.multiply(bottom, fc1), 3, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, [att_shape[0], att_shape[1], -1])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(att)",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, att_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.multiply(bottom, fc1), 3, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, [att_shape[0], att_shape[1], -1])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(att)",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, att_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_234": {
                "variable": {
                    "value": "att_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "att",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.multiply(bottom, fc1), 3, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, [att_shape[0], att_shape[1], -1])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(att)",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, att_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.multiply(bottom, fc1), 3, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, [att_shape[0], att_shape[1], -1])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(att)",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, att_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_235": {
                "variable": {
                    "value": "att",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "att",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.multiply(bottom, fc1), 3, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, [att_shape[0], att_shape[1], -1])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(att)",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, att_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.multiply(bottom, fc1), 3, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, [att_shape[0], att_shape[1], -1])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(att)",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, att_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[att_shape[0], att_shape[1], -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_236": {
                "variable": {
                    "value": "att",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "att",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.multiply(bottom, fc1), 3, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, [att_shape[0], att_shape[1], -1])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(att)",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, att_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.multiply(bottom, fc1), 3, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, [att_shape[0], att_shape[1], -1])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(att)",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, att_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_237": {
                "variable": {
                    "value": "att",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "att",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.multiply(bottom, fc1), 3, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, [att_shape[0], att_shape[1], -1])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(att)",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, att_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.multiply(bottom, fc1), 3, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, [att_shape[0], att_shape[1], -1])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(att)",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, att_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "att_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(att)",
                            "Call"
                        ],
                        [
                            "tf.shape(att)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_238": {
                "variable": {
                    "value": "att",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "att",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.multiply(bottom, fc1), 3, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, [att_shape[0], att_shape[1], -1])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(att)",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, att_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.multiply(bottom, fc1), 3, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, [att_shape[0], att_shape[1], -1])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(att)",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, att_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(att, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sigmoid_247": {
                "variable": {
                    "value": "cls_prob_H",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "cls_score_H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.fully_connected(fc7_H, self.num_classes, weights_initializer=initializer, trainable=is_training, activation_fn=None, scope='cls_score_H')",
                            "Call"
                        ],
                        [
                            "self.predictions['cls_score_H']",
                            "Subscript"
                        ]
                    ]
                },
                "name": {
                    "value": "cls_prob_H",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sigmoid_254": {
                "variable": {
                    "value": "cls_prob_HO",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "cls_score_HO",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.fully_connected(fc7_HO, self.num_classes, weights_initializer=initializer, trainable=is_training, activation_fn=None, scope='cls_score_HO')",
                            "Call"
                        ],
                        [
                            "self.predictions['cls_score_HO']",
                            "Subscript"
                        ]
                    ]
                },
                "name": {
                    "value": "cls_prob_HO",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_270": {
                "variable": {
                    "value": "head_bottleneck",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bottom",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "trainable_variables_317": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_mean_350": {
                "variable": {
                    "value": "H_cross_entropy",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.multiply(tf.nn.sigmoid_cross_entropy_with_logits(labels=label_H, logits=cls_score_H), H_mask)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_351": {
                "variable": {
                    "value": "HO_cross_entropy",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.multiply(tf.nn.sigmoid_cross_entropy_with_logits(labels=label_HO, logits=cls_score_HO), HO_mask)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "image_369": {
                "name": {
                    "value": "GROUND_TRUTH_H",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.py_func(draw_bounding_boxes_HOI, [tf.reverse(self.image + cfg.PIXEL_MEANS, axis=[-1]), self.H_boxes, self.gt_class_H], tf.float32, name='gt_boxes_H')",
                            "Call"
                        ],
                        [
                            "tf.py_func(draw_bounding_boxes_HOI, [tf.reverse(self.image + cfg.PIXEL_MEANS, axis=[-1]), self.O_boxes, self.gt_class_HO], tf.float32, name='gt_boxes_HO')",
                            "Call"
                        ]
                    ]
                }
            },
            "image_376": {
                "name": {
                    "value": "GROUND_TRUTH_HO)",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.py_func(draw_bounding_boxes_HOI, [tf.reverse(self.image + cfg.PIXEL_MEANS, axis=[-1]), self.H_boxes, self.gt_class_H], tf.float32, name='gt_boxes_H')",
                            "Call"
                        ],
                        [
                            "tf.py_func(draw_bounding_boxes_HOI, [tf.reverse(self.image + cfg.PIXEL_MEANS, axis=[-1]), self.O_boxes, self.gt_class_HO], tf.float32, name='gt_boxes_HO')",
                            "Call"
                        ]
                    ]
                }
            },
            "histogram_380": {
                "name": {
                    "value": "SCORE/ + tensor.op.name + / + key + /scores",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "histogram_384": {
                "name": {
                    "value": "'TRAIN/' + var.op.name",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_95": {
                "name_or_scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_name": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_120": {
                "name_or_scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_name": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_179": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "crop_and_resize_193": {
                "variable": {
                    "value": "crops",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "bottom",
                    "type": "variable",
                    "possible_values": []
                },
                "boxes": {
                    "value": "bboxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stop_gradient(tf.concat([y1, x1, y2, x2], axis=1))",
                            "Call"
                        ]
                    ]
                },
                "box_indices": {
                    "value": "tf.to_int32(batch_ids)",
                    "type": "Call",
                    "possible_values": []
                },
                "crop_size": {
                    "value": "[pre_pool_size, pre_pool_size]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "crops",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool2d_194": {
                "variable": {
                    "value": "crops",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "crops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.crop_and_resize(bottom, bboxes, tf.to_int32(batch_ids), [pre_pool_size, pre_pool_size], name='crops')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(crops, [2, 2], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.image.crop_and_resize(bottom, bboxes, tf.to_int32(batch_ids), [cfg.POOLING_SIZE, cfg.POOLING_SIZE], name='crops')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "crop_and_resize_196": {
                "variable": {
                    "value": "crops",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "bottom",
                    "type": "variable",
                    "possible_values": []
                },
                "boxes": {
                    "value": "bboxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stop_gradient(tf.concat([y1, x1, y2, x2], axis=1))",
                            "Call"
                        ]
                    ]
                },
                "box_indices": {
                    "value": "tf.to_int32(batch_ids)",
                    "type": "Call",
                    "possible_values": []
                },
                "crop_size": {
                    "value": "[cfg.POOLING_SIZE, cfg.POOLING_SIZE]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "crops",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_200": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_210": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_221": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_231": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_242": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reshape_248": {
                "tensor": {
                    "value": "cls_prob_H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid(cls_score_H, name='cls_prob_H')",
                            "Call"
                        ],
                        [
                            "sess.run([self.predictions['cls_prob_H']], feed_dict=feed_dict)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, self.num_classes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_255": {
                "tensor": {
                    "value": "cls_prob_HO",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid(cls_score_HO, name='cls_prob_HO')",
                            "Call"
                        ],
                        [
                            "sess.run([self.predictions['cls_prob_HO']], feed_dict=feed_dict)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, self.num_classes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_265": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_max_308": {
                "input_tensor": {
                    "value": "Att_H[0, :, :, :] - tf.reduce_min(Att_H[0, :, :, :])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_max_309": {
                "input_tensor": {
                    "value": "Att_O[0, :, :, :] - tf.reduce_min(Att_O[0, :, :, :])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "device_325": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "image_328": {
                "name": {
                    "value": "ATTENTION_MAP_H",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.visualize['attention_map_H']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "max_outputs": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "image_329": {
                "name": {
                    "value": "ATTENTION_MAP_O",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.visualize['attention_map_O']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "max_outputs": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "scalar_333": {
                "name": {
                    "value": "lr",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_342": {
                "name_or_scope": {
                    "value": "LOSS",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_initializer_46": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "slice_181": {
                "input_": {
                    "value": "rois",
                    "type": "variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "batch_id",
                    "type": "str",
                    "possible_values": []
                }
            },
            "slice_185": {
                "input_": {
                    "value": "rois",
                    "type": "variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "x1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "slice_186": {
                "input_": {
                    "value": "rois",
                    "type": "variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "y1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "slice_187": {
                "input_": {
                    "value": "rois",
                    "type": "variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "x2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "slice_188": {
                "input_": {
                    "value": "rois",
                    "type": "variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "y2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_190": {
                "values": {
                    "value": "[y1, x1, y2, x2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multiply_205": {
                "x": {
                    "value": "bottom",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "fc1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.fully_connected(fc7_H, 512, scope='fc1_b')",
                            "Call"
                        ],
                        [
                            "slim.dropout(fc1, keep_prob=0.8, is_training=is_training, scope='dropout1_b')",
                            "Call"
                        ],
                        [
                            "tf.reshape(fc1, [tf.shape(fc1)[0], 1, 1, tf.shape(fc1)[1]])",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(fc7_O, 512, scope='fc1_b')",
                            "Call"
                        ],
                        [
                            "slim.dropout(fc1, keep_prob=0.8, is_training=is_training, scope='dropout1_b')",
                            "Call"
                        ],
                        [
                            "tf.reshape(fc1, [tf.shape(fc1)[0], 1, 1, tf.shape(fc1)[1]])",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_226": {
                "x": {
                    "value": "bottom",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "fc1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.fully_connected(fc7_H, 512, scope='fc1_b')",
                            "Call"
                        ],
                        [
                            "slim.dropout(fc1, keep_prob=0.8, is_training=is_training, scope='dropout1_b')",
                            "Call"
                        ],
                        [
                            "tf.reshape(fc1, [tf.shape(fc1)[0], 1, 1, tf.shape(fc1)[1]])",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(fc7_O, 512, scope='fc1_b')",
                            "Call"
                        ],
                        [
                            "slim.dropout(fc1, keep_prob=0.8, is_training=is_training, scope='dropout1_b')",
                            "Call"
                        ],
                        [
                            "tf.reshape(fc1, [tf.shape(fc1)[0], 1, 1, tf.shape(fc1)[1]])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_min_308": {
                "input_tensor": {
                    "value": "Att_H[0, :, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_min_309": {
                "input_tensor": {
                    "value": "Att_O[0, :, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "multiply_350": {
                "x": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(labels=label_H, logits=cls_score_H)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "H_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.Mask_H",
                            "Attribute"
                        ]
                    ]
                }
            },
            "multiply_351": {
                "x": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(labels=label_HO, logits=cls_score_HO)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "HO_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.Mask_HO",
                            "Attribute"
                        ]
                    ]
                }
            },
            "reverse_367": {
                "tensor": {
                    "value": "self.image + cfg.PIXEL_MEANS",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reverse_374": {
                "tensor": {
                    "value": "self.image + cfg.PIXEL_MEANS",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_float_183": {
                "x": {
                    "value": "bottom_shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "to_float_184": {
                "x": {
                    "value": "bottom_shape[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "to_int32_193": {
                "x": {
                    "value": "batch_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(tf.slice(rois, [0, 0], [-1, 1], name='batch_id'), [1])",
                            "Call"
                        ]
                    ]
                }
            },
            "to_int32_196": {
                "x": {
                    "value": "batch_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(tf.slice(rois, [0, 0], [-1, 1], name='batch_id'), [1])",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_331": {
                "name": {
                    "value": "key",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_cross_entropy_with_logits_350": {
                "labels": {
                    "value": "label_H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.gt_class_H",
                            "Attribute"
                        ]
                    ]
                },
                "logits": {
                    "value": "cls_score_H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.fully_connected(fc7_H, self.num_classes, weights_initializer=initializer, trainable=is_training, activation_fn=None, scope='cls_score_H')",
                            "Call"
                        ],
                        [
                            "self.predictions['cls_score_H']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sigmoid_cross_entropy_with_logits_351": {
                "labels": {
                    "value": "label_HO",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.gt_class_HO",
                            "Attribute"
                        ]
                    ]
                },
                "logits": {
                    "value": "cls_score_HO",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.fully_connected(fc7_HO, self.num_classes, weights_initializer=initializer, trainable=is_training, activation_fn=None, scope='cls_score_HO')",
                            "Call"
                        ],
                        [
                            "self.predictions['cls_score_HO']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "shape_204": {
                "input": {
                    "value": "fc1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.fully_connected(fc7_H, 512, scope='fc1_b')",
                            "Call"
                        ],
                        [
                            "slim.dropout(fc1, keep_prob=0.8, is_training=is_training, scope='dropout1_b')",
                            "Call"
                        ],
                        [
                            "tf.reshape(fc1, [tf.shape(fc1)[0], 1, 1, tf.shape(fc1)[1]])",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(fc7_O, 512, scope='fc1_b')",
                            "Call"
                        ],
                        [
                            "slim.dropout(fc1, keep_prob=0.8, is_training=is_training, scope='dropout1_b')",
                            "Call"
                        ],
                        [
                            "tf.reshape(fc1, [tf.shape(fc1)[0], 1, 1, tf.shape(fc1)[1]])",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_225": {
                "input": {
                    "value": "fc1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.fully_connected(fc7_H, 512, scope='fc1_b')",
                            "Call"
                        ],
                        [
                            "slim.dropout(fc1, keep_prob=0.8, is_training=is_training, scope='dropout1_b')",
                            "Call"
                        ],
                        [
                            "tf.reshape(fc1, [tf.shape(fc1)[0], 1, 1, tf.shape(fc1)[1]])",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(fc7_O, 512, scope='fc1_b')",
                            "Call"
                        ],
                        [
                            "slim.dropout(fc1, keep_prob=0.8, is_training=is_training, scope='dropout1_b')",
                            "Call"
                        ],
                        [
                            "tf.reshape(fc1, [tf.shape(fc1)[0], 1, 1, tf.shape(fc1)[1]])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "ican/lib/ult/.ipynb_checkpoints/ult-checkpoint.py": {
        "tensorflow": {}
    },
    "ican/lib/ult/ult.py": {
        "tensorflow": {}
    },
    "ican/misc/.ipynb_checkpoints/resnet_v1-checkpoint.py": {
        "tensorflow": {
            "squeeze_61": {
                "variable": {
                    "value": "batch_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.slice(rois, [0, 0], [-1, 1], name='batch_id')",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_63": {
                "variable": {
                    "value": "bottom_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bottom",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stop_gradient_71": {
                "variable": {
                    "value": "bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.concat([y1, x1, y2, x2], 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_87": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "resnet_utils.conv2d_same(self._image, 64, 7, stride=2, scope='conv1')",
                            "Call"
                        ],
                        [
                            "tf.pad(net, [[0, 0], [1, 1], [1, 1], [0, 0]])",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [3, 3], stride=2, padding='VALID', scope='pool1')",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [1, 1], [1, 1], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "max_pool2d_88": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "resnet_utils.conv2d_same(self._image, 64, 7, stride=2, scope='conv1')",
                            "Call"
                        ],
                        [
                            "tf.pad(net, [[0, 0], [1, 1], [1, 1], [0, 0]])",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [3, 3], stride=2, padding='VALID', scope='pool1')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "scope": {
                    "value": "pool1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_128": {
                "variable": {
                    "value": "fc7",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "fc7",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(fc7, axis=[1, 2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_60": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "crop_and_resize_74": {
                "variable": {
                    "value": "crops",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "bottom",
                    "type": "variable",
                    "possible_values": []
                },
                "boxes": {
                    "value": "bboxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stop_gradient(tf.concat([y1, x1, y2, x2], 1))",
                            "Call"
                        ]
                    ]
                },
                "box_indices": {
                    "value": "tf.to_int32(batch_ids)",
                    "type": "Call",
                    "possible_values": []
                },
                "crop_size": {
                    "value": "[pre_pool_size, pre_pool_size]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "crops",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool2d_76": {
                "variable": {
                    "value": "crops",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "crops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.crop_and_resize(bottom, bboxes, tf.to_int32(batch_ids), [pre_pool_size, pre_pool_size], name='crops')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(crops, [2, 2], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.image.crop_and_resize(bottom, bboxes, tf.to_int32(batch_ids), [cfg.POOLING_SIZE, cfg.POOLING_SIZE], name='crops')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "crop_and_resize_78": {
                "variable": {
                    "value": "crops",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "bottom",
                    "type": "variable",
                    "possible_values": []
                },
                "boxes": {
                    "value": "bboxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stop_gradient(tf.concat([y1, x1, y2, x2], 1))",
                            "Call"
                        ]
                    ]
                },
                "box_indices": {
                    "value": "tf.to_int32(batch_ids)",
                    "type": "Call",
                    "possible_values": []
                },
                "crop_size": {
                    "value": "[cfg.POOLING_SIZE, cfg.POOLING_SIZE]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "crops",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_85": {
                "name_or_scope": {
                    "value": "self._scope",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_name": {
                    "value": "self._scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_180": {
                "name_or_scope": {
                    "value": "Fix_Resnet_V1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_183": {
                "variable": {
                    "value": "conv1_rgb",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "conv1_rgb",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[7, 7, 3, 64]",
                    "type": "List",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Saver_184": {
                "variable": {
                    "value": "restorer_fc",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "{self._scope + '/conv1/weights': conv1_rgb}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "slice_61": {
                "input_": {
                    "value": "rois",
                    "type": "variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "batch_id",
                    "type": "str",
                    "possible_values": []
                }
            },
            "slice_66": {
                "input_": {
                    "value": "rois",
                    "type": "variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "x1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "slice_67": {
                "input_": {
                    "value": "rois",
                    "type": "variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "y1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "slice_68": {
                "input_": {
                    "value": "rois",
                    "type": "variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "x2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "slice_69": {
                "input_": {
                    "value": "rois",
                    "type": "variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "y2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_71": {
                "values": {
                    "value": "[y1, x1, y2, x2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_181": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "to_float_64": {
                "x": {
                    "value": "bottom_shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "to_float_65": {
                "x": {
                    "value": "bottom_shape[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "to_int32_74": {
                "x": {
                    "value": "batch_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(tf.slice(rois, [0, 0], [-1, 1], name='batch_id'), [1])",
                            "Call"
                        ]
                    ]
                }
            },
            "to_int32_78": {
                "x": {
                    "value": "batch_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(tf.slice(rois, [0, 0], [-1, 1], name='batch_id'), [1])",
                            "Call"
                        ]
                    ]
                }
            },
            "assign_187": {
                "ref": {
                    "value": "self._variables_to_fix[self._scope + '/conv1/weights:0']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.reverse(conv1_rgb, [2])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reverse_188": {
                "tensor": {
                    "value": "conv1_rgb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('conv1_rgb', [7, 7, 3, 64], trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "ican/misc/Object_Detector.py": {
        "tensorflow": {
            "ConfigProto_54": {
                "variable": {
                    "value": "tfconfig",
                    "type": "variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Session_58": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "tfconfig",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "Saver_67": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "ican/misc/misc/.ipynb_checkpoints/resnet_v1-checkpoint.py": {
        "tensorflow": {
            "squeeze_61": {
                "variable": {
                    "value": "batch_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.slice(rois, [0, 0], [-1, 1], name='batch_id')",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_63": {
                "variable": {
                    "value": "bottom_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bottom",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stop_gradient_71": {
                "variable": {
                    "value": "bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.concat([y1, x1, y2, x2], 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_87": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "resnet_utils.conv2d_same(self._image, 64, 7, stride=2, scope='conv1')",
                            "Call"
                        ],
                        [
                            "tf.pad(net, [[0, 0], [1, 1], [1, 1], [0, 0]])",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [3, 3], stride=2, padding='VALID', scope='pool1')",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [1, 1], [1, 1], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "max_pool2d_88": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "resnet_utils.conv2d_same(self._image, 64, 7, stride=2, scope='conv1')",
                            "Call"
                        ],
                        [
                            "tf.pad(net, [[0, 0], [1, 1], [1, 1], [0, 0]])",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [3, 3], stride=2, padding='VALID', scope='pool1')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "scope": {
                    "value": "pool1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_128": {
                "variable": {
                    "value": "fc7",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "fc7",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(fc7, axis=[1, 2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_60": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "crop_and_resize_74": {
                "variable": {
                    "value": "crops",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "bottom",
                    "type": "variable",
                    "possible_values": []
                },
                "boxes": {
                    "value": "bboxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stop_gradient(tf.concat([y1, x1, y2, x2], 1))",
                            "Call"
                        ]
                    ]
                },
                "box_indices": {
                    "value": "tf.to_int32(batch_ids)",
                    "type": "Call",
                    "possible_values": []
                },
                "crop_size": {
                    "value": "[pre_pool_size, pre_pool_size]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "crops",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool2d_76": {
                "variable": {
                    "value": "crops",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "crops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.crop_and_resize(bottom, bboxes, tf.to_int32(batch_ids), [pre_pool_size, pre_pool_size], name='crops')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(crops, [2, 2], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.image.crop_and_resize(bottom, bboxes, tf.to_int32(batch_ids), [cfg.POOLING_SIZE, cfg.POOLING_SIZE], name='crops')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "crop_and_resize_78": {
                "variable": {
                    "value": "crops",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "bottom",
                    "type": "variable",
                    "possible_values": []
                },
                "boxes": {
                    "value": "bboxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stop_gradient(tf.concat([y1, x1, y2, x2], 1))",
                            "Call"
                        ]
                    ]
                },
                "box_indices": {
                    "value": "tf.to_int32(batch_ids)",
                    "type": "Call",
                    "possible_values": []
                },
                "crop_size": {
                    "value": "[cfg.POOLING_SIZE, cfg.POOLING_SIZE]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "crops",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_85": {
                "name_or_scope": {
                    "value": "self._scope",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_name": {
                    "value": "self._scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_180": {
                "name_or_scope": {
                    "value": "Fix_Resnet_V1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_183": {
                "variable": {
                    "value": "conv1_rgb",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "conv1_rgb",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[7, 7, 3, 64]",
                    "type": "List",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Saver_184": {
                "variable": {
                    "value": "restorer_fc",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "{self._scope + '/conv1/weights': conv1_rgb}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "slice_61": {
                "input_": {
                    "value": "rois",
                    "type": "variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "batch_id",
                    "type": "str",
                    "possible_values": []
                }
            },
            "slice_66": {
                "input_": {
                    "value": "rois",
                    "type": "variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "x1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "slice_67": {
                "input_": {
                    "value": "rois",
                    "type": "variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "y1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "slice_68": {
                "input_": {
                    "value": "rois",
                    "type": "variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "x2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "slice_69": {
                "input_": {
                    "value": "rois",
                    "type": "variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "y2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_71": {
                "values": {
                    "value": "[y1, x1, y2, x2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_181": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "to_float_64": {
                "x": {
                    "value": "bottom_shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "to_float_65": {
                "x": {
                    "value": "bottom_shape[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "to_int32_74": {
                "x": {
                    "value": "batch_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(tf.slice(rois, [0, 0], [-1, 1], name='batch_id'), [1])",
                            "Call"
                        ]
                    ]
                }
            },
            "to_int32_78": {
                "x": {
                    "value": "batch_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(tf.slice(rois, [0, 0], [-1, 1], name='batch_id'), [1])",
                            "Call"
                        ]
                    ]
                }
            },
            "assign_187": {
                "ref": {
                    "value": "self._variables_to_fix[self._scope + '/conv1/weights:0']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.reverse(conv1_rgb, [2])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reverse_188": {
                "tensor": {
                    "value": "conv1_rgb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('conv1_rgb', [7, 7, 3, 64], trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "ican/misc/misc/Object_Detector.py": {
        "tensorflow": {
            "ConfigProto_54": {
                "variable": {
                    "value": "tfconfig",
                    "type": "variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Session_58": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "tfconfig",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "Saver_67": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "ican/misc/misc/resnet_v1.py": {
        "tensorflow": {
            "squeeze_61": {
                "variable": {
                    "value": "batch_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.slice(rois, [0, 0], [-1, 1], name='batch_id')",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_63": {
                "variable": {
                    "value": "bottom_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bottom",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stop_gradient_71": {
                "variable": {
                    "value": "bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.concat([y1, x1, y2, x2], 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_87": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "resnet_utils.conv2d_same(self._image, 64, 7, stride=2, scope='conv1')",
                            "Call"
                        ],
                        [
                            "tf.pad(net, [[0, 0], [1, 1], [1, 1], [0, 0]])",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [3, 3], stride=2, padding='VALID', scope='pool1')",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [1, 1], [1, 1], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "max_pool2d_88": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "resnet_utils.conv2d_same(self._image, 64, 7, stride=2, scope='conv1')",
                            "Call"
                        ],
                        [
                            "tf.pad(net, [[0, 0], [1, 1], [1, 1], [0, 0]])",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [3, 3], stride=2, padding='VALID', scope='pool1')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "scope": {
                    "value": "pool1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_128": {
                "variable": {
                    "value": "fc7",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "fc7",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(fc7, axis=[1, 2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_60": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "crop_and_resize_74": {
                "variable": {
                    "value": "crops",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "bottom",
                    "type": "variable",
                    "possible_values": []
                },
                "boxes": {
                    "value": "bboxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stop_gradient(tf.concat([y1, x1, y2, x2], 1))",
                            "Call"
                        ]
                    ]
                },
                "box_indices": {
                    "value": "tf.to_int32(batch_ids)",
                    "type": "Call",
                    "possible_values": []
                },
                "crop_size": {
                    "value": "[pre_pool_size, pre_pool_size]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "crops",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool2d_76": {
                "variable": {
                    "value": "crops",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "crops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.crop_and_resize(bottom, bboxes, tf.to_int32(batch_ids), [pre_pool_size, pre_pool_size], name='crops')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(crops, [2, 2], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.image.crop_and_resize(bottom, bboxes, tf.to_int32(batch_ids), [cfg.POOLING_SIZE, cfg.POOLING_SIZE], name='crops')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "crop_and_resize_78": {
                "variable": {
                    "value": "crops",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "bottom",
                    "type": "variable",
                    "possible_values": []
                },
                "boxes": {
                    "value": "bboxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stop_gradient(tf.concat([y1, x1, y2, x2], 1))",
                            "Call"
                        ]
                    ]
                },
                "box_indices": {
                    "value": "tf.to_int32(batch_ids)",
                    "type": "Call",
                    "possible_values": []
                },
                "crop_size": {
                    "value": "[cfg.POOLING_SIZE, cfg.POOLING_SIZE]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "crops",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_85": {
                "name_or_scope": {
                    "value": "self._scope",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_name": {
                    "value": "self._scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_180": {
                "name_or_scope": {
                    "value": "Fix_Resnet_V1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_183": {
                "variable": {
                    "value": "conv1_rgb",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "conv1_rgb",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[7, 7, 3, 64]",
                    "type": "List",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Saver_184": {
                "variable": {
                    "value": "restorer_fc",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "{self._scope + '/conv1/weights': conv1_rgb}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "slice_61": {
                "input_": {
                    "value": "rois",
                    "type": "variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "batch_id",
                    "type": "str",
                    "possible_values": []
                }
            },
            "slice_66": {
                "input_": {
                    "value": "rois",
                    "type": "variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "x1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "slice_67": {
                "input_": {
                    "value": "rois",
                    "type": "variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "y1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "slice_68": {
                "input_": {
                    "value": "rois",
                    "type": "variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "x2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "slice_69": {
                "input_": {
                    "value": "rois",
                    "type": "variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "y2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_71": {
                "values": {
                    "value": "[y1, x1, y2, x2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_181": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "to_float_64": {
                "x": {
                    "value": "bottom_shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "to_float_65": {
                "x": {
                    "value": "bottom_shape[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "to_int32_74": {
                "x": {
                    "value": "batch_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(tf.slice(rois, [0, 0], [-1, 1], name='batch_id'), [1])",
                            "Call"
                        ]
                    ]
                }
            },
            "to_int32_78": {
                "x": {
                    "value": "batch_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(tf.slice(rois, [0, 0], [-1, 1], name='batch_id'), [1])",
                            "Call"
                        ]
                    ]
                }
            },
            "assign_187": {
                "ref": {
                    "value": "self._variables_to_fix[self._scope + '/conv1/weights:0']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.reverse(conv1_rgb, [2])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reverse_188": {
                "tensor": {
                    "value": "conv1_rgb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('conv1_rgb', [7, 7, 3, 64], trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "ican/misc/resnet_v1.py": {
        "tensorflow": {
            "squeeze_61": {
                "variable": {
                    "value": "batch_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.slice(rois, [0, 0], [-1, 1], name='batch_id')",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_63": {
                "variable": {
                    "value": "bottom_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bottom",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stop_gradient_71": {
                "variable": {
                    "value": "bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.concat([y1, x1, y2, x2], 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_87": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "resnet_utils.conv2d_same(self._image, 64, 7, stride=2, scope='conv1')",
                            "Call"
                        ],
                        [
                            "tf.pad(net, [[0, 0], [1, 1], [1, 1], [0, 0]])",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [3, 3], stride=2, padding='VALID', scope='pool1')",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [1, 1], [1, 1], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "max_pool2d_88": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "resnet_utils.conv2d_same(self._image, 64, 7, stride=2, scope='conv1')",
                            "Call"
                        ],
                        [
                            "tf.pad(net, [[0, 0], [1, 1], [1, 1], [0, 0]])",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [3, 3], stride=2, padding='VALID', scope='pool1')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "scope": {
                    "value": "pool1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_128": {
                "variable": {
                    "value": "fc7",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "fc7",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(fc7, axis=[1, 2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_60": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "crop_and_resize_74": {
                "variable": {
                    "value": "crops",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "bottom",
                    "type": "variable",
                    "possible_values": []
                },
                "boxes": {
                    "value": "bboxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stop_gradient(tf.concat([y1, x1, y2, x2], 1))",
                            "Call"
                        ]
                    ]
                },
                "box_indices": {
                    "value": "tf.to_int32(batch_ids)",
                    "type": "Call",
                    "possible_values": []
                },
                "crop_size": {
                    "value": "[pre_pool_size, pre_pool_size]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "crops",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool2d_76": {
                "variable": {
                    "value": "crops",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "crops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.crop_and_resize(bottom, bboxes, tf.to_int32(batch_ids), [pre_pool_size, pre_pool_size], name='crops')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(crops, [2, 2], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.image.crop_and_resize(bottom, bboxes, tf.to_int32(batch_ids), [cfg.POOLING_SIZE, cfg.POOLING_SIZE], name='crops')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "crop_and_resize_78": {
                "variable": {
                    "value": "crops",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "bottom",
                    "type": "variable",
                    "possible_values": []
                },
                "boxes": {
                    "value": "bboxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stop_gradient(tf.concat([y1, x1, y2, x2], 1))",
                            "Call"
                        ]
                    ]
                },
                "box_indices": {
                    "value": "tf.to_int32(batch_ids)",
                    "type": "Call",
                    "possible_values": []
                },
                "crop_size": {
                    "value": "[cfg.POOLING_SIZE, cfg.POOLING_SIZE]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "crops",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_85": {
                "name_or_scope": {
                    "value": "self._scope",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_name": {
                    "value": "self._scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_180": {
                "name_or_scope": {
                    "value": "Fix_Resnet_V1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_183": {
                "variable": {
                    "value": "conv1_rgb",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "conv1_rgb",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[7, 7, 3, 64]",
                    "type": "List",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Saver_184": {
                "variable": {
                    "value": "restorer_fc",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "{self._scope + '/conv1/weights': conv1_rgb}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "slice_61": {
                "input_": {
                    "value": "rois",
                    "type": "variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "batch_id",
                    "type": "str",
                    "possible_values": []
                }
            },
            "slice_66": {
                "input_": {
                    "value": "rois",
                    "type": "variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "x1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "slice_67": {
                "input_": {
                    "value": "rois",
                    "type": "variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "y1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "slice_68": {
                "input_": {
                    "value": "rois",
                    "type": "variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "x2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "slice_69": {
                "input_": {
                    "value": "rois",
                    "type": "variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "y2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_71": {
                "values": {
                    "value": "[y1, x1, y2, x2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_181": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "to_float_64": {
                "x": {
                    "value": "bottom_shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "to_float_65": {
                "x": {
                    "value": "bottom_shape[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "to_int32_74": {
                "x": {
                    "value": "batch_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(tf.slice(rois, [0, 0], [-1, 1], name='batch_id'), [1])",
                            "Call"
                        ]
                    ]
                }
            },
            "to_int32_78": {
                "x": {
                    "value": "batch_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(tf.slice(rois, [0, 0], [-1, 1], name='batch_id'), [1])",
                            "Call"
                        ]
                    ]
                }
            },
            "assign_187": {
                "ref": {
                    "value": "self._variables_to_fix[self._scope + '/conv1/weights:0']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.reverse(conv1_rgb, [2])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reverse_188": {
                "tensor": {
                    "value": "conv1_rgb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('conv1_rgb', [7, 7, 3, 64], trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "ican/tools/.ipynb_checkpoints/Demo-checkpoint.py": {
        "tensorflow": {
            "ConfigProto_87": {
                "variable": {
                    "value": "tfconfig",
                    "type": "variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Session_89": {
                "variable": {
                    "value": "ican_sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "tfconfig",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "Saver_101": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "ican/tools/.ipynb_checkpoints/Test_ResNet_HICO-checkpoint.py": {
        "tensorflow": {
            "ConfigProto_68": {
                "variable": {
                    "value": "tfconfig",
                    "type": "variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Session_70": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "tfconfig",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "Saver_76": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "ican/tools/.ipynb_checkpoints/Train_ResNet_HICO-checkpoint.py": {
        "tensorflow": {}
    },
    "ican/tools/Demo.py": {
        "tensorflow": {
            "ConfigProto_87": {
                "variable": {
                    "value": "tfconfig",
                    "type": "variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Session_89": {
                "variable": {
                    "value": "ican_sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "tfconfig",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "Saver_101": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "ican/tools/Test_ResNet_HICO.py": {
        "tensorflow": {
            "ConfigProto_68": {
                "variable": {
                    "value": "tfconfig",
                    "type": "variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Session_70": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "tfconfig",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "Saver_76": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "ican/tools/Test_ResNet_VCOCO.py": {
        "tensorflow": {
            "ConfigProto_73": {
                "variable": {
                    "value": "tfconfig",
                    "type": "variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Session_75": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "tfconfig",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "Saver_86": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "ican/tools/Train_ResNet_HICO.py": {
        "tensorflow": {}
    },
    "ican/tools/Train_ResNet_VCOCO.py": {
        "tensorflow": {}
    }
}