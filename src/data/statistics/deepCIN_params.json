{
    "Im_train_val_test.py": {
        "sklearn": {
            "confusion_matrix_97": {
                "variable": {
                    "value": "cm_4class",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "overall_gt",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.clip(overall_gt, 0, 1)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "overall_im_labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.clip(overall_im_labels, 0, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "confusion_matrix_98": {
                "variable": {
                    "value": "cm_2class",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "np.clip(overall_gt, 0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "np.clip(overall_im_labels, 0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "roc_auc_score_114": {
                "variable": {
                    "value": "auc",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "overall_gt",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.clip(overall_gt, 0, 1)",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "overall_im_probs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "overall_im_probs.reshape(-1, 4)",
                            "Call"
                        ],
                        [
                            "np.concatenate((overall_im_probs[:, 0].reshape(-1, 1), np.sum(overall_im_probs[:, 1:], axis=1).reshape(-1, 1)), axis=1)",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "weighted",
                    "type": "Constant",
                    "possible_values": []
                },
                "multi_class": {
                    "value": "ovr",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matthews_corrcoef_115": {
                "variable": {
                    "value": "mcc",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "overall_gt",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.clip(overall_gt, 0, 1)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "overall_im_labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.clip(overall_im_labels, 0, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cohen_kappa_score_116": {
                "variable": {
                    "value": "kappa",
                    "type": "Variable",
                    "possible_values": []
                },
                "y1": {
                    "value": "overall_gt",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.clip(overall_gt, 0, 1)",
                            "Call"
                        ]
                    ]
                },
                "y2": {
                    "value": "overall_im_labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.clip(overall_im_labels, 0, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "average_precision_score_119": {
                "variable": {
                    "value": "ap",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "one_hot",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.zeros((overall_gt.size, overall_gt.max() + 1))",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "overall_im_probs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "overall_im_probs.reshape(-1, 4)",
                            "Call"
                        ],
                        [
                            "np.concatenate((overall_im_probs[:, 0].reshape(-1, 1), np.sum(overall_im_probs[:, 1:], axis=1).reshape(-1, 1)), axis=1)",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "weighted",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "precision_score_120": {
                "variable": {
                    "value": "pr",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "overall_gt",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.clip(overall_gt, 0, 1)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "overall_im_labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.clip(overall_im_labels, 0, 1)",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "weighted",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "recall_score_121": {
                "variable": {
                    "value": "rec",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "overall_gt",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.clip(overall_gt, 0, 1)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "overall_im_labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.clip(overall_im_labels, 0, 1)",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "weighted",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "f1_score_122": {
                "variable": {
                    "value": "f1",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "overall_gt",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.clip(overall_gt, 0, 1)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "overall_im_labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.clip(overall_im_labels, 0, 1)",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "weighted",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "roc_auc_score_111": {
                "variable": {
                    "value": "auc",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "overall_gt",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.clip(overall_gt, 0, 1)",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "np.argmax(overall_im_probs, axis=1).reshape(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "classification_report_101": {
                "y_true": {
                    "value": "overall_gt",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.clip(overall_gt, 0, 1)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "overall_im_labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.clip(overall_im_labels, 0, 1)",
                            "Call"
                        ]
                    ]
                },
                "target_names": {
                    "value": "classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "['Normal', 'CIN1', 'CIN2', 'CIN3']",
                            "List"
                        ]
                    ]
                },
                "digits": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        },
        "tensorflow": {},
        "torch": {
            "load_53": {
                "variable": {
                    "value": "data_tr",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(log_DIR, 'train_feats_m' + str(model_num) + '.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_54": {
                "variable": {
                    "value": "data_val",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(log_DIR, 'val_feats_m' + str(model_num) + '.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_55": {
                "variable": {
                    "value": "data_te",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(log_DIR, 'test_feats_m' + str(model_num) + '.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_63": {
                "variable": {
                    "value": "class_sample_count",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[(data_tr['y'] == t).sum() for t in torch.unique(data_tr['y'])]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_69": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "1.0 / class_sample_count.float()",
                            "BinOp"
                        ],
                        [
                            "weight.to('cuda')",
                            "Call"
                        ],
                        [
                            "1.0 / class_sample_count.float()",
                            "BinOp"
                        ],
                        [
                            "1.0 / class_sample_count.float()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "SGD_70": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_79": {
                "variable": {
                    "value": "data_val",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(log_DIR, 'test_feats_m' + str(model_num) + '.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_83": {
                "variable": {
                    "value": "class_sample_count",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[(data_val['y'] == t).sum() for t in torch.unique(data_val['y'])]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "tensor_108": {
                "data": {
                    "value": "overall_gt",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.clip(overall_gt, 0, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_110": {
                "variable": {
                    "value": "samples_weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[weight[t] for t in overall_gt]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "SummaryWriter_140": {
                "variable": {
                    "value": "writer",
                    "type": "Variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "os.path.join(log_DIR, 'runs/model_{}_input_data'.format(model_num))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_66": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_88": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_89": {
                "f": {
                    "value": "model_wt_dir[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "load_91": {
                "f": {
                    "value": "model_wt_dir[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "map_location": {
                    "value": "torch.device('cpu')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unique_63": {
                "input": {
                    "value": "data_tr['y']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unique_83": {
                "input": {
                    "value": "data_val['y']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unique_108": {
                "input": {
                    "value": "torch.tensor(overall_gt)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_91": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "main_attention_based_fusion.py": {
        "sklearn": {
            "confusion_matrix_107": {
                "variable": {
                    "value": "cm_4class",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "overall_gt",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.clip(overall_gt, 0, 1)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "overall_im_labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.clip(overall_im_labels, 0, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "confusion_matrix_108": {
                "variable": {
                    "value": "cm_2class",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "np.clip(overall_gt, 0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "np.clip(overall_im_labels, 0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "roc_auc_score_124": {
                "variable": {
                    "value": "auc",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "overall_gt",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.clip(overall_gt, 0, 1)",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "overall_im_probs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "overall_im_probs.reshape(-1, 4)",
                            "Call"
                        ],
                        [
                            "np.concatenate((overall_im_probs[:, 0].reshape(-1, 1), np.sum(overall_im_probs[:, 1:], axis=1).reshape(-1, 1)), axis=1)",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "weighted",
                    "type": "Constant",
                    "possible_values": []
                },
                "multi_class": {
                    "value": "ovr",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matthews_corrcoef_125": {
                "variable": {
                    "value": "mcc",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "overall_gt",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.clip(overall_gt, 0, 1)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "overall_im_labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.clip(overall_im_labels, 0, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cohen_kappa_score_126": {
                "variable": {
                    "value": "kappa",
                    "type": "Variable",
                    "possible_values": []
                },
                "y1": {
                    "value": "overall_gt",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.clip(overall_gt, 0, 1)",
                            "Call"
                        ]
                    ]
                },
                "y2": {
                    "value": "overall_im_labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.clip(overall_im_labels, 0, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "average_precision_score_129": {
                "variable": {
                    "value": "ap",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "one_hot",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.zeros((overall_gt.size, overall_gt.max() + 1))",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "overall_im_probs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "overall_im_probs.reshape(-1, 4)",
                            "Call"
                        ],
                        [
                            "np.concatenate((overall_im_probs[:, 0].reshape(-1, 1), np.sum(overall_im_probs[:, 1:], axis=1).reshape(-1, 1)), axis=1)",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "weighted",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "precision_score_130": {
                "variable": {
                    "value": "pr",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "overall_gt",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.clip(overall_gt, 0, 1)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "overall_im_labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.clip(overall_im_labels, 0, 1)",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "weighted",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "recall_score_131": {
                "variable": {
                    "value": "rec",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "overall_gt",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.clip(overall_gt, 0, 1)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "overall_im_labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.clip(overall_im_labels, 0, 1)",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "weighted",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "f1_score_132": {
                "variable": {
                    "value": "f1",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "overall_gt",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.clip(overall_gt, 0, 1)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "overall_im_labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.clip(overall_im_labels, 0, 1)",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "weighted",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "roc_auc_score_121": {
                "variable": {
                    "value": "auc",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "overall_gt",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.clip(overall_gt, 0, 1)",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "np.argmax(overall_im_probs, axis=1).reshape(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "classification_report_111": {
                "y_true": {
                    "value": "overall_gt",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.clip(overall_gt, 0, 1)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "overall_im_labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.clip(overall_im_labels, 0, 1)",
                            "Call"
                        ]
                    ]
                },
                "target_names": {
                    "value": "classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "['Normal', 'CIN1', 'CIN2', 'CIN3']",
                            "List"
                        ]
                    ]
                },
                "digits": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        },
        "tensorflow": {},
        "torch": {
            "load_65": {
                "variable": {
                    "value": "data_tr",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(log_DIR, 'train_feats_m' + str(model_num) + '.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_66": {
                "variable": {
                    "value": "data_val",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(log_DIR, 'test_feats_m' + str(model_num) + '.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_73": {
                "variable": {
                    "value": "class_sample_count",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[(data_tr['y'] == t).sum() for t in torch.unique(data_tr['y'])]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_79": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "1.0 / class_sample_count.float()",
                            "BinOp"
                        ],
                        [
                            "weight.to('cuda')",
                            "Call"
                        ],
                        [
                            "1.0 / class_sample_count.float()",
                            "BinOp"
                        ],
                        [
                            "1.0 / class_sample_count.float()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "SGD_81": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0001",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_89": {
                "variable": {
                    "value": "data_val",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(log_DIR, 'test_feats_m' + str(model_num) + '.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_93": {
                "variable": {
                    "value": "class_sample_count",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[(data_val['y'] == t).sum() for t in torch.unique(data_val['y'])]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "tensor_118": {
                "data": {
                    "value": "overall_gt",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.clip(overall_gt, 0, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_120": {
                "variable": {
                    "value": "samples_weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[weight[t] for t in overall_gt]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "SummaryWriter_150": {
                "variable": {
                    "value": "writer",
                    "type": "Variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "os.path.join(log_DIR, 'runs/model_{}_input_data'.format(model_num))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_76": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_98": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_99": {
                "f": {
                    "value": "model_wt_dir[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "load_101": {
                "f": {
                    "value": "model_wt_dir[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "map_location": {
                    "value": "torch.device('cpu')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unique_73": {
                "input": {
                    "value": "data_tr['y']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unique_93": {
                "input": {
                    "value": "data_val['y']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unique_118": {
                "input": {
                    "value": "torch.tensor(overall_gt)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_101": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "main_seg_level_sequence_gen.py": {
        "sklearn": {
            "StratifiedKFold_156": {
                "variable": {
                    "value": "skf",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "opt.kFold_splits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "random_state": {
                    "value": "manualSeed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ]
                    ]
                }
            },
            "confusion_matrix_333": {
                "variable": {
                    "value": "cm_4class",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "overall_gt",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "overall_im_labels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "confusion_matrix_334": {
                "variable": {
                    "value": "cm_2class",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "np.clip(overall_gt, 0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "np.clip(overall_im_labels, 0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matthews_corrcoef_336": {
                "variable": {
                    "value": "mcc",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "overall_gt",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "overall_im_labels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "precision_score_337": {
                "variable": {
                    "value": "pr",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "overall_gt",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "overall_im_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "average": {
                    "value": "weighted",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "recall_score_338": {
                "variable": {
                    "value": "rec",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "overall_gt",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "overall_im_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "average": {
                    "value": "weighted",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "f1_score_339": {
                "variable": {
                    "value": "f1",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "overall_gt",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "overall_im_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "average": {
                    "value": "weighted",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "confusion_matrix_368": {
                "y_true": {
                    "value": "test_gt",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.array([])",
                            "Call"
                        ],
                        [
                            "np.concatenate((test_gt, overall_gt), axis=0)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "test_preds",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.array([])",
                            "Call"
                        ],
                        [
                            "np.concatenate((test_preds, overall_im_labels), axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "classification_report_369": {
                "y_true": {
                    "value": "test_gt",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.array([])",
                            "Call"
                        ],
                        [
                            "np.concatenate((test_gt, overall_gt), axis=0)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "test_preds",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.array([])",
                            "Call"
                        ],
                        [
                            "np.concatenate((test_preds, overall_im_labels), axis=0)",
                            "Call"
                        ]
                    ]
                },
                "target_names": {
                    "value": "classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "['Normal', 'CIN1', 'CIN2', 'CIN3']",
                            "List"
                        ]
                    ]
                }
            },
            "classification_report_349": {
                "y_true": {
                    "value": "overall_gt",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "overall_im_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "target_names": {
                    "value": "classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "['Normal', 'CIN1', 'CIN2', 'CIN3']",
                            "List"
                        ]
                    ]
                }
            }
        },
        "tensorflow": {},
        "torch": {
            "manual_seed_99": {
                "seed": {
                    "value": "manualSeed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ]
                    ]
                }
            },
            "Adadelta_172": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "crnn.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_107": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_109": {
                "seed": {
                    "value": "manualSeed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ]
                    ]
                }
            },
            "manual_seed_all_110": {
                "seed": {
                    "value": "manualSeed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ]
                    ]
                }
            },
            "is_available_138": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_177": {
                "variable": {
                    "value": "class_sample_count",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[(target[train_index] == t).sum() for t in np.unique(target)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "tensor_181": {
                "variable": {
                    "value": "class_sample_count_test",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[(target[test_index] == t).sum() for t in np.unique(target)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "tensor_198": {
                "variable": {
                    "value": "class_sample_count",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[(tr_patch_target == t).sum() for t in np.unique(target)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "tensor_202": {
                "variable": {
                    "value": "class_sample_count_test",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[(vl_patch_target == t).sum() for t in np.unique(target)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "tensor_210": {
                "variable": {
                    "value": "samples_weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[weight[t] for t in tr_patch_target]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "WeightedRandomSampler_216": {
                "variable": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "weights": {
                    "value": "samples_weight",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.tensor([weight[t] for t in tr_patch_target])",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "torch.max(class_sample_count).item() * len(classes)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_227": {
                "variable": {
                    "value": "im_running_count",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "SummaryWriter_241": {
                "variable": {
                    "value": "writer",
                    "type": "Variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "os.path.join(opt.log_dir, 'runs/model_{}_input_data'.format(model_num))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_260": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_321": {
                "variable": {
                    "value": "data_val",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(opt.val_log_dir, 'logit_vec', 'test_feats_m' + str(model_num) + '.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_169": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_290": {
                "obj": {
                    "value": "train_feats",
                    "type": "Dict",
                    "possible_values": [
                        [
                            "{'x': train_x_feats, 'y': torch.tensor(target[train_index]), 'patch_count': tr_patch_count, 'im_names': data[train_index]}",
                            "Dict"
                        ],
                        [
                            "{'x': train_x_feats, 'y': torch.tensor(target[train_index]), 'patch_count': tr_patch_count, 'im_names': data[train_index]}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(nn_data_dir, 'train_feats_m' + str(model_num) + '.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_294": {
                "obj": {
                    "value": "test_feats",
                    "type": "Dict",
                    "possible_values": [
                        [
                            "{'x': test_x_feats, 'y': torch.tensor(target[test_index]), 'patch_count': te_patch_count, 'im_names': data[test_index]}",
                            "Dict"
                        ],
                        [
                            "{'x': test_x_feats, 'y': torch.tensor(target[test_index]), 'patch_count': te_patch_count, 'im_names': data[test_index]}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(nn_data_dir, 'test_feats_m' + str(model_num) + '.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_313": {
                "obj": {
                    "value": "train_feats",
                    "type": "Dict",
                    "possible_values": [
                        [
                            "{'x': train_x_feats, 'y': torch.tensor(target[train_index]), 'patch_count': tr_patch_count, 'im_names': data[train_index]}",
                            "Dict"
                        ],
                        [
                            "{'x': train_x_feats, 'y': torch.tensor(target[train_index]), 'patch_count': tr_patch_count, 'im_names': data[train_index]}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(nn_data_dir, 'train_feats_m' + str(model_num) + '.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_317": {
                "obj": {
                    "value": "test_feats",
                    "type": "Dict",
                    "possible_values": [
                        [
                            "{'x': test_x_feats, 'y': torch.tensor(target[test_index]), 'patch_count': te_patch_count, 'im_names': data[test_index]}",
                            "Dict"
                        ],
                        [
                            "{'x': test_x_feats, 'y': torch.tensor(target[test_index]), 'patch_count': te_patch_count, 'im_names': data[test_index]}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(nn_data_dir, 'test_feats_m' + str(model_num) + '.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_223": {
                "dataset": {
                    "value": "subset_datasets[x]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "opt.batchSize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler if x == 'train' else None",
                    "type": "IfExp",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "opt.workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_229": {
                "data": {
                    "value": "[(y == 0).sum(), (y == 1).sum(), (y == 2).sum(), (y == 3).sum()]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "is_available_245": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_263": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_289": {
                "data": {
                    "value": "target[train_index]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_293": {
                "data": {
                    "value": "target[test_index]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_312": {
                "data": {
                    "value": "target[train_index]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_316": {
                "data": {
                    "value": "target[test_index]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_217": {
                "input": {
                    "value": "class_sample_count",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.tensor([(target[train_index] == t).sum() for t in np.unique(target)])",
                            "Call"
                        ],
                        [
                            "torch.tensor([(tr_patch_target == t).sum() for t in np.unique(target)])",
                            "Call"
                        ]
                    ]
                }
            },
            "load_301": {
                "f": {
                    "value": "model_wt_dir[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "load_303": {
                "f": {
                    "value": "model_wt_dir[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "models/att_model.py": {
        "torch": {
            "Parameter_12": {
                "variable": {
                    "value": "self.sent_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(hidden_size, hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_13": {
                "variable": {
                    "value": "self.sent_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_14": {
                "variable": {
                    "value": "self.context_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(hidden_size, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "GRU_16": {
                "variable": {
                    "value": "self.gru",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "input_size",
                    "type": null,
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_17": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "50",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "softmax_38": {
                "variable": {
                    "value": "output_att_wts",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "matrix_mul(f_output, self.sent_weight, self.sent_bias)",
                            "Call"
                        ],
                        [
                            "output.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "matrix_mul(output, self.context_weight)",
                            "Call"
                        ],
                        [
                            "output.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "output.permute(1, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_64": {
                "variable": {
                    "value": "self.hidden_state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "last_batch_size",
                            "Name"
                        ],
                        [
                            "self.batch_size",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "isnan_30": {
                "input": {
                    "value": "output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "matrix_mul(f_output, self.sent_weight, self.sent_bias)",
                            "Call"
                        ],
                        [
                            "output.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "matrix_mul(output, self.context_weight)",
                            "Call"
                        ],
                        [
                            "output.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "output.permute(1, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "isnan_34": {
                "input": {
                    "value": "output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "matrix_mul(f_output, self.sent_weight, self.sent_bias)",
                            "Call"
                        ],
                        [
                            "output.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "matrix_mul(output, self.context_weight)",
                            "Call"
                        ],
                        [
                            "output.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "output.permute(1, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_65": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "models/att_ops.py": {
        "torch": {
            "tensor_163": {
                "variable": {
                    "value": "all_f",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_204": {
                "variable": {
                    "value": "all_f",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "save_155": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(hist_dir, check_pt)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_172": {
                "variable": {
                    "value": "output_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_173": {
                "variable": {
                    "value": "(max_value, pred_label)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "output_probs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.softmax(output, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.softmax(output, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_213": {
                "variable": {
                    "value": "output_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_214": {
                "variable": {
                    "value": "(max_value, pred_label)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "output_probs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.softmax(output, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.softmax(output, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_28": {
                "input": {
                    "value": "m.weight ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_184": {
                "variable": {
                    "value": "all_f",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(all_f, output)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_225": {
                "variable": {
                    "value": "all_f",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(all_f, output)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_73": {
                "variable": {
                    "value": "label_im",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "label_im",
                    "type": "Call",
                    "possible_values": [
                        [
                            "[labels[i].item()]",
                            "List"
                        ],
                        [
                            "torch.tensor(label_im)",
                            "Call"
                        ],
                        [
                            "label_im.to('cuda')",
                            "Call"
                        ],
                        [
                            "labels[i].item()",
                            "Call"
                        ],
                        [
                            "labels[i].item()",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_167": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_208": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_94": {
                "variable": {
                    "value": "(_, preds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sum_106": {
                "input": {
                    "value": "preds == label_im.data",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "isnan_71": {
                "input": {
                    "value": "input_im",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "inputs[i, :patch_count[i]]",
                            "Subscript"
                        ],
                        [
                            "input_im.to('cuda')",
                            "Call"
                        ],
                        [
                            "inputs[i, :patch_count[i]]",
                            "Subscript"
                        ],
                        [
                            "input_im.to('cuda')",
                            "Call"
                        ],
                        [
                            "inputs[i, :patch_count[i]]",
                            "Subscript"
                        ],
                        [
                            "input_im.to('cuda')",
                            "Call"
                        ]
                    ]
                }
            },
            "any_71": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_74": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_grad_enabled_83": {
                "mode": {
                    "value": "phase == 'train'",
                    "type": "Compare",
                    "possible_values": []
                }
            }
        }
    },
    "models/crnn_pretrained.py": {
        "torch": {
            "LSTM_14": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nIn",
                    "type": null,
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "self.bidirectional",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_34": {
                "variable": {
                    "value": "self.sent_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(2 * hidden_size, 2 * hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_35": {
                "variable": {
                    "value": "self.sent_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, 2 * hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_36": {
                "variable": {
                    "value": "self.context_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(2 * hidden_size, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "GRU_38": {
                "variable": {
                    "value": "self.gru",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "input_size",
                    "type": null,
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_39": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "softmax_57": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.embedding(t_rec)",
                            "Call"
                        ],
                        [
                            "output.view(T, b, -1)",
                            "Call"
                        ],
                        [
                            "matrix_mul(f_output, self.sent_weight, self.sent_bias)",
                            "Call"
                        ],
                        [
                            "output.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "matrix_mul(output, self.context_weight)",
                            "Call"
                        ],
                        [
                            "output.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "output.permute(1, 0)",
                            "Call"
                        ],
                        [
                            "torch.softmax(output, dim=0)",
                            "Call"
                        ],
                        [
                            "element_wise_mul(f_output, output.permute(1, 0)).squeeze(0)",
                            "Call"
                        ],
                        [
                            "self.fc(output)",
                            "Call"
                        ],
                        [
                            "self.fc(conv)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_155": {
                "variable": {
                    "value": "self.hidden_state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "last_batch_size",
                            "Name"
                        ],
                        [
                            "self.batch_size",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_16": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "nHidden * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "nOut",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_18": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "nHidden",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "nOut",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Sequential_82": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_85": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_144": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(num_fea_out * 44, 512)",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_156": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_82": {
                "kernel_size": {
                    "value": "(4, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_88": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_85": {
                "kernel_size": {
                    "value": "(4, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_91": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_145": {
                "in_features": {
                    "value": "num_fea_out * 44",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_145": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_146": {
                "in_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_146": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_147": {
                "in_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_88": {
                "kernel_size": {
                    "value": "(4, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "MaxPool2d_91": {
                "kernel_size": {
                    "value": "(8, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "models/ops.py": {
        "torch": {
            "tensor_64": {
                "variable": {
                    "value": "all_f_",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_65": {
                "variable": {
                    "value": "all_l_",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_219": {
                "variable": {
                    "value": "test_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.stack(batch) for batch in class_probs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_220": {
                "variable": {
                    "value": "test_preds",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.stack(batch) for batch in class_preds]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "zeros_314": {
                "variable": {
                    "value": "data_x_feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(gt_list)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "save_199": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(hist_dir, check_pt)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_28": {
                "input": {
                    "value": "m.weight ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_207": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_214": {
                "variable": {
                    "value": "(_, class_preds_batch)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "no_grad_240": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_274": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_316": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_219": {
                "tensors": {
                    "value": "batch",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "stack_220": {
                "tensors": {
                    "value": "batch",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "max_114": {
                "variable": {
                    "value": "(_, preds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sum_130": {
                "input": {
                    "value": "preds == labels.data",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "is_available_209": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_213": {
                "input": {
                    "value": "el",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_260": {
                "variable": {
                    "value": "(_, preds_label)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "softmax_294": {
                "variable": {
                    "value": "output_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_295": {
                "variable": {
                    "value": "(_, preds_label)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "is_available_95": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_grad_enabled_104": {
                "mode": {
                    "value": "phase == 'train'",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "softmax_223": {
                "input": {
                    "value": "el",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_125": {
                "variable": {
                    "value": "all_f",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(all_f, features)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_126": {
                "variable": {
                    "value": "all_l",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(all_l, labels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "is_available_256": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_290": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_332": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils/mean_std_for_transforms.py": {
        "torch": {
            "DataLoader_17": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "image_datasets",
                    "type": "Name",
                    "possible_values": [
                        [
                            "datasets.ImageFolder(os.path.join(image_DIR), transform=data_transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "11667",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "sampler": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "utils/pytorchtools.py": {
        "torch": {}
    },
    "utils/torchsummary.py": {
        "torch": {
            "Sequential_180": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "LSTM_15": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nIn",
                    "type": null,
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "self.bidirectional",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_17": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "nHidden * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "nOut",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_19": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "nHidden",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "nOut",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "is_available_75": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "rand_85": {
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "*in_size",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "MaxPool2d_181": {
                "kernel_size": {
                    "value": "(8, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "prod_56": {
                "input": {
                    "value": "torch.LongTensor(list(module.weight.size()))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "prod_59": {
                "input": {
                    "value": "torch.LongTensor(list(module.bias.size()))",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "utils/utilities.py": {
        "torch": {
            "zeros_96": {
                "variable": {
                    "value": "one_hot",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "width",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_118": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feature_list",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mm_103": {
                "variable": {
                    "value": "feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "torch.mm(feature, weight)",
                            "Call"
                        ],
                        [
                            "feature + bias.expand(feature.size()[0], bias.size()[1])",
                            "BinOp"
                        ],
                        [
                            "torch.tanh(feature).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "feature_1 * feature_2",
                            "BinOp"
                        ]
                    ]
                },
                "mat2": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tanh_106": {
                "variable": {
                    "value": "feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "torch.mm(feature, weight)",
                            "Call"
                        ],
                        [
                            "feature + bias.expand(feature.size()[0], bias.size()[1])",
                            "BinOp"
                        ],
                        [
                            "torch.tanh(feature).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "feature_1 * feature_2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "unsqueeze_106": {
                "variable": {
                    "value": "feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_109": {
                "tensors": {
                    "value": "feature_list",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_109": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_120": {
                "input": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat(feature_list, 0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_120": {
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "is_tensor_82": {
                "obj": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_225": {
                "variable": {
                    "value": "img_as_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(img_as_tensor, vs_as_tensor)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "utils/visualize.py": {
        "torch": {
            "randperm_42": {
                "variable": {
                    "value": "perm",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "len(data)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_52": {
                "variable": {
                    "value": "(_, preds_tensor)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": [
                        [
                            "net(images)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_54": {
                "input": {
                    "value": "el",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    }
}