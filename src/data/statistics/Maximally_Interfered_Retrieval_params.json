{
    "VAE/VAE.py": {
        "torch": {
            "MultivariateNormal_59": {
                "variable": {
                    "value": "self.prior",
                    "type": "Attribute",
                    "possible_values": []
                },
                "loc": {
                    "value": "torch.zeros(args.z_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "covariance_matrix": {
                    "value": "torch.eye(args.z_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_281": {
                "variable": {
                    "value": "self.amor_u",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.q_z_nn_output_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_flows * self.z_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_282": {
                "variable": {
                    "value": "self.amor_w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.q_z_nn_output_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_flows * self.z_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_283": {
                "variable": {
                    "value": "self.amor_b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.q_z_nn_output_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_flows",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_359": {
                "variable": {
                    "value": "identity",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "self.num_ortho_vecs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "m": {
                    "value": "self.num_ortho_vecs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "triu_367": {
                "variable": {
                    "value": "triu_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.ones(self.num_ortho_vecs, self.num_ortho_vecs)",
                    "type": "Call",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "arange_369": {
                "variable": {
                    "value": "diag_idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "self.num_ortho_vecs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tanh_377": {
                "variable": {
                    "value": "self.diag_activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_379": {
                "variable": {
                    "value": "self.amor_d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.q_z_nn_output_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_flows * self.num_ortho_vecs * self.num_ortho_vecs",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sequential_381": {
                "variable": {
                    "value": "self.amor_diag1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.q_z_nn_output_dim, self.num_flows * self.num_ortho_vecs)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_385": {
                "variable": {
                    "value": "self.amor_diag2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.q_z_nn_output_dim, self.num_flows * self.num_ortho_vecs)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_390": {
                "variable": {
                    "value": "self.amor_q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.q_z_nn_output_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_flows * self.z_size * self.num_ortho_vecs",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_391": {
                "variable": {
                    "value": "self.amor_b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.q_z_nn_output_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_flows * self.num_ortho_vecs",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_408": {
                "variable": {
                    "value": "norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q",
                    "type": "Call",
                    "possible_values": [
                        [
                            "q.view(-1, self.z_size * self.num_ortho_vecs)",
                            "Call"
                        ],
                        [
                            "self.amor_q(h)",
                            "Call"
                        ],
                        [
                            "q.view(-1, self.z_size)",
                            "Call"
                        ],
                        [
                            "self.amor_q(h)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "div_409": {
                "variable": {
                    "value": "amat",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q",
                    "type": "Call",
                    "possible_values": [
                        [
                            "q.view(-1, self.z_size * self.num_ortho_vecs)",
                            "Call"
                        ],
                        [
                            "self.amor_q(h)",
                            "Call"
                        ],
                        [
                            "q.view(-1, self.z_size)",
                            "Call"
                        ],
                        [
                            "self.amor_q(h)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "norm",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.norm(q, p=2, dim=1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.norm(q, p=2, dim=1, keepdim=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "eye_525": {
                "variable": {
                    "value": "identity",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "self.z_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "m": {
                    "value": "self.z_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "triu_533": {
                "variable": {
                    "value": "triu_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.ones(self.z_size, self.z_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "arange_535": {
                "variable": {
                    "value": "diag_idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "self.z_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tanh_543": {
                "variable": {
                    "value": "self.diag_activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_545": {
                "variable": {
                    "value": "self.amor_d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.q_z_nn_output_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_flows * self.z_size * self.z_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sequential_547": {
                "variable": {
                    "value": "self.amor_diag1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.q_z_nn_output_dim, self.num_flows * self.z_size)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_551": {
                "variable": {
                    "value": "self.amor_diag2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.q_z_nn_output_dim, self.num_flows * self.z_size)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_556": {
                "variable": {
                    "value": "self.amor_q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.q_z_nn_output_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_flows * self.z_size * self.num_householder",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_558": {
                "variable": {
                    "value": "self.amor_b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.q_z_nn_output_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_flows * self.z_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_576": {
                "variable": {
                    "value": "norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q",
                    "type": "Call",
                    "possible_values": [
                        [
                            "q.view(-1, self.z_size * self.num_ortho_vecs)",
                            "Call"
                        ],
                        [
                            "self.amor_q(h)",
                            "Call"
                        ],
                        [
                            "q.view(-1, self.z_size)",
                            "Call"
                        ],
                        [
                            "self.amor_q(h)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "div_577": {
                "variable": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q",
                    "type": "Call",
                    "possible_values": [
                        [
                            "q.view(-1, self.z_size * self.num_ortho_vecs)",
                            "Call"
                        ],
                        [
                            "self.amor_q(h)",
                            "Call"
                        ],
                        [
                            "q.view(-1, self.z_size)",
                            "Call"
                        ],
                        [
                            "self.amor_q(h)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "norm",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.norm(q, p=2, dim=1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.norm(q, p=2, dim=1, keepdim=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_580": {
                "variable": {
                    "value": "vvT",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v.unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "v.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_682": {
                "variable": {
                    "value": "flip_idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "self.z_size - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "step": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "triu_686": {
                "variable": {
                    "value": "triu_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.ones(self.z_size, self.z_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "arange_688": {
                "variable": {
                    "value": "diag_idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "self.z_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tanh_696": {
                "variable": {
                    "value": "self.diag_activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_698": {
                "variable": {
                    "value": "self.amor_d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.q_z_nn_output_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_flows * self.z_size * self.z_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sequential_700": {
                "variable": {
                    "value": "self.amor_diag1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.q_z_nn_output_dim, self.num_flows * self.z_size)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_704": {
                "variable": {
                    "value": "self.amor_diag2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.q_z_nn_output_dim, self.num_flows * self.z_size)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_709": {
                "variable": {
                    "value": "self.amor_b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.q_z_nn_output_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_flows * self.z_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_796": {
                "variable": {
                    "value": "self.h_context",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.q_z_nn_output_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.h_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_105": {
                "variable": {
                    "value": "q_z_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.gen_hiddens",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.z_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_106": {
                "variable": {
                    "value": "q_z_var",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.gen_hiddens, self.z_size)",
                    "type": null,
                    "possible_values": []
                }
            },
            "bmm_417": {
                "variable": {
                    "value": "tmp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "amat.transpose(2, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "amat",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.div(q, norm)",
                            "Call"
                        ],
                        [
                            "amat.resize(dim0, self.z_size, self.num_ortho_vecs)",
                            "Call"
                        ],
                        [
                            "torch.bmm(amat, tmp)",
                            "Call"
                        ],
                        [
                            "amat.view(-1, self.num_flows, self.z_size, self.num_ortho_vecs)",
                            "Call"
                        ],
                        [
                            "amat.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self._eye - 2 * vvT",
                            "BinOp"
                        ],
                        [
                            "amat.view(-1, self.num_householder, self.z_size, self.z_size)",
                            "Call"
                        ],
                        [
                            "tmp.view(-1, self.num_flows, self.z_size, self.z_size)",
                            "Call"
                        ],
                        [
                            "amat.transpose(0, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_420": {
                "variable": {
                    "value": "amat",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "amat",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.div(q, norm)",
                            "Call"
                        ],
                        [
                            "amat.resize(dim0, self.z_size, self.num_ortho_vecs)",
                            "Call"
                        ],
                        [
                            "torch.bmm(amat, tmp)",
                            "Call"
                        ],
                        [
                            "amat.view(-1, self.num_flows, self.z_size, self.num_ortho_vecs)",
                            "Call"
                        ],
                        [
                            "amat.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self._eye - 2 * vvT",
                            "BinOp"
                        ],
                        [
                            "amat.view(-1, self.num_householder, self.z_size, self.z_size)",
                            "Call"
                        ],
                        [
                            "tmp.view(-1, self.num_flows, self.z_size, self.z_size)",
                            "Call"
                        ],
                        [
                            "amat.transpose(0, 1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "tmp",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.bmm(amat.transpose(2, 1), amat)",
                            "Call"
                        ],
                        [
                            "self._eye - tmp",
                            "BinOp"
                        ],
                        [
                            "self._eye + 0.5 * tmp",
                            "BinOp"
                        ],
                        [
                            "amat[:, 0]",
                            "Subscript"
                        ],
                        [
                            "torch.bmm(amat[:, k], tmp)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_424": {
                "variable": {
                    "value": "norms2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.norm(test, p=2, dim=2) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sqrt_425": {
                "variable": {
                    "value": "norms",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "norms2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.sum(torch.norm(test, p=2, dim=2) ** 2, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_426": {
                "variable": {
                    "value": "max_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "norms",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.sqrt(norms2)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_589": {
                "variable": {
                    "value": "tmp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "amat[:, k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mat2": {
                    "value": "tmp",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.bmm(amat.transpose(2, 1), amat)",
                            "Call"
                        ],
                        [
                            "self._eye - tmp",
                            "BinOp"
                        ],
                        [
                            "self._eye + 0.5 * tmp",
                            "BinOp"
                        ],
                        [
                            "amat[:, 0]",
                            "Subscript"
                        ],
                        [
                            "torch.bmm(amat[:, k], tmp)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_59": {
                "*size": {
                    "value": "args.z_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_59": {
                "n": {
                    "value": "args.z_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_75": {
                "variable": {
                    "value": "q_z_nn",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "GatedConv2d(self.input_size[0], 32, 5, 1, 2)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_116": {
                "variable": {
                    "value": "q_z_nn",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "GatedConv2d(self.input_size[0], 32, 5, 1, 2, activation=act)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_124": {
                "variable": {
                    "value": "q_z_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.z_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_125": {
                "variable": {
                    "value": "q_z_var",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(256, self.z_size)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_144": {
                "variable": {
                    "value": "p_x_nn",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "Reshape([self.args.z_size, 1, 1])",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_153": {
                "variable": {
                    "value": "p_x_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(32, self.input_size[0], 1, 1, 0)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_181": {
                "variable": {
                    "value": "p_x_nn",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "GatedConvTranspose2d(self.z_size, 64, self.last_kernel_size, 1, 0, activation=act)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_190": {
                "variable": {
                    "value": "p_x_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(32, 256, 5, 1, 2)",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_367": {
                "*size": {
                    "value": "self.num_ortho_vecs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.num_ortho_vecs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_382": {
                "in_features": {
                    "value": "self.q_z_nn_output_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_flows * self.num_ortho_vecs",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_386": {
                "in_features": {
                    "value": "self.q_z_nn_output_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_flows * self.num_ortho_vecs",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_533": {
                "*size": {
                    "value": "self.z_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.z_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_548": {
                "in_features": {
                    "value": "self.q_z_nn_output_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_flows * self.z_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_552": {
                "in_features": {
                    "value": "self.q_z_nn_output_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_flows * self.z_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_686": {
                "*size": {
                    "value": "self.z_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.z_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_701": {
                "in_features": {
                    "value": "self.q_z_nn_output_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_flows * self.z_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_705": {
                "in_features": {
                    "value": "self.q_z_nn_output_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_flows * self.z_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sequential_103": {
                "variable": {
                    "value": "q_z_nn",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "*q_z_nn",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_107": {
                "in_features": {
                    "value": "self.gen_hiddens",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.z_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Softplus_108": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_169": {
                "variable": {
                    "value": "p_x_nn",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "*p_x_nn",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_171": {
                "variable": {
                    "value": "p_x_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.args.gen_hiddens, np.prod(self.args.input_size))",
                    "type": null,
                    "possible_values": []
                }
            },
            "bmm_423": {
                "input": {
                    "value": "amat.transpose(2, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "amat",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.div(q, norm)",
                            "Call"
                        ],
                        [
                            "amat.resize(dim0, self.z_size, self.num_ortho_vecs)",
                            "Call"
                        ],
                        [
                            "torch.bmm(amat, tmp)",
                            "Call"
                        ],
                        [
                            "amat.view(-1, self.num_flows, self.z_size, self.num_ortho_vecs)",
                            "Call"
                        ],
                        [
                            "amat.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self._eye - 2 * vvT",
                            "BinOp"
                        ],
                        [
                            "amat.view(-1, self.num_householder, self.z_size, self.z_size)",
                            "Call"
                        ],
                        [
                            "tmp.view(-1, self.num_flows, self.z_size, self.z_size)",
                            "Call"
                        ],
                        [
                            "amat.transpose(0, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Dropout_77": {
                "p": {
                    "value": "self.args.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_79": {
                "p": {
                    "value": "self.args.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_81": {
                "p": {
                    "value": "self.args.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_83": {
                "p": {
                    "value": "self.args.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_85": {
                "p": {
                    "value": "self.args.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_126": {
                "in_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.z_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Softplus_127": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Hardtanh_128": {
                "min_val": {
                    "value": "0.01",
                    "type": "Constant",
                    "possible_values": []
                },
                "max_val": {
                    "value": "7.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_154": {
                "in_channels": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.input_size[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sigmoid_155": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_191": {
                "in_channels": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_192": {
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.input_size[0] * num_classes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "norm_424": {
                "input": {
                    "value": "test",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.bmm(amat.transpose(2, 1), amat) - self._eye",
                            "BinOp"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_93": {
                "in_features": {
                    "value": "np.prod(self.args.input_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.gen_hiddens",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_94": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_95": {
                "p": {
                    "value": "self.args.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_159": {
                "in_features": {
                    "value": "self.z_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.gen_hiddens",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_160": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_161": {
                "p": {
                    "value": "self.args.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_172": {
                "in_features": {
                    "value": "self.args.gen_hiddens",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "np.prod(self.args.input_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sigmoid_173": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_99": {
                "in_features": {
                    "value": "self.args.gen_hiddens",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.args.gen_hiddens",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_100": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_101": {
                "p": {
                    "value": "self.args.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_165": {
                "in_features": {
                    "value": "self.args.gen_hiddens",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.args.gen_hiddens",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_166": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_167": {
                "p": {
                    "value": "self.args.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "VAE/distributions.py": {
        "torch": {
            "is_available_13": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clamp_59": {
                "variable": {
                    "value": "probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "min": {
                    "value": "MIN_EPSILON",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1e-05",
                            "Constant"
                        ]
                    ]
                },
                "max": {
                    "value": "MAX_EPSILON",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1.0 - 1e-05",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reciprocal_33": {
                "input": {
                    "value": "2.0 * log_var.exp()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_35": {
                "input": {
                    "value": "2.0 * PI",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_24": {
                "input": {
                    "value": "log_norm",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "-0.5 * (log_var + (x - mean) * (x - mean) * log_var.exp().reciprocal())",
                            "BinOp"
                        ],
                        [
                            "-(x - mean) * (x - mean)",
                            "BinOp"
                        ],
                        [
                            "log_norm + -0.5 * torch.log(2.0 * PI)",
                            "BinOp"
                        ],
                        [
                            "-0.5 * x * x",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sum_26": {
                "input": {
                    "value": "log_norm",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "-0.5 * (log_var + (x - mean) * (x - mean) * log_var.exp().reciprocal())",
                            "BinOp"
                        ],
                        [
                            "-(x - mean) * (x - mean)",
                            "BinOp"
                        ],
                        [
                            "log_norm + -0.5 * torch.log(2.0 * PI)",
                            "BinOp"
                        ],
                        [
                            "-0.5 * x * x",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "mean_39": {
                "input": {
                    "value": "log_norm",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "-0.5 * (log_var + (x - mean) * (x - mean) * log_var.exp().reciprocal())",
                            "BinOp"
                        ],
                        [
                            "-(x - mean) * (x - mean)",
                            "BinOp"
                        ],
                        [
                            "log_norm + -0.5 * torch.log(2.0 * PI)",
                            "BinOp"
                        ],
                        [
                            "-0.5 * x * x",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sum_41": {
                "input": {
                    "value": "log_norm",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "-0.5 * (log_var + (x - mean) * (x - mean) * log_var.exp().reciprocal())",
                            "BinOp"
                        ],
                        [
                            "-(x - mean) * (x - mean)",
                            "BinOp"
                        ],
                        [
                            "log_norm + -0.5 * torch.log(2.0 * PI)",
                            "BinOp"
                        ],
                        [
                            "-0.5 * x * x",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "mean_51": {
                "input": {
                    "value": "log_norm",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "-0.5 * (log_var + (x - mean) * (x - mean) * log_var.exp().reciprocal())",
                            "BinOp"
                        ],
                        [
                            "-(x - mean) * (x - mean)",
                            "BinOp"
                        ],
                        [
                            "log_norm + -0.5 * torch.log(2.0 * PI)",
                            "BinOp"
                        ],
                        [
                            "-0.5 * x * x",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sum_53": {
                "input": {
                    "value": "log_norm",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "-0.5 * (log_var + (x - mean) * (x - mean) * log_var.exp().reciprocal())",
                            "BinOp"
                        ],
                        [
                            "-(x - mean) * (x - mean)",
                            "BinOp"
                        ],
                        [
                            "log_norm + -0.5 * torch.log(2.0 * PI)",
                            "BinOp"
                        ],
                        [
                            "-0.5 * x * x",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "log_60": {
                "input": {
                    "value": "1.0 - probs",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_63": {
                "input": {
                    "value": "log_bern",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x * torch.log(probs) + (1.0 - x) * torch.log(1.0 - probs)",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sum_65": {
                "input": {
                    "value": "log_bern",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x * torch.log(probs) + (1.0 - x) * torch.log(1.0 - probs)",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "VAE/flows.py": {
        "torch": {
            "Tanh_25": {
                "variable": {
                    "value": "self.h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Softplus_26": {
                "variable": {
                    "value": "self.softplus",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "bmm_50": {
                "variable": {
                    "value": "uw",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "u",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sum_52": {
                "variable": {
                    "value": "w_norm_sq",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "w ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_62": {
                "variable": {
                    "value": "log_det_jacobian",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(1 + torch.bmm(psi, u_hat))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Tanh_79": {
                "variable": {
                    "value": "self.h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "triu_81": {
                "variable": {
                    "value": "triu_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.ones(num_ortho_vecs, num_ortho_vecs)",
                    "type": "Call",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_81": {
                "variable": {
                    "value": "triu_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "arange_82": {
                "variable": {
                    "value": "diag_idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "num_ortho_vecs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "bmm_119": {
                "variable": {
                    "value": "qr2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q_ortho",
                    "type": "Variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "r2_hat.transpose(2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_120": {
                "variable": {
                    "value": "qr1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q_ortho",
                    "type": "Variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "r1_hat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "r1",
                            "Name"
                        ]
                    ]
                }
            },
            "Tanh_155": {
                "variable": {
                    "value": "self.h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_157": {
                "variable": {
                    "value": "diag_idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "z_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "bmm_196": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.h(r2qzb)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "r1.transpose(2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_258": {
                "variable": {
                    "value": "flip_idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "self.z_size - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "step": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ParameterList_282": {
                "variable": {
                    "value": "self.param_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "parameters": {
                    "value": "self.param_list",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_264": {
                "variable": {
                    "value": "z_feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "*arch_z",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_269": {
                "variable": {
                    "value": "zh_feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "*arch_zh",
                    "type": null,
                    "possible_values": []
                }
            },
            "sigmoid_296": {
                "variable": {
                    "value": "gate",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "flow[3](h) + self.forget_bias",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "bmm_56": {
                "input": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "zk",
                    "type": "Call",
                    "possible_values": [
                        [
                            "zk.unsqueeze(2)",
                            "Call"
                        ],
                        [
                            "zk.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "zk.unsqueeze(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_62": {
                "input": {
                    "value": "1 + torch.bmm(psi, u_hat)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "bmm_122": {
                "input": {
                    "value": "zk",
                    "type": "Call",
                    "possible_values": [
                        [
                            "zk.unsqueeze(2)",
                            "Call"
                        ],
                        [
                            "zk.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "zk.unsqueeze(1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "qr2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.bmm(q_ortho, r2_hat.transpose(2, 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_123": {
                "input": {
                    "value": "self.h(r2qzb)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "qr1.transpose(2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_195": {
                "input": {
                    "value": "z_per",
                    "type": "Name",
                    "possible_values": [
                        [
                            "zk[:, :, permute_z]",
                            "Subscript"
                        ],
                        [
                            "zk",
                            "Name"
                        ]
                    ]
                },
                "mat2": {
                    "value": "r2.transpose(2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_275": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_298": {
                "input": {
                    "value": "gate.log().view(gate.size(0), -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "bmm_62": {
                "input": {
                    "value": "psi",
                    "type": "Name",
                    "possible_values": [
                        [
                            "w * self.der_h(wzb)",
                            "BinOp"
                        ]
                    ]
                },
                "mat2": {
                    "value": "u_hat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "u + (m_uw - uw) * w.transpose(2, 1) / w_norm_sq",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_81": {
                "*size": {
                    "value": "num_ortho_vecs",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "num_ortho_vecs",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "VAE/layers.py": {
        "torch": {
            "Sigmoid_21": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_23": {
                "variable": {
                    "value": "self.h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "output_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_24": {
                "variable": {
                    "value": "self.g",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "output_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sigmoid_43": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose2d_45": {
                "variable": {
                    "value": "self.h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "output_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "output_padding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ConvTranspose2d_47": {
                "variable": {
                    "value": "self.g",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "output_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "output_padding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Parameter_75": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(in_features, out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_80": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.build_mask()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_145": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(out_features, in_features, *self.size_kernel)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_150": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.build_mask()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_189": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.mask * self.weight",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sigmoid_210": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_211": {
                "variable": {
                    "value": "self.h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_212": {
                "variable": {
                    "value": "self.g",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Parameter_77": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_81": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_147": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_151": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "VAE/loss.py": {
        "torch": {
            "BCELoss_31": {
                "variable": {
                    "value": "reconstruction_function",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_45": {
                "variable": {
                    "value": "summed_logs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_q_z0 - log_p_zk",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_48": {
                "variable": {
                    "value": "summed_ldj",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ldj",
                    "type": "Name",
                    "possible_values": [
                        [
                            "ldj.view(ldj.size(0), -1).sum(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "mse_loss_79": {
                "variable": {
                    "value": "re",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "recon_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "target": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sum_86": {
                "variable": {
                    "value": "summed_logs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_q_z0 - log_p_zk",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_89": {
                "variable": {
                    "value": "summed_ldj",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ldj",
                    "type": "Name",
                    "possible_values": [
                        [
                            "ldj.view(ldj.size(0), -1).sum(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cross_entropy_129": {
                "variable": {
                    "value": "ce",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_logit",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x_logit.view(batch_size, num_classes, args.input_size[0], args.input_size[1], args.input_size[2])",
                            "Call"
                        ],
                        [
                            "x_logit.view(batch_size, num_classes, args.input_size[0], args.input_size[1], args.input_size[2])",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "Call",
                    "possible_values": [
                        [
                            "(x * (num_classes - 1)).long()",
                            "Call"
                        ],
                        [
                            "(x * (num_classes - 1)).long()",
                            "Call"
                        ],
                        [
                            "target.contiguous().view(n, 1, -1)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "sum",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_136": {
                "variable": {
                    "value": "summed_logs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_q_z0 - log_p_zk",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_139": {
                "variable": {
                    "value": "summed_ldj",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ldj",
                    "type": "Name",
                    "possible_values": [
                        [
                            "ldj.view(ldj.size(0), -1).sum(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cross_entropy_193": {
                "variable": {
                    "value": "ce",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_logit",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x_logit.view(batch_size, num_classes, args.input_size[0], args.input_size[1], args.input_size[2])",
                            "Call"
                        ],
                        [
                            "x_logit.view(batch_size, num_classes, args.input_size[0], args.input_size[1], args.input_size[2])",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "Call",
                    "possible_values": [
                        [
                            "(x * (num_classes - 1)).long()",
                            "Call"
                        ],
                        [
                            "(x * (num_classes - 1)).long()",
                            "Call"
                        ],
                        [
                            "target.contiguous().view(n, 1, -1)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clamp_286": {
                "variable": {
                    "value": "probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "min": {
                    "value": "min_epsilon",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1e-06",
                            "Constant"
                        ]
                    ]
                },
                "max": {
                    "value": "max_epsilon",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1.0 - 1e-06",
                            "BinOp"
                        ]
                    ]
                }
            },
            "is_tensor_262": {
                "obj": {
                    "value": "weight",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "Variable(weight)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "log_softmax_236": {
                "input": {
                    "value": "input",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input.contiguous().view(n, c, 1, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "nll_loss_265": {
                "input": {
                    "value": "input",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input.contiguous().view(n, c, 1, -1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "Call",
                    "possible_values": [
                        [
                            "(x * (num_classes - 1)).long()",
                            "Call"
                        ],
                        [
                            "(x * (num_classes - 1)).long()",
                            "Call"
                        ],
                        [
                            "target.contiguous().view(n, 1, -1)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "Variable(weight)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "size_average": {
                    "value": "size_average",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "ignore_index": {
                    "value": "ignore_index",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "-100",
                            "MethodArgument"
                        ],
                        [
                            "-100",
                            "MethodArgument"
                        ]
                    ]
                },
                "reduce": {
                    "value": "reduce",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "mean_291": {
                "input": {
                    "value": "log_bernoulli",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x * torch.log(probs) + (1.0 - x) * torch.log(1.0 - probs)",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dim",
                    "type": "Call",
                    "possible_values": [
                        [
                            "input.dim()",
                            "Call"
                        ],
                        [
                            "np.arange(len(x.shape)).tolist()",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sum_293": {
                "input": {
                    "value": "log_bernoulli",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x * torch.log(probs) + (1.0 - x) * torch.log(1.0 - probs)",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dim",
                    "type": "Call",
                    "possible_values": [
                        [
                            "input.dim()",
                            "Call"
                        ],
                        [
                            "np.arange(len(x.shape)).tolist()",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "log_287": {
                "input": {
                    "value": "1.0 - probs",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "buffer.py": {
        "torch": {
            "randperm_173": {
                "variable": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "self.current_index",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randperm_209": {
                "variable": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "self.current_index",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_198": {
                "variable": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.random.choice(bx.size(0), amt, replace=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_58": {
                "start": {
                    "value": "x.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_151": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randperm_59": {
                "n": {
                    "value": "x.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_194": {
                "ndarray": {
                    "value": "np.arange(bx.size(0))",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "data.py": {
        "torch": {
            "Tensor_233": {
                "variable": {
                    "value": "train_x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "permute_233": {
                "variable": {
                    "value": "train_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dims": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Tensor_234": {
                "variable": {
                    "value": "test_x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "permute_234": {
                "variable": {
                    "value": "test_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dims": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Tensor_236": {
                "variable": {
                    "value": "train_y",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_237": {
                "variable": {
                    "value": "test_y",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "from_numpy_358": {
                "variable": {
                    "value": "task_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.stack(task_ids)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_96": {
                "variable": {
                    "value": "inv_perm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "perm",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.arange(train_x.size(-1)) if task == 0 else torch.randperm(train_x.size(-1))",
                            "IfExp"
                        ],
                        [
                            "torch.randperm(len(x_t))",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_353": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "args.n_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randperm_374": {
                "variable": {
                    "value": "perm",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "len(x_t)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Tensor_33": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "squeeze_33": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_147": {
                "tensors": {
                    "value": "[elem[i] for elem in out_train]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_150": {
                "tensors": {
                    "value": "[elem[i] for elem in out_test]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "DataLoader_53": {
                "dataset": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.transform(Image.open(x).convert('RGB'))",
                            "Call"
                        ],
                        [
                            "x.float() / 255.0",
                            "BinOp"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "bs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.batch_size if train else 64",
                            "IfExp"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "train",
                    "type": "Call",
                    "possible_values": [
                        [
                            "datasets.MNIST('Data/', train=True, download=True)",
                            "Call"
                        ],
                        [
                            "datasets.MNIST('Data/', train=True, download=True)",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR10('Data/', train=True, download=True)",
                            "Call"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "arange_93": {
                "start": {
                    "value": "train_x.size(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randperm_93": {
                "n": {
                    "value": "train_x.size(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "er_main.py": {
        "torch": {
            "cross_entropy_205": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "model(data)",
                            "Call"
                        ],
                        [
                            "logits.masked_fill(te_loader.dataset.mask == 0, -1000000000.0)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "gen_main.py": {
        "torch": {
            "cross_entropy_318": {
                "variable": {
                    "value": "cls_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "cls(data)",
                            "Call"
                        ],
                        [
                            "cls(data)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "mean",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cross_entropy_443": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "cls(data)",
                            "Call"
                        ],
                        [
                            "cls(data)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "hybrid_main.py": {
        "torch": {
            "mse_loss_174": {
                "variable": {
                    "value": "gen_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat((input_x, mem_x))",
                            "Call"
                        ],
                        [
                            "torch.cat((x_recon[:data.size(0)].detach(), input_x[data.size(0):]))",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "x_recon",
                    "type": "Name",
                    "possible_values": [
                        [
                            "gen(data)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "mse_loss_177": {
                "variable": {
                    "value": "gen_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "locate('data.get_%s' % args.dataset)(args)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "x_recon",
                    "type": "Name",
                    "possible_values": [
                        [
                            "gen(data)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cross_entropy_198": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "model(input_x)",
                            "Call"
                        ],
                        [
                            "logits.masked_fill(mask == 0, -1000000000.0)",
                            "Call"
                        ],
                        [
                            "model(x_recon)",
                            "Call"
                        ],
                        [
                            "logits.masked_fill(te_loader.dataset.mask == 0, -1000000000.0)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "input_y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat((input_y, mem_y))",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cross_entropy_203": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "model(input_x)",
                            "Call"
                        ],
                        [
                            "logits.masked_fill(mask == 0, -1000000000.0)",
                            "Call"
                        ],
                        [
                            "model(x_recon)",
                            "Call"
                        ],
                        [
                            "logits.masked_fill(te_loader.dataset.mask == 0, -1000000000.0)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "input_y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat((input_y, mem_y))",
                            "Call"
                        ]
                    ]
                }
            },
            "cross_entropy_279": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "model(input_x)",
                            "Call"
                        ],
                        [
                            "logits.masked_fill(mask == 0, -1000000000.0)",
                            "Call"
                        ],
                        [
                            "model(x_recon)",
                            "Call"
                        ],
                        [
                            "logits.masked_fill(te_loader.dataset.mask == 0, -1000000000.0)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "mse_loss_284": {
                "input": {
                    "value": "x_recon",
                    "type": "Name",
                    "possible_values": [
                        [
                            "gen(data)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "target": {
                    "value": "data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "locate('data.get_%s' % args.dataset)(args)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "mir.py": {
        "torch": {
            "MSELoss_19": {
                "variable": {
                    "value": "mse",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_97": {
                "variable": {
                    "value": "mem_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prev_cls(mem_x)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "SGD_202": {
                "variable": {
                    "value": "opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "new_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cross_entropy_309": {
                "variable": {
                    "value": "loss_a",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "model.linear(hid)",
                            "Call"
                        ],
                        [
                            "logits.masked_fill(loader.dataset.mask == 0, -1000000000.0)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "input_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_16": {
                "input": {
                    "value": "F.softmax(x, dim=-1) * F.log_softmax(x, dim=-1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cross_entropy_205": {
                "input": {
                    "value": "new_model(input_x)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "input_y",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "backward_205": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_like_361": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits_buffer",
                    "type": "Call",
                    "possible_values": [
                        [
                            "model(mem_x)",
                            "Call"
                        ],
                        [
                            "logits_buffer.masked_fill(mask == 0, -1000000000.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "cross_entropy_365": {
                "input": {
                    "value": "logits_buffer",
                    "type": "Call",
                    "possible_values": [
                        [
                            "model(mem_x)",
                            "Call"
                        ],
                        [
                            "logits_buffer.masked_fill(mask == 0, -1000000000.0)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "mem_y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.softmax(prev_cls(mem_x), dim=1).detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "backward_365": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "kl_div_14": {
                "input": {
                    "value": "F.log_softmax(y, dim=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "F.softmax(t_s, dim=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction": {
                    "value": "mean",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_18": {
                "input": {
                    "value": "F.log_softmax(y, dim=-1) * F.softmax(t_s, dim=-1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_18": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_86": {
                "variable": {
                    "value": "z_new_max",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[z_new_max, z_new.clone()]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_184": {
                "variable": {
                    "value": "z_new_max",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[z_new_max, z_new.clone()]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_252": {
                "variable": {
                    "value": "hid_new_max",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[hid_new_max, hid_new.detach()]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "no_grad_256": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cross_entropy_339": {
                "variable": {
                    "value": "pre_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits_track_pre",
                    "type": "Call",
                    "possible_values": [
                        [
                            "model(bx)",
                            "Call"
                        ],
                        [
                            "logits_track_pre.masked_fill(mask == 0, -1000000000.0)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "by",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cross_entropy_340": {
                "variable": {
                    "value": "post_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits_track_post",
                    "type": "Call",
                    "possible_values": [
                        [
                            "model_temp.linear(buffer_hid)",
                            "Call"
                        ],
                        [
                            "logits_track_post.masked_fill(mask == 0, -1000000000.0)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "by",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_431": {
                "variable": {
                    "value": "z_new_max",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[z_new_max, z_new.clone()]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_521": {
                "variable": {
                    "value": "z_new_max",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[z_new_max, z_new.clone()]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "log_softmax_14": {
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_14": {
                "input": {
                    "value": "t_s",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_16": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_softmax_16": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "no_grad_34": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_114": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_215": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_327": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_like_333": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits_track_post",
                    "type": "Call",
                    "possible_values": [
                        [
                            "model_temp.linear(buffer_hid)",
                            "Call"
                        ],
                        [
                            "logits_track_post.masked_fill(mask == 0, -1000000000.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "cross_entropy_344": {
                "variable": {
                    "value": "old_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "buffer.logits[subsample]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "by",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_379": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_451": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "grad_80": {
                "outputs": {
                    "value": "gain",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "args.cls_xent_coeff * XENT + -args.cls_ent_coeff * ENT + args.cls_div_coeff * DIV + -args.cls_shell_coeff * SHELL",
                            "BinOp"
                        ],
                        [
                            "args.gen_kl_coeff * KL + args.gen_rec_coeff * REC + -args.gen_ent_coeff * ENT + args.gen_div_coeff * DIV + -args.gen_shell_coeff * SHELL",
                            "BinOp"
                        ],
                        [
                            "args.kl_coef * KL + args.ent_coef * entropy.sum() + args.euc_coef * EUC",
                            "BinOp"
                        ],
                        [
                            "args.cls_xent_coeff * XENT + -args.cls_ent_coeff * ENT + args.cls_div_coeff * DIV + -args.cls_shell_coeff * SHELL",
                            "BinOp"
                        ],
                        [
                            "args.gen_kl_coeff * KL + args.gen_rec_coeff * REC + -args.gen_ent_coeff * ENT + args.gen_div_coeff * DIV + -args.gen_shell_coeff * SHELL",
                            "BinOp"
                        ]
                    ]
                },
                "inputs": {
                    "value": "z_new",
                    "type": "Call",
                    "possible_values": [
                        [
                            "prev_gen.prior.sample((z_mu.shape[0],)).to(args.device)",
                            "Call"
                        ],
                        [
                            "prev_gen.reparameterize(z_mu, z_var)",
                            "Call"
                        ],
                        [
                            "(z_new + 1 * z_g).detach()",
                            "Call"
                        ],
                        [
                            "prev_gen.prior.sample((z_mu.shape[0],)).to(args.device)",
                            "Call"
                        ],
                        [
                            "prev_gen.reparameterize(z_mu, z_var)",
                            "Call"
                        ],
                        [
                            "(z_new + 1 * z_g).detach()",
                            "Call"
                        ],
                        [
                            "prev_gen.prior.sample((z_mu.shape[0],)).to(args.device)",
                            "Call"
                        ],
                        [
                            "prev_gen.reparameterize(z_mu, z_var)",
                            "Call"
                        ],
                        [
                            "(z_new + 1 * z_g).detach()",
                            "Call"
                        ],
                        [
                            "prev_gen.prior.sample((z_mu.shape[0],)).to(args.device)",
                            "Call"
                        ],
                        [
                            "prev_gen.reparameterize(z_mu, z_var)",
                            "Call"
                        ],
                        [
                            "(z_new + 1 * z_g).detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "grad_177": {
                "outputs": {
                    "value": "gain",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "args.cls_xent_coeff * XENT + -args.cls_ent_coeff * ENT + args.cls_div_coeff * DIV + -args.cls_shell_coeff * SHELL",
                            "BinOp"
                        ],
                        [
                            "args.gen_kl_coeff * KL + args.gen_rec_coeff * REC + -args.gen_ent_coeff * ENT + args.gen_div_coeff * DIV + -args.gen_shell_coeff * SHELL",
                            "BinOp"
                        ],
                        [
                            "args.kl_coef * KL + args.ent_coef * entropy.sum() + args.euc_coef * EUC",
                            "BinOp"
                        ],
                        [
                            "args.cls_xent_coeff * XENT + -args.cls_ent_coeff * ENT + args.cls_div_coeff * DIV + -args.cls_shell_coeff * SHELL",
                            "BinOp"
                        ],
                        [
                            "args.gen_kl_coeff * KL + args.gen_rec_coeff * REC + -args.gen_ent_coeff * ENT + args.gen_div_coeff * DIV + -args.gen_shell_coeff * SHELL",
                            "BinOp"
                        ]
                    ]
                },
                "inputs": {
                    "value": "z_new",
                    "type": "Call",
                    "possible_values": [
                        [
                            "prev_gen.prior.sample((z_mu.shape[0],)).to(args.device)",
                            "Call"
                        ],
                        [
                            "prev_gen.reparameterize(z_mu, z_var)",
                            "Call"
                        ],
                        [
                            "(z_new + 1 * z_g).detach()",
                            "Call"
                        ],
                        [
                            "prev_gen.prior.sample((z_mu.shape[0],)).to(args.device)",
                            "Call"
                        ],
                        [
                            "prev_gen.reparameterize(z_mu, z_var)",
                            "Call"
                        ],
                        [
                            "(z_new + 1 * z_g).detach()",
                            "Call"
                        ],
                        [
                            "prev_gen.prior.sample((z_mu.shape[0],)).to(args.device)",
                            "Call"
                        ],
                        [
                            "prev_gen.reparameterize(z_mu, z_var)",
                            "Call"
                        ],
                        [
                            "(z_new + 1 * z_g).detach()",
                            "Call"
                        ],
                        [
                            "prev_gen.prior.sample((z_mu.shape[0],)).to(args.device)",
                            "Call"
                        ],
                        [
                            "prev_gen.reparameterize(z_mu, z_var)",
                            "Call"
                        ],
                        [
                            "(z_new + 1 * z_g).detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "mse_loss_242": {
                "input": {
                    "value": "hid_new",
                    "type": "Name",
                    "possible_values": [
                        [
                            "hid",
                            "Name"
                        ],
                        [
                            "(hid_new + 10 * hid_g).detach()",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "hid_new_max[found_h_i * hid_new.size(0):(found_h_i + 1) * hid_new.size(0)]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "grad_245": {
                "outputs": {
                    "value": "gain",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "args.cls_xent_coeff * XENT + -args.cls_ent_coeff * ENT + args.cls_div_coeff * DIV + -args.cls_shell_coeff * SHELL",
                            "BinOp"
                        ],
                        [
                            "args.gen_kl_coeff * KL + args.gen_rec_coeff * REC + -args.gen_ent_coeff * ENT + args.gen_div_coeff * DIV + -args.gen_shell_coeff * SHELL",
                            "BinOp"
                        ],
                        [
                            "args.kl_coef * KL + args.ent_coef * entropy.sum() + args.euc_coef * EUC",
                            "BinOp"
                        ],
                        [
                            "args.cls_xent_coeff * XENT + -args.cls_ent_coeff * ENT + args.cls_div_coeff * DIV + -args.cls_shell_coeff * SHELL",
                            "BinOp"
                        ],
                        [
                            "args.gen_kl_coeff * KL + args.gen_rec_coeff * REC + -args.gen_ent_coeff * ENT + args.gen_div_coeff * DIV + -args.gen_shell_coeff * SHELL",
                            "BinOp"
                        ]
                    ]
                },
                "inputs": {
                    "value": "hid_new",
                    "type": "Name",
                    "possible_values": [
                        [
                            "hid",
                            "Name"
                        ],
                        [
                            "(hid_new + 10 * hid_g).detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "grad_425": {
                "outputs": {
                    "value": "gain",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "args.cls_xent_coeff * XENT + -args.cls_ent_coeff * ENT + args.cls_div_coeff * DIV + -args.cls_shell_coeff * SHELL",
                            "BinOp"
                        ],
                        [
                            "args.gen_kl_coeff * KL + args.gen_rec_coeff * REC + -args.gen_ent_coeff * ENT + args.gen_div_coeff * DIV + -args.gen_shell_coeff * SHELL",
                            "BinOp"
                        ],
                        [
                            "args.kl_coef * KL + args.ent_coef * entropy.sum() + args.euc_coef * EUC",
                            "BinOp"
                        ],
                        [
                            "args.cls_xent_coeff * XENT + -args.cls_ent_coeff * ENT + args.cls_div_coeff * DIV + -args.cls_shell_coeff * SHELL",
                            "BinOp"
                        ],
                        [
                            "args.gen_kl_coeff * KL + args.gen_rec_coeff * REC + -args.gen_ent_coeff * ENT + args.gen_div_coeff * DIV + -args.gen_shell_coeff * SHELL",
                            "BinOp"
                        ]
                    ]
                },
                "inputs": {
                    "value": "z_new",
                    "type": "Call",
                    "possible_values": [
                        [
                            "prev_gen.prior.sample((z_mu.shape[0],)).to(args.device)",
                            "Call"
                        ],
                        [
                            "prev_gen.reparameterize(z_mu, z_var)",
                            "Call"
                        ],
                        [
                            "(z_new + 1 * z_g).detach()",
                            "Call"
                        ],
                        [
                            "prev_gen.prior.sample((z_mu.shape[0],)).to(args.device)",
                            "Call"
                        ],
                        [
                            "prev_gen.reparameterize(z_mu, z_var)",
                            "Call"
                        ],
                        [
                            "(z_new + 1 * z_g).detach()",
                            "Call"
                        ],
                        [
                            "prev_gen.prior.sample((z_mu.shape[0],)).to(args.device)",
                            "Call"
                        ],
                        [
                            "prev_gen.reparameterize(z_mu, z_var)",
                            "Call"
                        ],
                        [
                            "(z_new + 1 * z_g).detach()",
                            "Call"
                        ],
                        [
                            "prev_gen.prior.sample((z_mu.shape[0],)).to(args.device)",
                            "Call"
                        ],
                        [
                            "prev_gen.reparameterize(z_mu, z_var)",
                            "Call"
                        ],
                        [
                            "(z_new + 1 * z_g).detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "grad_514": {
                "outputs": {
                    "value": "gain",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "args.cls_xent_coeff * XENT + -args.cls_ent_coeff * ENT + args.cls_div_coeff * DIV + -args.cls_shell_coeff * SHELL",
                            "BinOp"
                        ],
                        [
                            "args.gen_kl_coeff * KL + args.gen_rec_coeff * REC + -args.gen_ent_coeff * ENT + args.gen_div_coeff * DIV + -args.gen_shell_coeff * SHELL",
                            "BinOp"
                        ],
                        [
                            "args.kl_coef * KL + args.ent_coef * entropy.sum() + args.euc_coef * EUC",
                            "BinOp"
                        ],
                        [
                            "args.cls_xent_coeff * XENT + -args.cls_ent_coeff * ENT + args.cls_div_coeff * DIV + -args.cls_shell_coeff * SHELL",
                            "BinOp"
                        ],
                        [
                            "args.gen_kl_coeff * KL + args.gen_rec_coeff * REC + -args.gen_ent_coeff * ENT + args.gen_div_coeff * DIV + -args.gen_shell_coeff * SHELL",
                            "BinOp"
                        ]
                    ]
                },
                "inputs": {
                    "value": "z_new",
                    "type": "Call",
                    "possible_values": [
                        [
                            "prev_gen.prior.sample((z_mu.shape[0],)).to(args.device)",
                            "Call"
                        ],
                        [
                            "prev_gen.reparameterize(z_mu, z_var)",
                            "Call"
                        ],
                        [
                            "(z_new + 1 * z_g).detach()",
                            "Call"
                        ],
                        [
                            "prev_gen.prior.sample((z_mu.shape[0],)).to(args.device)",
                            "Call"
                        ],
                        [
                            "prev_gen.reparameterize(z_mu, z_var)",
                            "Call"
                        ],
                        [
                            "(z_new + 1 * z_g).detach()",
                            "Call"
                        ],
                        [
                            "prev_gen.prior.sample((z_mu.shape[0],)).to(args.device)",
                            "Call"
                        ],
                        [
                            "prev_gen.reparameterize(z_mu, z_var)",
                            "Call"
                        ],
                        [
                            "(z_new + 1 * z_g).detach()",
                            "Call"
                        ],
                        [
                            "prev_gen.prior.sample((z_mu.shape[0],)).to(args.device)",
                            "Call"
                        ],
                        [
                            "prev_gen.reparameterize(z_mu, z_var)",
                            "Call"
                        ],
                        [
                            "(z_new + 1 * z_g).detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "norm_72": {
                "input": {
                    "value": "z_new",
                    "type": "Call",
                    "possible_values": [
                        [
                            "prev_gen.prior.sample((z_mu.shape[0],)).to(args.device)",
                            "Call"
                        ],
                        [
                            "prev_gen.reparameterize(z_mu, z_var)",
                            "Call"
                        ],
                        [
                            "(z_new + 1 * z_g).detach()",
                            "Call"
                        ],
                        [
                            "prev_gen.prior.sample((z_mu.shape[0],)).to(args.device)",
                            "Call"
                        ],
                        [
                            "prev_gen.reparameterize(z_mu, z_var)",
                            "Call"
                        ],
                        [
                            "(z_new + 1 * z_g).detach()",
                            "Call"
                        ],
                        [
                            "prev_gen.prior.sample((z_mu.shape[0],)).to(args.device)",
                            "Call"
                        ],
                        [
                            "prev_gen.reparameterize(z_mu, z_var)",
                            "Call"
                        ],
                        [
                            "(z_new + 1 * z_g).detach()",
                            "Call"
                        ],
                        [
                            "prev_gen.prior.sample((z_mu.shape[0],)).to(args.device)",
                            "Call"
                        ],
                        [
                            "prev_gen.reparameterize(z_mu, z_var)",
                            "Call"
                        ],
                        [
                            "(z_new + 1 * z_g).detach()",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "norm_168": {
                "input": {
                    "value": "z_new",
                    "type": "Call",
                    "possible_values": [
                        [
                            "prev_gen.prior.sample((z_mu.shape[0],)).to(args.device)",
                            "Call"
                        ],
                        [
                            "prev_gen.reparameterize(z_mu, z_var)",
                            "Call"
                        ],
                        [
                            "(z_new + 1 * z_g).detach()",
                            "Call"
                        ],
                        [
                            "prev_gen.prior.sample((z_mu.shape[0],)).to(args.device)",
                            "Call"
                        ],
                        [
                            "prev_gen.reparameterize(z_mu, z_var)",
                            "Call"
                        ],
                        [
                            "(z_new + 1 * z_g).detach()",
                            "Call"
                        ],
                        [
                            "prev_gen.prior.sample((z_mu.shape[0],)).to(args.device)",
                            "Call"
                        ],
                        [
                            "prev_gen.reparameterize(z_mu, z_var)",
                            "Call"
                        ],
                        [
                            "(z_new + 1 * z_g).detach()",
                            "Call"
                        ],
                        [
                            "prev_gen.prior.sample((z_mu.shape[0],)).to(args.device)",
                            "Call"
                        ],
                        [
                            "prev_gen.reparameterize(z_mu, z_var)",
                            "Call"
                        ],
                        [
                            "(z_new + 1 * z_g).detach()",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "min_348": {
                "input": {
                    "value": "pre_loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.cross_entropy(logits_track_pre, by, reduction='none')",
                            "Call"
                        ]
                    ]
                }
            },
            "norm_417": {
                "input": {
                    "value": "z_new",
                    "type": "Call",
                    "possible_values": [
                        [
                            "prev_gen.prior.sample((z_mu.shape[0],)).to(args.device)",
                            "Call"
                        ],
                        [
                            "prev_gen.reparameterize(z_mu, z_var)",
                            "Call"
                        ],
                        [
                            "(z_new + 1 * z_g).detach()",
                            "Call"
                        ],
                        [
                            "prev_gen.prior.sample((z_mu.shape[0],)).to(args.device)",
                            "Call"
                        ],
                        [
                            "prev_gen.reparameterize(z_mu, z_var)",
                            "Call"
                        ],
                        [
                            "(z_new + 1 * z_g).detach()",
                            "Call"
                        ],
                        [
                            "prev_gen.prior.sample((z_mu.shape[0],)).to(args.device)",
                            "Call"
                        ],
                        [
                            "prev_gen.reparameterize(z_mu, z_var)",
                            "Call"
                        ],
                        [
                            "(z_new + 1 * z_g).detach()",
                            "Call"
                        ],
                        [
                            "prev_gen.prior.sample((z_mu.shape[0],)).to(args.device)",
                            "Call"
                        ],
                        [
                            "prev_gen.reparameterize(z_mu, z_var)",
                            "Call"
                        ],
                        [
                            "(z_new + 1 * z_g).detach()",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "norm_505": {
                "input": {
                    "value": "z_new",
                    "type": "Call",
                    "possible_values": [
                        [
                            "prev_gen.prior.sample((z_mu.shape[0],)).to(args.device)",
                            "Call"
                        ],
                        [
                            "prev_gen.reparameterize(z_mu, z_var)",
                            "Call"
                        ],
                        [
                            "(z_new + 1 * z_g).detach()",
                            "Call"
                        ],
                        [
                            "prev_gen.prior.sample((z_mu.shape[0],)).to(args.device)",
                            "Call"
                        ],
                        [
                            "prev_gen.reparameterize(z_mu, z_var)",
                            "Call"
                        ],
                        [
                            "(z_new + 1 * z_g).detach()",
                            "Call"
                        ],
                        [
                            "prev_gen.prior.sample((z_mu.shape[0],)).to(args.device)",
                            "Call"
                        ],
                        [
                            "prev_gen.reparameterize(z_mu, z_var)",
                            "Call"
                        ],
                        [
                            "(z_new + 1 * z_g).detach()",
                            "Call"
                        ],
                        [
                            "prev_gen.prior.sample((z_mu.shape[0],)).to(args.device)",
                            "Call"
                        ],
                        [
                            "prev_gen.reparameterize(z_mu, z_var)",
                            "Call"
                        ],
                        [
                            "(z_new + 1 * z_g).detach()",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_softmax_18": {
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_18": {
                "input": {
                    "value": "t_s",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mse_loss_64": {
                "input": {
                    "value": "z_new",
                    "type": "Call",
                    "possible_values": [
                        [
                            "prev_gen.prior.sample((z_mu.shape[0],)).to(args.device)",
                            "Call"
                        ],
                        [
                            "prev_gen.reparameterize(z_mu, z_var)",
                            "Call"
                        ],
                        [
                            "(z_new + 1 * z_g).detach()",
                            "Call"
                        ],
                        [
                            "prev_gen.prior.sample((z_mu.shape[0],)).to(args.device)",
                            "Call"
                        ],
                        [
                            "prev_gen.reparameterize(z_mu, z_var)",
                            "Call"
                        ],
                        [
                            "(z_new + 1 * z_g).detach()",
                            "Call"
                        ],
                        [
                            "prev_gen.prior.sample((z_mu.shape[0],)).to(args.device)",
                            "Call"
                        ],
                        [
                            "prev_gen.reparameterize(z_mu, z_var)",
                            "Call"
                        ],
                        [
                            "(z_new + 1 * z_g).detach()",
                            "Call"
                        ],
                        [
                            "prev_gen.prior.sample((z_mu.shape[0],)).to(args.device)",
                            "Call"
                        ],
                        [
                            "prev_gen.reparameterize(z_mu, z_var)",
                            "Call"
                        ],
                        [
                            "(z_new + 1 * z_g).detach()",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "z_new_max[found_z_i * z_new.size(0):found_z_i * z_new.size(0) + z_new.size(0)]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_like_73": {
                "input": {
                    "value": "torch.norm(z_new, 2, dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mse_loss_160": {
                "input": {
                    "value": "z_new",
                    "type": "Call",
                    "possible_values": [
                        [
                            "prev_gen.prior.sample((z_mu.shape[0],)).to(args.device)",
                            "Call"
                        ],
                        [
                            "prev_gen.reparameterize(z_mu, z_var)",
                            "Call"
                        ],
                        [
                            "(z_new + 1 * z_g).detach()",
                            "Call"
                        ],
                        [
                            "prev_gen.prior.sample((z_mu.shape[0],)).to(args.device)",
                            "Call"
                        ],
                        [
                            "prev_gen.reparameterize(z_mu, z_var)",
                            "Call"
                        ],
                        [
                            "(z_new + 1 * z_g).detach()",
                            "Call"
                        ],
                        [
                            "prev_gen.prior.sample((z_mu.shape[0],)).to(args.device)",
                            "Call"
                        ],
                        [
                            "prev_gen.reparameterize(z_mu, z_var)",
                            "Call"
                        ],
                        [
                            "(z_new + 1 * z_g).detach()",
                            "Call"
                        ],
                        [
                            "prev_gen.prior.sample((z_mu.shape[0],)).to(args.device)",
                            "Call"
                        ],
                        [
                            "prev_gen.reparameterize(z_mu, z_var)",
                            "Call"
                        ],
                        [
                            "(z_new + 1 * z_g).detach()",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "z_new_max[found_z_i * z_new.size(0):found_z_i * z_new.size(0) + z_new.size(0)]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_like_169": {
                "input": {
                    "value": "torch.norm(z_new, 2, dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mse_loss_409": {
                "input": {
                    "value": "z_new",
                    "type": "Call",
                    "possible_values": [
                        [
                            "prev_gen.prior.sample((z_mu.shape[0],)).to(args.device)",
                            "Call"
                        ],
                        [
                            "prev_gen.reparameterize(z_mu, z_var)",
                            "Call"
                        ],
                        [
                            "(z_new + 1 * z_g).detach()",
                            "Call"
                        ],
                        [
                            "prev_gen.prior.sample((z_mu.shape[0],)).to(args.device)",
                            "Call"
                        ],
                        [
                            "prev_gen.reparameterize(z_mu, z_var)",
                            "Call"
                        ],
                        [
                            "(z_new + 1 * z_g).detach()",
                            "Call"
                        ],
                        [
                            "prev_gen.prior.sample((z_mu.shape[0],)).to(args.device)",
                            "Call"
                        ],
                        [
                            "prev_gen.reparameterize(z_mu, z_var)",
                            "Call"
                        ],
                        [
                            "(z_new + 1 * z_g).detach()",
                            "Call"
                        ],
                        [
                            "prev_gen.prior.sample((z_mu.shape[0],)).to(args.device)",
                            "Call"
                        ],
                        [
                            "prev_gen.reparameterize(z_mu, z_var)",
                            "Call"
                        ],
                        [
                            "(z_new + 1 * z_g).detach()",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "z_new_max[found_z_i * z_new.size(0):found_z_i * z_new.size(0) + z_new.size(0)]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_like_418": {
                "input": {
                    "value": "torch.norm(z_new, 2, dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mse_loss_497": {
                "input": {
                    "value": "z_new",
                    "type": "Call",
                    "possible_values": [
                        [
                            "prev_gen.prior.sample((z_mu.shape[0],)).to(args.device)",
                            "Call"
                        ],
                        [
                            "prev_gen.reparameterize(z_mu, z_var)",
                            "Call"
                        ],
                        [
                            "(z_new + 1 * z_g).detach()",
                            "Call"
                        ],
                        [
                            "prev_gen.prior.sample((z_mu.shape[0],)).to(args.device)",
                            "Call"
                        ],
                        [
                            "prev_gen.reparameterize(z_mu, z_var)",
                            "Call"
                        ],
                        [
                            "(z_new + 1 * z_g).detach()",
                            "Call"
                        ],
                        [
                            "prev_gen.prior.sample((z_mu.shape[0],)).to(args.device)",
                            "Call"
                        ],
                        [
                            "prev_gen.reparameterize(z_mu, z_var)",
                            "Call"
                        ],
                        [
                            "(z_new + 1 * z_g).detach()",
                            "Call"
                        ],
                        [
                            "prev_gen.prior.sample((z_mu.shape[0],)).to(args.device)",
                            "Call"
                        ],
                        [
                            "prev_gen.reparameterize(z_mu, z_var)",
                            "Call"
                        ],
                        [
                            "(z_new + 1 * z_g).detach()",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "z_new_max[found_z_i * z_new.size(0):found_z_i * z_new.size(0) + z_new.size(0)]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_like_506": {
                "input": {
                    "value": "torch.norm(z_new, 2, dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "norm_73": {
                "input": {
                    "value": "z_new",
                    "type": "Call",
                    "possible_values": [
                        [
                            "prev_gen.prior.sample((z_mu.shape[0],)).to(args.device)",
                            "Call"
                        ],
                        [
                            "prev_gen.reparameterize(z_mu, z_var)",
                            "Call"
                        ],
                        [
                            "(z_new + 1 * z_g).detach()",
                            "Call"
                        ],
                        [
                            "prev_gen.prior.sample((z_mu.shape[0],)).to(args.device)",
                            "Call"
                        ],
                        [
                            "prev_gen.reparameterize(z_mu, z_var)",
                            "Call"
                        ],
                        [
                            "(z_new + 1 * z_g).detach()",
                            "Call"
                        ],
                        [
                            "prev_gen.prior.sample((z_mu.shape[0],)).to(args.device)",
                            "Call"
                        ],
                        [
                            "prev_gen.reparameterize(z_mu, z_var)",
                            "Call"
                        ],
                        [
                            "(z_new + 1 * z_g).detach()",
                            "Call"
                        ],
                        [
                            "prev_gen.prior.sample((z_mu.shape[0],)).to(args.device)",
                            "Call"
                        ],
                        [
                            "prev_gen.reparameterize(z_mu, z_var)",
                            "Call"
                        ],
                        [
                            "(z_new + 1 * z_g).detach()",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "norm_169": {
                "input": {
                    "value": "z_new",
                    "type": "Call",
                    "possible_values": [
                        [
                            "prev_gen.prior.sample((z_mu.shape[0],)).to(args.device)",
                            "Call"
                        ],
                        [
                            "prev_gen.reparameterize(z_mu, z_var)",
                            "Call"
                        ],
                        [
                            "(z_new + 1 * z_g).detach()",
                            "Call"
                        ],
                        [
                            "prev_gen.prior.sample((z_mu.shape[0],)).to(args.device)",
                            "Call"
                        ],
                        [
                            "prev_gen.reparameterize(z_mu, z_var)",
                            "Call"
                        ],
                        [
                            "(z_new + 1 * z_g).detach()",
                            "Call"
                        ],
                        [
                            "prev_gen.prior.sample((z_mu.shape[0],)).to(args.device)",
                            "Call"
                        ],
                        [
                            "prev_gen.reparameterize(z_mu, z_var)",
                            "Call"
                        ],
                        [
                            "(z_new + 1 * z_g).detach()",
                            "Call"
                        ],
                        [
                            "prev_gen.prior.sample((z_mu.shape[0],)).to(args.device)",
                            "Call"
                        ],
                        [
                            "prev_gen.reparameterize(z_mu, z_var)",
                            "Call"
                        ],
                        [
                            "(z_new + 1 * z_g).detach()",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "norm_418": {
                "input": {
                    "value": "z_new",
                    "type": "Call",
                    "possible_values": [
                        [
                            "prev_gen.prior.sample((z_mu.shape[0],)).to(args.device)",
                            "Call"
                        ],
                        [
                            "prev_gen.reparameterize(z_mu, z_var)",
                            "Call"
                        ],
                        [
                            "(z_new + 1 * z_g).detach()",
                            "Call"
                        ],
                        [
                            "prev_gen.prior.sample((z_mu.shape[0],)).to(args.device)",
                            "Call"
                        ],
                        [
                            "prev_gen.reparameterize(z_mu, z_var)",
                            "Call"
                        ],
                        [
                            "(z_new + 1 * z_g).detach()",
                            "Call"
                        ],
                        [
                            "prev_gen.prior.sample((z_mu.shape[0],)).to(args.device)",
                            "Call"
                        ],
                        [
                            "prev_gen.reparameterize(z_mu, z_var)",
                            "Call"
                        ],
                        [
                            "(z_new + 1 * z_g).detach()",
                            "Call"
                        ],
                        [
                            "prev_gen.prior.sample((z_mu.shape[0],)).to(args.device)",
                            "Call"
                        ],
                        [
                            "prev_gen.reparameterize(z_mu, z_var)",
                            "Call"
                        ],
                        [
                            "(z_new + 1 * z_g).detach()",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "norm_506": {
                "input": {
                    "value": "z_new",
                    "type": "Call",
                    "possible_values": [
                        [
                            "prev_gen.prior.sample((z_mu.shape[0],)).to(args.device)",
                            "Call"
                        ],
                        [
                            "prev_gen.reparameterize(z_mu, z_var)",
                            "Call"
                        ],
                        [
                            "(z_new + 1 * z_g).detach()",
                            "Call"
                        ],
                        [
                            "prev_gen.prior.sample((z_mu.shape[0],)).to(args.device)",
                            "Call"
                        ],
                        [
                            "prev_gen.reparameterize(z_mu, z_var)",
                            "Call"
                        ],
                        [
                            "(z_new + 1 * z_g).detach()",
                            "Call"
                        ],
                        [
                            "prev_gen.prior.sample((z_mu.shape[0],)).to(args.device)",
                            "Call"
                        ],
                        [
                            "prev_gen.reparameterize(z_mu, z_var)",
                            "Call"
                        ],
                        [
                            "(z_new + 1 * z_g).detach()",
                            "Call"
                        ],
                        [
                            "prev_gen.prior.sample((z_mu.shape[0],)).to(args.device)",
                            "Call"
                        ],
                        [
                            "prev_gen.reparameterize(z_mu, z_var)",
                            "Call"
                        ],
                        [
                            "(z_new + 1 * z_g).detach()",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "model.py": {
        "torch": {
            "Sequential_21": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(3, d, kernel_size=4, stride=2, padding=1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_42": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ResBlock(d, d, bn=True)",
                    "type": null,
                    "possible_values": []
                }
            },
            "mse_loss_97": {
                "variable": {
                    "value": "self.mse",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "recon_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "target": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.view(-1, self.input_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_122": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_133": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_142": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_144": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Sequential_146": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_155": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_158": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x)",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.batch_norm(input, self.running_mean, self.running_var, None, None, self.training or not self.track_running_stats, exponential_average_factor, self.eps)",
                            "Call"
                        ],
                        [
                            "out * weight + bias",
                            "BinOp"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x.view(bsz, *self.input_size))))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "self.layer4(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 4)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.return_hidden(x)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ],
                        [
                            "self.return_hidden(x)",
                            "Call"
                        ],
                        [
                            "self.layer(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "batch_norm_210": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "running_mean": {
                    "value": "self.running_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "running_var": {
                    "value": "self.running_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training or not self.track_running_stats",
                    "type": "BoolOp",
                    "possible_values": []
                },
                "momentum": {
                    "value": "exponential_average_factor",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.0",
                            "Constant"
                        ],
                        [
                            "1.0 / self.num_batches_tracked.item()",
                            "BinOp"
                        ],
                        [
                            "self.momentum",
                            "Attribute"
                        ]
                    ]
                },
                "eps": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm2d_230": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "nf * 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_239": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "last_hid",
                    "type": "Name",
                    "possible_values": [
                        [
                            "nf * 8 * block.expansion if input_size[1] in [8, 16, 21, 32, 42] else 640",
                            "IfExp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "relu_254": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x.view(bsz, *self.input_size)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "avg_pool2d_259": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x)",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.batch_norm(input, self.running_mean, self.running_var, None, None, self.training or not self.track_running_stats, exponential_average_factor, self.eps)",
                            "Call"
                        ],
                        [
                            "out * weight + bias",
                            "BinOp"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x.view(bsz, *self.input_size))))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "self.layer4(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 4)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.return_hidden(x)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ],
                        [
                            "self.return_hidden(x)",
                            "Call"
                        ],
                        [
                            "self.layer(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_276": {
                "variable": {
                    "value": "self.hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.input_size, nf)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_281": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "nf",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "20",
                            "MethodArgument"
                        ],
                        [
                            "400",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_301": {
                "variable": {
                    "value": "activation",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_302": {
                "variable": {
                    "value": "self.layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Reshape([-1])",
                    "type": null,
                    "possible_values": []
                }
            },
            "tanh_81": {
                "input": {
                    "value": "h3",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.decoder(z)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_148": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_planes, self.expansion * planes, kernel_size=1, stride=stride, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_173": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(num_cats, num_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_174": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(num_cats, num_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_247": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_22": {
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_23": {
                "num_features": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_24": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_26": {
                "in_channels": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_27": {
                "num_features": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_28": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_30": {
                "in_channels": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_31": {
                "num_features": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_32": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_39": {
                "num_features": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_44": {
                "num_features": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_46": {
                "num_features": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_48": {
                "in_channels": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_49": {
                "num_features": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_50": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_56": {
                "in_channels": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_57": {
                "num_features": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_58": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_59": {
                "in_channels": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_91": {
                "*size": {
                    "value": "size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "self.d * self.f ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_104": {
                "input": {
                    "value": "1 + logvar - mu.pow(2) - logvar.exp()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_116": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_117": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_118": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_119": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_276": {
                "in_features": {
                    "value": "self.input_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "nf",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "20",
                            "MethodArgument"
                        ],
                        [
                            "400",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_277": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_278": {
                "in_features": {
                    "value": "nf",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "20",
                            "MethodArgument"
                        ],
                        [
                            "400",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "nf",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "20",
                            "MethodArgument"
                        ],
                        [
                            "400",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_279": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_305": {
                "p": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_121": {
                "num_features": {
                    "value": "channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_149": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_151": {
                "num_features": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_179": {
                "*size": {
                    "value": "num_features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_180": {
                "*size": {
                    "value": "num_features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_181": {
                "data": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "utils.py": {
        "torch": {
            "manual_seed_9": {
                "seed": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Tensor_34": {
                "variable": {
                    "value": "grads",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "log_95": {
                "variable": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.softmax(input, dim=1).clamp(1e-05, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_22": {
                "variable": {
                    "value": "param.grad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "param.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_74": {
                "*size": {
                    "value": "t.size()[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "no_grad_56": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "kl_div_84": {
                "input": {
                    "value": "F.log_softmax(y / T, dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "F.softmax(teacher_scores / T, dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction": {
                    "value": "reduction",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'batchmean'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "softmax_95": {
                "input": {
                    "value": "input",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.log(F.softmax(input, dim=1).clamp(1e-05, 1))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clamp_95": {
                "input": {
                    "value": "1e-05",
                    "type": "Constant",
                    "possible_values": []
                },
                "min": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_97": {
                "input": {
                    "value": "input * target",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_softmax_84": {
                "input": {
                    "value": "y / T",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_84": {
                "input": {
                    "value": "teacher_scores / T",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    }
}