{
    "Audio_to_Image/extract_audio_feature.py": {
        "torch": {
            "from_numpy_33": {
                "variable": {
                    "value": "audio",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "audio",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(audios)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(audio).float().squeeze()",
                            "Call"
                        ],
                        [
                            "audio.unsqueeze(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_33": {
                "variable": {
                    "value": "audio",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_34": {
                "variable": {
                    "value": "lens",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "lens_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(lens)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_34": {
                "variable": {
                    "value": "lens",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sort_41": {
                "variable": {
                    "value": "(sorted_cap_lens, sorted_cap_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "lens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[item[1] for item in audios_lens]",
                            "ListComp"
                        ],
                        [
                            "torch.from_numpy(lens_np).long().squeeze()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_61": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_52": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_154": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_162": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "Audio_to_Image/jel.py": {
        "torch": {
            "zeros_20": {
                "variable": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batchsize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fea_img.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "num_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fea_txt.size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_21": {
                "variable": {
                    "value": "txt_grads",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fea_txt",
                    "type": "variable",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_like_22": {
                "variable": {
                    "value": "img_grads",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fea_img",
                    "type": "variable",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mm_25": {
                "variable": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fea_img",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "fea_txt.transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "Audio_to_Image/speech_encoder.py": {
        "torch": {
            "Sequential_9": {
                "*args": {
                    "value": "nn.Conv2d(in_channel, out_channel, kernel_size, stride, padding, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_27": {
                "variable": {
                    "value": "self.Conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.BatchNorm2d(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LSTM_40": {
                "variable": {
                    "value": "self.RNN",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "self.rnn_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "self.bidirectional",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dropout": {
                    "value": "self.drop_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_86": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "self.Conv(x).squeeze()",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x, cap_lens, batch_first=True)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "cap_lens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cap_lens.cpu().data.tolist()",
                            "Call"
                        ],
                        [
                            "[cap_lens]",
                            "List"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_10": {
                "in_channels": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channel",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_11": {
                "num_features": {
                    "value": "out_channel",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_12": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_28": {
                "num_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_31": {
                "kernel_size": {
                    "value": "(1, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "MaxPool2d_36": {
                "kernel_size": {
                    "value": "(1, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_48": {
                "*size": {
                    "value": "self.num_direction",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "n_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_49": {
                "*size": {
                    "value": "self.num_direction",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "n_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_88": {
                "sequence": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "pad_packed_sequence(output, batch_first=True, total_length=length)[0]",
                            "Subscript"
                        ],
                        [
                            "output.view(batch_size, length, self.rnn_layers, self.num_direction * self.nhidden)[:, :, -1, :]",
                            "Subscript"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "total_length": {
                    "value": "length",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "Audio_to_Image/train_audio_encoder.py": {
        "torch": {
            "manual_seed_26": {
                "seed": {
                    "value": "1234",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sort_158": {
                "variable": {
                    "value": "(sorted_cap_lens, sorted_cap_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "tuple_data[sort_idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_218": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_418": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DistributedSampler_452": {
                "variable": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "BirdDataset(data_root=data_root, train=True)",
                            "Call"
                        ],
                        [
                            "PlaceSubSet(data_root=data_root, train=True)",
                            "Call"
                        ],
                        [
                            "FlowerDataset(data_root=data_root, train=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_453": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "BirdDataset(data_root=data_root, train=True)",
                            "Call"
                        ],
                        [
                            "PlaceSubSet(data_root=data_root, train=True)",
                            "Call"
                        ],
                        [
                            "FlowerDataset(data_root=data_root, train=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.distributed.DistributedSampler(train_dataset)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_454": {
                "variable": {
                    "value": "val_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "BirdDataset(data_root=data_root, train=False)",
                            "Call"
                        ],
                        [
                            "PlaceSubSet(data_root=data_root, train=False)",
                            "Call"
                        ],
                        [
                            "FlowerDataset(data_root=data_root, train=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_460": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CNNRNN(40, embedding_dim=1024, drop_prob=args.dropout, nhidden=1024, nsent=1024, bidirectional=args.bidirectional, rnn_layers=args.rnn_layers)",
                            "Call"
                        ],
                        [
                            "model.cuda()",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.local_rank]",
                    "type": "List",
                    "possible_values": []
                },
                "output_device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_462": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "StepLR_463": {
                "variable": {
                    "value": "lr_scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs['optimizer']",
                            "Subscript"
                        ],
                        [
                            "torch.optim.Adam(model.parameters(), lr=args.learning_rate, weight_decay=1e-05)",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "args.lr_scheduler_step_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "args.lr_scheduler_gamma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "kl_div_331": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "source",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "set_device_435": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "L1Loss_316": {
                "variable": {
                    "value": "self.L1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_198": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_softmax_329": {
                "input": {
                    "value": "source",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_329": {
                "input": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_255": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "norm_346": {
                "input": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "Audio_to_Image/trainer.py": {
        "torch": {
            "load_37": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "map_location",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "save_97": {
                "obj": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(filename, map_location=map_location)",
                            "Call"
                        ],
                        [
                            "{'meta': meta, 'state_dict': weights_to_cpu(model.state_dict())}",
                            "Dict"
                        ],
                        [
                            "load_checkpoint(model, path)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "is_initialized_161": {
                "variable": {
                    "value": "initialized",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "StackGAN_v2/datasets.py": {
        "torch": {
            "Tensor_411": {
                "variable": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "StackGAN_v2/interpolation.py": {
        "torch": {
            "from_numpy_73": {
                "variable": {
                    "value": "audio_feature_all",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(audio_feature_all[2:])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_107": {
                "variable": {
                    "value": "audio_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "audio_feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "audio_feature.float().unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(audio_feature).float().unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "audio_feature.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_107": {
                "variable": {
                    "value": "audio_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_122": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_127": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "StackGAN_v2/main.py": {
        "torch": {
            "device_86": {
                "type": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DistributedSampler_176": {
                "variable": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "LSUNClass('%s/%s_%s_lmdb' % (cfg.DATA_DIR, cfg.DATASET_NAME, split_dir), base_size=cfg.TREE.BASE_SIZE, transform=image_transform)",
                            "Call"
                        ],
                        [
                            "ImageFolder(cfg.DATA_DIR, split_dir='train', custom_classes=CLASS_DIC[cfg.DATASET_NAME], base_size=cfg.TREE.BASE_SIZE, transform=image_transform)",
                            "Call"
                        ],
                        [
                            "PlacesSubSet(cfg.DATA_DIR, train=cfg.TRAIN.FLAG, base_size=cfg.TREE.BASE_SIZE, transform=image_transform, feature_switch=args.audio_switch)",
                            "Call"
                        ],
                        [
                            "FlowersDataset(cfg.DATA_DIR, train=cfg.TRAIN.FLAG, base_size=cfg.TREE.BASE_SIZE, transform=image_transform, feature_switch=args.audio_switch)",
                            "Call"
                        ],
                        [
                            "BirdsDataset(cfg.DATA_DIR, train=cfg.TRAIN.FLAG, base_size=cfg.TREE.BASE_SIZE, transform=image_transform, feature_switch=args.audio_switch)",
                            "Call"
                        ],
                        [
                            "TextDataset(cfg.DATA_DIR, split_dir, base_size=cfg.TREE.BASE_SIZE, transform=image_transform, asr_flag=args.asr_flag, audio_switch=args.audio_switch)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_177": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "LSUNClass('%s/%s_%s_lmdb' % (cfg.DATA_DIR, cfg.DATASET_NAME, split_dir), base_size=cfg.TREE.BASE_SIZE, transform=image_transform)",
                            "Call"
                        ],
                        [
                            "ImageFolder(cfg.DATA_DIR, split_dir='train', custom_classes=CLASS_DIC[cfg.DATASET_NAME], base_size=cfg.TREE.BASE_SIZE, transform=image_transform)",
                            "Call"
                        ],
                        [
                            "PlacesSubSet(cfg.DATA_DIR, train=cfg.TRAIN.FLAG, base_size=cfg.TREE.BASE_SIZE, transform=image_transform, feature_switch=args.audio_switch)",
                            "Call"
                        ],
                        [
                            "FlowersDataset(cfg.DATA_DIR, train=cfg.TRAIN.FLAG, base_size=cfg.TREE.BASE_SIZE, transform=image_transform, feature_switch=args.audio_switch)",
                            "Call"
                        ],
                        [
                            "BirdsDataset(cfg.DATA_DIR, train=cfg.TRAIN.FLAG, base_size=cfg.TREE.BASE_SIZE, transform=image_transform, feature_switch=args.audio_switch)",
                            "Call"
                        ],
                        [
                            "TextDataset(cfg.DATA_DIR, split_dir, base_size=cfg.TREE.BASE_SIZE, transform=image_transform, asr_flag=args.asr_flag, audio_switch=args.audio_switch)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "cfg.TRAIN.BATCH_SIZE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.distributed.DistributedSampler(dataset)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_181": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "LSUNClass('%s/%s_%s_lmdb' % (cfg.DATA_DIR, cfg.DATASET_NAME, split_dir), base_size=cfg.TREE.BASE_SIZE, transform=image_transform)",
                            "Call"
                        ],
                        [
                            "ImageFolder(cfg.DATA_DIR, split_dir='train', custom_classes=CLASS_DIC[cfg.DATASET_NAME], base_size=cfg.TREE.BASE_SIZE, transform=image_transform)",
                            "Call"
                        ],
                        [
                            "PlacesSubSet(cfg.DATA_DIR, train=cfg.TRAIN.FLAG, base_size=cfg.TREE.BASE_SIZE, transform=image_transform, feature_switch=args.audio_switch)",
                            "Call"
                        ],
                        [
                            "FlowersDataset(cfg.DATA_DIR, train=cfg.TRAIN.FLAG, base_size=cfg.TREE.BASE_SIZE, transform=image_transform, feature_switch=args.audio_switch)",
                            "Call"
                        ],
                        [
                            "BirdsDataset(cfg.DATA_DIR, train=cfg.TRAIN.FLAG, base_size=cfg.TREE.BASE_SIZE, transform=image_transform, feature_switch=args.audio_switch)",
                            "Call"
                        ],
                        [
                            "TextDataset(cfg.DATA_DIR, split_dir, base_size=cfg.TREE.BASE_SIZE, transform=image_transform, asr_flag=args.asr_flag, audio_switch=args.audio_switch)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "cfg.TRAIN.BATCH_SIZE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "set_detect_anomaly_88": {
                "mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "StackGAN_v2/model.py": {
        "torch": {
            "Sequential_134": {
                "variable": {
                    "value": "block",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Upsample(scale_factor=2, mode='nearest')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_145": {
                "variable": {
                    "value": "block",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv3x3(in_planes, out_planes * 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_359": {
                "variable": {
                    "value": "block",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv3x3(in_planes, out_planes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_370": {
                "variable": {
                    "value": "block",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_planes, out_planes, 4, 2, 1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_381": {
                "variable": {
                    "value": "encode_img",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(3, ndf, 4, 2, 1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool2d_34": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "self.Conv2d_1a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2b_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_3b_1x1(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_4a_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6e(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7c(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x_pool_3, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "input * 0.5 + 0.5",
                            "BinOp"
                        ],
                        [
                            "nn.Upsample(size=(299, 299), mode='bilinear')(x)",
                            "Call"
                        ],
                        [
                            "nn.Softmax(dim=1)(x)",
                            "Call"
                        ],
                        [
                            "self.relu(self.fc(text_embedding))",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool2d_40": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "self.Conv2d_1a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2b_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_3b_1x1(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_4a_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6e(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7c(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x_pool_3, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "input * 0.5 + 0.5",
                            "BinOp"
                        ],
                        [
                            "nn.Upsample(size=(299, 299), mode='bilinear')(x)",
                            "Call"
                        ],
                        [
                            "nn.Softmax(dim=1)(x)",
                            "Call"
                        ],
                        [
                            "self.relu(self.fc(text_embedding))",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "avg_pool2d_67": {
                "variable": {
                    "value": "x_pool_3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "self.Conv2d_1a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2b_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_3b_1x1(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_4a_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6e(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7c(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x_pool_3, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "input * 0.5 + 0.5",
                            "BinOp"
                        ],
                        [
                            "nn.Upsample(size=(299, 299), mode='bilinear')(x)",
                            "Call"
                        ],
                        [
                            "nn.Softmax(dim=1)(x)",
                            "Call"
                        ],
                        [
                            "self.relu(self.fc(text_embedding))",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_69": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_pool_3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.avg_pool2d(x, kernel_size=8)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_127": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_156": {
                "variable": {
                    "value": "self.block",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv3x3(channel_num, channel_num * 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_179": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.t_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.ef_dim * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_216": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(in_dim, ngf * 4 * 4 * 2, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_277": {
                "variable": {
                    "value": "h_c_code",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(c_code.clone(), h_code.clone())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_291": {
                "variable": {
                    "value": "self.img",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv3x3(ngf, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_414": {
                "variable": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(ndf * 8, 1, kernel_size=4, stride=4)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_463": {
                "variable": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(ndf * 8, 1, kernel_size=4, stride=4)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_516": {
                "variable": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(ndf * 8, 1, kernel_size=4, stride=4)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_573": {
                "variable": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(ndf * 8, 1, kernel_size=4, stride=4)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_634": {
                "variable": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(ndf * 8, 1, kernel_size=4, stride=4)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Upsample_135": {
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "BatchNorm2d_137": {
                "num_features": {
                    "value": "out_planes * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm2d_147": {
                "num_features": {
                    "value": "out_planes * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_229": {
                "variable": {
                    "value": "in_code",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(c_code.clone(), z_code.clone())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_262": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "BatchNorm2d_361": {
                "num_features": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LeakyReLU_363": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_371": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_372": {
                "num_features": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LeakyReLU_373": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_383": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ndf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.df_dim",
                            "Attribute"
                        ],
                        [
                            "self.df_dim",
                            "Attribute"
                        ],
                        [
                            "self.df_dim",
                            "Attribute"
                        ],
                        [
                            "self.df_dim",
                            "Attribute"
                        ],
                        [
                            "self.df_dim",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_384": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_386": {
                "in_channels": {
                    "value": "ndf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.df_dim",
                            "Attribute"
                        ],
                        [
                            "self.df_dim",
                            "Attribute"
                        ],
                        [
                            "self.df_dim",
                            "Attribute"
                        ],
                        [
                            "self.df_dim",
                            "Attribute"
                        ],
                        [
                            "self.df_dim",
                            "Attribute"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ndf * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_387": {
                "num_features": {
                    "value": "ndf * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "LeakyReLU_388": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_390": {
                "in_channels": {
                    "value": "ndf * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ndf * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_391": {
                "num_features": {
                    "value": "ndf * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "LeakyReLU_392": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_394": {
                "in_channels": {
                    "value": "ndf * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ndf * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_395": {
                "num_features": {
                    "value": "ndf * 8",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "LeakyReLU_396": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_420": {
                "variable": {
                    "value": "self.uncond_logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(ndf * 8, 1, kernel_size=4, stride=4)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_434": {
                "variable": {
                    "value": "h_c_code_tmp",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(c_code.clone(), x_code.clone())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_469": {
                "variable": {
                    "value": "self.uncond_logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(ndf * 8, 1, kernel_size=4, stride=4)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_485": {
                "variable": {
                    "value": "h_c_code",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(c_code.clone(), x_code.clone())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_522": {
                "variable": {
                    "value": "self.uncond_logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(ndf * 8, 1, kernel_size=4, stride=4)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_540": {
                "variable": {
                    "value": "h_c_code",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(c_code.clone(), x_code.clone())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_579": {
                "variable": {
                    "value": "self.uncond_logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(ndf * 8, 1, kernel_size=4, stride=4)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_599": {
                "variable": {
                    "value": "h_c_code",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(c_code.clone(), x_code.clone())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_640": {
                "variable": {
                    "value": "self.uncond_logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(ndf * 8, 1, kernel_size=4, stride=4)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_661": {
                "variable": {
                    "value": "h_c_code",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(c_code.clone(), x_code.clone())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Upsample_105": {
                "size": {
                    "value": "(299, 299)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Softmax_108": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_121": {
                "input": {
                    "value": "x_temp1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_158": {
                "num_features": {
                    "value": "channel_num * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm2d_161": {
                "num_features": {
                    "value": "channel_num",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_217": {
                "in_features": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.in_dim",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "ngf * 4 * 4 * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_218": {
                "num_features": {
                    "value": "ngf * 4 * 4 * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Tanh_293": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_415": {
                "in_channels": {
                    "value": "ndf * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_416": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_464": {
                "in_channels": {
                    "value": "ndf * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_465": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_517": {
                "in_channels": {
                    "value": "ndf * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_518": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_574": {
                "in_channels": {
                    "value": "ndf * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_575": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_635": {
                "in_channels": {
                    "value": "ndf * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_636": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_421": {
                "in_channels": {
                    "value": "ndf * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_422": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_470": {
                "in_channels": {
                    "value": "ndf * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_471": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_523": {
                "in_channels": {
                    "value": "ndf * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_524": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_580": {
                "in_channels": {
                    "value": "ndf * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_581": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_641": {
                "in_channels": {
                    "value": "ndf * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_642": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "StackGAN_v2/trainer.py": {
        "torch": {
            "bmm_48": {
                "variable": {
                    "value": "covariance",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img_hat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img - mu.expand_as(img)",
                            "BinOp"
                        ],
                        [
                            "img_hat.view(batch_size, channel_num, num_pixels)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "img_hat_transpose",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img_hat.transpose(1, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_57": {
                "variable": {
                    "value": "KLD",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "KLD_element",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mu.pow(2).add(logvar.exp()).mul(-1).add(1).add(logvar)",
                            "Call"
                        ]
                    ]
                }
            },
            "mul_57": {
                "variable": {
                    "value": "KLD",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-0.5",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_62": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pairwise ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Adam_249": {
                "variable": {
                    "value": "optimizerG",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "netG.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "cfg.TRAIN.GENERATOR_LR",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.5, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "mm_304": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_activates",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "torch.transpose(x_activates, 0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_305": {
                "variable": {
                    "value": "pair_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(batch_size, batch_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_167": {
                "variable": {
                    "value": "netG",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "netG",
                    "type": "variable",
                    "possible_values": [
                        [
                            "G_NET()",
                            "Call"
                        ],
                        [
                            "netG.cuda()",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(netG, device_ids=gpus, output_device=gpus[0], broadcast_buffers=True)",
                            "Call"
                        ],
                        [
                            "netG.cuda()",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(netG, device_ids=gpus)",
                            "Call"
                        ],
                        [
                            "G_NET()",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(netG, device_ids=self.gpus)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "gpus",
                    "type": "variable",
                    "possible_values": []
                },
                "output_device": {
                    "value": "gpus[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "broadcast_buffers": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataParallel_171": {
                "variable": {
                    "value": "netG",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "netG",
                    "type": "variable",
                    "possible_values": [
                        [
                            "G_NET()",
                            "Call"
                        ],
                        [
                            "netG.cuda()",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(netG, device_ids=gpus, output_device=gpus[0], broadcast_buffers=True)",
                            "Call"
                        ],
                        [
                            "netG.cuda()",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(netG, device_ids=gpus)",
                            "Call"
                        ],
                        [
                            "G_NET()",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(netG, device_ids=self.gpus)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "gpus",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "load_202": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "cfg.TRAIN.NET_G",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "DataParallel_226": {
                "variable": {
                    "value": "inception_model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "inception_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "INCEPTION_V3()",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(inception_model.cuda(), device_ids=gpus, output_device=gpus[0])",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(inception_model, device_ids=gpus)",
                            "Call"
                        ],
                        [
                            "inception_model.cuda()",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "gpus",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_228": {
                "variable": {
                    "value": "inception_model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "inception_model.cuda()",
                    "type": "Call",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "gpus",
                    "type": "variable",
                    "possible_values": []
                },
                "output_device": {
                    "value": "gpus[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Adam_240": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "netsD[i].parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "cfg.TRAIN.DISCRIMINATOR_LR",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.5, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "save_257": {
                "obj": {
                    "value": "netG.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'%s/netG_%d.pth' % (model_dir, epoch)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_308": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.Tensor([0]).to(scores.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "div_308": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "BCELoss_499": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_681": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DistributedDataParallel_192": {
                "variable": {
                    "value": "netsD[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "module": {
                    "value": "netsD[i].cuda()",
                    "type": "Call",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "gpus",
                    "type": "variable",
                    "possible_values": []
                },
                "output_device": {
                    "value": "gpus[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "broadcast_buffers": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataParallel_196": {
                "variable": {
                    "value": "netsD[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "module": {
                    "value": "netsD[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "gpus",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "load_214": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "'%s%d.pth' % (cfg.TRAIN.NET_D, i)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "save_262": {
                "obj": {
                    "value": "netD.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'%s/netD%d.pth' % (model_dir, i)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "transpose_304": {
                "input": {
                    "value": "x_activates",
                    "type": "variable",
                    "possible_values": []
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "diag_306": {
                "input": {
                    "value": "pair_matrix[torch.eye(batch_size).byte()]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_661": {
                "variable": {
                    "value": "super_img",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "super_img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(super_img, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataParallel_697": {
                "variable": {
                    "value": "netG",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "netG",
                    "type": "variable",
                    "possible_values": [
                        [
                            "G_NET()",
                            "Call"
                        ],
                        [
                            "netG.cuda()",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(netG, device_ids=gpus, output_device=gpus[0], broadcast_buffers=True)",
                            "Call"
                        ],
                        [
                            "netG.cuda()",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(netG, device_ids=gpus)",
                            "Call"
                        ],
                        [
                            "G_NET()",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(netG, device_ids=self.gpus)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "self.gpus",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_702": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "cfg.TRAIN.NET_G",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "no_grad_563": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "eye_306": {
                "n": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img.size(0)",
                            "Call"
                        ],
                        [
                            "self.real_imgs[0].size(0)",
                            "Call"
                        ],
                        [
                            "self.real_imgs[0].size(0)",
                            "Call"
                        ],
                        [
                            "images_list[0].size(0)",
                            "Call"
                        ],
                        [
                            "imgs[0].size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "MSELoss_460": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_462": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_472": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_474": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_595": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_773": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}