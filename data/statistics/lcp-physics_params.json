{
    "demos/grad_demo.py": {
        "torch": {}
    },
    "experiments/breakout/encoder.py": {
        "torch": {}
    },
    "experiments/breakout/learn_params.py": {
        "torch": {
            "randn_22": {
                "variable": {
                    "value": "paddle_vel_x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_23": {
                "variable": {
                    "value": "paddle_vel_y",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "RMSprop_30": {
                "variable": {
                    "value": "optim",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "infered_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[paddle_vel_x, paddle_vel_y]",
                            "List"
                        ],
                        [
                            "[get_tensor([p], requires_grad=True) for p in infered_params]",
                            "ListComp"
                        ]
                    ]
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.03",
                            "float"
                        ]
                    ]
                }
            },
            "cat_67": {
                "variable": {
                    "value": "true_states_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "true_states_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(true_states_batch)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_68": {
                "variable": {
                    "value": "states_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "states_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(states_batch)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_52": {
                "variable": {
                    "value": "true_states",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[s.unsqueeze(0) for s in true_states]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_63": {
                "variable": {
                    "value": "states",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[true_states[0].unsqueeze(0)]",
                            "List"
                        ],
                        [
                            "torch.cat(states)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_97": {
                "tensors": {
                    "value": "[states, true_states]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MSELoss_69": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "experiments/breakout/run_breakout.py": {
        "torch": {
            "cat_30": {
                "variable": {
                    "value": "ball_params",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[ball.pos, ball.rad.view(1)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_31": {
                "variable": {
                    "value": "paddle_params",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[paddle.pos, paddle.dims]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_32": {
                "tensors": {
                    "value": "[b.pos, b.dims]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_33": {
                "variable": {
                    "value": "sn",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[paddle_params, blocks_params, ball_params]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_37": {
                "variable": {
                    "value": "paddle.p",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[get_tensor([0]), new_paddle_params[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_39": {
                "variable": {
                    "value": "ball.p",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[get_tensor([0]), new_ball_params[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_48": {
                "variable": {
                    "value": "ball",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[get_tensor(ball_params[0]), get_tensor([ball_params[1]])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_50": {
                "variable": {
                    "value": "paddle",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[get_tensor(p) for p in paddle_params]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_57": {
                "variable": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[paddle, blocks, ball]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_105": {
                "variable": {
                    "value": "s_Q",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "ns",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(s1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_107": {
                "variable": {
                    "value": "Q",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[s_Q, torch.ones(na) * lambda_a]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "diag_107": {
                "variable": {
                    "value": "Q",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "unsqueeze_107": {
                "variable": {
                    "value": "Q",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_126": {
                "variable": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "ns + na",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_42": {
                "variable": {
                    "value": "blocks[i].p",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[get_tensor([0]), new_blocks_params[i][0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_52": {
                "tensors": {
                    "value": "[get_tensor(p) for p in block]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "norm_205": {
                "input": {
                    "value": "ball_vel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(s[-3:-1] - prev_s[-3:-1]) / DT",
                            "BinOp"
                        ],
                        [
                            "BALL_VEL",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_107": {
                "*size": {
                    "value": "na",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(a[0])",
                            "Call"
                        ],
                        [
                            "1",
                            "int"
                        ]
                    ]
                }
            }
        }
    },
    "experiments/inference.py": {
        "torch": {
            "tensor_28": {
                "variable": {
                    "value": "ground_truth_mass",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[TOTAL_MASS]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "DTYPE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Defaults.DTYPE",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cat_35": {
                "variable": {
                    "value": "ground_truth_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "ground_truth_pos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "positions_run_world(world, run_time=10, screen=screen, recorder=rec)",
                            "Call"
                        ],
                        [
                            "[p.data for p in ground_truth_pos]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(ground_truth_pos)",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_like_40": {
                "variable": {
                    "value": "next_mass",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ground_truth_mass",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([TOTAL_MASS], dtype=DTYPE)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "RMSprop_44": {
                "variable": {
                    "value": "optim",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[next_mass]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "float"
                        ]
                    ]
                }
            },
            "cat_81": {
                "variable": {
                    "value": "positions",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "positions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "positions_run_world(world, run_time=10, screen=screen, recorder=rec)",
                            "Call"
                        ],
                        [
                            "torch.cat(positions)",
                            "Call"
                        ],
                        [
                            "positions[:len(ground_truth_pos)]",
                            "Subscript"
                        ],
                        [
                            "positions_run_world(world, run_time=10, screen=None)",
                            "Call"
                        ],
                        [
                            "torch.cat(positions)",
                            "Call"
                        ],
                        [
                            "positions[:len(ground_truth_pos)]",
                            "Subscript"
                        ],
                        [
                            "[torch.cat([b.p for b in world.bodies])]",
                            "List"
                        ]
                    ]
                }
            },
            "tensor_120": {
                "variable": {
                    "value": "c_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[50, bodies[-1].pos[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_55": {
                "variable": {
                    "value": "positions",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "positions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "positions_run_world(world, run_time=10, screen=screen, recorder=rec)",
                            "Call"
                        ],
                        [
                            "torch.cat(positions)",
                            "Call"
                        ],
                        [
                            "positions[:len(ground_truth_pos)]",
                            "Subscript"
                        ],
                        [
                            "positions_run_world(world, run_time=10, screen=None)",
                            "Call"
                        ],
                        [
                            "torch.cat(positions)",
                            "Call"
                        ],
                        [
                            "positions[:len(ground_truth_pos)]",
                            "Subscript"
                        ],
                        [
                            "[torch.cat([b.p for b in world.bodies])]",
                            "List"
                        ]
                    ]
                }
            },
            "MSELoss_84": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_132": {
                "tensors": {
                    "value": "[b.p for b in world.bodies]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "MSELoss_60": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_146": {
                "tensors": {
                    "value": "[b.p for b in world.bodies]",
                    "type": "ListComp",
                    "possible_values": []
                }
            }
        }
    },
    "lcp_physics/lcp/lcp.py": {
        "torch": {
            "is_tensor_88": {
                "obj": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "is_tensor_99": {
                "obj": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "is_tensor_76": {
                "obj": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_77": {
                "*size": {
                    "value": "x.nelement()",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "num_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_out",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "lcp_physics/lcp/solvers/dev_pdipm.py": {
        "torch": {
            "zeros_416": {
                "variable": {
                    "value": "H_",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "nBatch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "d.size()",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "nz + nineq",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "nz + nineq",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "bmm_437": {
                "variable": {
                    "value": "S_",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "A_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([torch.cat([G, torch.eye(nineq).type_as(Q_tilde).repeat(nBatch, 1, 1)], 2), torch.cat([A, torch.zeros(nBatch, neq, nineq).type_as(Q_tilde)], 2)], 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([G, torch.eye(nineq).type_as(Q_tilde).unsqueeze(0)], 2)",
                            "Call"
                        ],
                        [
                            "vstack([hstack([csc_matrix(G.squeeze(0).numpy()), eye(nineq, format='csc')], format='csc'), hstack([csc_matrix(A.squeeze(0).numpy()), csc_matrix((neq, nineq))], format='csc')], format='csc')",
                            "Call"
                        ],
                        [
                            "hstack([G, eye(nineq, format='csc')])",
                            "Call"
                        ],
                        [
                            "vstack([hstack([csc_matrix(G.squeeze(0).numpy()), eye(nineq, format='csc')], format='csc'), hstack([csc_matrix(A.squeeze(0).numpy()), csc_matrix((neq, nineq))], format='csc')], format='csc')",
                            "Call"
                        ],
                        [
                            "hstack([G, eye(nineq, format='csc')])",
                            "Call"
                        ],
                        [
                            "torch.cat([torch.cat([G, torch.eye(nineq).type_as(Q_tilde).repeat(nBatch, 1, 1)], 2), torch.cat([A, torch.zeros(nBatch, neq, nineq).type_as(Q_tilde)], 2)], 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([G, torch.eye(nineq).type_as(Q_tilde).repeat(nBatch, 1, 1)], 2)",
                            "Call"
                        ],
                        [
                            "torch.cat([torch.cat([G, torch.eye(nineq).type_as(Q_tilde).repeat(nBatch, 1, 1)], 2), torch.cat([A, torch.zeros(nBatch, neq, nineq).type_as(Q_tilde)], 2)], 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([G, torch.eye(nineq).type_as(Q_tilde).repeat(nBatch, 1, 1)], 2)",
                            "Call"
                        ],
                        [
                            "A_.squeeze(0).numpy()",
                            "Call"
                        ],
                        [
                            "torch.cat([torch.cat([G, torch.eye(nineq).type_as(Q_tilde).repeat(nBatch, 1, 1)], 2), torch.cat([A, torch.zeros(nBatch, neq, nineq).type_as(Q_tilde)], 2)], 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([G, torch.eye(nineq).type_as(Q_tilde).repeat(nBatch, 1, 1)], 2)",
                            "Call"
                        ],
                        [
                            "A_",
                            "Method Argument"
                        ],
                        [
                            "A_",
                            "Method Argument"
                        ],
                        [
                            "A_",
                            "Method Argument"
                        ],
                        [
                            "A_",
                            "Method Argument"
                        ],
                        [
                            "A_",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "invH_A_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "A_.transpose(1, 2).btrisolve(*H_LU)",
                            "Call"
                        ],
                        [
                            "H_LU.solve(A_.transpose())",
                            "Call"
                        ],
                        [
                            "A_.transpose(1, 2).btrisolve(*H_LU)",
                            "Call"
                        ],
                        [
                            "csc_matrix(H_LU.solve(A_.todense().transpose()))",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_488": {
                "variable": {
                    "value": "H_",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "nBatch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "d.size()",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "nz + nineq",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "nz + nineq",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "unsqueeze_558": {
                "variable": {
                    "value": "dx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_559": {
                "variable": {
                    "value": "ds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_560": {
                "variable": {
                    "value": "dz",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_601": {
                "variable": {
                    "value": "H_",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "nBatch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "d.size()",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "nz + nineq",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "nz + nineq",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_617": {
                "tensors": {
                    "value": "[H_, A_.transpose(1, 2)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_619": {
                "variable": {
                    "value": "full_res",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[g_, h_]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_620": {
                "variable": {
                    "value": "sol",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "binverse(full_mat)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "full_res.unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_620": {
                "variable": {
                    "value": "sol",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_674": {
                "variable": {
                    "value": "dx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_675": {
                "variable": {
                    "value": "ds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_676": {
                "variable": {
                    "value": "dz",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_685": {
                "variable": {
                    "value": "H_",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "nBatch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "d.size()",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "nz + nineq",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "nz + nineq",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "unsqueeze_748": {
                "variable": {
                    "value": "dx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_749": {
                "variable": {
                    "value": "ds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_750": {
                "variable": {
                    "value": "dz",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_811": {
                "variable": {
                    "value": "S_LU_pivots",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_71": {
                "variable": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "nineq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "d.size()",
                            "Call"
                        ],
                        [
                            "nineq",
                            "Method Argument"
                        ],
                        [
                            "nineq",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "abs_192": {
                "variable": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(s * z).sum(1).squeeze() / nineq",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_193": {
                "variable": {
                    "value": "z_resid",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(x.unsqueeze(1), G.transpose(1, 2)).squeeze(1) + s - h",
                            "BinOp"
                        ],
                        [
                            "rz - torch.bmm(z.unsqueeze(1), F.transpose(1, 2)).squeeze(1)",
                            "BinOp"
                        ],
                        [
                            "torch.zeros(nBatch, nineq).type_as(Q)",
                            "Call"
                        ],
                        [
                            "rz",
                            "Method Argument"
                        ],
                        [
                            "rz",
                            "Method Argument"
                        ],
                        [
                            "rz",
                            "Method Argument"
                        ],
                        [
                            "rz",
                            "Method Argument"
                        ],
                        [
                            "rz",
                            "Method Argument"
                        ],
                        [
                            "rz",
                            "Method Argument"
                        ],
                        [
                            "rz",
                            "Method Argument"
                        ],
                        [
                            "rz",
                            "Method Argument"
                        ],
                        [
                            "rz",
                            "Method Argument"
                        ],
                        [
                            "rz",
                            "Method Argument"
                        ],
                        [
                            "rz",
                            "Method Argument"
                        ],
                        [
                            "rz",
                            "Method Argument"
                        ],
                        [
                            "rz",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_193": {
                "variable": {
                    "value": "z_resid",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "norm_196": {
                "variable": {
                    "value": "dual_resid",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(torch.bmm(y.unsqueeze(1), A).squeeze(1) if neq > 0 else 0.0) + torch.bmm(z.unsqueeze(1), G).squeeze(1) + torch.bmm(x.unsqueeze(1), Q.transpose(1, 2)).squeeze(1) + p",
                            "BinOp"
                        ],
                        [
                            "torch.zeros(nBatch, nz).type_as(Q)",
                            "Call"
                        ],
                        [
                            "rx",
                            "Method Argument"
                        ],
                        [
                            "rx",
                            "Method Argument"
                        ],
                        [
                            "rx",
                            "Method Argument"
                        ],
                        [
                            "rx",
                            "Method Argument"
                        ],
                        [
                            "rx",
                            "Method Argument"
                        ],
                        [
                            "rx",
                            "Method Argument"
                        ],
                        [
                            "rx",
                            "Method Argument"
                        ],
                        [
                            "rx",
                            "Method Argument"
                        ],
                        [
                            "rx",
                            "Method Argument"
                        ],
                        [
                            "rx",
                            "Method Argument"
                        ],
                        [
                            "rx",
                            "Method Argument"
                        ],
                        [
                            "rx",
                            "Method Argument"
                        ],
                        [
                            "rx",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_196": {
                "variable": {
                    "value": "dual_resid",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "min_274": {
                "input": {
                    "value": "get_step(z, dz_aff)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_280": {
                "variable": {
                    "value": "t3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "t1 * t2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_280": {
                "variable": {
                    "value": "t3",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_281": {
                "variable": {
                    "value": "t4",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s * z",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_281": {
                "variable": {
                    "value": "t4",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_284": {
                "variable": {
                    "value": "rx",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "nBatch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "d.size()",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "nz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "nz",
                            "Method Argument"
                        ],
                        [
                            "nz",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_286": {
                "variable": {
                    "value": "rz",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "nBatch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "d.size()",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "nineq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "d.size()",
                            "Call"
                        ],
                        [
                            "nineq",
                            "Method Argument"
                        ],
                        [
                            "nineq",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_287": {
                "variable": {
                    "value": "ry",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "nBatch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "d.size()",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "neq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "S_LU[1].size(1) - nineq",
                            "BinOp"
                        ],
                        [
                            "neq",
                            "Method Argument"
                        ],
                        [
                            "neq",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "min_329": {
                "input": {
                    "value": "get_step(z, dz)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_422": {
                "tensors": {
                    "value": "[G, torch.eye(nineq).type_as(Q_tilde).repeat(nBatch, 1, 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_424": {
                "variable": {
                    "value": "g_",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[rx, rs]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_425": {
                "variable": {
                    "value": "h_",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[rz, ry]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_427": {
                "variable": {
                    "value": "A_",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[G, torch.eye(nineq).type_as(Q_tilde).repeat(nBatch, 1, 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_429": {
                "variable": {
                    "value": "g_",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[rx, rs]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_494": {
                "tensors": {
                    "value": "[G, torch.eye(nineq).type_as(Q_tilde).repeat(nBatch, 1, 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_497": {
                "variable": {
                    "value": "A_",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[G, torch.eye(nineq).type_as(Q_tilde).repeat(nBatch, 1, 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_523": {
                "variable": {
                    "value": "g_",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[rx, rs]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_524": {
                "variable": {
                    "value": "h_",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[rz, ry]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_526": {
                "variable": {
                    "value": "g_",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[rx, rs]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_607": {
                "tensors": {
                    "value": "[G, torch.eye(nineq).type_as(Q_tilde).repeat(nBatch, 1, 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_609": {
                "variable": {
                    "value": "g_",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[rx, rs]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_610": {
                "variable": {
                    "value": "h_",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[rz, ry]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_612": {
                "variable": {
                    "value": "A_",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[G, torch.eye(nineq).type_as(Q_tilde).repeat(nBatch, 1, 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_614": {
                "variable": {
                    "value": "g_",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[rx, rs]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_657": {
                "variable": {
                    "value": "g_",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[rx, rs]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_657": {
                "variable": {
                    "value": "g_",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_658": {
                "variable": {
                    "value": "h_",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[rz, ry]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_658": {
                "variable": {
                    "value": "h_",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_660": {
                "variable": {
                    "value": "g_",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[rx, rs]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_660": {
                "variable": {
                    "value": "g_",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_689": {
                "variable": {
                    "value": "g_",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[rx, rs]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_690": {
                "variable": {
                    "value": "h_",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[rz, ry]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_692": {
                "variable": {
                    "value": "g_",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[rx, rs]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_723": {
                "variable": {
                    "value": "g_",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[rx, rs]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_723": {
                "variable": {
                    "value": "g_",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_724": {
                "variable": {
                    "value": "h_",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[rz, ry]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_724": {
                "variable": {
                    "value": "h_",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_726": {
                "variable": {
                    "value": "g_",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[rx, rs]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_726": {
                "variable": {
                    "value": "g_",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_768": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[invQ_rx.unsqueeze(1).bmm(A.transpose(1, 2)).squeeze(1) - ry, invQ_rx.unsqueeze(1).bmm(G.transpose(1, 2)).squeeze(1) + rs / d - rz]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_815": {
                "variable": {
                    "value": "A_invQ_AT",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": [
                        [
                            "A",
                            "Method Argument"
                        ],
                        [
                            "A",
                            "Method Argument"
                        ],
                        [
                            "A",
                            "Method Argument"
                        ],
                        [
                            "A",
                            "Method Argument"
                        ],
                        [
                            "A",
                            "Method Argument"
                        ],
                        [
                            "A",
                            "Method Argument"
                        ],
                        [
                            "A",
                            "Method Argument"
                        ],
                        [
                            "A",
                            "Method Argument"
                        ],
                        [
                            "A",
                            "Method Argument"
                        ],
                        [
                            "A",
                            "Method Argument"
                        ],
                        [
                            "A",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "invQ_AT",
                    "type": "variable",
                    "possible_values": [
                        [
                            "A.transpose(1, 2).btrisolve(*Q_LU)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_816": {
                "variable": {
                    "value": "G_invQ_AT",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "G",
                    "type": "variable",
                    "possible_values": [
                        [
                            "G",
                            "Method Argument"
                        ],
                        [
                            "G",
                            "Method Argument"
                        ],
                        [
                            "G",
                            "Method Argument"
                        ],
                        [
                            "G",
                            "Method Argument"
                        ],
                        [
                            "G",
                            "Method Argument"
                        ],
                        [
                            "G",
                            "Method Argument"
                        ],
                        [
                            "G",
                            "Method Argument"
                        ],
                        [
                            "G",
                            "Method Argument"
                        ],
                        [
                            "G",
                            "Method Argument"
                        ],
                        [
                            "G",
                            "Method Argument"
                        ],
                        [
                            "G",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "invQ_AT",
                    "type": "variable",
                    "possible_values": [
                        [
                            "A.transpose(1, 2).btrisolve(*Q_LU)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_828": {
                "variable": {
                    "value": "S_LU_22",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "nBatch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "d.size()",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "nineq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "d.size()",
                            "Call"
                        ],
                        [
                            "nineq",
                            "Method Argument"
                        ],
                        [
                            "nineq",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "nineq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "d.size()",
                            "Call"
                        ],
                        [
                            "nineq",
                            "Method Argument"
                        ],
                        [
                            "nineq",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_829": {
                "tensors": {
                    "value": "(S_LU_11, S_LU_12)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_836": {
                "variable": {
                    "value": "S_LU_data",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "nBatch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "d.size()",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "nineq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "d.size()",
                            "Call"
                        ],
                        [
                            "nineq",
                            "Method Argument"
                        ],
                        [
                            "nineq",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "nineq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "d.size()",
                            "Call"
                        ],
                        [
                            "nineq",
                            "Method Argument"
                        ],
                        [
                            "nineq",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "eye_853": {
                "variable": {
                    "value": "factor_kkt_eye",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "nineq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "d.size()",
                            "Call"
                        ],
                        [
                            "nineq",
                            "Method Argument"
                        ],
                        [
                            "nineq",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_77": {
                "tensors": {
                    "value": "[G, torch.eye(nineq).type_as(Q_tilde).repeat(nBatch, 1, 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_80": {
                "variable": {
                    "value": "A_",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[G, torch.eye(nineq).type_as(Q_tilde).unsqueeze(0)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_391": {
                "n": {
                    "value": "neq + nineq",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "bmm_442": {
                "input": {
                    "value": "invH_g_.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "A_.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_442": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_483": {
                "n": {
                    "value": "neq + nineq",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "unsqueeze_561": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_576": {
                "n": {
                    "value": "neq + nineq",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "unsqueeze_677": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_700": {
                "input": {
                    "value": "A_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([torch.cat([G, torch.eye(nineq).type_as(Q_tilde).repeat(nBatch, 1, 1)], 2), torch.cat([A, torch.zeros(nBatch, neq, nineq).type_as(Q_tilde)], 2)], 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([G, torch.eye(nineq).type_as(Q_tilde).unsqueeze(0)], 2)",
                            "Call"
                        ],
                        [
                            "vstack([hstack([csc_matrix(G.squeeze(0).numpy()), eye(nineq, format='csc')], format='csc'), hstack([csc_matrix(A.squeeze(0).numpy()), csc_matrix((neq, nineq))], format='csc')], format='csc')",
                            "Call"
                        ],
                        [
                            "hstack([G, eye(nineq, format='csc')])",
                            "Call"
                        ],
                        [
                            "vstack([hstack([csc_matrix(G.squeeze(0).numpy()), eye(nineq, format='csc')], format='csc'), hstack([csc_matrix(A.squeeze(0).numpy()), csc_matrix((neq, nineq))], format='csc')], format='csc')",
                            "Call"
                        ],
                        [
                            "hstack([G, eye(nineq, format='csc')])",
                            "Call"
                        ],
                        [
                            "torch.cat([torch.cat([G, torch.eye(nineq).type_as(Q_tilde).repeat(nBatch, 1, 1)], 2), torch.cat([A, torch.zeros(nBatch, neq, nineq).type_as(Q_tilde)], 2)], 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([G, torch.eye(nineq).type_as(Q_tilde).repeat(nBatch, 1, 1)], 2)",
                            "Call"
                        ],
                        [
                            "torch.cat([torch.cat([G, torch.eye(nineq).type_as(Q_tilde).repeat(nBatch, 1, 1)], 2), torch.cat([A, torch.zeros(nBatch, neq, nineq).type_as(Q_tilde)], 2)], 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([G, torch.eye(nineq).type_as(Q_tilde).repeat(nBatch, 1, 1)], 2)",
                            "Call"
                        ],
                        [
                            "A_.squeeze(0).numpy()",
                            "Call"
                        ],
                        [
                            "torch.cat([torch.cat([G, torch.eye(nineq).type_as(Q_tilde).repeat(nBatch, 1, 1)], 2), torch.cat([A, torch.zeros(nBatch, neq, nineq).type_as(Q_tilde)], 2)], 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([G, torch.eye(nineq).type_as(Q_tilde).repeat(nBatch, 1, 1)], 2)",
                            "Call"
                        ],
                        [
                            "A_",
                            "Method Argument"
                        ],
                        [
                            "A_",
                            "Method Argument"
                        ],
                        [
                            "A_",
                            "Method Argument"
                        ],
                        [
                            "A_",
                            "Method Argument"
                        ],
                        [
                            "A_",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "invH_A_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "A_.transpose(1, 2).btrisolve(*H_LU)",
                            "Call"
                        ],
                        [
                            "H_LU.solve(A_.transpose())",
                            "Call"
                        ],
                        [
                            "A_.transpose(1, 2).btrisolve(*H_LU)",
                            "Call"
                        ],
                        [
                            "csc_matrix(H_LU.solve(A_.todense().transpose()))",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_702": {
                "input": {
                    "value": "invH_g_.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "A_.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_702": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_751": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_809": {
                "input": {
                    "value": "G",
                    "type": "variable",
                    "possible_values": [
                        [
                            "G",
                            "Method Argument"
                        ],
                        [
                            "G",
                            "Method Argument"
                        ],
                        [
                            "G",
                            "Method Argument"
                        ],
                        [
                            "G",
                            "Method Argument"
                        ],
                        [
                            "G",
                            "Method Argument"
                        ],
                        [
                            "G",
                            "Method Argument"
                        ],
                        [
                            "G",
                            "Method Argument"
                        ],
                        [
                            "G",
                            "Method Argument"
                        ],
                        [
                            "G",
                            "Method Argument"
                        ],
                        [
                            "G",
                            "Method Argument"
                        ],
                        [
                            "G",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "G.transpose(1, 2).btrisolve(*Q_LU)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eye_82": {
                "n": {
                    "value": "neq + nineq",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_88": {
                "*size": {
                    "value": "nBatch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "d.size()",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "nineq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "d.size()",
                            "Call"
                        ],
                        [
                            "nineq",
                            "Method Argument"
                        ],
                        [
                            "nineq",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_116": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "nBatch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "d.size()",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "nineq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "d.size()",
                            "Call"
                        ],
                        [
                            "nineq",
                            "Method Argument"
                        ],
                        [
                            "nineq",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "bmm_189": {
                "input": {
                    "value": "z.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "F.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_189": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_194": {
                "input": {
                    "value": "ry",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(x.unsqueeze(1), A.transpose(1, 2)).squeeze(1) - b if neq > 0 else 0.0",
                            "IfExp"
                        ],
                        [
                            "torch.zeros(nBatch, neq).type_as(Q)",
                            "Call"
                        ],
                        [
                            "ry",
                            "Method Argument"
                        ],
                        [
                            "ry",
                            "Method Argument"
                        ],
                        [
                            "ry",
                            "Method Argument"
                        ],
                        [
                            "ry",
                            "Method Argument"
                        ],
                        [
                            "ry",
                            "Method Argument"
                        ],
                        [
                            "ry",
                            "Method Argument"
                        ],
                        [
                            "ry",
                            "Method Argument"
                        ],
                        [
                            "ry",
                            "Method Argument"
                        ],
                        [
                            "ry",
                            "Method Argument"
                        ],
                        [
                            "ry",
                            "Method Argument"
                        ],
                        [
                            "ry",
                            "Method Argument"
                        ],
                        [
                            "ry",
                            "Method Argument"
                        ],
                        [
                            "ry",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_194": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_276": {
                "*size": {
                    "value": "nBatch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "d.size()",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_331": {
                "*size": {
                    "value": "nBatch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "d.size()",
                            "Call"
                        ]
                    ]
                }
            },
            "eye_386": {
                "n": {
                    "value": "nz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "nz",
                            "Method Argument"
                        ],
                        [
                            "nz",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "eye_387": {
                "n": {
                    "value": "nineq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "d.size()",
                            "Call"
                        ],
                        [
                            "nineq",
                            "Method Argument"
                        ],
                        [
                            "nineq",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "eye_478": {
                "n": {
                    "value": "nz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "nz",
                            "Method Argument"
                        ],
                        [
                            "nz",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "eye_479": {
                "n": {
                    "value": "nineq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "d.size()",
                            "Call"
                        ],
                        [
                            "nineq",
                            "Method Argument"
                        ],
                        [
                            "nineq",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "eye_571": {
                "n": {
                    "value": "nz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "nz",
                            "Method Argument"
                        ],
                        [
                            "nz",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "eye_572": {
                "n": {
                    "value": "nineq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "d.size()",
                            "Call"
                        ],
                        [
                            "nineq",
                            "Method Argument"
                        ],
                        [
                            "nineq",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_618": {
                "tensors": {
                    "value": "[A_, C_tilde]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_73": {
                "n": {
                    "value": "nz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "nz",
                            "Method Argument"
                        ],
                        [
                            "nz",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "eye_74": {
                "n": {
                    "value": "nineq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "d.size()",
                            "Call"
                        ],
                        [
                            "nineq",
                            "Method Argument"
                        ],
                        [
                            "nineq",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_111": {
                "*size": {
                    "value": "nBatch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "d.size()",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "nineq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "d.size()",
                            "Call"
                        ],
                        [
                            "nineq",
                            "Method Argument"
                        ],
                        [
                            "nineq",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "eye_123": {
                "variable": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "nineq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "d.size()",
                            "Call"
                        ],
                        [
                            "nineq",
                            "Method Argument"
                        ],
                        [
                            "nineq",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "min_169": {
                "input": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "solve_kkt(Q_LU, d, G, A, S_LU, p, torch.zeros(nBatch, nineq).type_as(Q), -h, -b if neq > 0 else None)",
                            "Call"
                        ],
                        [
                            "factor_solve_kkt(Q_tilde, D_tilde, A_, C_tilde, p, torch.zeros(nBatch, nineq).type_as(Q), -h, -b if b is not None else None, ns)",
                            "Call"
                        ],
                        [
                            "solve_kkt_ir(Q, D, G, A, F, p, torch.zeros(nBatch, nineq).type_as(Q), -h, -b if b is not None else None)",
                            "Call"
                        ],
                        [
                            "sparse_factor_solve_kkt(Q_tilde, D_tilde, A_, C_tilde, p, torch.zeros(nBatch, nineq).type_as(Q), -h, -b if b is not None else None, ns)",
                            "Call"
                        ],
                        [
                            "sparse_solve_kkt_ir(Q, D, G, A, F, p, torch.zeros(nBatch, nineq).type_as(Q), -h, -b if b is not None else None)",
                            "Call"
                        ],
                        [
                            "solve_kkt_ir_inverse(Q, D, G, A, F, p, torch.zeros(nBatch, nineq).type_as(Q), -h, -b if b is not None else None)",
                            "Call"
                        ],
                        [
                            "sparse_solve_kkt_ir_inverse(H_, A_, C_tilde, Q_tilde, D_tilde, G, A, F_tilde, p, torch.zeros(nBatch, nineq).type_as(Q), -h, -b if b is not None else None)",
                            "Call"
                        ],
                        [
                            "s + alpha_nineq * ds",
                            "BinOp"
                        ],
                        [
                            "v[:, i:i + nineq]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "min_173": {
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "solve_kkt(Q_LU, d, G, A, S_LU, p, torch.zeros(nBatch, nineq).type_as(Q), -h, -b if neq > 0 else None)",
                            "Call"
                        ],
                        [
                            "factor_solve_kkt(Q_tilde, D_tilde, A_, C_tilde, p, torch.zeros(nBatch, nineq).type_as(Q), -h, -b if b is not None else None, ns)",
                            "Call"
                        ],
                        [
                            "solve_kkt_ir(Q, D, G, A, F, p, torch.zeros(nBatch, nineq).type_as(Q), -h, -b if b is not None else None)",
                            "Call"
                        ],
                        [
                            "sparse_factor_solve_kkt(Q_tilde, D_tilde, A_, C_tilde, p, torch.zeros(nBatch, nineq).type_as(Q), -h, -b if b is not None else None, ns)",
                            "Call"
                        ],
                        [
                            "sparse_solve_kkt_ir(Q, D, G, A, F, p, torch.zeros(nBatch, nineq).type_as(Q), -h, -b if b is not None else None)",
                            "Call"
                        ],
                        [
                            "solve_kkt_ir_inverse(Q, D, G, A, F, p, torch.zeros(nBatch, nineq).type_as(Q), -h, -b if b is not None else None)",
                            "Call"
                        ],
                        [
                            "sparse_solve_kkt_ir_inverse(H_, A_, C_tilde, Q_tilde, D_tilde, G, A, F_tilde, p, torch.zeros(nBatch, nineq).type_as(Q), -h, -b if b is not None else None)",
                            "Call"
                        ],
                        [
                            "z + alpha_nineq * dz",
                            "BinOp"
                        ],
                        [
                            "v[:, i:i + nineq]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "bmm_184": {
                "input": {
                    "value": "x.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "Q.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_184": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_187": {
                "input": {
                    "value": "x.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "G.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_187": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_190": {
                "input": {
                    "value": "x.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "A.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_190": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_423": {
                "tensors": {
                    "value": "[A, torch.zeros(nBatch, neq, nineq).type_as(Q_tilde)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_428": {
                "n": {
                    "value": "nineq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "d.size()",
                            "Call"
                        ],
                        [
                            "nineq",
                            "Method Argument"
                        ],
                        [
                            "nineq",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_495": {
                "tensors": {
                    "value": "[A, torch.zeros(nBatch, neq, nineq).type_as(Q_tilde)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_498": {
                "n": {
                    "value": "nineq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "d.size()",
                            "Call"
                        ],
                        [
                            "nineq",
                            "Method Argument"
                        ],
                        [
                            "nineq",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_608": {
                "tensors": {
                    "value": "[A, torch.zeros(nBatch, neq, nineq).type_as(Q_tilde)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_613": {
                "n": {
                    "value": "nineq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "d.size()",
                            "Call"
                        ],
                        [
                            "nineq",
                            "Method Argument"
                        ],
                        [
                            "nineq",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_830": {
                "tensors": {
                    "value": "(S_LU_21, S_LU_22)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_78": {
                "tensors": {
                    "value": "[A, torch.zeros(nBatch, neq, nineq).type_as(Q_tilde)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_80": {
                "n": {
                    "value": "nineq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "d.size()",
                            "Call"
                        ],
                        [
                            "nineq",
                            "Method Argument"
                        ],
                        [
                            "nineq",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "unsqueeze_80": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_120": {
                "*size": {
                    "value": "nBatch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "d.size()",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "nineq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "d.size()",
                            "Call"
                        ],
                        [
                            "nineq",
                            "Method Argument"
                        ],
                        [
                            "nineq",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "eye_129": {
                "variable": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "nineq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "d.size()",
                            "Call"
                        ],
                        [
                            "nineq",
                            "Method Argument"
                        ],
                        [
                            "nineq",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "bmm_183": {
                "input": {
                    "value": "z.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "G",
                    "type": "variable",
                    "possible_values": [
                        [
                            "G",
                            "Method Argument"
                        ],
                        [
                            "G",
                            "Method Argument"
                        ],
                        [
                            "G",
                            "Method Argument"
                        ],
                        [
                            "G",
                            "Method Argument"
                        ],
                        [
                            "G",
                            "Method Argument"
                        ],
                        [
                            "G",
                            "Method Argument"
                        ],
                        [
                            "G",
                            "Method Argument"
                        ],
                        [
                            "G",
                            "Method Argument"
                        ],
                        [
                            "G",
                            "Method Argument"
                        ],
                        [
                            "G",
                            "Method Argument"
                        ],
                        [
                            "G",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "squeeze_183": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_239": {
                "n": {
                    "value": "nineq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "d.size()",
                            "Call"
                        ],
                        [
                            "nineq",
                            "Method Argument"
                        ],
                        [
                            "nineq",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "eye_291": {
                "n": {
                    "value": "nineq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "d.size()",
                            "Call"
                        ],
                        [
                            "nineq",
                            "Method Argument"
                        ],
                        [
                            "nineq",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_126": {
                "*size": {
                    "value": "nBatch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "d.size()",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "nineq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "d.size()",
                            "Call"
                        ],
                        [
                            "nineq",
                            "Method Argument"
                        ],
                        [
                            "nineq",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "eye_135": {
                "variable": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "nineq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "d.size()",
                            "Call"
                        ],
                        [
                            "nineq",
                            "Method Argument"
                        ],
                        [
                            "nineq",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "bmm_182": {
                "input": {
                    "value": "y.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": [
                        [
                            "A",
                            "Method Argument"
                        ],
                        [
                            "A",
                            "Method Argument"
                        ],
                        [
                            "A",
                            "Method Argument"
                        ],
                        [
                            "A",
                            "Method Argument"
                        ],
                        [
                            "A",
                            "Method Argument"
                        ],
                        [
                            "A",
                            "Method Argument"
                        ],
                        [
                            "A",
                            "Method Argument"
                        ],
                        [
                            "A",
                            "Method Argument"
                        ],
                        [
                            "A",
                            "Method Argument"
                        ],
                        [
                            "A",
                            "Method Argument"
                        ],
                        [
                            "A",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "squeeze_182": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_422": {
                "n": {
                    "value": "nineq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "d.size()",
                            "Call"
                        ],
                        [
                            "nineq",
                            "Method Argument"
                        ],
                        [
                            "nineq",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_423": {
                "*size": {
                    "value": "nBatch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "d.size()",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "neq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "S_LU[1].size(1) - nineq",
                            "BinOp"
                        ],
                        [
                            "neq",
                            "Method Argument"
                        ],
                        [
                            "neq",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "nineq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "d.size()",
                            "Call"
                        ],
                        [
                            "nineq",
                            "Method Argument"
                        ],
                        [
                            "nineq",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "eye_494": {
                "n": {
                    "value": "nineq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "d.size()",
                            "Call"
                        ],
                        [
                            "nineq",
                            "Method Argument"
                        ],
                        [
                            "nineq",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_495": {
                "*size": {
                    "value": "nBatch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "d.size()",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "neq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "S_LU[1].size(1) - nineq",
                            "BinOp"
                        ],
                        [
                            "neq",
                            "Method Argument"
                        ],
                        [
                            "neq",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "nineq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "d.size()",
                            "Call"
                        ],
                        [
                            "nineq",
                            "Method Argument"
                        ],
                        [
                            "nineq",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "eye_607": {
                "n": {
                    "value": "nineq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "d.size()",
                            "Call"
                        ],
                        [
                            "nineq",
                            "Method Argument"
                        ],
                        [
                            "nineq",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_608": {
                "*size": {
                    "value": "nBatch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "d.size()",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "neq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "S_LU[1].size(1) - nineq",
                            "BinOp"
                        ],
                        [
                            "neq",
                            "Method Argument"
                        ],
                        [
                            "neq",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "nineq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "d.size()",
                            "Call"
                        ],
                        [
                            "nineq",
                            "Method Argument"
                        ],
                        [
                            "nineq",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "eye_77": {
                "n": {
                    "value": "nineq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "d.size()",
                            "Call"
                        ],
                        [
                            "nineq",
                            "Method Argument"
                        ],
                        [
                            "nineq",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_78": {
                "*size": {
                    "value": "nBatch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "d.size()",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "neq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "S_LU[1].size(1) - nineq",
                            "BinOp"
                        ],
                        [
                            "neq",
                            "Method Argument"
                        ],
                        [
                            "neq",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "nineq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "d.size()",
                            "Call"
                        ],
                        [
                            "nineq",
                            "Method Argument"
                        ],
                        [
                            "nineq",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_132": {
                "*size": {
                    "value": "nBatch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "d.size()",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "nineq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "d.size()",
                            "Call"
                        ],
                        [
                            "nineq",
                            "Method Argument"
                        ],
                        [
                            "nineq",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_138": {
                "*size": {
                    "value": "nBatch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "d.size()",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "nineq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "d.size()",
                            "Call"
                        ],
                        [
                            "nineq",
                            "Method Argument"
                        ],
                        [
                            "nineq",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_164": {
                "*size": {
                    "value": "nBatch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "d.size()",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "nineq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "d.size()",
                            "Call"
                        ],
                        [
                            "nineq",
                            "Method Argument"
                        ],
                        [
                            "nineq",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "lcp_physics/lcp/solvers/pdipm.py": {
        "torch": {
            "zeros_250": {
                "variable": {
                    "value": "H_",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "nBatch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "d.size()",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "nz + nineq",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "nz + nineq",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "bmm_271": {
                "variable": {
                    "value": "S_",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "A_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([torch.cat([G, torch.eye(nineq).type_as(Q_tilde).repeat(nBatch, 1, 1)], 2), torch.cat([A, torch.zeros(nBatch, neq, nineq).type_as(Q_tilde)], 2)], 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([G, torch.eye(nineq).type_as(Q_tilde).repeat(nBatch, 1, 1)], 2)",
                            "Call"
                        ],
                        [
                            "A_",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "invH_A_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "A_.transpose(1, 2).btrisolve(*H_LU)",
                            "Call"
                        ],
                        [
                            "A_.transpose(1, 2).btrisolve(*H_LU)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_295": {
                "variable": {
                    "value": "H_",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "nBatch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "d.size()",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "nz + nineq",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "nz + nineq",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "unsqueeze_380": {
                "variable": {
                    "value": "S_LU_pivots",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_427": {
                "variable": {
                    "value": "T",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": [
                        [
                            "G_invQ_GT.clone()",
                            "Call"
                        ],
                        [
                            "R - G_invQ_AT.bmm(T)",
                            "BinOp"
                        ],
                        [
                            "R",
                            "Method Argument"
                        ],
                        [
                            "R",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "abs_91": {
                "variable": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(s * z).sum(1).squeeze() / nineq",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_92": {
                "variable": {
                    "value": "z_resid",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(x.unsqueeze(1), G.transpose(1, 2)).squeeze(1) + s - h - torch.bmm(z.unsqueeze(1), F.transpose(1, 2)).squeeze(1)",
                            "BinOp"
                        ],
                        [
                            "Q.new_zeros(batch_size, nineq)",
                            "Call"
                        ],
                        [
                            "rz",
                            "Method Argument"
                        ],
                        [
                            "rz",
                            "Method Argument"
                        ],
                        [
                            "rz",
                            "Method Argument"
                        ],
                        [
                            "rz",
                            "Method Argument"
                        ],
                        [
                            "rz",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_92": {
                "variable": {
                    "value": "z_resid",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "norm_95": {
                "variable": {
                    "value": "dual_resid",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(torch.bmm(y.unsqueeze(1), A).squeeze(1) if neq > 0 else 0.0) + torch.bmm(z.unsqueeze(1), G).squeeze(1) + torch.bmm(x.unsqueeze(1), Q.transpose(1, 2)).squeeze(1) + p",
                            "BinOp"
                        ],
                        [
                            "Q.new_zeros(batch_size, nz)",
                            "Call"
                        ],
                        [
                            "rx",
                            "Method Argument"
                        ],
                        [
                            "rx",
                            "Method Argument"
                        ],
                        [
                            "rx",
                            "Method Argument"
                        ],
                        [
                            "rx",
                            "Method Argument"
                        ],
                        [
                            "rx",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_95": {
                "variable": {
                    "value": "dual_resid",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "min_142": {
                "input": {
                    "value": "get_step(z, dz_aff)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_148": {
                "variable": {
                    "value": "t3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "t1 * t2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_148": {
                "variable": {
                    "value": "t3",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_149": {
                "variable": {
                    "value": "t4",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s * z",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_149": {
                "variable": {
                    "value": "t4",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "min_164": {
                "input": {
                    "value": "get_step(z, dz)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_256": {
                "tensors": {
                    "value": "[G, torch.eye(nineq).type_as(Q_tilde).repeat(nBatch, 1, 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_258": {
                "variable": {
                    "value": "g_",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[rx, rs]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_259": {
                "variable": {
                    "value": "h_",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[rz, ry]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_261": {
                "variable": {
                    "value": "A_",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[G, torch.eye(nineq).type_as(Q_tilde).repeat(nBatch, 1, 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_263": {
                "variable": {
                    "value": "g_",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[rx, rs]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_299": {
                "variable": {
                    "value": "g_",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[rx, rs]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_300": {
                "variable": {
                    "value": "h_",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[rz, ry]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_302": {
                "variable": {
                    "value": "g_",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[rx, rs]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_337": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[invQ_rx.unsqueeze(1).bmm(A.transpose(1, 2)).squeeze(1) - ry, invQ_rx.unsqueeze(1).bmm(G.transpose(1, 2)).squeeze(1) + rs / d - rz]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_384": {
                "variable": {
                    "value": "A_invQ_AT",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": [
                        [
                            "A",
                            "Method Argument"
                        ],
                        [
                            "A",
                            "Method Argument"
                        ],
                        [
                            "A",
                            "Method Argument"
                        ],
                        [
                            "A",
                            "Method Argument"
                        ],
                        [
                            "A",
                            "Method Argument"
                        ],
                        [
                            "A",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "invQ_AT",
                    "type": "variable",
                    "possible_values": [
                        [
                            "A.transpose(1, 2).btrisolve(*Q_LU)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_385": {
                "variable": {
                    "value": "G_invQ_AT",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "G",
                    "type": "variable",
                    "possible_values": [
                        [
                            "G",
                            "Method Argument"
                        ],
                        [
                            "G",
                            "Method Argument"
                        ],
                        [
                            "G",
                            "Method Argument"
                        ],
                        [
                            "G",
                            "Method Argument"
                        ],
                        [
                            "G",
                            "Method Argument"
                        ],
                        [
                            "G",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "invQ_AT",
                    "type": "variable",
                    "possible_values": [
                        [
                            "A.transpose(1, 2).btrisolve(*Q_LU)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_398": {
                "tensors": {
                    "value": "(S_LU_11, S_LU_12)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_422": {
                "variable": {
                    "value": "factor_kkt_eye",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "nineq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "d.size()",
                            "Call"
                        ],
                        [
                            "nineq",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "min_66": {
                "input": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "solve_kkt(Q_LU, d, G, A, S_LU, p, Q.new_zeros(batch_size, nineq), -h, -b if neq > 0 else None)",
                            "Call"
                        ],
                        [
                            "s + alpha_nineq * ds",
                            "BinOp"
                        ],
                        [
                            "v[:, i:i + nineq]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "min_72": {
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "solve_kkt(Q_LU, d, G, A, S_LU, p, Q.new_zeros(batch_size, nineq), -h, -b if neq > 0 else None)",
                            "Call"
                        ],
                        [
                            "z + alpha_nineq * dz",
                            "BinOp"
                        ],
                        [
                            "v[:, i:i + nineq]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "eye_225": {
                "n": {
                    "value": "neq + nineq",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "bmm_276": {
                "input": {
                    "value": "invH_g_.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "A_.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_276": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_310": {
                "input": {
                    "value": "A_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([torch.cat([G, torch.eye(nineq).type_as(Q_tilde).repeat(nBatch, 1, 1)], 2), torch.cat([A, torch.zeros(nBatch, neq, nineq).type_as(Q_tilde)], 2)], 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([G, torch.eye(nineq).type_as(Q_tilde).repeat(nBatch, 1, 1)], 2)",
                            "Call"
                        ],
                        [
                            "A_",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "invH_A_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "A_.transpose(1, 2).btrisolve(*H_LU)",
                            "Call"
                        ],
                        [
                            "A_.transpose(1, 2).btrisolve(*H_LU)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_312": {
                "input": {
                    "value": "invH_g_.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "A_.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_312": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_378": {
                "input": {
                    "value": "G",
                    "type": "variable",
                    "possible_values": [
                        [
                            "G",
                            "Method Argument"
                        ],
                        [
                            "G",
                            "Method Argument"
                        ],
                        [
                            "G",
                            "Method Argument"
                        ],
                        [
                            "G",
                            "Method Argument"
                        ],
                        [
                            "G",
                            "Method Argument"
                        ],
                        [
                            "G",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "G.transpose(1, 2).btrisolve(*Q_LU)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_88": {
                "input": {
                    "value": "z.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "F.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_88": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_93": {
                "input": {
                    "value": "ry",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(x.unsqueeze(1), A.transpose(1, 2)).squeeze(1) - b if neq > 0 else 0.0",
                            "IfExp"
                        ],
                        [
                            "Q.new_zeros(batch_size, neq)",
                            "Call"
                        ],
                        [
                            "ry",
                            "Method Argument"
                        ],
                        [
                            "ry",
                            "Method Argument"
                        ],
                        [
                            "ry",
                            "Method Argument"
                        ],
                        [
                            "ry",
                            "Method Argument"
                        ],
                        [
                            "ry",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_93": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_144": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ]
                    ]
                }
            },
            "eye_221": {
                "n": {
                    "value": "nz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "nz",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "eye_222": {
                "n": {
                    "value": "nineq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "d.size()",
                            "Call"
                        ],
                        [
                            "nineq",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "bmm_84": {
                "input": {
                    "value": "x.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "Q.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_84": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_89": {
                "input": {
                    "value": "x.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "A.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_89": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_257": {
                "tensors": {
                    "value": "[A, torch.zeros(nBatch, neq, nineq).type_as(Q_tilde)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_262": {
                "n": {
                    "value": "nineq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "d.size()",
                            "Call"
                        ],
                        [
                            "nineq",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_399": {
                "tensors": {
                    "value": "(S_LU_21, S_LU_22)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_83": {
                "input": {
                    "value": "z.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "G",
                    "type": "variable",
                    "possible_values": [
                        [
                            "G",
                            "Method Argument"
                        ],
                        [
                            "G",
                            "Method Argument"
                        ],
                        [
                            "G",
                            "Method Argument"
                        ],
                        [
                            "G",
                            "Method Argument"
                        ],
                        [
                            "G",
                            "Method Argument"
                        ],
                        [
                            "G",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "squeeze_83": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_87": {
                "input": {
                    "value": "x.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "G.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_87": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_82": {
                "input": {
                    "value": "y.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": [
                        [
                            "A",
                            "Method Argument"
                        ],
                        [
                            "A",
                            "Method Argument"
                        ],
                        [
                            "A",
                            "Method Argument"
                        ],
                        [
                            "A",
                            "Method Argument"
                        ],
                        [
                            "A",
                            "Method Argument"
                        ],
                        [
                            "A",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "squeeze_82": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_256": {
                "n": {
                    "value": "nineq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "d.size()",
                            "Call"
                        ],
                        [
                            "nineq",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_257": {
                "*size": {
                    "value": "nBatch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "d.size()",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "neq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "S_LU[1].size(1) - nineq",
                            "BinOp"
                        ],
                        [
                            "neq",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "nineq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "d.size()",
                            "Call"
                        ],
                        [
                            "nineq",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "lcp_physics/lcp/util.py": {
        "torch": {
            "zeros_43": {
                "variable": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "nBatch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "G.size()",
                            "Call"
                        ],
                        [
                            "d.size()",
                            "Call"
                        ],
                        [
                            "nBatch",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "sz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d.size()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "sz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d.size()",
                            "Call"
                        ]
                    ]
                }
            },
            "eye_44": {
                "variable": {
                    "value": "I",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "sz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d.size()",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_75": {
                "variable": {
                    "value": "I_U",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "sz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d.size()",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "sz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d.size()",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "LU_data.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_76": {
                "variable": {
                    "value": "zero",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "where_77": {
                "variable": {
                    "value": "U",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "I_U",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(sz, sz, device=LU_data.device, dtype=torch.uint8).triu_().expand_as(LU_data)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "LU_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "LU_data",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "zero",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(0.0).type_as(LU_data)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_78": {
                "variable": {
                    "value": "L",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "I_U",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(sz, sz, device=LU_data.device, dtype=torch.uint8).triu_().expand_as(LU_data)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "zero",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(0.0).type_as(LU_data)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "LU_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "LU_data",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "eye_84": {
                "variable": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "sz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d.size()",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "LU_data.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "LU_data.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_84": {
                "variable": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "lcp_physics/physics/bodies.py": {
        "torch": {
            "cat_28": {
                "variable": {
                    "value": "self.p",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[pos.new_zeros(1), pos]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_37": {
                "variable": {
                    "value": "self.v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[vel.new_zeros(1), vel]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "norm_185": {
                "variable": {
                    "value": "norm_cross",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cross_2d(v2, v1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eye_47": {
                "n": {
                    "value": "DIM",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Defaults.DIM",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cat_130": {
                "tensors": {
                    "value": "[self.pos, self.pos.new_zeros(1)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_198": {
                "tensors": {
                    "value": "[self.pos, self.pos.new_zeros(1)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_273": {
                "tensors": {
                    "value": "[self.dims + 2 * self.eps.item(), self.dims.new_ones(1)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_275": {
                "tensors": {
                    "value": "[self.pos, self.pos.new_zeros(1)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sum_270": {
                "input": {
                    "value": "self.dims ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dot_187": {
                "input": {
                    "value": "v1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.verts[i]",
                            "Subscript"
                        ],
                        [
                            "verts[i]",
                            "Subscript"
                        ],
                        [
                            "verts[i]",
                            "Subscript"
                        ],
                        [
                            "half_dims * half_dims.new_tensor([-1, 1])",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "v2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.verts[(i + 1) % len(self.verts)]",
                            "Subscript"
                        ],
                        [
                            "verts[(i + 1) % len(verts)]",
                            "Subscript"
                        ],
                        [
                            "verts[(i + 1) % len(verts)]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "lcp_physics/physics/constraints.py": {
        "torch": {
            "cat_30": {
                "tensors": {
                    "value": "[-self.pos1[Y:Y + 1], self.pos1[X:X + 1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_71": {
                "tensors": {
                    "value": "[-self.pos1[Y:Y + 1], self.pos1[X:X + 1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_73": {
                "variable": {
                    "value": "J1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[J1, J1.new_tensor([1, 0, 0]).unsqueeze(0)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_74": {
                "tensors": {
                    "value": "[self.pos2[Y:Y + 1], -self.pos2[X:X + 1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_76": {
                "variable": {
                    "value": "J2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[J2, J2.new_tensor([-1, 0, 0]).unsqueeze(0)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_188": {
                "variable": {
                    "value": "self.eye",
                    "type": "Attribute",
                    "possible_values": []
                },
                "n": {
                    "value": "self.num_constraints",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_34": {
                "tensors": {
                    "value": "[self.pos2[Y:Y + 1], -self.pos2[X:X + 1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "unsqueeze_30": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_31": {
                "n": {
                    "value": "DIM",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Defaults.DIM",
                            "Attribute"
                        ]
                    ]
                }
            },
            "unsqueeze_71": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_72": {
                "n": {
                    "value": "DIM",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Defaults.DIM",
                            "Attribute"
                        ]
                    ]
                }
            },
            "unsqueeze_74": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_34": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_75": {
                "n": {
                    "value": "DIM",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Defaults.DIM",
                            "Attribute"
                        ]
                    ]
                }
            },
            "eye_35": {
                "n": {
                    "value": "DIM",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Defaults.DIM",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "lcp_physics/physics/contacts.py": {
        "torch": {
            "tensor_223": {
                "variable": {
                    "value": "best_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "-10000000000.0",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "norm_336": {
                "variable": {
                    "value": "diff_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "verts[1] - verts[0]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_343": {
                "variable": {
                    "value": "M",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.cat([verts[0], verts[0].new_ones(1)]).unsqueeze(1), torch.cat([verts[1], verts[1].new_ones(1)]).unsqueeze(1), torch.cat([verts[2], verts[2].new_ones(1)]).unsqueeze(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "inverse_348": {
                "variable": {
                    "value": "invM",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "M",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([torch.cat([verts[0], verts[0].new_ones(1)]).unsqueeze(1), torch.cat([verts[1], verts[1].new_ones(1)]).unsqueeze(1), torch.cat([verts[2], verts[2].new_ones(1)]).unsqueeze(1)], dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_349": {
                "variable": {
                    "value": "uvw",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "invM",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.inverse(M)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.cat([point, point.new_ones(1)]).unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_117": {
                "variable": {
                    "value": "best_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "-10000000000.0",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "dot_338": {
                "input": {
                    "value": "verts[1] - point",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "normalized_diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "diff / diff_norm",
                            "BinOp"
                        ]
                    ]
                }
            },
            "dot_339": {
                "input": {
                    "value": "point - verts[0]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "normalized_diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "diff / diff_norm",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_349": {
                "tensors": {
                    "value": "[point, point.new_ones(1)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "unsqueeze_349": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_110": {
                "input": {
                    "value": "closest - b1.pos",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_114": {
                "input": {
                    "value": "best_pt1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "closest - b1.pos",
                            "BinOp"
                        ],
                        [
                            "best_pt2",
                            "variable"
                        ],
                        [
                            "best_pt2 + b2.pos - b1.pos",
                            "BinOp"
                        ],
                        [
                            "support_point + normal * -dist",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_344": {
                "tensors": {
                    "value": "[verts[0], verts[0].new_ones(1)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "unsqueeze_344": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_345": {
                "tensors": {
                    "value": "[verts[1], verts[1].new_ones(1)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "unsqueeze_345": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_346": {
                "tensors": {
                    "value": "[verts[2], verts[2].new_ones(1)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "unsqueeze_346": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "lcp_physics/physics/engines.py": {
        "torch": {
            "matmul_87": {
                "variable": {
                    "value": "ge",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Je",
                    "type": "variable",
                    "possible_values": [
                        [
                            "world.Je()",
                            "Call"
                        ],
                        [
                            "Je.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "torch.tensor([])",
                            "Call"
                        ],
                        [
                            "world.Je()",
                            "Call"
                        ],
                        [
                            "Je.unsqueeze(0)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(Jc, world.get_v()) * world.restitutions()",
                            "BinOp"
                        ],
                        [
                            "v.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "world.get_v()",
                            "Call"
                        ],
                        [
                            "gc",
                            "variable"
                        ],
                        [
                            "v.unsqueeze(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_92": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[Je.new_zeros(Je.size(1)), ge]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_34": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[u, u.new_zeros(neq)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_49": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.inverse(P)",
                            "Call"
                        ],
                        [
                            "self.cached_inverse",
                            "Attribute"
                        ],
                        [
                            "torch.inverse(P)",
                            "Call"
                        ],
                        [
                            "self.cached_inverse",
                            "Attribute"
                        ]
                    ]
                },
                "other": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(world.M(), world.get_v()) + dt * f",
                            "BinOp"
                        ],
                        [
                            "torch.cat([u, u.new_zeros(neq)])",
                            "Call"
                        ],
                        [
                            "u[:world.M().size(0)].unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "torch.cat([Je.new_zeros(Je.size(1)), ge])",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_67": {
                "variable": {
                    "value": "G",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[Jc, Jf, Jf.new_zeros(Jf.size(0), mu.size(1), Jf.size(2))]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_74": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[v, v.new_zeros(v.size(0), Jf.size(1) + mu.size(1))]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_104": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.inverse(P)",
                            "Call"
                        ],
                        [
                            "self.cached_inverse",
                            "Attribute"
                        ],
                        [
                            "torch.inverse(P)",
                            "Call"
                        ],
                        [
                            "self.cached_inverse",
                            "Attribute"
                        ]
                    ]
                },
                "other": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(world.M(), world.get_v()) + dt * f",
                            "BinOp"
                        ],
                        [
                            "torch.cat([u, u.new_zeros(neq)])",
                            "Call"
                        ],
                        [
                            "u[:world.M().size(0)].unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "torch.cat([Je.new_zeros(Je.size(1)), ge])",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_32": {
                "input": {
                    "value": "world.M()",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "world.get_v()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_38": {
                "tensors": {
                    "value": "[world.M(), -Je.t()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "inverse_44": {
                "variable": {
                    "value": "inv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([torch.cat([world.M(), -Je.t()], dim=1), torch.cat([Je, Je.new_zeros(neq, neq)], dim=1)])",
                            "Call"
                        ],
                        [
                            "world.M()",
                            "Call"
                        ],
                        [
                            "torch.cat([torch.cat([M, -Je.t()], dim=1), torch.cat([Je, Je.new_zeros(neq, neq)], dim=1)])",
                            "Call"
                        ],
                        [
                            "M",
                            "variable"
                        ]
                    ]
                }
            },
            "tensor_59": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_60": {
                "variable": {
                    "value": "Je",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_96": {
                "tensors": {
                    "value": "[M, -Je.t()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "inverse_101": {
                "variable": {
                    "value": "inv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([torch.cat([world.M(), -Je.t()], dim=1), torch.cat([Je, Je.new_zeros(neq, neq)], dim=1)])",
                            "Call"
                        ],
                        [
                            "world.M()",
                            "Call"
                        ],
                        [
                            "torch.cat([torch.cat([M, -Je.t()], dim=1), torch.cat([Je, Je.new_zeros(neq, neq)], dim=1)])",
                            "Call"
                        ],
                        [
                            "M",
                            "variable"
                        ]
                    ]
                }
            },
            "matmul_53": {
                "input": {
                    "value": "Jc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "world.Jc()",
                            "Call"
                        ],
                        [
                            "Jc.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "world.Jc()",
                            "Call"
                        ],
                        [
                            "Jc.unsqueeze(0)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "world.get_v()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_90": {
                "input": {
                    "value": "Jc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "world.Jc()",
                            "Call"
                        ],
                        [
                            "Jc.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "world.Jc()",
                            "Call"
                        ],
                        [
                            "Jc.unsqueeze(0)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(Jc, world.get_v()) * world.restitutions()",
                            "BinOp"
                        ],
                        [
                            "v.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "world.get_v()",
                            "Call"
                        ],
                        [
                            "gc",
                            "variable"
                        ],
                        [
                            "v.unsqueeze(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_39": {
                "tensors": {
                    "value": "[Je, Je.new_zeros(neq, neq)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_97": {
                "tensors": {
                    "value": "[Je, Je.new_zeros(neq, neq)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "lcp_physics/physics/utils.py": {
        "torch": {
            "device_35": {
                "variable": {
                    "value": "DEVICE",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "atan2_79": {
                "variable": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cart_vec[Indices.Y]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "cart_vec[Indices.X]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "stack_102": {
                "tensors": {
                    "value": "[v[1], -v[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_88": {
                "tensors": {
                    "value": "[torch.cos(theta).unsqueeze(0), torch.sin(theta).unsqueeze(0)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_88": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sin_108": {
                "input": {
                    "value": "ang",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ang",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cos_108": {
                "input": {
                    "value": "ang",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ang",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_123": {
                "data": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "Defaults.DTYPE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "Defaults.DEVICE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cos_88": {
                "input": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.atan2(cart_vec[Indices.Y], cart_vec[Indices.X])",
                            "Call"
                        ],
                        [
                            "theta + 2 * math.pi",
                            "BinOp"
                        ],
                        [
                            "theta",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "unsqueeze_88": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sin_89": {
                "input": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.atan2(cart_vec[Indices.Y], cart_vec[Indices.X])",
                            "Call"
                        ],
                        [
                            "theta + 2 * math.pi",
                            "BinOp"
                        ],
                        [
                            "theta",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "unsqueeze_89": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "lcp_physics/physics/world.py": {
        "torch": {
            "cat_84": {
                "variable": {
                    "value": "start_p",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[b.p for b in self.bodies]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_137": {
                "tensors": {
                    "value": "[b.apply_forces(t) for b in self.bodies]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_178": {
                "variable": {
                    "value": "J1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[cross_2d(c[1], c[0]).reshape(1, 1), c[0].unsqueeze(0)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_195": {
                "variable": {
                    "value": "J1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.cat([cross_2d(c[1], dir1).reshape(1, 1), dir1.unsqueeze(0)], dim=1), torch.cat([cross_2d(c[1], dir2).reshape(1, 1), dir2.unsqueeze(0)], dim=1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_201": {
                "variable": {
                    "value": "J2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.cat([cross_2d(c[2], dir1).reshape(1, 1), dir1.unsqueeze(0)], dim=1), torch.cat([cross_2d(c[2], dir2).reshape(1, 1), dir2.unsqueeze(0)], dim=1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "diag_224": {
                "input": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mu",
                            "Call"
                        ],
                        [
                            "self._M.new_zeros(len(self.contacts))",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_63": {
                "tensors": {
                    "value": "[b.v for b in bodies]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_180": {
                "tensors": {
                    "value": "[cross_2d(c[2], c[0]).reshape(1, 1), c[0].unsqueeze(0)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_196": {
                "tensors": {
                    "value": "[cross_2d(c[1], dir1).reshape(1, 1), dir1.unsqueeze(0)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_198": {
                "tensors": {
                    "value": "[cross_2d(c[1], dir2).reshape(1, 1), dir2.unsqueeze(0)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_202": {
                "tensors": {
                    "value": "[cross_2d(c[2], dir1).reshape(1, 1), dir1.unsqueeze(0)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_204": {
                "tensors": {
                    "value": "[cross_2d(c[2], dir2).reshape(1, 1), dir2.unsqueeze(0)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_bodies.py": {
        "torch": {
            "tensor_32": {
                "data": {
                    "value": "[0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "DTYPE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Defaults.DTYPE",
                            "Attribute"
                        ]
                    ]
                }
            },
            "tensor_33": {
                "data": {
                    "value": "[1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "DTYPE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Defaults.DTYPE",
                            "Attribute"
                        ]
                    ]
                }
            },
            "tensor_49": {
                "data": {
                    "value": "[0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "DTYPE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Defaults.DTYPE",
                            "Attribute"
                        ]
                    ]
                }
            },
            "tensor_50": {
                "data": {
                    "value": "[1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "DTYPE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Defaults.DTYPE",
                            "Attribute"
                        ]
                    ]
                }
            },
            "tensor_34": {
                "data": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "DTYPE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Defaults.DTYPE",
                            "Attribute"
                        ]
                    ]
                }
            },
            "tensor_51": {
                "data": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "DTYPE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Defaults.DTYPE",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    }
}