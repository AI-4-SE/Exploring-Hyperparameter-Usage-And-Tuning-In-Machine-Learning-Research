{
    "datasets/cifar100.py": {
        "torch": {
            "cat_108": {
                "variable": {
                    "value": "shot",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "shot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(shot, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_109": {
                "variable": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(query, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_56": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.norm_params['mean']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_57": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.norm_params['std']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "arange_110": {
                "start": {
                    "value": "self.n_way",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_105": {
                "tensors": {
                    "value": "c_shot",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stack_106": {
                "tensors": {
                    "value": "c_query",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "datasets/cub200.py": {
        "torch": {
            "cat_112": {
                "variable": {
                    "value": "shot",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "shot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(shot, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_113": {
                "variable": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(query, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_54": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.norm_params['mean']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_55": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.norm_params['std']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "arange_114": {
                "start": {
                    "value": "self.n_way",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_109": {
                "tensors": {
                    "value": "c_shot",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stack_110": {
                "tensors": {
                    "value": "c_query",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "datasets/datasets.py": {
        "torch": {
            "stack_31": {
                "variable": {
                    "value": "shot",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "shot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(shot)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_32": {
                "variable": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(query)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_33": {
                "variable": {
                    "value": "shot_label",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "shot_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(shot_label)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_34": {
                "variable": {
                    "value": "query_label",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "query_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(query_label)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "datasets/inatural.py": {
        "torch": {
            "cat_112": {
                "variable": {
                    "value": "shot",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "shot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(shot, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_113": {
                "variable": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(query, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_53": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.norm_params['mean']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_54": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.norm_params['std']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "arange_114": {
                "start": {
                    "value": "self.n_way",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_109": {
                "tensors": {
                    "value": "c_shot",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stack_110": {
                "tensors": {
                    "value": "c_query",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "datasets/mini_imagenet.py": {
        "torch": {
            "cat_111": {
                "variable": {
                    "value": "shot",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "shot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(shot, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_112": {
                "variable": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(query, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_58": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.norm_params['mean']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_59": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.norm_params['std']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "arange_113": {
                "start": {
                    "value": "self.n_way",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_108": {
                "tensors": {
                    "value": "c_shot",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stack_109": {
                "tensors": {
                    "value": "c_query",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "datasets/tiered_imagenet.py": {
        "torch": {
            "cat_112": {
                "variable": {
                    "value": "shot",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "shot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(shot, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_113": {
                "variable": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(query, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_59": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.norm_params['mean']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_60": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.norm_params['std']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "arange_114": {
                "start": {
                    "value": "self.n_way",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_109": {
                "tensors": {
                    "value": "c_shot",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stack_110": {
                "tensors": {
                    "value": "c_query",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "models/classifiers/classifiers.py": {
        "torch": {
            "is_available_20": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "models/classifiers/logistic.py": {
        "torch": {
            "Parameter_22": {
                "variable": {
                    "value": "self.temp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(temp)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_22": {
                "data": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "models/encoders/convnet4.py": {
        "torch": {
            "ReLU_20": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_21": {
                "variable": {
                    "value": "self.pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "models/encoders/encoders.py": {
        "torch": {
            "is_available_17": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "models/encoders/resnet12.py": {
        "torch": {
            "LeakyReLU_38": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_39": {
                "variable": {
                    "value": "self.pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_79": {
                "variable": {
                    "value": "self.pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "models/encoders/resnet18.py": {
        "torch": {
            "ReLU_38": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_74": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_80": {
                "variable": {
                    "value": "self.pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "models/maml.py": {
        "torch": {
            "stack_232": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.classifier(feat, get_child_dict(params, 'classifier'))",
                            "Call"
                        ],
                        [
                            "self._inner_forward(x, params, episode)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(logits)",
                            "Call"
                        ]
                    ]
                }
            },
            "cross_entropy_97": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.classifier(feat, get_child_dict(params, 'classifier'))",
                            "Call"
                        ],
                        [
                            "self._inner_forward(x, params, episode)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(logits)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "grad_99": {
                "variable": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.cross_entropy(logits, y)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "params.values()",
                    "type": "Call",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "not detach and (not inner_args['first_order'])",
                    "type": "BoolOp",
                    "possible_values": []
                },
                "only_inputs": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "allow_unused": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "enable_grad_94": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_like_150": {
                "variable": {
                    "value": "mom_buffer[name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "param",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "is_grad_enabled_169": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_grad_enabled_226": {
                "mode": {
                    "value": "meta_train",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "as_tensor_180": {
                "data": {
                    "value": "episode",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "models/modules.py": {
        "torch": {
            "conv2d_75": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "super(Conv2d, self).forward(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, weight, bias, self.stride, self.padding)",
                            "Call"
                        ],
                        [
                            "super(Linear, self).forward(x)",
                            "Call"
                        ],
                        [
                            "F.linear(x, weight, bias)",
                            "Call"
                        ],
                        [
                            "(x - mean) / (var + self.eps) ** 0.5",
                            "BinOp"
                        ],
                        [
                            "weight * (x - mean) / (var + self.eps) ** 0.5 + bias",
                            "BinOp"
                        ],
                        [
                            "module(x, None, episode)",
                            "Call"
                        ],
                        [
                            "module(x, get_child_dict(params, name), episode)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "weight.view(1, -1, 1, 1)",
                            "Call"
                        ],
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bias",
                            "Attribute"
                        ],
                        [
                            "self.bias",
                            "Attribute"
                        ],
                        [
                            "bias.view(1, -1, 1, 1)",
                            "Call"
                        ],
                        [
                            "self.bias",
                            "Attribute"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linear_92": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "super(Conv2d, self).forward(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, weight, bias, self.stride, self.padding)",
                            "Call"
                        ],
                        [
                            "super(Linear, self).forward(x)",
                            "Call"
                        ],
                        [
                            "F.linear(x, weight, bias)",
                            "Call"
                        ],
                        [
                            "(x - mean) / (var + self.eps) ** 0.5",
                            "BinOp"
                        ],
                        [
                            "weight * (x - mean) / (var + self.eps) ** 0.5 + bias",
                            "BinOp"
                        ],
                        [
                            "module(x, None, episode)",
                            "Call"
                        ],
                        [
                            "module(x, get_child_dict(params, name), episode)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "weight.view(1, -1, 1, 1)",
                            "Call"
                        ],
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bias",
                            "Attribute"
                        ],
                        [
                            "self.bias",
                            "Attribute"
                        ],
                        [
                            "bias.view(1, -1, 1, 1)",
                            "Call"
                        ],
                        [
                            "self.bias",
                            "Attribute"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Parameter_129": {
                "variable": {
                    "value": "self.alpha_scale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_130": {
                "variable": {
                    "value": "self.alpha_offset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "batch_norm_204": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "super(Conv2d, self).forward(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, weight, bias, self.stride, self.padding)",
                            "Call"
                        ],
                        [
                            "super(Linear, self).forward(x)",
                            "Call"
                        ],
                        [
                            "F.linear(x, weight, bias)",
                            "Call"
                        ],
                        [
                            "(x - mean) / (var + self.eps) ** 0.5",
                            "BinOp"
                        ],
                        [
                            "weight * (x - mean) / (var + self.eps) ** 0.5 + bias",
                            "BinOp"
                        ],
                        [
                            "module(x, None, episode)",
                            "Call"
                        ],
                        [
                            "module(x, get_child_dict(params, name), episode)",
                            "Call"
                        ]
                    ]
                },
                "running_mean": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "running_var": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "weight.view(1, -1, 1, 1)",
                            "Call"
                        ],
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bias",
                            "Attribute"
                        ],
                        [
                            "self.bias",
                            "Attribute"
                        ],
                        [
                            "bias.view(1, -1, 1, 1)",
                            "Call"
                        ],
                        [
                            "self.bias",
                            "Attribute"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "training": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "eps": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "batch_norm_182": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "super(Conv2d, self).forward(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, weight, bias, self.stride, self.padding)",
                            "Call"
                        ],
                        [
                            "super(Linear, self).forward(x)",
                            "Call"
                        ],
                        [
                            "F.linear(x, weight, bias)",
                            "Call"
                        ],
                        [
                            "(x - mean) / (var + self.eps) ** 0.5",
                            "BinOp"
                        ],
                        [
                            "weight * (x - mean) / (var + self.eps) ** 0.5 + bias",
                            "BinOp"
                        ],
                        [
                            "module(x, None, episode)",
                            "Call"
                        ],
                        [
                            "module(x, get_child_dict(params, name), episode)",
                            "Call"
                        ]
                    ]
                },
                "running_mean": {
                    "value": "running_mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "getattr(self, 'running_mean_%d' % episode)",
                            "Call"
                        ],
                        [
                            "running_mean.view(1, -1, 1, 1)",
                            "Call"
                        ]
                    ]
                },
                "running_var": {
                    "value": "running_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "getattr(self, 'running_var_%d' % episode)",
                            "Call"
                        ],
                        [
                            "running_var.view(1, -1, 1, 1)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "weight.view(1, -1, 1, 1)",
                            "Call"
                        ],
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bias",
                            "Attribute"
                        ],
                        [
                            "self.bias",
                            "Attribute"
                        ],
                        [
                            "bias.view(1, -1, 1, 1)",
                            "Call"
                        ],
                        [
                            "self.bias",
                            "Attribute"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "training": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "momentum": {
                    "value": "exp_avg_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Constant"
                        ],
                        [
                            "1.0 / float(num_batches_tracked)",
                            "BinOp"
                        ],
                        [
                            "self.momentum",
                            "Attribute"
                        ]
                    ]
                },
                "eps": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_187": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.alpha_scale * self.batch_size + self.alpha_offset",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_193": {
                "variable": {
                    "value": "sample_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "super(Conv2d, self).forward(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, weight, bias, self.stride, self.padding)",
                            "Call"
                        ],
                        [
                            "super(Linear, self).forward(x)",
                            "Call"
                        ],
                        [
                            "F.linear(x, weight, bias)",
                            "Call"
                        ],
                        [
                            "(x - mean) / (var + self.eps) ** 0.5",
                            "BinOp"
                        ],
                        [
                            "weight * (x - mean) / (var + self.eps) ** 0.5 + bias",
                            "BinOp"
                        ],
                        [
                            "module(x, None, episode)",
                            "Call"
                        ],
                        [
                            "module(x, get_child_dict(params, name), episode)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "(2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "var_194": {
                "variable": {
                    "value": "sample_var",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "super(Conv2d, self).forward(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, weight, bias, self.stride, self.padding)",
                            "Call"
                        ],
                        [
                            "super(Linear, self).forward(x)",
                            "Call"
                        ],
                        [
                            "F.linear(x, weight, bias)",
                            "Call"
                        ],
                        [
                            "(x - mean) / (var + self.eps) ** 0.5",
                            "BinOp"
                        ],
                        [
                            "weight * (x - mean) / (var + self.eps) ** 0.5 + bias",
                            "BinOp"
                        ],
                        [
                            "module(x, None, episode)",
                            "Call"
                        ],
                        [
                            "module(x, get_child_dict(params, name), episode)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "(2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "unbiased": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_128": {
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_129": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_130": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "batch_norm_201": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "super(Conv2d, self).forward(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, weight, bias, self.stride, self.padding)",
                            "Call"
                        ],
                        [
                            "super(Linear, self).forward(x)",
                            "Call"
                        ],
                        [
                            "F.linear(x, weight, bias)",
                            "Call"
                        ],
                        [
                            "(x - mean) / (var + self.eps) ** 0.5",
                            "BinOp"
                        ],
                        [
                            "weight * (x - mean) / (var + self.eps) ** 0.5 + bias",
                            "BinOp"
                        ],
                        [
                            "module(x, None, episode)",
                            "Call"
                        ],
                        [
                            "module(x, get_child_dict(params, name), episode)",
                            "Call"
                        ]
                    ]
                },
                "running_mean": {
                    "value": "running_mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "getattr(self, 'running_mean_%d' % episode)",
                            "Call"
                        ],
                        [
                            "running_mean.view(1, -1, 1, 1)",
                            "Call"
                        ]
                    ]
                },
                "running_var": {
                    "value": "running_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "getattr(self, 'running_var_%d' % episode)",
                            "Call"
                        ],
                        [
                            "running_var.view(1, -1, 1, 1)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "weight.view(1, -1, 1, 1)",
                            "Call"
                        ],
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bias",
                            "Attribute"
                        ],
                        [
                            "self.bias",
                            "Attribute"
                        ],
                        [
                            "bias.view(1, -1, 1, 1)",
                            "Call"
                        ],
                        [
                            "self.bias",
                            "Attribute"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "training": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "eps": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_122": {
                "*size": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_124": {
                "*size": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_126": {
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "test.py": {
        "torch": {
            "DataLoader_29": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.make(config['dataset'], **config['test'])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "config['test']['n_episode']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "datasets.collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_34": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "config['load']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "manual_seed_19": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_20": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataParallel_42": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "models.load(ckpt, load_clf=not inner_args['reset_classifier'])",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_68": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(x_shot, x_query, y_shot, inner_args, meta_train=False)",
                            "Call"
                        ],
                        [
                            "logits.view(-1, config['test']['n_way'])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "DataLoader_50": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.make(config['dataset'], **config['train'])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "config['train']['n_episode']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "datasets.collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "manual_seed_24": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_25": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_61": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.make(config['dataset'], **config['val'])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "config['val']['n_episode']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "datasets.collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_69": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "config['load']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "DataParallel_94": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "models.load(ckpt, load_clf=not inner_args['reset_classifier'])",
                            "Call"
                        ],
                        [
                            "models.make(config['encoder'], config['encoder_args'], config['classifier'], config['classifier_args'])",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_134": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(x_shot, x_query, y_shot, inner_args, meta_train=True)",
                            "Call"
                        ],
                        [
                            "logits.flatten(0, 1)",
                            "Call"
                        ],
                        [
                            "model(x_shot, x_query, y_shot, inner_args, meta_train=False)",
                            "Call"
                        ],
                        [
                            "logits.flatten(0, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cross_entropy_136": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(x_shot, x_query, y_shot, inner_args, meta_train=True)",
                            "Call"
                        ],
                        [
                            "logits.flatten(0, 1)",
                            "Call"
                        ],
                        [
                            "model(x_shot, x_query, y_shot, inner_args, meta_train=False)",
                            "Call"
                        ],
                        [
                            "logits.flatten(0, 1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_query.flatten()",
                            "Call"
                        ],
                        [
                            "y_query.flatten()",
                            "Call"
                        ]
                    ]
                }
            },
            "save_231": {
                "obj": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(config['load'])",
                            "Call"
                        ],
                        [
                            "{'file': __file__, 'config': config, 'encoder': config['encoder'], 'encoder_args': config['encoder_args'], 'encoder_state_dict': model_.encoder.state_dict(), 'classifier': config['classifier'], 'classifier_args': config['classifier_args'], 'classifier_state_dict': model_.classifier.state_dict(), 'training': training}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(ckpt_path, 'epoch-last.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_232": {
                "obj": {
                    "value": "trlog",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dict()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(ckpt_path, 'trlog.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "argmax_166": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(x_shot, x_query, y_shot, inner_args, meta_train=True)",
                            "Call"
                        ],
                        [
                            "logits.flatten(0, 1)",
                            "Call"
                        ],
                        [
                            "model(x_shot, x_query, y_shot, inner_args, meta_train=False)",
                            "Call"
                        ],
                        [
                            "logits.flatten(0, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cross_entropy_168": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(x_shot, x_query, y_shot, inner_args, meta_train=True)",
                            "Call"
                        ],
                        [
                            "logits.flatten(0, 1)",
                            "Call"
                        ],
                        [
                            "model(x_shot, x_query, y_shot, inner_args, meta_train=False)",
                            "Call"
                        ],
                        [
                            "logits.flatten(0, 1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_query.flatten()",
                            "Call"
                        ],
                        [
                            "y_query.flatten()",
                            "Call"
                        ]
                    ]
                }
            },
            "save_236": {
                "obj": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(config['load'])",
                            "Call"
                        ],
                        [
                            "{'file': __file__, 'config': config, 'encoder': config['encoder'], 'encoder_args': config['encoder_args'], 'encoder_state_dict': model_.encoder.state_dict(), 'classifier': config['classifier'], 'classifier_args': config['classifier_args'], 'classifier_state_dict': model_.classifier.state_dict(), 'training': training}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(ckpt_path, 'max-va.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_grad_value__143": {
                "parameters": {
                    "value": "param",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optimizer.param_groups[0]['params']",
                            "Subscript"
                        ]
                    ]
                },
                "clip_value": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "utils/optimizers.py": {
        "torch": {
            "SGD_24": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "RMSprop_26": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "MultiStepLR_34": {
                "variable": {
                    "value": "lr_scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SGD(params, lr, momentum=0.9, weight_decay=weight_decay)",
                            "Call"
                        ],
                        [
                            "RMSprop(params, lr, weight_decay=weight_decay)",
                            "Call"
                        ],
                        [
                            "Adam(params, lr, weight_decay=weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "milestones",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "gamma": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Adam_28": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "CosineAnnealingLR_36": {
                "variable": {
                    "value": "lr_scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SGD(params, lr, momentum=0.9, weight_decay=weight_decay)",
                            "Call"
                        ],
                        [
                            "RMSprop(params, lr, weight_decay=weight_decay)",
                            "Call"
                        ],
                        [
                            "Adam(params, lr, weight_decay=weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "T_max": {
                    "value": "milestones[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    }
}