{
    "pts/dataset/loader.py": {
        "torch": {}
    },
    "pts/distributions/implicit_quantile.py": {
        "torch": {
            "repeat_interleave_35": {
                "variable": {
                    "value": "input_data",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.input_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "repeats": {
                    "value": "num_parallel_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "sample_shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_42": {
                "variable": {
                    "value": "taus",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(batch_size, forecast_length)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_data.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "no_grad_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "abs_55": {
                "input": {
                    "value": "(quantile_forecast - target) * ((target <= quantile_forecast).float() - tau)",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "pts/distributions/piecewise_linear.py": {
        "torch": {
            "cat_49": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(m_0, b)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "rand_like_61": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.gamma.expand(shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_58": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "le_98": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "quantiles_at_knots",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.quantile_internal(knot_positions, dim=-2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "x.unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_105": {
                "variable": {
                    "value": "slope_l0_nz",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "slope_l0 == 0.0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "torch.ones_like(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "slope_l0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(b * mask).sum(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_107": {
                "variable": {
                    "value": "a_tilde",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "slope_l0 == 0.0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "torch.zeros_like(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "(x - gamma + (b * knot_positions * mask).sum(-1)) / slope_l0_nz",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_120": {
                "variable": {
                    "value": "max_a_tilde_knots",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a_tilde.unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pow_122": {
                "variable": {
                    "value": "knots_cubed",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "knot_positions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cumsum(knot_spacings, dim=-1) - knot_spacings",
                            "BinOp"
                        ],
                        [
                            "self.knot_positions.unsqueeze(dim)",
                            "Call"
                        ],
                        [
                            "self.knot_positions",
                            "Attribute"
                        ],
                        [
                            "self.knot_positions",
                            "Attribute"
                        ],
                        [
                            "self.knot_positions",
                            "Attribute"
                        ]
                    ]
                },
                "exponent": {
                    "value": "3.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clamp_113": {
                "input": {
                    "value": "a_tilde",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.where(slope_l0 == 0.0, torch.zeros_like(x), (x - gamma + (b * knot_positions * mask).sum(-1)) / slope_l0_nz)",
                            "Call"
                        ],
                        [
                            "self.cdf(x)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cumsum_54": {
                "input": {
                    "value": "knot_spacings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "knot_spacings",
                            "Method Argument"
                        ],
                        [
                            "knot_spacings",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_like_105": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "transform.inv(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_109": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "transform.inv(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "square_126": {
                "input": {
                    "value": "max_a_tilde_knots",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(a_tilde.unsqueeze(-1), knot_positions)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_83": {
                "input": {
                    "value": "x_minus_knots",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.unsqueeze(-1) - knot_positions",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "pts/distributions/zero_inflated.py": {
        "torch": {
            "where_47": {
                "variable": {
                    "value": "log_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "value == 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "(gate + log_prob.exp()).log()",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "log_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "log_prob",
                            "Call"
                        ],
                        [
                            "(-gate).log1p() + self.base_dist.log_prob(value)",
                            "BinOp"
                        ],
                        [
                            "torch.where(value == 0, (gate + log_prob.exp()).log(), log_prob)",
                            "Call"
                        ]
                    ]
                }
            },
            "Poisson_90": {
                "variable": {
                    "value": "base_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "rate": {
                    "value": "rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rate",
                            "Call"
                        ],
                        [
                            "rate",
                            "Method Argument"
                        ]
                    ]
                },
                "validate_args": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "NegativeBinomial_120": {
                "variable": {
                    "value": "base_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "total_count": {
                    "value": "total_count",
                    "type": "variable",
                    "possible_values": [
                        [
                            "total_count",
                            "Call"
                        ],
                        [
                            "total_count",
                            "Method Argument"
                        ]
                    ]
                },
                "probs": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "probs",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "validate_args": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "bernoulli_53": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.gate.expand(shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_55": {
                "variable": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bernoulli(self.gate.expand(shape)).bool()",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "samples.new_zeros(())",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.base_dist.expand(shape).sample()",
                            "Call"
                        ],
                        [
                            "torch.where(mask, samples.new_zeros(()), samples)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_52": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pts/model/causal_deepar/causal_deepar_estimator.py": {
        "torch": {}
    },
    "pts/model/causal_deepar/causal_deepar_network.py": {
        "torch": {
            "cat_195": {
                "variable": {
                    "value": "static_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(embedded_cat, feat_static_real, scale.log() if len(self.target_shape) == 0 else scale.squeeze(1).log(), control_scale.log() if len(self.target_shape) == 0 else control_scale.squeeze(1).log())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_227": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(input_lags, input_control_lags, time_feat, repeated_static_feat)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_269": {
                "variable": {
                    "value": "control",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(past_control[:, self.history_length - self.context_length:, ...], future_control)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_315": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(past_target[:, self.history_length - self.context_length:, ...], future_target)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_323": {
                "variable": {
                    "value": "control",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(past_control[:, self.history_length - self.context_length:, ...], future_control)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_335": {
                "variable": {
                    "value": "observed_values",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(past_observed_values[:, self.history_length - self.context_length:, ...], future_observed_values)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_508": {
                "variable": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "future_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_123": {
                "tensors": {
                    "value": "lagged_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_151": {
                "variable": {
                    "value": "time_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(past_time_feat[:, self.history_length - self.context_length:, ...], future_time_feat)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_158": {
                "variable": {
                    "value": "sequence",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(past_target, future_target)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_159": {
                "variable": {
                    "value": "control_sequence",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(past_control, future_control)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_469": {
                "variable": {
                    "value": "decoder_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(input_lags, input_control_lags, repeated_time_feat[:, k:k + 1, :], repeated_static_feat)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_491": {
                "variable": {
                    "value": "repeated_past_control",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(repeated_past_control, control)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_504": {
                "variable": {
                    "value": "repeated_past_target",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(repeated_past_target, new_samples)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_278": {
                "tensors": {
                    "value": "(rnn_outputs, control.unsqueeze(-1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_494": {
                "tensors": {
                    "value": "(rnn_outputs, control.unsqueeze(-1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "pts/model/deepar/deepar_estimator.py": {
        "torch": {}
    },
    "pts/model/deepar/deepar_network.py": {
        "torch": {
            "cat_173": {
                "variable": {
                    "value": "static_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(embedded_cat, feat_static_real, scale.log() if len(self.target_shape) == 0 else scale.squeeze(1).log())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_197": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(input_lags, time_feat, repeated_static_feat)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_259": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(past_target[:, self.history_length - self.context_length:, ...], future_target)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_271": {
                "variable": {
                    "value": "observed_values",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(past_observed_values[:, self.history_length - self.context_length:, ...], future_observed_values)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_402": {
                "variable": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "future_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_117": {
                "tensors": {
                    "value": "lagged_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_142": {
                "variable": {
                    "value": "time_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(past_time_feat[:, self.history_length - self.context_length:, ...], future_time_feat)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_149": {
                "variable": {
                    "value": "sequence",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(past_target, future_target)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_380": {
                "variable": {
                    "value": "decoder_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(input_lags, repeated_time_feat[:, k:k + 1, :], repeated_static_feat)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_398": {
                "variable": {
                    "value": "repeated_past_target",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(repeated_past_target, new_samples)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "pts/model/deepvar/deepvar_estimator.py": {
        "torch": {}
    },
    "pts/model/deepvar/deepvar_network.py": {
        "torch": {
            "cat_152": {
                "variable": {
                    "value": "static_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(embedded_cat, feat_static_real, scale.log() if len(self.target_shape) == 0 else scale.squeeze(1).log())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_165": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(input_lags, repeated_static_feat, time_feat)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "min_243": {
                "variable": {
                    "value": "past_observed_values",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "past_observed_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.min(past_observed_values, 1 - past_is_pad.unsqueeze(-1))",
                            "Call"
                        ],
                        [
                            "torch.min(past_observed_values, 1 - past_is_pad.unsqueeze(-1))",
                            "Call"
                        ],
                        [
                            "torch.min(past_observed_values, 1 - past_is_pad.unsqueeze(-1))",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_390": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(past_target_cdf[:, -self.context_length:, ...], future_target_cdf)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_405": {
                "variable": {
                    "value": "past_observed_values",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "past_observed_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.min(past_observed_values, 1 - past_is_pad.unsqueeze(-1))",
                            "Call"
                        ],
                        [
                            "torch.min(past_observed_values, 1 - past_is_pad.unsqueeze(-1))",
                            "Call"
                        ],
                        [
                            "torch.min(past_observed_values, 1 - past_is_pad.unsqueeze(-1))",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_410": {
                "variable": {
                    "value": "observed_values",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(past_observed_values[:, -self.context_length:, ...], future_observed_values)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_531": {
                "variable": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "future_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_587": {
                "variable": {
                    "value": "past_observed_values",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "past_observed_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.min(past_observed_values, 1 - past_is_pad.unsqueeze(-1))",
                            "Call"
                        ],
                        [
                            "torch.min(past_observed_values, 1 - past_is_pad.unsqueeze(-1))",
                            "Call"
                        ],
                        [
                            "torch.min(past_observed_values, 1 - past_is_pad.unsqueeze(-1))",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_119": {
                "tensors": {
                    "value": "lagged_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "permute_119": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_253": {
                "variable": {
                    "value": "time_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(past_time_feat[:, -self.context_length:, ...], future_time_feat)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_260": {
                "variable": {
                    "value": "sequence",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(past_target_cdf, future_target_cdf)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_526": {
                "variable": {
                    "value": "repeated_past_target_cdf",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(repeated_past_target_cdf, new_samples)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "pts/model/estimator.py": {
        "torch": {
            "DataLoader_119": {
                "variable": {
                    "value": "training_data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "training_iter_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TransformedIterableDataset(dataset=training_data, transform=transformation + training_instance_splitter + SelectFields(input_names), is_train=True, shuffle_buffer_length=shuffle_buffer_length, cache_data=cache_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.trainer.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": []
                },
                "prefetch_factor": {
                    "value": "prefetch_factor",
                    "type": "variable",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "worker_init_fn": {
                    "value": "self._worker_init_fn",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_141": {
                "variable": {
                    "value": "validation_data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "validation_iter_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TransformedIterableDataset(dataset=validation_data, transform=transformation + validation_instance_splitter + SelectFields(input_names), is_train=True, cache_data=cache_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.trainer.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": []
                },
                "prefetch_factor": {
                    "value": "prefetch_factor",
                    "type": "variable",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "worker_init_fn": {
                    "value": "self._worker_init_fn",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "pts/model/lstnet/lstnet_estimator.py": {
        "torch": {}
    },
    "pts/model/lstnet/lstnet_network.py": {
        "torch": {
            "Conv2d_75": {
                "variable": {
                    "value": "self.cnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(num_series, kernel_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Dropout_79": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_96": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "rnn_num_cells + skip_size * skip_rnn_num_cells",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_series",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "relu_117": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.cnn(scaled_past_target.unsqueeze(1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "L1Loss_164": {
                "variable": {
                    "value": "self.loss_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_99": {
                "variable": {
                    "value": "self.ar_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "ar_window",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_101": {
                "variable": {
                    "value": "self.ar_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "ar_window",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "prediction_length",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sigmoid_153": {
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "res + ar_x",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tanh_155": {
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "res + ar_x",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_135": {
                "tensors": {
                    "value": "(r, skip_c)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "pts/model/n_beats/n_beats_estimator.py": {
        "torch": {}
    },
    "pts/model/n_beats/n_beats_network.py": {
        "torch": {
            "Sequential_49": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*fc_stack",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "tensor_94": {
                "variable": {
                    "value": "s1_b",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[np.cos(2 * np.pi * i * backcast_linspace) for i in range(p1)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "tensor_97": {
                "variable": {
                    "value": "s2_b",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[np.sin(2 * np.pi * i * backcast_linspace) for i in range(p2)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "tensor_102": {
                "variable": {
                    "value": "s1_f",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[np.cos(2 * np.pi * i * forecast_linspace) for i in range(p1)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "tensor_105": {
                "variable": {
                    "value": "s2_f",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[np.sin(2 * np.pi * i * forecast_linspace) for i in range(p2)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_174": {
                "variable": {
                    "value": "self.backcast_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "thetas_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nb_harmonics",
                            "variable"
                        ],
                        [
                            "forecast_length",
                            "variable"
                        ],
                        [
                            "thetas_dim",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "thetas_dim",
                            "Method Argument"
                        ],
                        [
                            "thetas_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "backcast_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_175": {
                "variable": {
                    "value": "self.forecast_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "thetas_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nb_harmonics",
                            "variable"
                        ],
                        [
                            "forecast_length",
                            "variable"
                        ],
                        [
                            "thetas_dim",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "thetas_dim",
                            "Method Argument"
                        ],
                        [
                            "thetas_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "forecast_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "Method Argument"
                        ],
                        [
                            "5",
                            "Method Argument"
                        ],
                        [
                            "5",
                            "Method Argument"
                        ],
                        [
                            "5",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_180": {
                "variable": {
                    "value": "theta_b",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.theta_b_fc(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_181": {
                "variable": {
                    "value": "theta_f",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.theta_f_fc(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_212": {
                "variable": {
                    "value": "self.net_blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "abs_269": {
                "variable": {
                    "value": "denominator",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "future_target",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_287": {
                "variable": {
                    "value": "whole_target",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(past_target, future_target)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_52": {
                "variable": {
                    "value": "self.theta_f_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "units",
                    "type": "variable",
                    "possible_values": [
                        [
                            "units",
                            "Method Argument"
                        ],
                        [
                            "units",
                            "Method Argument"
                        ],
                        [
                            "units",
                            "Method Argument"
                        ],
                        [
                            "units",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "thetas_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nb_harmonics",
                            "variable"
                        ],
                        [
                            "forecast_length",
                            "variable"
                        ],
                        [
                            "thetas_dim",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "thetas_dim",
                            "Method Argument"
                        ],
                        [
                            "thetas_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_54": {
                "variable": {
                    "value": "self.theta_b_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "units",
                    "type": "variable",
                    "possible_values": [
                        [
                            "units",
                            "Method Argument"
                        ],
                        [
                            "units",
                            "Method Argument"
                        ],
                        [
                            "units",
                            "Method Argument"
                        ],
                        [
                            "units",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "thetas_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nb_harmonics",
                            "variable"
                        ],
                        [
                            "forecast_length",
                            "variable"
                        ],
                        [
                            "thetas_dim",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "thetas_dim",
                            "Method Argument"
                        ],
                        [
                            "thetas_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_55": {
                "variable": {
                    "value": "self.theta_f_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "units",
                    "type": "variable",
                    "possible_values": [
                        [
                            "units",
                            "Method Argument"
                        ],
                        [
                            "units",
                            "Method Argument"
                        ],
                        [
                            "units",
                            "Method Argument"
                        ],
                        [
                            "units",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "thetas_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nb_harmonics",
                            "variable"
                        ],
                        [
                            "forecast_length",
                            "variable"
                        ],
                        [
                            "thetas_dim",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "thetas_dim",
                            "Method Argument"
                        ],
                        [
                            "thetas_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_45": {
                "in_features": {
                    "value": "backcast_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "units",
                    "type": "variable",
                    "possible_values": [
                        [
                            "units",
                            "Method Argument"
                        ],
                        [
                            "units",
                            "Method Argument"
                        ],
                        [
                            "units",
                            "Method Argument"
                        ],
                        [
                            "units",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_45": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_100": {
                "tensors": {
                    "value": "[s1_b, s2_b]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_108": {
                "tensors": {
                    "value": "[s1_f, s2_f]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_143": {
                "data": {
                    "value": "[backcast_linspace ** i for i in range(thetas_dim)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "tensor_147": {
                "data": {
                    "value": "[forecast_linspace ** i for i in range(thetas_dim)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "mean_260": {
                "input": {
                    "value": "torch.abs(future_target - forecast) * torch.logical_not(flag) / (denominator + flag)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_272": {
                "input": {
                    "value": "torch.abs(future_target - forecast) * torch.logical_not(flag) / (denominator + flag)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_288": {
                "input": {
                    "value": "torch.abs(whole_target[:, periodicity:, ...] - whole_target[:, :-periodicity, ...])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_47": {
                "in_features": {
                    "value": "units",
                    "type": "variable",
                    "possible_values": [
                        [
                            "units",
                            "Method Argument"
                        ],
                        [
                            "units",
                            "Method Argument"
                        ],
                        [
                            "units",
                            "Method Argument"
                        ],
                        [
                            "units",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "units",
                    "type": "variable",
                    "possible_values": [
                        [
                            "units",
                            "Method Argument"
                        ],
                        [
                            "units",
                            "Method Argument"
                        ],
                        [
                            "units",
                            "Method Argument"
                        ],
                        [
                            "units",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_48": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "abs_289": {
                "input": {
                    "value": "whole_target[:, periodicity:, ...] - whole_target[:, :-periodicity, ...]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_298": {
                "input": {
                    "value": "torch.abs(future_target - forecast)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "logical_not_299": {
                "input": {
                    "value": "flag",
                    "type": "variable",
                    "possible_values": [
                        [
                            "denominator == 0",
                            "Compare"
                        ],
                        [
                            "denominator == 0",
                            "Compare"
                        ],
                        [
                            "seasonal_error == 0",
                            "Compare"
                        ]
                    ]
                }
            },
            "abs_257": {
                "input": {
                    "value": "forecast",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.theta_f_fc(x).mm(self.S_forecast)",
                            "Call"
                        ],
                        [
                            "self.theta_f_fc(x).mm(self.T_forecast)",
                            "Call"
                        ],
                        [
                            "self.net_blocks[0](past_target)",
                            "Call"
                        ],
                        [
                            "self.net_blocks[0](past_target)",
                            "Call"
                        ],
                        [
                            "forecast + f",
                            "BinOp"
                        ],
                        [
                            "super().forward(past_target=past_target)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_298": {
                "input": {
                    "value": "future_target - forecast",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_261": {
                "input": {
                    "value": "future_target - forecast",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "logical_not_261": {
                "input": {
                    "value": "flag",
                    "type": "variable",
                    "possible_values": [
                        [
                            "denominator == 0",
                            "Compare"
                        ],
                        [
                            "denominator == 0",
                            "Compare"
                        ],
                        [
                            "seasonal_error == 0",
                            "Compare"
                        ]
                    ]
                }
            },
            "abs_273": {
                "input": {
                    "value": "future_target - forecast",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "logical_not_273": {
                "input": {
                    "value": "flag",
                    "type": "variable",
                    "possible_values": [
                        [
                            "denominator == 0",
                            "Compare"
                        ],
                        [
                            "denominator == 0",
                            "Compare"
                        ],
                        [
                            "seasonal_error == 0",
                            "Compare"
                        ]
                    ]
                }
            }
        }
    },
    "pts/model/simple_feedforward/simple_feedforward_estimator.py": {
        "torch": {}
    },
    "pts/model/simple_feedforward/simple_feedforward_network.py": {
        "torch": {
            "Sequential_77": {
                "variable": {
                    "value": "self.mlp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*modules",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ones_like_87": {
                "input": {
                    "value": "past_target",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_67": {
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "context_length",
                            "variable"
                        ],
                        [
                            "dims[i - 1]",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "units",
                    "type": "variable",
                    "possible_values": [
                        [
                            "units in enumerate(dims[:-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "ReLU_67": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_71": {
                "in_features": {
                    "value": "context_length",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dims[-1] * prediction_length",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_73": {
                "in_features": {
                    "value": "dims[-2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dims[-1] * prediction_length",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm1d_69": {
                "num_features": {
                    "value": "units",
                    "type": "variable",
                    "possible_values": [
                        [
                            "units in enumerate(dims[:-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_75": {
                "input": {
                    "value": "o",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, prediction_length, dims[-1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "pts/model/tempflow/tempflow_estimator.py": {
        "torch": {}
    },
    "pts/model/tempflow/tempflow_network.py": {
        "torch": {
            "Embedding_78": {
                "variable": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.target_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_169": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(input_lags, repeated_index_embeddings, time_feat)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "min_244": {
                "variable": {
                    "value": "past_observed_values",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "past_observed_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.min(past_observed_values, 1 - past_is_pad.unsqueeze(-1))",
                            "Call"
                        ],
                        [
                            "torch.min(past_observed_values, 1 - past_is_pad.unsqueeze(-1))",
                            "Call"
                        ],
                        [
                            "torch.min(past_observed_values, 1 - past_is_pad.unsqueeze(-1))",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_382": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(past_target_cdf[:, -self.context_length:, ...], future_target_cdf)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_401": {
                "variable": {
                    "value": "past_observed_values",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "past_observed_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.min(past_observed_values, 1 - past_is_pad.unsqueeze(-1))",
                            "Call"
                        ],
                        [
                            "torch.min(past_observed_values, 1 - past_is_pad.unsqueeze(-1))",
                            "Call"
                        ],
                        [
                            "torch.min(past_observed_values, 1 - past_is_pad.unsqueeze(-1))",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_406": {
                "variable": {
                    "value": "observed_values",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(past_observed_values[:, -self.context_length:, ...], future_observed_values)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_522": {
                "variable": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "future_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_575": {
                "variable": {
                    "value": "past_observed_values",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "past_observed_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.min(past_observed_values, 1 - past_is_pad.unsqueeze(-1))",
                            "Call"
                        ],
                        [
                            "torch.min(past_observed_values, 1 - past_is_pad.unsqueeze(-1))",
                            "Call"
                        ],
                        [
                            "torch.min(past_observed_values, 1 - past_is_pad.unsqueeze(-1))",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_129": {
                "tensors": {
                    "value": "lagged_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "permute_129": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_254": {
                "variable": {
                    "value": "time_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(past_time_feat[:, -self.context_length:, ...], future_time_feat)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_258": {
                "variable": {
                    "value": "sequence",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(past_target_cdf, future_target_cdf)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_517": {
                "variable": {
                    "value": "repeated_past_target_cdf",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(repeated_past_target_cdf, new_samples)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_like_396": {
                "input": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((past_target_cdf[:, -self.context_length:, ...], future_target_cdf), dim=1)",
                            "Call"
                        ],
                        [
                            "target + torch.rand_like(target)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "pts/model/tft/tft_estimator.py": {
        "torch": {}
    },
    "pts/model/tft/tft_modules.py": {
        "torch": {
            "ModuleList_28": {
                "variable": {
                    "value": "self._projector",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(in_features=in_feature, out_features=out_features) for (in_feature, out_features) in zip(self.feature_dims, embedding_dims)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "chunk_68": {
                "variable": {
                    "value": "(val, gate)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((x, c), dim=-1)",
                            "Call"
                        ],
                        [
                            "self.mlp(x)",
                            "Call"
                        ],
                        [
                            "self.lnorm(x + skip)",
                            "Call"
                        ],
                        [
                            "self.enrich(x, static)",
                            "Call"
                        ],
                        [
                            "x[:, self.context_length:, ...]",
                            "Subscript"
                        ],
                        [
                            "self.att_lnorm(x + att)",
                            "Call"
                        ],
                        [
                            "self.ff_net(x)",
                            "Call"
                        ],
                        [
                            "self.ff_lnorm(x + skip)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_97": {
                "variable": {
                    "value": "self.mlp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(in_features=d_input + d_static, out_features=d_hidden)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LayerNorm_106": {
                "variable": {
                    "value": "self.lnorm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_input",
                            "variable"
                        ]
                    ]
                }
            },
            "ModuleList_140": {
                "variable": {
                    "value": "self.variable_network",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[GatedResidualNetwork(d_hidden=d_hidden, dropout=dropout) for _ in range(n_vars)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_150": {
                "variable": {
                    "value": "flatten",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "variables",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_154": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight.unsqueeze(-2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_157": {
                "variable": {
                    "value": "var_encodings",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "var_encodings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[net(var) for (var, net) in zip(variables, self.variable_network)]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(var_encodings, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.sum(var_encodings * weight, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_159": {
                "variable": {
                    "value": "var_encodings",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "var_encodings * weight",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "LSTM_172": {
                "variable": {
                    "value": "self.encoder_lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "d_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_input or d_hidden",
                            "BoolOp"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "d_hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LSTM_175": {
                "variable": {
                    "value": "self.decoder_lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "d_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_input or d_hidden",
                            "BoolOp"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "d_hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_179": {
                "variable": {
                    "value": "self.gate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(in_features=d_hidden, out_features=d_hidden * 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LayerNorm_189": {
                "variable": {
                    "value": "self.lnorm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_hidden",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_201": {
                "variable": {
                    "value": "encodings",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(ctx_encodings, tgt_encodings)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_202": {
                "variable": {
                    "value": "skip",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(ctx_input, tgt_input)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MultiheadAttention_230": {
                "variable": {
                    "value": "self.attention",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embed_dim": {
                    "value": "d_hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "num_heads": {
                    "value": "n_head",
                    "type": "variable",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_234": {
                "variable": {
                    "value": "self.att_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(in_features=d_hidden, out_features=d_hidden * 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LayerNorm_238": {
                "variable": {
                    "value": "self.att_lnorm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_hidden",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_240": {
                "variable": {
                    "value": "self.ff_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "GatedResidualNetwork(d_hidden=d_hidden, dropout=dropout)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LayerNorm_245": {
                "variable": {
                    "value": "self.ff_lnorm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_hidden",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_278": {
                "variable": {
                    "value": "key_padding_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(mask, mask_pad)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_split_37": {
                "variable": {
                    "value": "real_feature_slices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.chunk(concat_features, self.__num_features, dim=-1)",
                            "Call"
                        ],
                        [
                            "[concat_features]",
                            "List"
                        ]
                    ]
                },
                "indices_or_sections": {
                    "value": "self.feature_slices[1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "chunk_54": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "concat_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "super(FeatureEmbedder, self).forward(features=features)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "self.__num_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tanh_70": {
                "variable": {
                    "value": "val",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.chunk(x, 2, dim=self.dim)",
                            "Call"
                        ],
                        [
                            "torch.tanh(val)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_117": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, c)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_184": {
                "variable": {
                    "value": "self.skip_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_input or d_hidden",
                            "BoolOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_hidden",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sigmoid_71": {
                "input": {
                    "value": "gate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.chunk(x, 2, dim=self.dim)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_93": {
                "variable": {
                    "value": "self.skip_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_input or d_hidden",
                            "BoolOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_input",
                            "variable"
                        ]
                    ]
                }
            },
            "Linear_98": {
                "in_features": {
                    "value": "d_input + d_static",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_hidden",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ELU_99": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_100": {
                "in_features": {
                    "value": "d_hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_hidden",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Dropout_101": {
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_102": {
                "in_features": {
                    "value": "d_hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_output * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_180": {
                "in_features": {
                    "value": "d_hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_hidden * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_235": {
                "in_features": {
                    "value": "d_hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_hidden * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_242": {
                "in_features": {
                    "value": "d_hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_hidden * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_like_276": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(torch.triu(torch.ones(source_length, target_length)) == 1).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "mask.float().masked_fill(mask == 0, float('-inf')).masked_fill(mask == 1, float(0.0))",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_30": {
                "in_features": {
                    "value": "in_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "triu_258": {
                "input": {
                    "value": "torch.ones(source_length, target_length)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_258": {
                "*size": {
                    "value": "source_length",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "target_length",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "pts/model/tft/tft_network.py": {
        "torch": {
            "Linear_46": {
                "variable": {
                    "value": "self.target_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "variable_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sqrt_179": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scale - offset ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_178": {
                "input": {
                    "value": "obs ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "pts/model/tft/tft_output.py": {
        "torch": {
            "stack_40": {
                "variable": {
                    "value": "stacked_qt_losses",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "qt_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "2 * (under_bias + over_bias)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_41": {
                "variable": {
                    "value": "sum_qt_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "stacked_qt_losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(qt_loss, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_62": {
                "variable": {
                    "value": "self.projection",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_features",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_quantiles",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_quantiles",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "chunk_28": {
                "variable": {
                    "value": "y_pred_all",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "chunks": {
                    "value": "self.num_quantiles",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "clamp_51": {
                "input": {
                    "value": "y_true - y_pred_p",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_52": {
                "input": {
                    "value": "y_pred_p - y_true",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "pts/model/time_grad/epsilon_theta.py": {
        "torch": {
            "Linear_14": {
                "variable": {
                    "value": "self.projection1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "proj_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "proj_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_15": {
                "variable": {
                    "value": "self.projection2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "proj_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "proj_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "proj_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "proj_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "silu_20": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embedding[diffusion_step]",
                            "Subscript"
                        ],
                        [
                            "self.projection1(x)",
                            "Call"
                        ],
                        [
                            "F.silu(x)",
                            "Call"
                        ],
                        [
                            "self.projection2(x)",
                            "Call"
                        ],
                        [
                            "F.silu(x)",
                            "Call"
                        ],
                        [
                            "self.linear1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.4)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.4)",
                            "Call"
                        ],
                        [
                            "self.input_projection(inputs)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.4)",
                            "Call"
                        ],
                        [
                            "layer(x, cond_up, diffusion_step)",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.stack(skip), dim=0) / math.sqrt(len(self.residual_layers))",
                            "BinOp"
                        ],
                        [
                            "self.skip_projection(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.4)",
                            "Call"
                        ],
                        [
                            "self.output_projection(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "silu_22": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embedding[diffusion_step]",
                            "Subscript"
                        ],
                        [
                            "self.projection1(x)",
                            "Call"
                        ],
                        [
                            "F.silu(x)",
                            "Call"
                        ],
                        [
                            "self.projection2(x)",
                            "Call"
                        ],
                        [
                            "F.silu(x)",
                            "Call"
                        ],
                        [
                            "self.linear1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.4)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.4)",
                            "Call"
                        ],
                        [
                            "self.input_projection(inputs)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.4)",
                            "Call"
                        ],
                        [
                            "layer(x, cond_up, diffusion_step)",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.stack(skip), dim=0) / math.sqrt(len(self.residual_layers))",
                            "BinOp"
                        ],
                        [
                            "self.skip_projection(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.4)",
                            "Call"
                        ],
                        [
                            "self.output_projection(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_26": {
                "variable": {
                    "value": "steps",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "max_steps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "500",
                            "Method Argument"
                        ],
                        [
                            "max_steps",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "unsqueeze_26": {
                "variable": {
                    "value": "steps",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_27": {
                "variable": {
                    "value": "dims",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "unsqueeze_27": {
                "variable": {
                    "value": "dims",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_29": {
                "variable": {
                    "value": "table",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.sin(table), torch.cos(table)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_36": {
                "variable": {
                    "value": "self.dilated_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "residual_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "residual_channels",
                            "Method Argument"
                        ],
                        [
                            "8",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "2 * residual_channels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dilation",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dilation",
                            "Method Argument"
                        ]
                    ]
                },
                "padding_mode": {
                    "value": "circular",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Linear_44": {
                "variable": {
                    "value": "self.diffusion_projection",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "residual_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "residual_channels",
                            "Method Argument"
                        ],
                        [
                            "8",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv1d_45": {
                "variable": {
                    "value": "self.conditioner_projection",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2 * residual_channels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding_mode": {
                    "value": "circular",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv1d_48": {
                "variable": {
                    "value": "self.output_projection",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "residual_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "residual_channels",
                            "Method Argument"
                        ],
                        [
                            "8",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "2 * residual_channels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "chunk_60": {
                "variable": {
                    "value": "(gate, filter)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x + diffusion_step",
                            "BinOp"
                        ],
                        [
                            "self.dilated_conv(y) + conditioner",
                            "BinOp"
                        ],
                        [
                            "torch.sigmoid(gate) * torch.tanh(filter)",
                            "BinOp"
                        ],
                        [
                            "self.output_projection(y)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(y, 0.4)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "leaky_relu_64": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x + diffusion_step",
                            "BinOp"
                        ],
                        [
                            "self.dilated_conv(y) + conditioner",
                            "BinOp"
                        ],
                        [
                            "torch.sigmoid(gate) * torch.tanh(filter)",
                            "BinOp"
                        ],
                        [
                            "self.output_projection(y)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(y, 0.4)",
                            "Call"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "0.4",
                    "type": "float",
                    "possible_values": []
                }
            },
            "chunk_65": {
                "variable": {
                    "value": "(residual, skip)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x + diffusion_step",
                            "BinOp"
                        ],
                        [
                            "self.dilated_conv(y) + conditioner",
                            "BinOp"
                        ],
                        [
                            "torch.sigmoid(gate) * torch.tanh(filter)",
                            "BinOp"
                        ],
                        [
                            "self.output_projection(y)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(y, 0.4)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_72": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "cond_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cond_length",
                            "Method Argument"
                        ],
                        [
                            "cond_length",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "target_dim // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_73": {
                "variable": {
                    "value": "self.linear2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "target_dim // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "target_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target_dim",
                            "Method Argument"
                        ],
                        [
                            "target_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "leaky_relu_77": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embedding[diffusion_step]",
                            "Subscript"
                        ],
                        [
                            "self.projection1(x)",
                            "Call"
                        ],
                        [
                            "F.silu(x)",
                            "Call"
                        ],
                        [
                            "self.projection2(x)",
                            "Call"
                        ],
                        [
                            "F.silu(x)",
                            "Call"
                        ],
                        [
                            "self.linear1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.4)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.4)",
                            "Call"
                        ],
                        [
                            "self.input_projection(inputs)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.4)",
                            "Call"
                        ],
                        [
                            "layer(x, cond_up, diffusion_step)",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.stack(skip), dim=0) / math.sqrt(len(self.residual_layers))",
                            "BinOp"
                        ],
                        [
                            "self.skip_projection(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.4)",
                            "Call"
                        ],
                        [
                            "self.output_projection(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "0.4",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_79": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embedding[diffusion_step]",
                            "Subscript"
                        ],
                        [
                            "self.projection1(x)",
                            "Call"
                        ],
                        [
                            "F.silu(x)",
                            "Call"
                        ],
                        [
                            "self.projection2(x)",
                            "Call"
                        ],
                        [
                            "F.silu(x)",
                            "Call"
                        ],
                        [
                            "self.linear1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.4)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.4)",
                            "Call"
                        ],
                        [
                            "self.input_projection(inputs)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.4)",
                            "Call"
                        ],
                        [
                            "layer(x, cond_up, diffusion_step)",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.stack(skip), dim=0) / math.sqrt(len(self.residual_layers))",
                            "BinOp"
                        ],
                        [
                            "self.skip_projection(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.4)",
                            "Call"
                        ],
                        [
                            "self.output_projection(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "0.4",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv1d_95": {
                "variable": {
                    "value": "self.input_projection",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "residual_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "residual_channels",
                            "Method Argument"
                        ],
                        [
                            "8",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding_mode": {
                    "value": "circular",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ModuleList_104": {
                "variable": {
                    "value": "self.residual_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[ResidualBlock(residual_channels=residual_channels, dilation=2 ** (i % dilation_cycle_length), hidden_size=residual_hidden) for i in range(residual_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Conv1d_114": {
                "variable": {
                    "value": "self.skip_projection",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "residual_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "residual_channels",
                            "Method Argument"
                        ],
                        [
                            "8",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "residual_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "residual_channels",
                            "Method Argument"
                        ],
                        [
                            "8",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_115": {
                "variable": {
                    "value": "self.output_projection",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "residual_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "residual_channels",
                            "Method Argument"
                        ],
                        [
                            "8",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "leaky_relu_123": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embedding[diffusion_step]",
                            "Subscript"
                        ],
                        [
                            "self.projection1(x)",
                            "Call"
                        ],
                        [
                            "F.silu(x)",
                            "Call"
                        ],
                        [
                            "self.projection2(x)",
                            "Call"
                        ],
                        [
                            "F.silu(x)",
                            "Call"
                        ],
                        [
                            "self.linear1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.4)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.4)",
                            "Call"
                        ],
                        [
                            "self.input_projection(inputs)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.4)",
                            "Call"
                        ],
                        [
                            "layer(x, cond_up, diffusion_step)",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.stack(skip), dim=0) / math.sqrt(len(self.residual_layers))",
                            "BinOp"
                        ],
                        [
                            "self.skip_projection(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.4)",
                            "Call"
                        ],
                        [
                            "self.output_projection(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "0.4",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_134": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embedding[diffusion_step]",
                            "Subscript"
                        ],
                        [
                            "self.projection1(x)",
                            "Call"
                        ],
                        [
                            "F.silu(x)",
                            "Call"
                        ],
                        [
                            "self.projection2(x)",
                            "Call"
                        ],
                        [
                            "F.silu(x)",
                            "Call"
                        ],
                        [
                            "self.linear1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.4)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.4)",
                            "Call"
                        ],
                        [
                            "self.input_projection(inputs)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.4)",
                            "Call"
                        ],
                        [
                            "layer(x, cond_up, diffusion_step)",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.stack(skip), dim=0) / math.sqrt(len(self.residual_layers))",
                            "BinOp"
                        ],
                        [
                            "self.skip_projection(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.4)",
                            "Call"
                        ],
                        [
                            "self.output_projection(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "0.4",
                    "type": "float",
                    "possible_values": []
                }
            },
            "sigmoid_61": {
                "input": {
                    "value": "gate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.chunk(y, 2, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_61": {
                "input": {
                    "value": "filter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.chunk(y, 2, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_132": {
                "input": {
                    "value": "torch.stack(skip)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sin_29": {
                "input": {
                    "value": "table",
                    "type": "variable",
                    "possible_values": [
                        [
                            "steps * 10.0 ** (dims * 4.0 / dim)",
                            "BinOp"
                        ],
                        [
                            "torch.cat([torch.sin(table), torch.cos(table)], dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cos_29": {
                "input": {
                    "value": "table",
                    "type": "variable",
                    "possible_values": [
                        [
                            "steps * 10.0 ** (dims * 4.0 / dim)",
                            "BinOp"
                        ],
                        [
                            "torch.cat([torch.sin(table), torch.cos(table)], dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_132": {
                "tensors": {
                    "value": "skip",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.chunk(y, 2, dim=1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "pts/model/time_grad/time_grad_estimator.py": {
        "torch": {}
    },
    "pts/model/time_grad/time_grad_network.py": {
        "torch": {
            "Embedding_87": {
                "variable": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.target_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_178": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(input_lags, repeated_index_embeddings, time_feat)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "min_253": {
                "variable": {
                    "value": "past_observed_values",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "past_observed_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.min(past_observed_values, 1 - past_is_pad.unsqueeze(-1))",
                            "Call"
                        ],
                        [
                            "torch.min(past_observed_values, 1 - past_is_pad.unsqueeze(-1))",
                            "Call"
                        ],
                        [
                            "torch.min(past_observed_values, 1 - past_is_pad.unsqueeze(-1))",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_391": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(past_target_cdf[:, -self.context_length:, ...], future_target_cdf)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_409": {
                "variable": {
                    "value": "past_observed_values",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "past_observed_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.min(past_observed_values, 1 - past_is_pad.unsqueeze(-1))",
                            "Call"
                        ],
                        [
                            "torch.min(past_observed_values, 1 - past_is_pad.unsqueeze(-1))",
                            "Call"
                        ],
                        [
                            "torch.min(past_observed_values, 1 - past_is_pad.unsqueeze(-1))",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_414": {
                "variable": {
                    "value": "observed_values",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(past_observed_values[:, -self.context_length:, ...], future_observed_values)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_530": {
                "variable": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "future_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_583": {
                "variable": {
                    "value": "past_observed_values",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "past_observed_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.min(past_observed_values, 1 - past_is_pad.unsqueeze(-1))",
                            "Call"
                        ],
                        [
                            "torch.min(past_observed_values, 1 - past_is_pad.unsqueeze(-1))",
                            "Call"
                        ],
                        [
                            "torch.min(past_observed_values, 1 - past_is_pad.unsqueeze(-1))",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_138": {
                "tensors": {
                    "value": "lagged_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "permute_138": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_263": {
                "variable": {
                    "value": "time_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(past_time_feat[:, -self.context_length:, ...], future_time_feat)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_267": {
                "variable": {
                    "value": "sequence",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(past_target_cdf, future_target_cdf)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_525": {
                "variable": {
                    "value": "repeated_past_target_cdf",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(repeated_past_target_cdf, new_samples)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_434": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pts/model/transformer/transformer_estimator.py": {
        "torch": {}
    },
    "pts/model/transformer/transformer_network.py": {
        "torch": {
            "Linear_58": {
                "variable": {
                    "value": "self.encoder_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_59": {
                "variable": {
                    "value": "self.decoder_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Transformer_62": {
                "variable": {
                    "value": "self.transformer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "d_model": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                },
                "nhead": {
                    "value": "num_heads",
                    "type": "variable",
                    "possible_values": []
                },
                "num_encoder_layers": {
                    "value": "num_encoder_layers",
                    "type": "variable",
                    "possible_values": []
                },
                "num_decoder_layers": {
                    "value": "num_decoder_layers",
                    "type": "variable",
                    "possible_values": []
                },
                "dim_feedforward": {
                    "value": "dim_feedforward_scale * d_model",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": []
                },
                "activation": {
                    "value": "act_type",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_186": {
                "variable": {
                    "value": "static_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(embedded_cat, feat_static_real, torch.log(scale) if len(self.target_shape) == 0 else torch.log(scale.squeeze(1)))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_211": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(input_lags, time_feat, repeated_static_feat)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_389": {
                "variable": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "future_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_128": {
                "tensors": {
                    "value": "lagged_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_157": {
                "variable": {
                    "value": "time_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(past_time_feat[:, self.history_length - self.context_length:, ...], future_time_feat)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_164": {
                "variable": {
                    "value": "sequence",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(past_target, future_target)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_364": {
                "variable": {
                    "value": "dec_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(input_lags, repeated_time_feat[:, k:k + 1, :], repeated_static_feat)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_382": {
                "variable": {
                    "value": "repeated_past_target",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(repeated_past_target, new_samples)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_190": {
                "input": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.scaler(past_target[:, -self.context_length:, ...], past_observed_values[:, -self.context_length:, ...])",
                            "Call"
                        ],
                        [
                            "self.create_network_input(feat_static_cat=feat_static_cat, feat_static_real=feat_static_real, past_time_feat=past_time_feat, past_target=past_target, past_observed_values=past_observed_values, future_time_feat=future_time_feat, future_target=future_target)",
                            "Call"
                        ],
                        [
                            "self.create_network_input(feat_static_cat=feat_static_cat, feat_static_real=feat_static_real, past_time_feat=past_time_feat, past_target=past_target, past_observed_values=past_observed_values, future_time_feat=None, future_target=None)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_192": {
                "input": {
                    "value": "scale.squeeze(1)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "pts/model/transformer_tempflow/transformer_tempflow_estimator.py": {
        "torch": {}
    },
    "pts/model/transformer_tempflow/transformer_tempflow_network.py": {
        "torch": {
            "Linear_47": {
                "variable": {
                    "value": "self.encoder_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_48": {
                "variable": {
                    "value": "self.decoder_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Transformer_51": {
                "variable": {
                    "value": "self.transformer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "d_model": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                },
                "nhead": {
                    "value": "num_heads",
                    "type": "variable",
                    "possible_values": []
                },
                "num_encoder_layers": {
                    "value": "num_encoder_layers",
                    "type": "variable",
                    "possible_values": []
                },
                "num_decoder_layers": {
                    "value": "num_decoder_layers",
                    "type": "variable",
                    "possible_values": []
                },
                "dim_feedforward": {
                    "value": "dim_feedforward_scale * d_model",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": []
                },
                "activation": {
                    "value": "act_type",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Embedding_81": {
                "variable": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.target_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "min_194": {
                "variable": {
                    "value": "past_observed_values",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "past_observed_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.min(past_observed_values, 1 - past_is_pad.unsqueeze(-1))",
                            "Call"
                        ],
                        [
                            "torch.min(past_observed_values, 1 - past_is_pad.unsqueeze(-1))",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_253": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(input_lags, repeated_index_embeddings, time_feat)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_516": {
                "variable": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "future_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_569": {
                "variable": {
                    "value": "past_observed_values",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "past_observed_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.min(past_observed_values, 1 - past_is_pad.unsqueeze(-1))",
                            "Call"
                        ],
                        [
                            "torch.min(past_observed_values, 1 - past_is_pad.unsqueeze(-1))",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_138": {
                "tensors": {
                    "value": "lagged_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "permute_138": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_204": {
                "variable": {
                    "value": "time_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(past_time_feat[:, -self.context_length:, ...], future_time_feat)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_211": {
                "variable": {
                    "value": "sequence",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(past_target_cdf, future_target_cdf)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_491": {
                "variable": {
                    "value": "dec_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(input_lags, repeated_index_embeddings, repeated_time_feat[:, k:k + 1, ...])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_511": {
                "variable": {
                    "value": "repeated_past_target_cdf",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(repeated_past_target_cdf, new_samples)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_like_368": {
                "input": {
                    "value": "future_target_cdf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "future_target_cdf + torch.rand_like(future_target_cdf)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "pts/model/utils.py": {
        "torch": {
            "where_37": {
                "variable": {
                    "value": "weighted_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "weights != 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "x * weights",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "torch.zeros_like(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_38": {
                "variable": {
                    "value": "sum_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weights.sum(dim=dim) if dim else weights.sum()",
                    "type": "IfExp",
                    "possible_values": []
                },
                "min": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_like_37": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "pts/modules/distribution_output.py": {
        "torch": {
            "softplus_82": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softplus(scale)",
                            "Call"
                        ],
                        [
                            "F.softplus(scale)",
                            "Call"
                        ],
                        [
                            "F.softplus(scale)",
                            "Call"
                        ],
                        [
                            "F.softplus(scale)",
                            "Call"
                        ],
                        [
                            "scale.reshape(shape)",
                            "Call"
                        ],
                        [
                            "scale",
                            "Method Argument"
                        ],
                        [
                            "scale",
                            "Method Argument"
                        ],
                        [
                            "scale",
                            "Method Argument"
                        ],
                        [
                            "scale",
                            "Method Argument"
                        ],
                        [
                            "scale",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "softplus_123": {
                "variable": {
                    "value": "rate_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rate * scale",
                            "BinOp"
                        ],
                        [
                            "rate",
                            "Method Argument"
                        ],
                        [
                            "rate",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "clone_123": {
                "variable": {
                    "value": "rate_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sigmoid_149": {
                "variable": {
                    "value": "gate_unit",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(gate)",
                            "Call"
                        ],
                        [
                            "gate",
                            "Method Argument"
                        ],
                        [
                            "gate",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "clone_149": {
                "variable": {
                    "value": "gate_unit",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softplus_150": {
                "variable": {
                    "value": "rate_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rate * scale",
                            "BinOp"
                        ],
                        [
                            "rate",
                            "Method Argument"
                        ],
                        [
                            "rate",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "clone_150": {
                "variable": {
                    "value": "rate_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softplus_176": {
                "variable": {
                    "value": "total_count",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "total_count",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softplus(total_count)",
                            "Call"
                        ],
                        [
                            "F.softplus(total_count)",
                            "Call"
                        ],
                        [
                            "total_count",
                            "Method Argument"
                        ],
                        [
                            "total_count",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sigmoid_203": {
                "variable": {
                    "value": "gate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(gate)",
                            "Call"
                        ],
                        [
                            "gate",
                            "Method Argument"
                        ],
                        [
                            "gate",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "softplus_204": {
                "variable": {
                    "value": "total_count",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "total_count",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softplus(total_count)",
                            "Call"
                        ],
                        [
                            "F.softplus(total_count)",
                            "Call"
                        ],
                        [
                            "total_count",
                            "Method Argument"
                        ],
                        [
                            "total_count",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "softplus_233": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softplus(scale)",
                            "Call"
                        ],
                        [
                            "F.softplus(scale)",
                            "Call"
                        ],
                        [
                            "F.softplus(scale)",
                            "Call"
                        ],
                        [
                            "F.softplus(scale)",
                            "Call"
                        ],
                        [
                            "scale.reshape(shape)",
                            "Call"
                        ],
                        [
                            "scale",
                            "Method Argument"
                        ],
                        [
                            "scale",
                            "Method Argument"
                        ],
                        [
                            "scale",
                            "Method Argument"
                        ],
                        [
                            "scale",
                            "Method Argument"
                        ],
                        [
                            "scale",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "softplus_251": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softplus(scale)",
                            "Call"
                        ],
                        [
                            "F.softplus(scale)",
                            "Call"
                        ],
                        [
                            "F.softplus(scale)",
                            "Call"
                        ],
                        [
                            "F.softplus(scale)",
                            "Call"
                        ],
                        [
                            "scale.reshape(shape)",
                            "Call"
                        ],
                        [
                            "scale",
                            "Method Argument"
                        ],
                        [
                            "scale",
                            "Method Argument"
                        ],
                        [
                            "scale",
                            "Method Argument"
                        ],
                        [
                            "scale",
                            "Method Argument"
                        ],
                        [
                            "scale",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "MixtureSameFamily_265": {
                "variable": {
                    "value": "distr",
                    "type": "variable",
                    "possible_values": []
                },
                "mixture_distribution": {
                    "value": "Categorical(logits=mix_logits)",
                    "type": "Call",
                    "possible_values": []
                },
                "component_distribution": {
                    "value": "StudentT(df, loc, dist_scale)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_297": {
                "variable": {
                    "value": "knot_spacings_proj",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "knot_spacings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "knot_spacings",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softplus_331": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softplus(scale)",
                            "Call"
                        ],
                        [
                            "F.softplus(scale)",
                            "Call"
                        ],
                        [
                            "F.softplus(scale)",
                            "Call"
                        ],
                        [
                            "F.softplus(scale)",
                            "Call"
                        ],
                        [
                            "scale.reshape(shape)",
                            "Call"
                        ],
                        [
                            "scale",
                            "Method Argument"
                        ],
                        [
                            "scale",
                            "Method Argument"
                        ],
                        [
                            "scale",
                            "Method Argument"
                        ],
                        [
                            "scale",
                            "Method Argument"
                        ],
                        [
                            "scale",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "MixtureSameFamily_339": {
                "variable": {
                    "value": "distr",
                    "type": "variable",
                    "possible_values": []
                },
                "mixture_distribution": {
                    "value": "Categorical(logits=mix_logits)",
                    "type": "Call",
                    "possible_values": []
                },
                "component_distribution": {
                    "value": "Normal(loc, dist_scale)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tril_407": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.ones_like(scale)",
                    "type": "Call",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "MultivariateNormal_416": {
                "variable": {
                    "value": "distr",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "loc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loc",
                            "Method Argument"
                        ],
                        [
                            "loc",
                            "Method Argument"
                        ],
                        [
                            "loc",
                            "Method Argument"
                        ],
                        [
                            "loc",
                            "Method Argument"
                        ],
                        [
                            "loc",
                            "Method Argument"
                        ],
                        [
                            "loc",
                            "Method Argument"
                        ]
                    ]
                },
                "scale_tril": {
                    "value": "scale_tri",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "rand_493": {
                "variable": {
                    "value": "taus",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(batch_size, forecast_length)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scale.device",
                            "Attribute"
                        ],
                        [
                            "x.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Independent_58": {
                "base_distribution": {
                    "value": "distr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.independent(self.distr_cls(*distr_args))",
                            "Call"
                        ],
                        [
                            "MixtureSameFamily(Categorical(logits=mix_logits), StudentT(df, loc, dist_scale))",
                            "Call"
                        ],
                        [
                            "self.distr_cls(*distr_args)",
                            "Call"
                        ],
                        [
                            "MixtureSameFamily(Categorical(logits=mix_logits), Normal(loc, dist_scale))",
                            "Call"
                        ],
                        [
                            "MultivariateNormal(loc=loc, scale_tril=scale_tri)",
                            "Call"
                        ],
                        [
                            "self.distr_cls(implicit_quantile_function=implicit_quantile_function, taus=list(args_proj.buffers())[0], nn_output=list(args_proj.buffers())[1], predicted_quantiles=distr_args)",
                            "Call"
                        ]
                    ]
                },
                "reinterpreted_batch_ndims": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "TransformedDistribution_68": {
                "base_distribution": {
                    "value": "distr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.independent(self.distr_cls(*distr_args))",
                            "Call"
                        ],
                        [
                            "MixtureSameFamily(Categorical(logits=mix_logits), StudentT(df, loc, dist_scale))",
                            "Call"
                        ],
                        [
                            "self.distr_cls(*distr_args)",
                            "Call"
                        ],
                        [
                            "MixtureSameFamily(Categorical(logits=mix_logits), Normal(loc, dist_scale))",
                            "Call"
                        ],
                        [
                            "MultivariateNormal(loc=loc, scale_tril=scale_tri)",
                            "Call"
                        ],
                        [
                            "self.distr_cls(implicit_quantile_function=implicit_quantile_function, taus=list(args_proj.buffers())[0], nn_output=list(args_proj.buffers())[1], predicted_quantiles=distr_args)",
                            "Call"
                        ]
                    ]
                },
                "transforms": {
                    "value": "[AffineTransform(loc=0, scale=scale)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softplus_107": {
                "input": {
                    "value": "concentration1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softplus(concentration1) + 1e-08",
                            "BinOp"
                        ],
                        [
                            "concentration1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "softplus_108": {
                "input": {
                    "value": "concentration0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softplus(concentration0) + 1e-08",
                            "BinOp"
                        ],
                        [
                            "concentration0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Poisson_135": {
                "rate": {
                    "value": "rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rate * scale",
                            "BinOp"
                        ],
                        [
                            "rate",
                            "Method Argument"
                        ],
                        [
                            "rate",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "NegativeBinomial_188": {
                "total_count": {
                    "value": "total_count",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softplus(total_count)",
                            "Call"
                        ],
                        [
                            "F.softplus(total_count)",
                            "Call"
                        ],
                        [
                            "total_count",
                            "Method Argument"
                        ],
                        [
                            "total_count",
                            "Method Argument"
                        ]
                    ]
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits + scale.log()",
                            "BinOp"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "softplus_234": {
                "input": {
                    "value": "df",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2.0 + F.softplus(df)",
                            "BinOp"
                        ],
                        [
                            "2.0 + F.softplus(df)",
                            "BinOp"
                        ],
                        [
                            "df",
                            "Method Argument"
                        ],
                        [
                            "df",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "softplus_252": {
                "input": {
                    "value": "df",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2.0 + F.softplus(df)",
                            "BinOp"
                        ],
                        [
                            "2.0 + F.softplus(df)",
                            "BinOp"
                        ],
                        [
                            "df",
                            "Method Argument"
                        ],
                        [
                            "df",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Categorical_266": {
                "logits": {
                    "value": "mix_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mix_logits",
                            "Method Argument"
                        ],
                        [
                            "mix_logits",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "StudentT_266": {
                "df": {
                    "value": "df",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2.0 + F.softplus(df)",
                            "BinOp"
                        ],
                        [
                            "2.0 + F.softplus(df)",
                            "BinOp"
                        ],
                        [
                            "df",
                            "Method Argument"
                        ],
                        [
                            "df",
                            "Method Argument"
                        ]
                    ]
                },
                "loc": {
                    "value": "loc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loc",
                            "Method Argument"
                        ],
                        [
                            "loc",
                            "Method Argument"
                        ],
                        [
                            "loc",
                            "Method Argument"
                        ],
                        [
                            "loc",
                            "Method Argument"
                        ],
                        [
                            "loc",
                            "Method Argument"
                        ],
                        [
                            "loc",
                            "Method Argument"
                        ]
                    ]
                },
                "scale": {
                    "value": "dist_scale",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "TransformedDistribution_271": {
                "base_distribution": {
                    "value": "distr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.independent(self.distr_cls(*distr_args))",
                            "Call"
                        ],
                        [
                            "MixtureSameFamily(Categorical(logits=mix_logits), StudentT(df, loc, dist_scale))",
                            "Call"
                        ],
                        [
                            "self.distr_cls(*distr_args)",
                            "Call"
                        ],
                        [
                            "MixtureSameFamily(Categorical(logits=mix_logits), Normal(loc, dist_scale))",
                            "Call"
                        ],
                        [
                            "MultivariateNormal(loc=loc, scale_tril=scale_tri)",
                            "Call"
                        ],
                        [
                            "self.distr_cls(implicit_quantile_function=implicit_quantile_function, taus=list(args_proj.buffers())[0], nn_output=list(args_proj.buffers())[1], predicted_quantiles=distr_args)",
                            "Call"
                        ]
                    ]
                },
                "transforms": {
                    "value": "[AffineTransform(loc=0, scale=scale)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softplus_294": {
                "input": {
                    "value": "slopes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slopes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Categorical_340": {
                "logits": {
                    "value": "mix_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mix_logits",
                            "Method Argument"
                        ],
                        [
                            "mix_logits",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Normal_340": {
                "loc": {
                    "value": "loc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loc",
                            "Method Argument"
                        ],
                        [
                            "loc",
                            "Method Argument"
                        ],
                        [
                            "loc",
                            "Method Argument"
                        ],
                        [
                            "loc",
                            "Method Argument"
                        ],
                        [
                            "loc",
                            "Method Argument"
                        ],
                        [
                            "loc",
                            "Method Argument"
                        ]
                    ]
                },
                "scale": {
                    "value": "dist_scale",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "TransformedDistribution_345": {
                "base_distribution": {
                    "value": "distr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.independent(self.distr_cls(*distr_args))",
                            "Call"
                        ],
                        [
                            "MixtureSameFamily(Categorical(logits=mix_logits), StudentT(df, loc, dist_scale))",
                            "Call"
                        ],
                        [
                            "self.distr_cls(*distr_args)",
                            "Call"
                        ],
                        [
                            "MixtureSameFamily(Categorical(logits=mix_logits), Normal(loc, dist_scale))",
                            "Call"
                        ],
                        [
                            "MultivariateNormal(loc=loc, scale_tril=scale_tri)",
                            "Call"
                        ],
                        [
                            "self.distr_cls(implicit_quantile_function=implicit_quantile_function, taus=list(args_proj.buffers())[0], nn_output=list(args_proj.buffers())[1], predicted_quantiles=distr_args)",
                            "Call"
                        ]
                    ]
                },
                "transforms": {
                    "value": "[AffineTransform(loc=0, scale=scale)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softplus_375": {
                "input": {
                    "value": "cov_diag + diag_bias",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softplus_403": {
                "input": {
                    "value": "scale * torch.eye(d, device=device)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "eye_403": {
                "n": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dim",
                            "Attribute"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scale.device",
                            "Attribute"
                        ],
                        [
                            "x.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "ones_like_407": {
                "input": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softplus(scale)",
                            "Call"
                        ],
                        [
                            "F.softplus(scale)",
                            "Call"
                        ],
                        [
                            "F.softplus(scale)",
                            "Call"
                        ],
                        [
                            "F.softplus(scale)",
                            "Call"
                        ],
                        [
                            "scale.reshape(shape)",
                            "Call"
                        ],
                        [
                            "scale",
                            "Method Argument"
                        ],
                        [
                            "scale",
                            "Method Argument"
                        ],
                        [
                            "scale",
                            "Method Argument"
                        ],
                        [
                            "scale",
                            "Method Argument"
                        ],
                        [
                            "scale",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "TransformedDistribution_421": {
                "base_distribution": {
                    "value": "distr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.independent(self.distr_cls(*distr_args))",
                            "Call"
                        ],
                        [
                            "MixtureSameFamily(Categorical(logits=mix_logits), StudentT(df, loc, dist_scale))",
                            "Call"
                        ],
                        [
                            "self.distr_cls(*distr_args)",
                            "Call"
                        ],
                        [
                            "MixtureSameFamily(Categorical(logits=mix_logits), Normal(loc, dist_scale))",
                            "Call"
                        ],
                        [
                            "MultivariateNormal(loc=loc, scale_tril=scale_tri)",
                            "Call"
                        ],
                        [
                            "self.distr_cls(implicit_quantile_function=implicit_quantile_function, taus=list(args_proj.buffers())[0], nn_output=list(args_proj.buffers())[1], predicted_quantiles=distr_args)",
                            "Call"
                        ]
                    ]
                },
                "transforms": {
                    "value": "[AffineTransform(loc=0, scale=scale)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "AffineTransform_68": {
                "loc": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "scale": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softplus(scale)",
                            "Call"
                        ],
                        [
                            "F.softplus(scale)",
                            "Call"
                        ],
                        [
                            "F.softplus(scale)",
                            "Call"
                        ],
                        [
                            "F.softplus(scale)",
                            "Call"
                        ],
                        [
                            "scale.reshape(shape)",
                            "Call"
                        ],
                        [
                            "scale",
                            "Method Argument"
                        ],
                        [
                            "scale",
                            "Method Argument"
                        ],
                        [
                            "scale",
                            "Method Argument"
                        ],
                        [
                            "scale",
                            "Method Argument"
                        ],
                        [
                            "scale",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "AffineTransform_271": {
                "loc": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "scale": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softplus(scale)",
                            "Call"
                        ],
                        [
                            "F.softplus(scale)",
                            "Call"
                        ],
                        [
                            "F.softplus(scale)",
                            "Call"
                        ],
                        [
                            "F.softplus(scale)",
                            "Call"
                        ],
                        [
                            "scale.reshape(shape)",
                            "Call"
                        ],
                        [
                            "scale",
                            "Method Argument"
                        ],
                        [
                            "scale",
                            "Method Argument"
                        ],
                        [
                            "scale",
                            "Method Argument"
                        ],
                        [
                            "scale",
                            "Method Argument"
                        ],
                        [
                            "scale",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "AffineTransform_311": {
                "loc": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "scale": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softplus(scale)",
                            "Call"
                        ],
                        [
                            "F.softplus(scale)",
                            "Call"
                        ],
                        [
                            "F.softplus(scale)",
                            "Call"
                        ],
                        [
                            "F.softplus(scale)",
                            "Call"
                        ],
                        [
                            "scale.reshape(shape)",
                            "Call"
                        ],
                        [
                            "scale",
                            "Method Argument"
                        ],
                        [
                            "scale",
                            "Method Argument"
                        ],
                        [
                            "scale",
                            "Method Argument"
                        ],
                        [
                            "scale",
                            "Method Argument"
                        ],
                        [
                            "scale",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "AffineTransform_345": {
                "loc": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "scale": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softplus(scale)",
                            "Call"
                        ],
                        [
                            "F.softplus(scale)",
                            "Call"
                        ],
                        [
                            "F.softplus(scale)",
                            "Call"
                        ],
                        [
                            "F.softplus(scale)",
                            "Call"
                        ],
                        [
                            "scale.reshape(shape)",
                            "Call"
                        ],
                        [
                            "scale",
                            "Method Argument"
                        ],
                        [
                            "scale",
                            "Method Argument"
                        ],
                        [
                            "scale",
                            "Method Argument"
                        ],
                        [
                            "scale",
                            "Method Argument"
                        ],
                        [
                            "scale",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "AffineTransform_421": {
                "loc": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "scale": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softplus(scale)",
                            "Call"
                        ],
                        [
                            "F.softplus(scale)",
                            "Call"
                        ],
                        [
                            "F.softplus(scale)",
                            "Call"
                        ],
                        [
                            "F.softplus(scale)",
                            "Call"
                        ],
                        [
                            "scale.reshape(shape)",
                            "Call"
                        ],
                        [
                            "scale",
                            "Method Argument"
                        ],
                        [
                            "scale",
                            "Method Argument"
                        ],
                        [
                            "scale",
                            "Method Argument"
                        ],
                        [
                            "scale",
                            "Method Argument"
                        ],
                        [
                            "scale",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "AffineTransform_569": {
                "loc": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "scale": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softplus(scale)",
                            "Call"
                        ],
                        [
                            "F.softplus(scale)",
                            "Call"
                        ],
                        [
                            "F.softplus(scale)",
                            "Call"
                        ],
                        [
                            "F.softplus(scale)",
                            "Call"
                        ],
                        [
                            "scale.reshape(shape)",
                            "Call"
                        ],
                        [
                            "scale",
                            "Method Argument"
                        ],
                        [
                            "scale",
                            "Method Argument"
                        ],
                        [
                            "scale",
                            "Method Argument"
                        ],
                        [
                            "scale",
                            "Method Argument"
                        ],
                        [
                            "scale",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "pts/modules/feature.py": {
        "torch": {
            "ModuleList_21": {
                "variable": {
                    "value": "self.__embedders",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[create_embedding(c, d) for (c, d) in zip(cardinalities, embedding_dims)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleDict_54": {
                "variable": {
                    "value": "self.embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "{'embed_static': embed_static, 'embed_dynamic': embed_dynamic}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "Embedding_18": {
                "variable": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "chunk_29": {
                "variable": {
                    "value": "cat_feature_slices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "chunks": {
                    "value": "self.__num_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_33": {
                "tensors": {
                    "value": "[embed(cat_feature_slice.squeeze(-1)) for (embed, cat_feature_slice) in zip(self.__embedders, cat_feature_slices)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_72": {
                "tensors": {
                    "value": "processed_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[self.process_static_cat(feat_static_cat), self.process_static_real(feat_static_real), self.process_dynamic_cat(feat_dynamic_cat), self.process_dynamic_real(feat_dynamic_real)]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "pts/modules/flows.py": {
        "torch": {
            "Parameter_79": {
                "variable": {
                    "value": "self.log_gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(input_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_80": {
                "variable": {
                    "value": "self.beta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(input_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_149": {
                "variable": {
                    "value": "self.s_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*s_net",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "linear_218": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "module(x, y)",
                            "Call"
                        ],
                        [
                            "x_hat * torch.sqrt(var + self.eps) + mean",
                            "BinOp"
                        ],
                        [
                            "(u - t) * torch.exp(-log_s)",
                            "BinOp"
                        ],
                        [
                            "torch.zeros_like(u)",
                            "Call"
                        ],
                        [
                            "x * self.scale",
                            "BinOp"
                        ],
                        [
                            "self.net.inverse(u, cond)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight * self.mask",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_274": {
                "variable": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.net",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "zeros_like_291": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "module.inverse(u, y)",
                            "Call"
                        ],
                        [
                            "x * torch.exp(log_s) + t",
                            "BinOp"
                        ],
                        [
                            "(x - m) * torch.exp(-loga)",
                            "BinOp"
                        ],
                        [
                            "self.forward(x, y)",
                            "Call"
                        ],
                        [
                            "self.net(x, cond)",
                            "Call"
                        ],
                        [
                            "self.forward(x, cond)",
                            "Call"
                        ],
                        [
                            "self.base_dist.sample(shape)",
                            "Call"
                        ],
                        [
                            "u",
                            "Method Argument"
                        ],
                        [
                            "u",
                            "Method Argument"
                        ],
                        [
                            "u",
                            "Method Argument"
                        ],
                        [
                            "u",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_213": {
                "variable": {
                    "value": "self.cond_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.rand(n_outputs, cond_label_size) / math.sqrt(cond_label_size)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_257": {
                "variable": {
                    "value": "activation_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Normal_278": {
                "loc": {
                    "value": "self.base_dist_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale": {
                    "value": "self.base_dist_var",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_301": {
                "input": {
                    "value": "self.base_dist.log_prob(u) + log_abs_det_jacobian",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Normal_316": {
                "loc": {
                    "value": "self.base_dist_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale": {
                    "value": "self.base_dist_var",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_341": {
                "input": {
                    "value": "self.base_dist.log_prob(u) + sum_log_abs_det_jacobians",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_79": {
                "*size": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_80": {
                "*size": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_82": {
                "*size": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_83": {
                "*size": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sqrt_106": {
                "input": {
                    "value": "var + self.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_123": {
                "input": {
                    "value": "-self.log_gamma",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_141": {
                "in_features": {
                    "value": "input_size + (cond_label_size if cond_label_size is not None else 0)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Tanh_148": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_148": {
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_156": {
                "variable": {
                    "value": "self.t_net[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tanh_169": {
                "input": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.s_net(mx if y is None else torch.cat([y, mx], dim=-1))",
                            "Call"
                        ],
                        [
                            "self.s_net(mu if y is None else torch.cat([y, mu], dim=-1))",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_191": {
                "input": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.s_net(mx if y is None else torch.cat([y, mx], dim=-1))",
                            "Call"
                        ],
                        [
                            "self.s_net(mu if y is None else torch.cat([y, mu], dim=-1))",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_192": {
                "input": {
                    "value": "-log_s",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_247": {
                "*size": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_248": {
                "*size": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Tanh_259": {
                "variable": {
                    "value": "activation_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "exp_283": {
                "input": {
                    "value": "-loga",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_311": {
                "*size": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_312": {
                "*size": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_336": {
                "input": {
                    "value": "torch.abs(self.scale)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_368": {
                "start": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_21": {
                "start": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_110": {
                "input": {
                    "value": "var + self.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_124": {
                "input": {
                    "value": "var + self.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_126": {
                "input": {
                    "value": "var + self.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Tanh_147": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_147": {
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_163": {
                "tensors": {
                    "value": "[y, mx]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_170": {
                "input": {
                    "value": "log_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tanh(s) * (1 - self.mask)",
                            "BinOp"
                        ],
                        [
                            "torch.tanh(s) * (1 - self.mask)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_186": {
                "tensors": {
                    "value": "[y, mu]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "linear_220": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.log_gamma.exp() * x_hat + self.beta",
                            "BinOp"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.cond_weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_336": {
                "input": {
                    "value": "self.scale",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_24": {
                "start": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "randperm_33": {
                "n": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "randint_37": {
                "low": {
                    "value": "min_prev_degree",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(degrees[-1].min().item(), input_size - 1)",
                            "Call"
                        ],
                        [
                            "min(degrees[-1].min().item(), input_size - 1)",
                            "Call"
                        ]
                    ]
                },
                "high": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "(hidden_size,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_164": {
                "tensors": {
                    "value": "[y, mx]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_187": {
                "tensors": {
                    "value": "[y, mu]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "rand_214": {
                "*size": {
                    "value": "n_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_outputs",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "cond_label_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "exp_295": {
                "input": {
                    "value": "loga[..., i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "arange_26": {
                "start": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "randint_40": {
                "low": {
                    "value": "min_prev_degree",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(degrees[-1].min().item(), input_size - 1)",
                            "Call"
                        ],
                        [
                            "min(degrees[-1].min().item(), input_size - 1)",
                            "Call"
                        ]
                    ]
                },
                "high": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "(input_size,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "pts/modules/gaussian_diffusion.py": {
        "torch": {
            "no_grad_178": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_194": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cond.shape[:-1] + (self.input_size,)",
                            "BinOp"
                        ],
                        [
                            "sample_shape",
                            "variable"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.betas.device",
                            "Attribute"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "no_grad_189": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_202": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_222": {
                "variable": {
                    "value": "t_batched",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.tensor(t, device=device)] * b",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_215": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randint_264": {
                "variable": {
                    "value": "time",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "self.num_timesteps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "(B * T,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_24": {
                "*size": {
                    "value": "(1, *shape[1:])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.betas.device",
                            "Attribute"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "randn_27": {
                "*size": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cond.shape[:-1] + (self.input_size,)",
                            "BinOp"
                        ],
                        [
                            "sample_shape",
                            "variable"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.betas.device",
                            "Attribute"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "l1_loss_248": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_recon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.predict_start_from_noise(x, t=t, noise=self.denoise_fn(x, t, cond=cond))",
                            "Call"
                        ],
                        [
                            "self.denoise_fn(x_noisy, t, cond=cond)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lambda : torch.randn(shape, device=device)",
                            "Lambda"
                        ],
                        [
                            "noise_like(x.shape, device, repeat_noise)",
                            "Call"
                        ],
                        [
                            "default(noise, lambda : torch.randn_like(x_start))",
                            "Call"
                        ],
                        [
                            "default(noise, lambda : torch.randn_like(x_start))",
                            "Call"
                        ],
                        [
                            "noise",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mse_loss_250": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_recon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.predict_start_from_noise(x, t=t, noise=self.denoise_fn(x, t, cond=cond))",
                            "Call"
                        ],
                        [
                            "self.denoise_fn(x_noisy, t, cond=cond)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lambda : torch.randn(shape, device=device)",
                            "Lambda"
                        ],
                        [
                            "noise_like(x.shape, device, repeat_noise)",
                            "Call"
                        ],
                        [
                            "default(noise, lambda : torch.randn_like(x_start))",
                            "Call"
                        ],
                        [
                            "default(noise, lambda : torch.randn_like(x_start))",
                            "Call"
                        ],
                        [
                            "noise",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "full_198": {
                "size": {
                    "value": "(b,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reversed(range(0, self.num_timesteps))",
                            "Call"
                        ],
                        [
                            "reversed(range(0, t))",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.betas.device",
                            "Attribute"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "full_228": {
                "size": {
                    "value": "(b,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reversed(range(0, self.num_timesteps))",
                            "Call"
                        ],
                        [
                            "reversed(range(0, t))",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.betas.device",
                            "Attribute"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_like_234": {
                "input": {
                    "value": "x_start",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_start",
                            "Method Argument"
                        ],
                        [
                            "x_start",
                            "Method Argument"
                        ],
                        [
                            "x_start",
                            "Method Argument"
                        ],
                        [
                            "x_start",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "randn_like_242": {
                "input": {
                    "value": "x_start",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_start",
                            "Method Argument"
                        ],
                        [
                            "x_start",
                            "Method Argument"
                        ],
                        [
                            "x_start",
                            "Method Argument"
                        ],
                        [
                            "x_start",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "smooth_l1_loss_252": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_recon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.predict_start_from_noise(x, t=t, noise=self.denoise_fn(x, t, cond=cond))",
                            "Call"
                        ],
                        [
                            "self.denoise_fn(x_noisy, t, cond=cond)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lambda : torch.randn(shape, device=device)",
                            "Lambda"
                        ],
                        [
                            "noise_like(x.shape, device, repeat_noise)",
                            "Call"
                        ],
                        [
                            "default(noise, lambda : torch.randn_like(x_start))",
                            "Call"
                        ],
                        [
                            "default(noise, lambda : torch.randn_like(x_start))",
                            "Call"
                        ],
                        [
                            "noise",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_222": {
                "data": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "default(t, self.num_timesteps - 1)",
                            "Call"
                        ],
                        [
                            "t",
                            "Method Argument"
                        ],
                        [
                            "t",
                            "Method Argument"
                        ],
                        [
                            "t",
                            "Method Argument"
                        ],
                        [
                            "t",
                            "Method Argument"
                        ],
                        [
                            "t",
                            "Method Argument"
                        ],
                        [
                            "t",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "t",
                            "Method Argument"
                        ],
                        [
                            "t",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.betas.device",
                            "Attribute"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "pts/modules/iqn_modules.py": {
        "torch": {
            "Sequential_20": {
                "variable": {
                    "value": "self.output_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(in_features, in_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_40": {
                "variable": {
                    "value": "self.output_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.n_cos_embedding, self.n_cos_embedding)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "repeat_interleave_52": {
                "variable": {
                    "value": "integers",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.arange(0, self.n_cos_embedding).unsqueeze(dim=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "repeats": {
                    "value": "tau.shape[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cos_57": {
                "input": {
                    "value": "pi * tau.unsqueeze(dim=-1) * integers",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_21": {
                "in_features": {
                    "value": "in_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_features",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "in_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Softplus_22": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_23": {
                "in_features": {
                    "value": "in_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_features",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_41": {
                "in_features": {
                    "value": "self.n_cos_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.n_cos_embedding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "PReLU_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_43": {
                "in_features": {
                    "value": "self.n_cos_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_output",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_like_29": {
                "input": {
                    "value": "embedded_tau",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.quantile_layer(tau)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_53": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "self.n_cos_embedding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_53": {
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "pts/modules/scaler.py": {
        "torch": {
            "max_93": {
                "variable": {
                    "value": "denominator",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "total_observed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_observed.sum(dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_97": {
                "variable": {
                    "value": "denominator",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "num_observed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "observed_indicator.sum(dim=dim)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_102": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "sum_observed > torch.zeros_like(sum_observed)",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.compute_scale(data, observed_indicator)",
                            "Call"
                        ],
                        [
                            "scale.unsqueeze(dim=dim)",
                            "Call"
                        ],
                        [
                            "sum_observed / denominator",
                            "BinOp"
                        ],
                        [
                            "torch.where(sum_observed > torch.zeros_like(sum_observed), scale, default_scale * torch.ones_like(num_observed))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "default_scale * torch.ones_like(num_observed)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_108": {
                "input": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.compute_scale(data, observed_indicator)",
                            "Call"
                        ],
                        [
                            "scale.unsqueeze(dim=dim)",
                            "Call"
                        ],
                        [
                            "sum_observed / denominator",
                            "BinOp"
                        ],
                        [
                            "torch.where(sum_observed > torch.zeros_like(sum_observed), scale, default_scale * torch.ones_like(num_observed))",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_128": {
                "input": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "mean_128": {
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ]
                    ]
                }
            },
            "tensor_76": {
                "data": {
                    "value": "minimum_scale",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_like_93": {
                "input": {
                    "value": "total_observed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_observed.sum(dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_97": {
                "input": {
                    "value": "num_observed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "observed_indicator.sum(dim=dim)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_103": {
                "input": {
                    "value": "sum_observed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(data.abs() * observed_indicator).sum(dim=dim)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_105": {
                "input": {
                    "value": "num_observed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "observed_indicator.sum(dim=dim)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "pts/trainer.py": {
        "torch": {
            "Adam_44": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "OneCycleLR_48": {
                "variable": {
                    "value": "lr_scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Adam(net.parameters(), lr=self.learning_rate, weight_decay=self.weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "max_lr": {
                    "value": "self.maximum_learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "steps_per_epoch": {
                    "value": "self.num_batches_per_epoch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epochs": {
                    "value": "self.epochs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__86": {
                "parameters": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.clip_gradient",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_102": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "test/distributions/test_piecewise_linear.py": {
        "torch": {
            "reshape_95": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(len(target),)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_121": {
                "variable": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(*batch_shape,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_122": {
                "variable": {
                    "value": "slopes",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(*batch_shape, num_pieces)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_126": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "batch_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "samples.shape[1:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "normal_186": {
                "variable": {
                    "value": "net_out",
                    "type": "variable",
                    "possible_values": []
                },
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "size": {
                    "value": "(1000, 30)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "std": {
                    "value": "100.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "from_numpy_196": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.random.uniform(low=(gamma - width).detach().numpy(), high=(sup_support + width).detach().numpy()).astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "le_193": {
                "input": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(size=(*batch_shape,))",
                            "Call"
                        ],
                        [
                            "torch.Tensor([-1.0])",
                            "Call"
                        ],
                        [
                            "args_proj(net_out)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "sup_support",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gamma + (slopes * knot_spacings).sum(-1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "all_193": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_124": {
                "size": {
                    "value": "(*batch_shape, num_pieces)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "min_209": {
                "input": {
                    "value": "crps_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "distr.crps(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "min_205": {
                "input": {
                    "value": "cdf_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "distr.cdf(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_205": {
                "input": {
                    "value": "cdf_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "distr.cdf(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_67": {
                "size": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_68": {
                "shape": {
                    "value": "(1, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_69": {
                "shape": {
                    "value": "(1, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_77": {
                "size": {
                    "value": "(2,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_78": {
                "shape": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_79": {
                "shape": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Tensor_177": {},
            "Tensor_179": {},
            "Tensor_172": {},
            "Tensor_173": {}
        }
    },
    "test/distributions/test_zero_inflated.py": {
        "torch": {
            "rand_25": {
                "variable": {
                    "value": "gate",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "gate_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gate_shape",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Normal_26": {
                "variable": {
                    "value": "base_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "torch.randn(base_shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "scale": {
                    "value": "torch.randn(base_shape).exp()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Poisson_40": {
                "variable": {
                    "value": "pois",
                    "type": "variable",
                    "possible_values": []
                },
                "rate": {
                    "value": "torch.tensor(rate)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "NegativeBinomial_68": {
                "variable": {
                    "value": "neg_bin",
                    "type": "variable",
                    "possible_values": []
                },
                "total_count": {
                    "value": "torch.tensor(total_count)",
                    "type": "Call",
                    "possible_values": []
                },
                "probs": {
                    "value": "torch.tensor(probs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_26": {
                "*size": {
                    "value": "base_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "base_shape",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "exp_26": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_39": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_39": {
                "data": {
                    "value": "rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rate",
                            "Method Argument"
                        ],
                        [
                            "rate",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_40": {
                "data": {
                    "value": "rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rate",
                            "Method Argument"
                        ],
                        [
                            "rate",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_51": {
                "data": {
                    "value": "rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rate",
                            "Method Argument"
                        ],
                        [
                            "rate",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_66": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_68": {
                "data": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "probs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_81": {
                "data": {
                    "value": "gate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand(gate_shape)",
                            "Call"
                        ],
                        [
                            "gate",
                            "Method Argument"
                        ],
                        [
                            "gate",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_66": {
                "data": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "probs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_82": {
                "data": {
                    "value": "total_count",
                    "type": "variable",
                    "possible_values": [
                        [
                            "total_count",
                            "Method Argument"
                        ],
                        [
                            "total_count",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_83": {
                "data": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "test/model/deepar/test_auxillary_outputs.py": {
        "torch": {}
    },
    "test/model/deepar/test_lags.py": {
        "torch": {
            "randn_30": {
                "variable": {
                    "value": "sequence",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(N, T, C)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "test/model/test_forecast.py": {
        "torch": {
            "Uniform_33": {
                "low": {
                    "value": "torch.zeros(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "high": {
                    "value": "torch.ones(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Uniform_63": {
                "low": {
                    "value": "torch.tensor([0.0, 0.0])",
                    "type": "Call",
                    "possible_values": []
                },
                "high": {
                    "value": "torch.tensor([1.0, 2.0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Uniform_102": {
                "low": {
                    "value": "torch.zeros(size=(5, 2))",
                    "type": "Call",
                    "possible_values": []
                },
                "high": {
                    "value": "torch.ones(size=(5, 2))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_33": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_33": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_64": {
                "data": {
                    "value": "[1.0, 2.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_102": {
                "size": {
                    "value": "(5, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_102": {
                "size": {
                    "value": "(5, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "test/modules/test_distribution_output.py": {
        "torch": {
            "ones_53": {
                "variable": {
                    "value": "dummy_data",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(samples), 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "TensorDataset_55": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "dummy_data",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DataLoader_56": {
                "variable": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(dummy_data, samples)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "BATCH_SIZE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "int"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SGD_58": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "arg_proj.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Beta_93": {
                "variable": {
                    "value": "distr",
                    "type": "variable",
                    "possible_values": []
                },
                "concentration1": {
                    "value": "concentration1s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros((NUM_SAMPLES,)) + concentration1",
                            "BinOp"
                        ]
                    ]
                },
                "concentration0": {
                    "value": "concentration0s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros((NUM_SAMPLES,)) + concentration0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "NegativeBinomial_130": {
                "variable": {
                    "value": "neg_bin_distr",
                    "type": "variable",
                    "possible_values": []
                },
                "total_count": {
                    "value": "total_counts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros((NUM_SAMPLES,)) + total_count",
                            "BinOp"
                        ]
                    ]
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros((NUM_SAMPLES,)) + logit",
                            "BinOp"
                        ]
                    ]
                }
            },
            "StudentT_160": {
                "variable": {
                    "value": "distr",
                    "type": "variable",
                    "possible_values": []
                },
                "df": {
                    "value": "dfs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros((NUM_SAMPLES,)) + df",
                            "BinOp"
                        ]
                    ]
                },
                "loc": {
                    "value": "locs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros((NUM_SAMPLES,)) + loc",
                            "BinOp"
                        ]
                    ]
                },
                "scale": {
                    "value": "scales",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros((NUM_SAMPLES,)) + scale",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Independent_196": {
                "variable": {
                    "value": "distr",
                    "type": "variable",
                    "possible_values": []
                },
                "base_distribution": {
                    "value": "Normal(loc=torch.Tensor(loc), scale=torch.Tensor(diag))",
                    "type": "Call",
                    "possible_values": []
                },
                "reinterpreted_batch_ndims": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Independent_211": {
                "variable": {
                    "value": "distr",
                    "type": "variable",
                    "possible_values": []
                },
                "base_distribution": {
                    "value": "Normal(loc=torch.Tensor(loc_hat), scale=torch.Tensor(diag_hat))",
                    "type": "Call",
                    "possible_values": []
                },
                "reinterpreted_batch_ndims": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LowRankMultivariateNormal_236": {
                "variable": {
                    "value": "distr",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "torch.Tensor(loc.copy())",
                    "type": "Call",
                    "possible_values": []
                },
                "cov_diag": {
                    "value": "torch.Tensor(np.diag(cov_diag).copy())",
                    "type": "Call",
                    "possible_values": []
                },
                "cov_factor": {
                    "value": "torch.Tensor(cov_factor.copy())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LowRankMultivariateNormal_257": {
                "variable": {
                    "value": "distr",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "torch.Tensor(loc_hat)",
                    "type": "Call",
                    "possible_values": []
                },
                "cov_diag": {
                    "value": "torch.Tensor(cov_diag_hat)",
                    "type": "Call",
                    "possible_values": []
                },
                "cov_factor": {
                    "value": "torch.Tensor(cov_factor_hat)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MultivariateNormal_285": {
                "variable": {
                    "value": "distr",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "torch.Tensor(mu)",
                    "type": "Call",
                    "possible_values": []
                },
                "scale_tril": {
                    "value": "torch.Tensor(L)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MultivariateNormal_297": {
                "variable": {
                    "value": "distr",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "torch.tensor(mu_hat)",
                    "type": "Call",
                    "possible_values": []
                },
                "scale_tril": {
                    "value": "torch.tensor(L_hat)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_90": {
                "*size": {
                    "value": "(NUM_SAMPLES,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_91": {
                "*size": {
                    "value": "(NUM_SAMPLES,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_127": {
                "*size": {
                    "value": "(NUM_SAMPLES,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_128": {
                "*size": {
                    "value": "(NUM_SAMPLES,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_156": {
                "*size": {
                    "value": "(NUM_SAMPLES,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_157": {
                "*size": {
                    "value": "(NUM_SAMPLES,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_158": {
                "*size": {
                    "value": "(NUM_SAMPLES,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Normal_196": {
                "loc": {
                    "value": "torch.Tensor(loc)",
                    "type": "Call",
                    "possible_values": []
                },
                "scale": {
                    "value": "torch.Tensor(diag)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Normal_212": {
                "loc": {
                    "value": "torch.Tensor(loc_hat)",
                    "type": "Call",
                    "possible_values": []
                },
                "scale": {
                    "value": "torch.Tensor(diag_hat)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_grad_norm__70": {
                "parameters": {
                    "value": "arg_proj.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "10.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_297": {
                "data": {
                    "value": "L_hat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "maximum_likelihood_estimate_sgd(MultivariateNormalOutput(dim=dim), samples, init_biases=None, learning_rate=0.01, num_epochs=10)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_80": {
                "*size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_78": {
                "*size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "test/modules/test_feature.py": {
        "torch": {
            "ones_60": {
                "variable": {
                    "value": "exp_output",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "out_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config['shape'][:-1] + (sum(config['kwargs']['embedding_dims']),)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_59": {
                "*size": {
                    "value": "config['shape']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "abs_63": {
                "input": {
                    "value": "torch.sum(act_output - exp_output)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_242": {
                "variable": {
                    "value": "exp_output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_63": {
                "input": {
                    "value": "act_output - exp_output",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "empty_188": {
                "variable": {
                    "value": "static_real",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(N, C)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "empty_237": {
                "variable": {
                    "value": "dynamic_real",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(N, T, C)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sum_245": {
                "input": {
                    "value": "exp_output - act_output",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_142": {
                "*size": {
                    "value": "(N, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_143": {
                "*size": {
                    "value": "(N, T, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_184": {
                "*size": {
                    "value": "(N, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_185": {
                "*size": {
                    "value": "(N, T, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_193": {
                "*size": {
                    "value": "(N, T, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_194": {
                "*size": {
                    "value": "(N, T, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_233": {
                "*size": {
                    "value": "(N, T, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_234": {
                "*size": {
                    "value": "(N, T, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_147": {
                "tensors": {
                    "value": "[torch.randint(0, config['embed_static']['cardinalities'][c], (N, 1)) for c in range(C)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_160": {
                "*size": {
                    "value": "(N, T, sum(config['embed_static']['embedding_dims']))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_167": {
                "tensors": {
                    "value": "[torch.randint(0, config['embed_static']['cardinalities'][c], (N, 1)) for c in range(C)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_198": {
                "tensors": {
                    "value": "[torch.randint(0, config['embed_dynamic']['cardinalities'][c], (N, T, 1)) for c in range(C)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_211": {
                "*size": {
                    "value": "(N, T, sum(config['embed_dynamic']['embedding_dims']))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_218": {
                "tensors": {
                    "value": "[torch.randint(0, config['embed_dynamic']['cardinalities'][c], (N, T, 1)) for c in range(C)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randint_149": {
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "config['embed_static']['cardinalities'][c]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "(N, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_169": {
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "config['embed_static']['cardinalities'][c]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "(N, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_200": {
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "config['embed_dynamic']['cardinalities'][c]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "(N, T, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_220": {
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "config['embed_dynamic']['cardinalities'][c]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "(N, T, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "test/modules/test_implicit_quantile_distr_output.py": {
        "torch": {
            "ones_42": {
                "variable": {
                    "value": "dummy_data",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(samples), 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "TensorDataset_44": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "dummy_data",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DataLoader_45": {
                "variable": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(dummy_data, samples)",
                            "Call"
                        ],
                        [
                            "get_dataset('constant')",
                            "Call"
                        ],
                        [
                            "get_dataset('constant')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "BATCH_SIZE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "int"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SGD_47": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "arg_proj.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DataLoader_66": {
                "variable": {
                    "value": "sampling_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(dummy_data, samples)",
                            "Call"
                        ],
                        [
                            "get_dataset('constant')",
                            "Call"
                        ],
                        [
                            "get_dataset('constant')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "BATCH_SIZE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "int"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Tensor_87": {
                "variable": {
                    "value": "distr_mean",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_88": {
                "variable": {
                    "value": "distr_std",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Normal_91": {
                "variable": {
                    "value": "distr",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "distr_mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Tensor([10.0])",
                            "Call"
                        ],
                        [
                            "0.5 * (a + b)",
                            "BinOp"
                        ],
                        [
                            "torch.Tensor([0.2])",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "distr_std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Tensor([4.0])",
                            "Call"
                        ],
                        [
                            "(1.0 / 12.0 * (b - a) ** 2) ** 0.5",
                            "BinOp"
                        ],
                        [
                            "distr_mean * (1 - distr_mean)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Tensor_115": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_116": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Uniform_121": {
                "variable": {
                    "value": "distr",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Tensor([0.0])",
                            "Call"
                        ]
                    ]
                },
                "high": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Tensor([20.0])",
                            "Call"
                        ]
                    ]
                }
            },
            "Tensor_143": {
                "variable": {
                    "value": "distr_mean",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_145": {
                "variable": {
                    "value": "distr_pp10",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_146": {
                "variable": {
                    "value": "distr_pp90",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Bernoulli_147": {
                "variable": {
                    "value": "distr",
                    "type": "variable",
                    "possible_values": []
                },
                "probs": {
                    "value": "distr_mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Tensor([10.0])",
                            "Call"
                        ],
                        [
                            "0.5 * (a + b)",
                            "BinOp"
                        ],
                        [
                            "torch.Tensor([0.2])",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_72": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_74": {
                "*size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_77": {
                "*size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "test/modules/test_scaler.py": {
        "torch": {
            "tensor_23": {
                "data": {
                    "value": "[[1.0] * 50, [0.0] * 25 + [3.0] * 25, [2.0] * 49 + [1.5] * 1, [0.0] * 50, [1.0] * 50]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_32": {
                "data": {
                    "value": "[[1.0] * 50, [0.0] * 25 + [1.0] * 25, [0.0] * 49 + [1.0] * 1, [1.0] * 50, [0.0] * 50]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_41": {
                "data": {
                    "value": "[1.0, 3.0, 1.5, 1.00396824, 1.00396824]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_45": {
                "data": {
                    "value": "[[1.0] * 50, [0.0] * 25 + [3.0] * 25, [2.0] * 49 + [1.5] * 1, [0.0] * 50, [1.0] * 50]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_54": {
                "data": {
                    "value": "[[1.0] * 50, [0.0] * 25 + [1.0] * 25, [0.0] * 49 + [1.0] * 1, [1.0] * 50, [0.0] * 50]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_63": {
                "data": {
                    "value": "[1.0, 3.0, 1.5, 1.00396824, 1.00396824]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "unsqueeze_63": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_67": {
                "data": {
                    "value": "[[[1.0]] * 50, [[0.0]] * 25 + [[3.0]] * 25, [[2.0]] * 49 + [[1.5]] * 1, [[0.0]] * 50, [[1.0]] * 50]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_76": {
                "data": {
                    "value": "[[[1.0]] * 50, [[0.0]] * 25 + [[1.0]] * 25, [[0.0]] * 49 + [[1.0]] * 1, [[1.0]] * 50, [[0.0]] * 50]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_85": {
                "data": {
                    "value": "[1.0, 3.0, 1.5, 1.00396824, 1.00396824]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "unsqueeze_85": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_89": {
                "data": {
                    "value": "[[[1.0, 2.0]] * 50, [[0.0, 0.0]] * 25 + [[3.0, 6.0]] * 25, [[2.0, 4.0]] * 49 + [[1.5, 3.0]] * 1, [[0.0, 0.0]] * 50, [[1.0, 2.0]] * 50]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_98": {
                "data": {
                    "value": "[[[1.0, 1.0]] * 50, [[0.0, 1.0]] * 25 + [[1.0, 0.0]] * 25, [[1.0, 0.0]] * 49 + [[0.0, 1.0]] * 1, [[1.0, 0.0]] * 50, [[0.0, 1.0]] * 50]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_107": {
                "data": {
                    "value": "[[1.0, 2.0], [3.0, 1.61111116], [2.0, 3.0], [1.28160918, 1.61111116], [1.28160918, 2.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_119": {
                "data": {
                    "value": "[[120.0] * 25 + [150.0] * 25, [0.0] * 10 + [3.0] * 20 + [61.0] * 20, [0.0] * 50, [0.02] * 10 + [0.0] * 30 + [0.03] * 10]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_127": {
                "data": {
                    "value": "[[1.0] * 25 + [1.0] * 25, [0.0] * 10 + [1.0] * 20 + [1.0] * 20, [0.0] * 50, [1.0] * 10 + [0.0] * 30 + [1.0] * 10]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_135": {
                "data": {
                    "value": "[135.0, 32.0, 73.00454712, 0.025]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "randn_139": {
                "*size": {
                    "value": "(5, 30)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_140": {
                "*size": {
                    "value": "(5, 30)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randn_145": {
                "*size": {
                    "value": "(5, 30, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_146": {
                "*size": {
                    "value": "(5, 30, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randn_151": {
                "*size": {
                    "value": "(5, 30, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_152": {
                "*size": {
                    "value": "(5, 30, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randn_157": {
                "*size": {
                    "value": "(10, 20, 30)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_159": {
                "*size": {
                    "value": "(10, 30)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randn_163": {
                "*size": {
                    "value": "(10, 20, 30)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_164": {
                "*size": {
                    "value": "(10, 20, 30)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_165": {
                "*size": {
                    "value": "(10, 30)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randn_169": {
                "*size": {
                    "value": "(10, 20, 30)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_170": {
                "*size": {
                    "value": "(10, 20, 30)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_171": {
                "*size": {
                    "value": "(10, 30)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "norm_199": {
                "input": {
                    "value": "target - target_scaled",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_200": {
                "input": {
                    "value": "torch.ones_like(target).mean(dim=1) - scale",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_141": {
                "*size": {
                    "value": "(5,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_147": {
                "*size": {
                    "value": "(5, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_153": {
                "*size": {
                    "value": "(5, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randn_158": {
                "*size": {
                    "value": "(10, 20, 30)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_like_200": {
                "input": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mean_200": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    }
}