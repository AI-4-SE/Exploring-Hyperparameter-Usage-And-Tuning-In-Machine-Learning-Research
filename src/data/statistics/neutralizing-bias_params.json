{
    "baselines/data.py": {
        "sklearn": {
            "CountVectorizer_175": {
                "vocabulary": {
                    "value": "src_tok2id",
                    "type": "Variable",
                    "possible_values": []
                },
                "binary": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "CountVectorizer_183": {
                "vocabulary": {
                    "value": "tgt_tok2id",
                    "type": "Variable",
                    "possible_values": []
                },
                "binary": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "TfidfVectorizer_201": {
                "vocabulary": {
                    "value": "tgt_tok2id",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        },
        "torch": {}
    },
    "baselines/models.py": {
        "sklearn": {
            "LinearSVC_286": {
                "variable": {
                    "value": "self.predictor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "shuffle_298": {
                "variable": {
                    "value": "(X, Y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "Y",
                    "type": "Variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "CountVectorizer_282": {
                "variable": {
                    "value": "self.vectorizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "vocabulary": {
                    "value": "vocab",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "binary": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "Embedding_73": {
                "variable": {
                    "value": "self.src_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.src_vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.options['emb_dim']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "self.pad_id_src",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_124": {
                "variable": {
                    "value": "self.c_bridge",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.options['src_hidden_dim']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.options['tgt_hidden_dim']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_127": {
                "variable": {
                    "value": "self.h_bridge",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "attr_size + self.options['src_hidden_dim']",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.options['tgt_hidden_dim']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_166": {
                "variable": {
                    "value": "self.output_projection",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.options['tgt_hidden_dim']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "tgt_vocab_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Softmax_170": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Embedding_81": {
                "variable": {
                    "value": "self.tgt_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.tgt_vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.options['emb_dim']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "self.pad_id_tgt",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_93": {
                "variable": {
                    "value": "self.ctx_bridge",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.options['src_hidden_dim']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.options['tgt_hidden_dim']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Embedding_103": {
                "variable": {
                    "value": "self.attribute_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.options['emb_dim']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_188": {
                "variable": {
                    "value": "h_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(src_h_t[-1], src_h_t[-2])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_189": {
                "variable": {
                    "value": "c_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(src_c_t[-1], src_c_t[-2])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_199": {
                "variable": {
                    "value": "query",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "src_outputs[:, 0, :].shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_230": {
                "variable": {
                    "value": "h_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(h_t, a_ht)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "load_45": {
                "f": {
                    "value": "checkpoint_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Parameter_154": {
                "variable": {
                    "value": "self.side_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(self.config['experimental']['n_side_outputs'], self.options['emb_dim'])",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_157": {
                "variable": {
                    "value": "self.h_compression",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.options['emb_dim'] + self.options['src_hidden_dim']",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.options['tgt_hidden_dim']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Softmax_160": {
                "variable": {
                    "value": "self.side_softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "bmm_219": {
                "variable": {
                    "value": "weighted_emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "embs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.side_embeddings.repeat(side_logit.shape[0], 1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_219": {
                "variable": {
                    "value": "weighted_emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_220": {
                "variable": {
                    "value": "h_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(h_t, weighted_emb)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_240": {
                "variable": {
                    "value": "h_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(h_t, a_ht)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_214": {
                "variable": {
                    "value": "probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "probs.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_236": {
                "variable": {
                    "value": "a_ht",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(a_ht[-1], a_ht[-2])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_155": {
                "*size": {
                    "value": "self.config['experimental']['n_side_outputs']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "self.options['emb_dim']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "deprecated/scripts/data/diff_vec_clustering_attempt/diff_explore.py": {
        "sklearn": {
            "DBSCAN_27": {
                "variable": {
                    "value": "clustering",
                    "type": "Variable",
                    "possible_values": []
                },
                "eps": {
                    "value": "eps",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sd * 0.01",
                            "BinOp"
                        ]
                    ]
                },
                "min_samples": {
                    "value": "min_samples",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                },
                "n_jobs": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "deprecated/scripts/data/make_attribute_vocab.py": {
        "sklearn": {
            "CountVectorizer_13": {
                "variable": {
                    "value": "self.vectorizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "deprecated/turking/statement_quality_scripts/mturk_to_datafile.py": {
        "sklearn": {
            "TfidfVectorizer_51": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/tagging/baseline.py": {
        "sklearn": {
            "shuffle_93": {
                "variable": {
                    "value": "(trainX, trainY)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "trainX",
                    "type": "Variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "trainY",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "LogisticRegression_96": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/tagging/train.py": {
        "sklearn": {},
        "torch": {
            "save_135": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "ARGS.working_dir + '/model_%d.ckpt' % epoch",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "baselines/cuda.py": {
        "torch": {
            "device_count_5": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "baselines/decoders.py": {
        "torch": {
            "LSTMCell_24": {
                "variable": {
                    "value": "self.cell",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.options['emb_dim']",
                            "Subscript"
                        ],
                        [
                            "hidden_dim",
                            "Name"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.options['tgt_hidden_dim']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_46": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(output, 0).view(input.size(0), *output[0].size())",
                            "Call"
                        ],
                        [
                            "output.transpose(0, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_62": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.options['dropout']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "stack_87": {
                "variable": {
                    "value": "h_final",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "h_final",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.stack(h_final)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_88": {
                "variable": {
                    "value": "c_final",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "c_final",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.stack(c_final)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "baselines/encoders.py": {
        "torch": {
            "LSTM_16": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "emb_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "bidirectional",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_49": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "src_embedding",
                    "type": "Variable",
                    "possible_values": []
                },
                "lengths": {
                    "value": "srclens",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_56": {
                "variable": {
                    "value": "(outputs, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_27": {
                "*size": {
                    "value": "self.lstm.num_layers * self.num_directions",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.lstm.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_32": {
                "*size": {
                    "value": "self.lstm.num_layers * self.num_directions",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.lstm.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "baselines/evaluation.py": {
        "torch": {
            "ones_343": {
                "variable": {
                    "value": "weight_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(tgt['tok2id'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_347": {
                "variable": {
                    "value": "loss_criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.ones(len(tgt['tok2id']))",
                            "Call"
                        ],
                        [
                            "weight_mask.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_167": {
                "variable": {
                    "value": "tgt_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(tgt_input, next_preds.unsqueeze(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_164": {
                "ndarray": {
                    "value": "sorted_indices[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "baselines/inference.py": {
        "torch": {}
    },
    "baselines/ops.py": {
        "torch": {
            "CrossEntropyLoss_51": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Softmax_67": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_68": {
                "variable": {
                    "value": "self.out_projection",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "output_dim",
                            "Name"
                        ]
                    ]
                }
            },
            "Tanh_69": {
                "variable": {
                    "value": "self.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "bmm_76": {
                "variable": {
                    "value": "weighted_context",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.softmax(scores)",
                            "Call"
                        ],
                        [
                            "probs.unsqueeze(1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "keys",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "squeeze_76": {
                "variable": {
                    "value": "weighted_context",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_87": {
                "variable": {
                    "value": "self.query_in_projection",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_88": {
                "variable": {
                    "value": "self.key_in_projection",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Softmax_89": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_90": {
                "variable": {
                    "value": "self.out_projection",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tanh_91": {
                "variable": {
                    "value": "self.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "bmm_127": {
                "variable": {
                    "value": "weighted_context",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_probs_transposed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "attn_probs.unsqueeze(1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "values",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "att_keys",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "squeeze_127": {
                "variable": {
                    "value": "weighted_context",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_129": {
                "variable": {
                    "value": "context_query_mixed",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(weighted_context, query)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_95": {
                "variable": {
                    "value": "self.v_att",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Tanh_96": {
                "variable": {
                    "value": "self.score_tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "bmm_140": {
                "input": {
                    "value": "keys",
                    "type": "Variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "query.unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_140": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_15": {
                "*args": {
                    "value": "nn.Linear(input_dim, hidden_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_16": {
                "in_features": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "output_dim",
                            "Name"
                        ]
                    ]
                }
            },
            "Dropout_18": {
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Sequential_22": {
                "*args": {
                    "value": "nn.Linear(input_dim, hidden_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_29": {
                "*args": {
                    "value": "nn.Linear(hidden_dim, output_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_23": {
                "in_features": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "output_dim",
                            "Name"
                        ]
                    ]
                }
            },
            "Dropout_25": {
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_30": {
                "in_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "output_dim",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_32": {
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "baselines/train.py": {
        "torch": {
            "ones_96": {
                "variable": {
                    "value": "weight_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "tgt_vocab_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "len(tgt['tok2id'])",
                            "Call"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_98": {
                "variable": {
                    "value": "loss_criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.ones(tgt_vocab_size)",
                            "Call"
                        ],
                        [
                            "weight_mask.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_103": {
                "seed": {
                    "value": "config['training']['random_seed']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Adam_126": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "config['training']['learning_rate']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "SGD_128": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "config['training']['learning_rate']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "clip_grad_norm__203": {
                "variable": {
                    "value": "norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "config['training']['max_norm']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Adadelta_130": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "config['training']['learning_rate']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "save_161": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "working_dir + '/model.%s.ckpt' % epoch",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "deprecated/interpretation/feature_importance.py": {
        "torch": {
            "load_23": {
                "variable": {
                    "value": "state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "ckpt_path",
                    "type": "Variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "src/joint/inference.py": {
        "torch": {
            "load_75": {
                "f": {
                    "value": "ARGS.tagger_checkpoint",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_79": {
                "f": {
                    "value": "ARGS.debias_checkpoint",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_94": {
                "f": {
                    "value": "ARGS.checkpoint",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_97": {
                "f": {
                    "value": "ARGS.checkpoint",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "src/joint/model.py": {
        "torch": {
            "Softmax_23": {
                "variable": {
                    "value": "self.token_sm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Softmax_24": {
                "variable": {
                    "value": "self.time_sm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Threshold_25": {
                "variable": {
                    "value": "self.tok_threshold",
                    "type": "Attribute",
                    "possible_values": []
                },
                "threshold": {
                    "value": "ARGS.zero_threshold",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "-10000.0 if ARGS.sequence_softmax else 0.0",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "stack_109": {
                "variable": {
                    "value": "tgt_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[b.get_current_state() for b in beams]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "t_109": {
                "variable": {
                    "value": "tgt_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_121": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(out).transpose(1, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_121": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_165": {
                "variable": {
                    "value": "tgt_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(tgt_input, next_preds.unsqueeze(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_172": {
                "obj": {
                    "value": "self.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "stack_117": {
                "tensors": {
                    "value": "b.get_hyp(k)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_175": {
                "f": {
                    "value": "path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "no_grad_126": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_160": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_164": {
                "input": {
                    "value": "word_probs[:, -1, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/joint/train.py": {
        "torch": {
            "save_153": {
                "obj": {
                    "value": "tag_model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "ARGS.working_dir + '/tagger.ckpt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_122": {
                "f": {
                    "value": "ARGS.tagger_checkpoint",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_189": {
                "f": {
                    "value": "ARGS.debias_checkpoint",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_207": {
                "obj": {
                    "value": "debias_model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "ARGS.working_dir + '/debiaser.ckpt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "src/joint/utils.py": {
        "torch": {
            "clip_grad_norm__46": {
                "variable": {
                    "value": "norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "3.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "no_grad_79": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/seq2seq/model.py": {
        "torch": {
            "Linear_37": {
                "variable": {
                    "value": "self.query_in_projection",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(h_tilde, cy)",
                            "Tuple"
                        ],
                        [
                            "(hy, cy)",
                            "Tuple"
                        ],
                        [
                            "dec_initial_state",
                            "Name"
                        ],
                        [
                            "(h_tilde_i.squeeze(0), ci.squeeze(0))",
                            "Tuple"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(h_tilde, cy)",
                            "Tuple"
                        ],
                        [
                            "(hy, cy)",
                            "Tuple"
                        ],
                        [
                            "dec_initial_state",
                            "Name"
                        ],
                        [
                            "(h_tilde_i.squeeze(0), ci.squeeze(0))",
                            "Tuple"
                        ]
                    ]
                }
            },
            "Linear_38": {
                "variable": {
                    "value": "self.key_in_projection",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(h_tilde, cy)",
                            "Tuple"
                        ],
                        [
                            "(hy, cy)",
                            "Tuple"
                        ],
                        [
                            "dec_initial_state",
                            "Name"
                        ],
                        [
                            "(h_tilde_i.squeeze(0), ci.squeeze(0))",
                            "Tuple"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(h_tilde, cy)",
                            "Tuple"
                        ],
                        [
                            "(hy, cy)",
                            "Tuple"
                        ],
                        [
                            "dec_initial_state",
                            "Name"
                        ],
                        [
                            "(h_tilde_i.squeeze(0), ci.squeeze(0))",
                            "Tuple"
                        ]
                    ]
                }
            },
            "Linear_41": {
                "variable": {
                    "value": "self.cov_projection",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(h_tilde, cy)",
                            "Tuple"
                        ],
                        [
                            "(hy, cy)",
                            "Tuple"
                        ],
                        [
                            "dec_initial_state",
                            "Name"
                        ],
                        [
                            "(h_tilde_i.squeeze(0), ci.squeeze(0))",
                            "Tuple"
                        ]
                    ]
                }
            },
            "Softmax_42": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_43": {
                "variable": {
                    "value": "self.out_projection",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(h_tilde, cy)",
                            "Tuple"
                        ],
                        [
                            "(hy, cy)",
                            "Tuple"
                        ],
                        [
                            "dec_initial_state",
                            "Name"
                        ],
                        [
                            "(h_tilde_i.squeeze(0), ci.squeeze(0))",
                            "Tuple"
                        ]
                    ]
                }
            },
            "Tanh_44": {
                "variable": {
                    "value": "self.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "bmm_91": {
                "variable": {
                    "value": "weighted_context",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_probs_transposed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "attn_probs.unsqueeze(1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "values",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "att_keys",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "squeeze_91": {
                "variable": {
                    "value": "weighted_context",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_93": {
                "variable": {
                    "value": "context_query_mixed",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(weighted_context, query)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LSTM_122": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "emb_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "bidirectional",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "LSTMCell_180": {
                "variable": {
                    "value": "self.cell",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_208": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(output, 0).view(input.size(0), *output[0].size())",
                            "Call"
                        ],
                        [
                            "output.transpose(0, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_213": {
                "variable": {
                    "value": "attn_dists",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "attn_dists",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(attn_dists).squeeze(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_213": {
                "variable": {
                    "value": "attn_dists",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_215": {
                "variable": {
                    "value": "attn_ctxs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "attn_ctxs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(attn_ctxs)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_217": {
                "variable": {
                    "value": "raw_hiddens",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "raw_hiddens",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(raw_hiddens)",
                            "Call"
                        ]
                    ]
                }
            },
            "Dropout_227": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "stack_252": {
                "variable": {
                    "value": "h_final",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "h_final",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.stack(h_final)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_253": {
                "variable": {
                    "value": "c_final",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "c_final",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.stack(c_final)",
                            "Call"
                        ]
                    ]
                }
            },
            "Embedding_274": {
                "variable": {
                    "value": "self.embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.emb_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "self.pad_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_278": {
                "variable": {
                    "value": "self.h_t_projection",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "ARGS.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "ARGS.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_279": {
                "variable": {
                    "value": "self.c_t_projection",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "ARGS.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "ARGS.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_282": {
                "variable": {
                    "value": "self.bridge",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "768 if ARGS.bert_encoder else self.hidden_dim",
                    "type": "IfExp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_299": {
                "variable": {
                    "value": "self.output_projection",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Softmax_302": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "LogSoftmax_304": {
                "variable": {
                    "value": "self.log_softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_331": {
                "variable": {
                    "value": "self.enrich_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_334": {
                "variable": {
                    "value": "self.enricher",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "stack_437": {
                "variable": {
                    "value": "tgt_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[b.get_current_state() for b in beams]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "t_437": {
                "variable": {
                    "value": "tgt_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_506": {
                "variable": {
                    "value": "self.p_gen_W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size * 3 + 768",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_507": {
                "variable": {
                    "value": "self.p_gen_sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_573": {
                "variable": {
                    "value": "probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tgt_output_probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "log_576": {
                "variable": {
                    "value": "log_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.softmax(logits)",
                            "Call"
                        ],
                        [
                            "torch.stack(tgt_output_probs)",
                            "Call"
                        ],
                        [
                            "probs.permute(1, 0, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_48": {
                "variable": {
                    "value": "self.v_att",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(h_tilde, cy)",
                            "Tuple"
                        ],
                        [
                            "(hy, cy)",
                            "Tuple"
                        ],
                        [
                            "dec_initial_state",
                            "Name"
                        ],
                        [
                            "(h_tilde_i.squeeze(0), ci.squeeze(0))",
                            "Tuple"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Tanh_49": {
                "variable": {
                    "value": "self.score_tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "bmm_104": {
                "input": {
                    "value": "keys",
                    "type": "Variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "query.unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_104": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_157": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "src_embedding",
                    "type": "Variable",
                    "possible_values": []
                },
                "lengths": {
                    "value": "srclens",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_164": {
                "variable": {
                    "value": "(outputs, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_357": {
                "variable": {
                    "value": "src_h_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "src_outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.bridge(final_hidden_states)",
                            "Call"
                        ],
                        [
                            "self.bridge(src_outputs)",
                            "Call"
                        ],
                        [
                            "src_outputs + enrichment",
                            "BinOp"
                        ],
                        [
                            "src_outputs.repeat(beam_width, 1, 1)",
                            "Call"
                        ],
                        [
                            "src_outputs + enrichment",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_358": {
                "variable": {
                    "value": "src_c_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "src_outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.bridge(final_hidden_states)",
                            "Call"
                        ],
                        [
                            "self.bridge(src_outputs)",
                            "Call"
                        ],
                        [
                            "src_outputs + enrichment",
                            "BinOp"
                        ],
                        [
                            "src_outputs.repeat(beam_width, 1, 1)",
                            "Call"
                        ],
                        [
                            "src_outputs + enrichment",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_368": {
                "variable": {
                    "value": "h_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(src_h_t[-1], src_h_t[-2])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_369": {
                "variable": {
                    "value": "c_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(src_c_t[-1], src_c_t[-2])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_447": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(out).transpose(1, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_447": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_483": {
                "variable": {
                    "value": "tgt_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(tgt_input, next_preds.unsqueeze(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_489": {
                "obj": {
                    "value": "self.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_528": {
                "variable": {
                    "value": "coverage",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "src_outputs.shape[:2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_135": {
                "*size": {
                    "value": "self.lstm.num_layers * self.num_directions",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "pre_id.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.lstm.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_140": {
                "*size": {
                    "value": "self.lstm.num_layers * self.num_directions",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "pre_id.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.lstm.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_444": {
                "tensors": {
                    "value": "b.get_hyp(k)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_492": {
                "f": {
                    "value": "path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "stack_581": {
                "tensors": {
                    "value": "attns",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "Sigmoid_372": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sigmoid_373": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_452": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_479": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_482": {
                "input": {
                    "value": "word_probs[:, -1, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_556": {
                "tensors": {
                    "value": "[attn_ctx.squeeze(0), h_i, ci.squeeze(0), tgt_emb_i.squeeze(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_582": {
                "tensors": {
                    "value": "coverage_vecs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "src/seq2seq/train.py": {
        "torch": {
            "save_116": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "ARGS.working_dir + '/debiaser.ckpt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "src/seq2seq/transformer_decoder.py": {
        "torch": {
            "clamp_280": {
                "variable": {
                    "value": "distance_mat_clipped",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "distance_mat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.arange(-length + 1, 1, 1).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "range_mat - range_mat.transpose(0, 1)",
                            "BinOp"
                        ]
                    ]
                },
                "min": {
                    "value": "-max_relative_positions",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "max_relative_positions",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_27": {
                "variable": {
                    "value": "self.w_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_ff",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_28": {
                "variable": {
                    "value": "self.w_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_ff",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "LayerNorm_29": {
                "variable": {
                    "value": "self.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dropout_30": {
                "variable": {
                    "value": "self.dropout_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_31": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_32": {
                "variable": {
                    "value": "self.dropout_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_99": {
                "variable": {
                    "value": "self.linear_keys",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "model_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "head_count * self.dim_per_head",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_101": {
                "variable": {
                    "value": "self.linear_values",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "model_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "head_count * self.dim_per_head",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_103": {
                "variable": {
                    "value": "self.linear_query",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "model_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "head_count * self.dim_per_head",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Softmax_105": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Dropout_106": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_107": {
                "variable": {
                    "value": "self.final_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "model_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "model_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "matmul_228": {
                "variable": {
                    "value": "query_key",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.linear_query(query)",
                            "Call"
                        ],
                        [
                            "self.linear_query(query)",
                            "Call"
                        ],
                        [
                            "shape(query)",
                            "Call"
                        ],
                        [
                            "query / math.sqrt(dim_per_head)",
                            "BinOp"
                        ],
                        [
                            "self.drop(query) + inputs",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "key.transpose(2, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_244": {
                "variable": {
                    "value": "context_original",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "drop_attn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.dropout(attn)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.linear_values(value)",
                            "Call"
                        ],
                        [
                            "shape(value)",
                            "Call"
                        ],
                        [
                            "shape(value)",
                            "Call"
                        ],
                        [
                            "torch.cat((layer_cache['self_values'].to(device), value), dim=2)",
                            "Call"
                        ],
                        [
                            "shape(value)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_275": {
                "variable": {
                    "value": "distance_mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "-length + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "step": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_275": {
                "variable": {
                    "value": "distance_mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_277": {
                "variable": {
                    "value": "range_vec",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "length",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.shape[2]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "matmul_299": {
                "variable": {
                    "value": "x_tz_matmul",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_t_r",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x_t.reshape(length, heads * batch_size, -1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "z_t",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "z.transpose(1, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_301": {
                "variable": {
                    "value": "x_tz_matmul",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_t_r",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x_t.reshape(length, heads * batch_size, -1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_326": {
                "variable": {
                    "value": "self.gating_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "model_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "model_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tril_343": {
                "variable": {
                    "value": "triangle",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.ones(inputs_len, inputs_len)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "chunk_405": {
                "variable": {
                    "value": "(input_gate, forget_gate)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "gating_outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.gating_layer(torch.cat((inputs, average_outputs), -1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(input_gate) * inputs + torch.sigmoid(forget_gate) * average_outputs",
                            "BinOp"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LayerNorm_439": {
                "variable": {
                    "value": "self.layer_norm_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "LayerNorm_440": {
                "variable": {
                    "value": "self.layer_norm_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dropout_441": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ModuleList_531": {
                "variable": {
                    "value": "self.transformer_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[TransformerDecoderLayer(d_model, heads, d_ff, dropout, self_attn_type=self_attn_type, max_relative_positions=max_relative_positions) for i in range(num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "LayerNorm_541": {
                "variable": {
                    "value": "self.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_543": {
                "variable": {
                    "value": "self.decoder_bridge",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "768",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_589": {
                "variable": {
                    "value": "tgt_pad_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "output.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_113": {
                "variable": {
                    "value": "self.relative_positions_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "vocab_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "max_relative_positions * 2 + 1",
                            "BinOp"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "self.dim_per_head",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_462": {
                "variable": {
                    "value": "future_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[tgt_len, tgt_len]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "tgt_pad_mask.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gt_467": {
                "variable": {
                    "value": "dec_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tgt_pad_mask + future_mask",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_343": {
                "*size": {
                    "value": "inputs_len",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs.size(1)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "inputs_len",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_344": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "inputs_len",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_344": {
                "start": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "inputs_len + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_379": {
                "input": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "mask.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "triangle * weights.transpose(0, 1)",
                            "BinOp"
                        ],
                        [
                            "mask_or_step",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "other": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_403": {
                "tensors": {
                    "value": "(inputs, average_outputs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_625": {
                "variable": {
                    "value": "layer_cache[prev_g]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, 1, depth)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_179": {
                "variable": {
                    "value": "key",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(layer_cache['self_keys'].to(device), key)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_183": {
                "variable": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(layer_cache['self_values'].to(device), value)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_406": {
                "input": {
                    "value": "input_gate",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sigmoid_407": {
                "input": {
                    "value": "forget_gate",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "src/seq2seq/utils.py": {
        "torch": {
            "ones_59": {
                "variable": {
                    "value": "weight_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "vocab_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "NLLLoss_61": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.ones(vocab_size)",
                            "Call"
                        ],
                        [
                            "weight_mask.cuda()",
                            "Call"
                        ],
                        [
                            "torch.ones(len(tok2id))",
                            "Call"
                        ]
                    ]
                }
            },
            "NLLLoss_62": {
                "variable": {
                    "value": "per_tok_criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.ones(vocab_size)",
                            "Call"
                        ],
                        [
                            "weight_mask.cuda()",
                            "Call"
                        ],
                        [
                            "torch.ones(len(tok2id))",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ones_227": {
                "variable": {
                    "value": "weight_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(tok2id)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_229": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.ones(vocab_size)",
                            "Call"
                        ],
                        [
                            "weight_mask.cuda()",
                            "Call"
                        ],
                        [
                            "torch.ones(len(tok2id))",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_86": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "per_tok_losses[torch.nonzero(per_tok_losses)].squeeze()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_121": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "list(model.parameters())",
                            "Call"
                        ],
                        [
                            "list(filter(lambda p: p.requires_grad, params))",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "ARGS.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__162": {
                "variable": {
                    "value": "norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "3.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "sum_129": {
                "input": {
                    "value": "torch.min(attn, coverage)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "min_129": {
                "input": {
                    "value": "attn",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "no_grad_252": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "nonzero_86": {
                "input": {
                    "value": "per_tok_losses",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "per_tok_criterion(log_probs.contiguous().view(-1, vocab_size), labels.contiguous().view(-1))",
                            "Call"
                        ],
                        [
                            "per_tok_losses * weights",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "src/shared/beam.py": {
        "torch": {
            "sort_80": {
                "input": {
                    "value": "self.scores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "src/shared/constants.py": {
        "torch": {
            "device_count_9": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/shared/data.py": {
        "torch": {
            "TensorDataset_268": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.tensor(examples['pre_ids'], dtype=torch.long)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_280": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "TensorDataset(torch.tensor(examples['pre_ids'], dtype=torch.long), torch.tensor(examples['pre_masks'], dtype=torch.uint8), torch.tensor(examples['pre_lens'], dtype=torch.long), torch.tensor(examples['post_in_ids'], dtype=torch.long), torch.tensor(examples['post_out_ids'], dtype=torch.long), torch.tensor(examples['pre_tok_label_ids'], dtype=torch.float), torch.tensor(examples['post_tok_label_ids'], dtype=torch.float), torch.tensor(examples['rel_ids'], dtype=torch.long), torch.tensor(examples['pos_ids'], dtype=torch.long), torch.tensor(examples['categories'], dtype=torch.float))",
                            "Call"
                        ],
                        [
                            "[src_id[:, :max_len], src_mask[:, :max_len], src_len, post_in_id[:, :max_len + 10], post_out_id[:, :max_len + 10], pre_tok_label[:, :max_len], post_tok_label[:, :max_len + 10], rel_ids[:, :max_len], pos_ids[:, :max_len], categories]",
                            "List"
                        ]
                    ]
                },
                "sampler": {
                    "value": "SequentialSampler(data) if test else RandomSampler(data)",
                    "type": "IfExp",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_269": {
                "data": {
                    "value": "examples['pre_ids']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_270": {
                "data": {
                    "value": "examples['pre_masks']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_271": {
                "data": {
                    "value": "examples['pre_lens']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_272": {
                "data": {
                    "value": "examples['post_in_ids']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_273": {
                "data": {
                    "value": "examples['post_out_ids']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_274": {
                "data": {
                    "value": "examples['pre_tok_label_ids']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_275": {
                "data": {
                    "value": "examples['post_tok_label_ids']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_276": {
                "data": {
                    "value": "examples['rel_ids']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_277": {
                "data": {
                    "value": "examples['pos_ids']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_278": {
                "data": {
                    "value": "examples['categories']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_242": {
                "tensors": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x - x.max(axis=axis, keepdims=True)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "SequentialSampler_282": {
                "data_source": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "TensorDataset(torch.tensor(examples['pre_ids'], dtype=torch.long), torch.tensor(examples['pre_masks'], dtype=torch.uint8), torch.tensor(examples['pre_lens'], dtype=torch.long), torch.tensor(examples['post_in_ids'], dtype=torch.long), torch.tensor(examples['post_out_ids'], dtype=torch.long), torch.tensor(examples['pre_tok_label_ids'], dtype=torch.float), torch.tensor(examples['post_tok_label_ids'], dtype=torch.float), torch.tensor(examples['rel_ids'], dtype=torch.long), torch.tensor(examples['pos_ids'], dtype=torch.long), torch.tensor(examples['categories'], dtype=torch.float))",
                            "Call"
                        ],
                        [
                            "[src_id[:, :max_len], src_mask[:, :max_len], src_len, post_in_id[:, :max_len + 10], post_out_id[:, :max_len + 10], pre_tok_label[:, :max_len], post_tok_label[:, :max_len + 10], rel_ids[:, :max_len], pos_ids[:, :max_len], categories]",
                            "List"
                        ]
                    ]
                }
            },
            "RandomSampler_282": {
                "data_source": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "TensorDataset(torch.tensor(examples['pre_ids'], dtype=torch.long), torch.tensor(examples['pre_masks'], dtype=torch.uint8), torch.tensor(examples['pre_lens'], dtype=torch.long), torch.tensor(examples['post_in_ids'], dtype=torch.long), torch.tensor(examples['post_out_ids'], dtype=torch.long), torch.tensor(examples['pre_tok_label_ids'], dtype=torch.float), torch.tensor(examples['post_tok_label_ids'], dtype=torch.float), torch.tensor(examples['rel_ids'], dtype=torch.long), torch.tensor(examples['pos_ids'], dtype=torch.long), torch.tensor(examples['categories'], dtype=torch.float))",
                            "Call"
                        ],
                        [
                            "[src_id[:, :max_len], src_mask[:, :max_len], src_len, post_in_id[:, :max_len + 10], post_out_id[:, :max_len + 10], pre_tok_label[:, :max_len], post_tok_label[:, :max_len + 10], rel_ids[:, :max_len], pos_ids[:, :max_len], categories]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "src/tagging/model.py": {
        "torch": {
            "Dropout_32": {
                "variable": {
                    "value": "self.cls_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_33": {
                "variable": {
                    "value": "self.cls_classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "cls_num_labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_35": {
                "variable": {
                    "value": "self.tok_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_36": {
                "variable": {
                    "value": "self.tok_classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "tok_num_labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_214": {
                "variable": {
                    "value": "self.cls_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_215": {
                "variable": {
                    "value": "self.cls_classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "cls_num_labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensor_234": {
                "variable": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "features + categories",
                            "BinOp"
                        ],
                        [
                            "torch.cat((features, categories), -1)",
                            "Call"
                        ],
                        [
                            "self.enricher(features)",
                            "Call"
                        ],
                        [
                            "features + categories",
                            "BinOp"
                        ],
                        [
                            "torch.cat((features, categories), -1)",
                            "Call"
                        ],
                        [
                            "self.featurizer.featurize_batch(input_ids.detach().cpu().numpy(), rel_ids.detach().cpu().numpy(), pos_ids.detach().cpu().numpy(), padded_len=input_ids.shape[1])",
                            "Call"
                        ],
                        [
                            "torch.tensor(features, dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "features.cuda()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_275": {
                "variable": {
                    "value": "self.cls_classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(ARGS.hidden_size, ARGS.hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_282": {
                "variable": {
                    "value": "self.tok_classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(ARGS.hidden_size, ARGS.hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_75": {
                "variable": {
                    "value": "self.out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(hidden_size + feature_size, out_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_134": {
                "variable": {
                    "value": "self.expand",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(feat_dim, hidden_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_139": {
                "variable": {
                    "value": "self.expand",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(feat_dim, waist_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_146": {
                "variable": {
                    "value": "self.out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_151": {
                "variable": {
                    "value": "self.enricher",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "feature_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "feature_size + 43",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "feature_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "feature_size + 43",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Embedding_219": {
                "variable": {
                    "value": "self.category_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "43",
                    "type": "int",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "nfeats",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "90 if ARGS.lexicon_feature_bits == 1 else 118",
                            "IfExp"
                        ]
                    ]
                }
            },
            "erf_21": {
                "input": {
                    "value": "x / math.sqrt(2.0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sequential_95": {
                "variable": {
                    "value": "self.enricher",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(feature_size, feature_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_99": {
                "variable": {
                    "value": "self.enricher",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "feature_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "feature_size + 43",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "feature_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "feature_size + 43",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_115": {
                "variable": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(features, categories)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_120": {
                "tensors": {
                    "value": "(hidden, features)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_170": {
                "variable": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(features, categories)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "load_272": {
                "f": {
                    "value": "ARGS.debias_checkpoint",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_276": {
                "in_features": {
                    "value": "ARGS.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "ARGS.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_277": {
                "p": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReLU_278": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_279": {
                "in_features": {
                    "value": "ARGS.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "cls_num_labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_280": {
                "p": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_283": {
                "in_features": {
                    "value": "ARGS.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "ARGS.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_284": {
                "p": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReLU_285": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_286": {
                "in_features": {
                    "value": "ARGS.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "tok_num_labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_287": {
                "p": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_76": {
                "in_features": {
                    "value": "hidden_size + feature_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_77": {
                "p": {
                    "value": "dropout_prob",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Sequential_81": {
                "variable": {
                    "value": "self.out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(hidden_size + feature_size, waist_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_88": {
                "variable": {
                    "value": "self.out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(hidden_size + feature_size, waist_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_135": {
                "in_features": {
                    "value": "feat_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "feat_dim + 43",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_136": {
                "p": {
                    "value": "dropout_prob",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_140": {
                "in_features": {
                    "value": "feat_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "feat_dim + 43",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "waist_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "min(hidden_size, feature_size) if small else max(hidden_size, feature_size)",
                            "IfExp"
                        ],
                        [
                            "min(feat_dim, hidden_dim) if small else max(feat_dim, hidden_dim)",
                            "IfExp"
                        ]
                    ]
                }
            },
            "Dropout_141": {
                "p": {
                    "value": "dropout_prob",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_142": {
                "in_features": {
                    "value": "waist_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "min(hidden_size, feature_size) if small else max(hidden_size, feature_size)",
                            "IfExp"
                        ],
                        [
                            "min(feat_dim, hidden_dim) if small else max(feat_dim, hidden_dim)",
                            "IfExp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_143": {
                "p": {
                    "value": "dropout_prob",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_96": {
                "in_features": {
                    "value": "feature_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "feature_size + 43",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "feature_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "feature_size + 43",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ReLU_97": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_82": {
                "in_features": {
                    "value": "hidden_size + feature_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "waist_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "min(hidden_size, feature_size) if small else max(hidden_size, feature_size)",
                            "IfExp"
                        ],
                        [
                            "min(feat_dim, hidden_dim) if small else max(feat_dim, hidden_dim)",
                            "IfExp"
                        ]
                    ]
                }
            },
            "Dropout_83": {
                "p": {
                    "value": "dropout_prob",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_84": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_85": {
                "in_features": {
                    "value": "waist_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "min(hidden_size, feature_size) if small else max(hidden_size, feature_size)",
                            "IfExp"
                        ],
                        [
                            "min(feat_dim, hidden_dim) if small else max(feat_dim, hidden_dim)",
                            "IfExp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_86": {
                "p": {
                    "value": "dropout_prob",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_89": {
                "in_features": {
                    "value": "hidden_size + feature_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "waist_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "min(hidden_size, feature_size) if small else max(hidden_size, feature_size)",
                            "IfExp"
                        ],
                        [
                            "min(feat_dim, hidden_dim) if small else max(feat_dim, hidden_dim)",
                            "IfExp"
                        ]
                    ]
                }
            },
            "Dropout_90": {
                "p": {
                    "value": "dropout_prob",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_91": {
                "in_features": {
                    "value": "waist_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "min(hidden_size, feature_size) if small else max(hidden_size, feature_size)",
                            "IfExp"
                        ],
                        [
                            "min(feat_dim, hidden_dim) if small else max(feat_dim, hidden_dim)",
                            "IfExp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_92": {
                "p": {
                    "value": "dropout_prob",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "src/tagging/utils.py": {
        "torch": {
            "ones_41": {
                "variable": {
                    "value": "weight_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "ARGS.num_tok_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_46": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.ones(ARGS.num_tok_labels)",
                            "Call"
                        ],
                        [
                            "weight_mask.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_47": {
                "variable": {
                    "value": "per_tok_criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.ones(ARGS.num_tok_labels)",
                            "Call"
                        ],
                        [
                            "weight_mask.cuda()",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_49": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.ones(ARGS.num_tok_labels)",
                            "Call"
                        ],
                        [
                            "weight_mask.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_50": {
                "variable": {
                    "value": "per_tok_criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.ones(ARGS.num_tok_labels)",
                            "Call"
                        ],
                        [
                            "weight_mask.cuda()",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "mean_68": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "per_tok_losses[torch.nonzero(per_tok_losses)].squeeze()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_20": {
                "params": {
                    "value": "parameters",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "list(model.cls_classifier.parameters()) + list(model.tok_classifier.parameters())",
                            "BinOp"
                        ],
                        [
                            "list(filter(lambda p: p.requires_grad, parameters))",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "ARGS.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_115": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "nonzero_68": {
                "input": {
                    "value": "per_tok_losses",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "per_tok_criterion(logits.contiguous().view(-1, ARGS.num_tok_labels), labels.contiguous().view(-1).type('torch.cuda.LongTensor' if CUDA else 'torch.LongTensor'))",
                            "Call"
                        ],
                        [
                            "per_tok_losses * weights",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    }
}