{
    "scikgat/abstract_retrieval/evaluate.py": {
        "sklearn": {
            "f1_score_39": {
                "y_true": {
                    "value": "yt",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "yp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "precision_score_40": {
                "y_true": {
                    "value": "yt",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "yp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "recall_score_41": {
                "y_true": {
                    "value": "yt",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "yp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "scikgat/abstract_retrieval/tfidf.py": {
        "sklearn": {
            "TfidfVectorizer_21": {
                "variable": {
                    "value": "vectorizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "stop_words": {
                    "value": "english",
                    "type": "str",
                    "possible_values": []
                },
                "ngram_range": {
                    "value": "(args.min_gram, args.max_gram)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "scikgat/rationale_selection/evaluate.py": {
        "sklearn": {
            "f1_score_60": {
                "y_true": {
                    "value": "yt",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[y in true for y in ys]",
                            "ListComp"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "yp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[y in pred for y in ys]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "precision_score_61": {
                "y_true": {
                    "value": "yt",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[y in true for y in ys]",
                            "ListComp"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "yp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[y in pred for y in ys]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "recall_score_62": {
                "y_true": {
                    "value": "yt",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[y in true for y in ys]",
                            "ListComp"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "yp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[y in pred for y in ys]",
                            "ListComp"
                        ]
                    ]
                }
            }
        }
    },
    "scikgat/training/rationale_selection_scifact_train.py": {
        "sklearn": {
            "f1_score_90": {
                "y_true": {
                    "value": "targets",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "zero_division": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "precision_score_91": {
                "y_true": {
                    "value": "targets",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "zero_division": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "recall_score_92": {
                "y_true": {
                    "value": "targets",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "zero_division": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "device_25": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Adam_56": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[{'params': model.bert.parameters(), 'lr': args.lr_base}, {'params': model.classifier.parameters(), 'lr': args.lr_linear}]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "is_available_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_84": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_85": {
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size_gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_97": {
                "dataset": {
                    "value": "trainset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "SciFactRationaleSelectionDataset(args.corpus, args.claim_train)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size_gpu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "kgat/bert_model.py": {
        "tensorflow": {
            "list_variables_66": {
                "variable": {
                    "value": "init_vars",
                    "type": "Variable",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "tf_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.abspath(tf_checkpoint_path)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_variable_71": {
                "variable": {
                    "value": "array",
                    "type": "Variable",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "tf_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.abspath(tf_checkpoint_path)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "name.split('/')",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "from_numpy_109": {
                "variable": {
                    "value": "pointer.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "array",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.train.load_variable(tf_path, name)",
                            "Call"
                        ],
                        [
                            "np.transpose(array)",
                            "Call"
                        ]
                    ]
                }
            },
            "Embedding_241": {
                "variable": {
                    "value": "self.word_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_242": {
                "variable": {
                    "value": "self.position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.max_position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_243": {
                "variable": {
                    "value": "self.token_type_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.type_vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_248": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_252": {
                "variable": {
                    "value": "position_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "seq_length",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_ids.size(1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "input_ids.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_278": {
                "variable": {
                    "value": "self.query",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_279": {
                "variable": {
                    "value": "self.key",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_280": {
                "variable": {
                    "value": "self.value",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_282": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.attention_probs_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_299": {
                "variable": {
                    "value": "attention_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query_layer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.transpose_for_scores(mixed_query_layer)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "key_layer.transpose(-1, -2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_311": {
                "variable": {
                    "value": "context_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention_probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "nn.Softmax(dim=-1)(attention_scores)",
                            "Call"
                        ],
                        [
                            "self.dropout(attention_probs)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "value_layer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.transpose_for_scores(mixed_value_layer)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_321": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_323": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_347": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.intermediate_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_362": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.intermediate_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_364": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_391": {
                "variable": {
                    "value": "self.layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[copy.deepcopy(layer) for _ in range(config.num_hidden_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_407": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tanh_408": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_422": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_443": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "bert_model_embedding_weights.size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "bert_model_embedding_weights.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_447": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(bert_model_embedding_weights.size(0))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_468": {
                "variable": {
                    "value": "self.seq_relationship",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_479": {
                "variable": {
                    "value": "self.seq_relationship",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_766": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_123": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(x - u) / torch.sqrt(s + self.variance_epsilon)",
                            "BinOp"
                        ],
                        [
                            "x.view(*new_x_shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_255": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "load_584": {
                "variable": {
                    "value": "state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "weights_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(serialization_dir, WEIGHTS_NAME)",
                            "Call"
                        ],
                        [
                            "os.path.join(serialization_dir, TF_WEIGHTS_NAME)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "'cpu' if not torch.cuda.is_available() else None",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "ones_like_692": {
                "variable": {
                    "value": "attention_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_like_694": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "erf_119": {
                "input": {
                    "value": "x / math.sqrt(2.0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_226": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_227": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Softmax_305": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_447": {
                "*size": {
                    "value": "bert_model_embedding_weights.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_226": {
                "*size": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "768",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_227": {
                "*size": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "768",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sqrt_233": {
                "input": {
                    "value": "s + self.variance_epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_available_584": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pretrain/bert_model.py": {
        "tensorflow": {
            "list_variables_66": {
                "variable": {
                    "value": "init_vars",
                    "type": "Variable",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "tf_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.abspath(tf_checkpoint_path)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_variable_71": {
                "variable": {
                    "value": "array",
                    "type": "Variable",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "tf_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.abspath(tf_checkpoint_path)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "name.split('/')",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "from_numpy_109": {
                "variable": {
                    "value": "pointer.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "array",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.train.load_variable(tf_path, name)",
                            "Call"
                        ],
                        [
                            "np.transpose(array)",
                            "Call"
                        ]
                    ]
                }
            },
            "Embedding_241": {
                "variable": {
                    "value": "self.word_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_242": {
                "variable": {
                    "value": "self.position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.max_position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_243": {
                "variable": {
                    "value": "self.token_type_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.type_vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_248": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_252": {
                "variable": {
                    "value": "position_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "seq_length",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_ids.size(1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "input_ids.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_278": {
                "variable": {
                    "value": "self.query",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_279": {
                "variable": {
                    "value": "self.key",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_280": {
                "variable": {
                    "value": "self.value",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_282": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.attention_probs_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_299": {
                "variable": {
                    "value": "attention_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query_layer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.transpose_for_scores(mixed_query_layer)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "key_layer.transpose(-1, -2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_311": {
                "variable": {
                    "value": "context_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention_probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "nn.Softmax(dim=-1)(attention_scores)",
                            "Call"
                        ],
                        [
                            "self.dropout(attention_probs)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "value_layer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.transpose_for_scores(mixed_value_layer)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_321": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_323": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_347": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.intermediate_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_362": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.intermediate_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_364": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_391": {
                "variable": {
                    "value": "self.layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[copy.deepcopy(layer) for _ in range(config.num_hidden_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_407": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tanh_408": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_422": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_443": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "bert_model_embedding_weights.size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "bert_model_embedding_weights.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_447": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(bert_model_embedding_weights.size(0))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_468": {
                "variable": {
                    "value": "self.seq_relationship",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_479": {
                "variable": {
                    "value": "self.seq_relationship",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_766": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_123": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(x - u) / torch.sqrt(s + self.variance_epsilon)",
                            "BinOp"
                        ],
                        [
                            "x.view(*new_x_shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_255": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "load_584": {
                "variable": {
                    "value": "state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "weights_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(serialization_dir, WEIGHTS_NAME)",
                            "Call"
                        ],
                        [
                            "os.path.join(serialization_dir, TF_WEIGHTS_NAME)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "'cpu' if not torch.cuda.is_available() else None",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "ones_like_692": {
                "variable": {
                    "value": "attention_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_like_694": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "erf_119": {
                "input": {
                    "value": "x / math.sqrt(2.0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_226": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_227": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Softmax_305": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_447": {
                "*size": {
                    "value": "bert_model_embedding_weights.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_226": {
                "*size": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "768",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_227": {
                "*size": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "768",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sqrt_233": {
                "input": {
                    "value": "s + self.variance_epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_available_584": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "retrieval_model/bert_model.py": {
        "tensorflow": {
            "list_variables_66": {
                "variable": {
                    "value": "init_vars",
                    "type": "Variable",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "tf_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.abspath(tf_checkpoint_path)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_variable_71": {
                "variable": {
                    "value": "array",
                    "type": "Variable",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "tf_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.abspath(tf_checkpoint_path)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "name.split('/')",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "from_numpy_109": {
                "variable": {
                    "value": "pointer.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "array",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.train.load_variable(tf_path, name)",
                            "Call"
                        ],
                        [
                            "np.transpose(array)",
                            "Call"
                        ]
                    ]
                }
            },
            "Embedding_241": {
                "variable": {
                    "value": "self.word_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_242": {
                "variable": {
                    "value": "self.position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.max_position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_243": {
                "variable": {
                    "value": "self.token_type_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.type_vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_248": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_252": {
                "variable": {
                    "value": "position_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "seq_length",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_ids.size(1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "input_ids.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_278": {
                "variable": {
                    "value": "self.query",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_279": {
                "variable": {
                    "value": "self.key",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_280": {
                "variable": {
                    "value": "self.value",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_282": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.attention_probs_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_299": {
                "variable": {
                    "value": "attention_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query_layer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.transpose_for_scores(mixed_query_layer)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "key_layer.transpose(-1, -2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_311": {
                "variable": {
                    "value": "context_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention_probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "nn.Softmax(dim=-1)(attention_scores)",
                            "Call"
                        ],
                        [
                            "self.dropout(attention_probs)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "value_layer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.transpose_for_scores(mixed_value_layer)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_321": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_323": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_347": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.intermediate_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_362": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.intermediate_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_364": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_391": {
                "variable": {
                    "value": "self.layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[copy.deepcopy(layer) for _ in range(config.num_hidden_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_407": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tanh_408": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_422": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_443": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "bert_model_embedding_weights.size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "bert_model_embedding_weights.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_447": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(bert_model_embedding_weights.size(0))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_468": {
                "variable": {
                    "value": "self.seq_relationship",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_479": {
                "variable": {
                    "value": "self.seq_relationship",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_766": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_123": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(x - u) / torch.sqrt(s + self.variance_epsilon)",
                            "BinOp"
                        ],
                        [
                            "x.view(*new_x_shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_255": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "load_584": {
                "variable": {
                    "value": "state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "weights_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(serialization_dir, WEIGHTS_NAME)",
                            "Call"
                        ],
                        [
                            "os.path.join(serialization_dir, TF_WEIGHTS_NAME)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "'cpu' if not torch.cuda.is_available() else None",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "ones_like_692": {
                "variable": {
                    "value": "attention_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_like_694": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "erf_119": {
                "input": {
                    "value": "x / math.sqrt(2.0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_226": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_227": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Softmax_305": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_447": {
                "*size": {
                    "value": "bert_model_embedding_weights.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_226": {
                "*size": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "768",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_227": {
                "*size": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "768",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sqrt_233": {
                "input": {
                    "value": "s + self.variance_epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_available_584": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "kgat/data_loader.py": {
        "torch": {}
    },
    "kgat/models.py": {
        "torch": {
            "Dropout_50": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "args.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_57": {
                "variable": {
                    "value": "self.proj_inference_de",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.bert_hidden_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_58": {
                "variable": {
                    "value": "self.proj_att",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.kernel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_59": {
                "variable": {
                    "value": "self.proj_input_de",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.bert_hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.bert_hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_60": {
                "variable": {
                    "value": "self.proj_gat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Linear(self.bert_hidden_dim * 2, 128)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_65": {
                "variable": {
                    "value": "self.proj_select",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.kernel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "index_select_74": {
                "variable": {
                    "value": "own_hidden",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs_hiddens",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs_hiddens.view(-1, self.max_len, self.bert_hidden_dim)",
                            "Call"
                        ],
                        [
                            "inputs_hiddens.view([-1, self.evi_num, self.max_len, self.bert_hidden_dim])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "idx",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.LongTensor([index]).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_75": {
                "variable": {
                    "value": "own_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "mask.view([-1, self.evi_num, self.max_len])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "idx",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.LongTensor([index]).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_76": {
                "variable": {
                    "value": "own_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs.view([-1, self.evi_num, self.bert_hidden_dim])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "idx",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.LongTensor([index]).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "normalize_81": {
                "variable": {
                    "value": "hiddens_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs_hiddens",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs_hiddens.view(-1, self.max_len, self.bert_hidden_dim)",
                            "Call"
                        ],
                        [
                            "inputs_hiddens.view([-1, self.evi_num, self.max_len, self.bert_hidden_dim])",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "normalize_82": {
                "variable": {
                    "value": "own_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "own_hidden",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.index_select(inputs_hiddens, 1, idx)",
                            "Call"
                        ],
                        [
                            "own_hidden.repeat(1, self.evi_num, 1, 1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_90": {
                "variable": {
                    "value": "denoise_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "att_score * inputs_hiddens",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_91": {
                "variable": {
                    "value": "weight_inp",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[own_input, inputs]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_93": {
                "variable": {
                    "value": "weight_inp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight_inp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat([own_input, inputs], -1)",
                            "Call"
                        ],
                        [
                            "self.proj_gat(weight_inp)",
                            "Call"
                        ],
                        [
                            "F.softmax(weight_inp, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_95": {
                "variable": {
                    "value": "weight_de",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[own_input, denoise_inputs]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_97": {
                "variable": {
                    "value": "weight_de",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight_de",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat([own_input, denoise_inputs], -1)",
                            "Call"
                        ],
                        [
                            "self.proj_gat(weight_de)",
                            "Call"
                        ],
                        [
                            "F.softmax(weight_de, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_104": {
                "variable": {
                    "value": "sim",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q_embed",
                    "type": "Variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "torch.transpose(d_embed, 1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_106": {
                "variable": {
                    "value": "pooling_sum",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pooling_value",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.exp(-(sim - self.mu.cuda()) ** 2 / self.sigma.cuda() ** 2 / 2) * attn_d",
                            "BinOp"
                        ],
                        [
                            "torch.exp(-(sim - self.mu.cuda()) ** 2 / self.sigma.cuda() ** 2 / 2) * attn_d",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_115": {
                "variable": {
                    "value": "sim",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q_embed",
                    "type": "Variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "torch.transpose(d_embed, 1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_117": {
                "variable": {
                    "value": "log_pooling_sum",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pooling_value",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.exp(-(sim - self.mu.cuda()) ** 2 / self.sigma.cuda() ** 2 / 2) * attn_d",
                            "BinOp"
                        ],
                        [
                            "torch.exp(-(sim - self.mu.cuda()) ** 2 / self.sigma.cuda() ** 2 / 2) * attn_d",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_118": {
                "variable": {
                    "value": "log_pooling_sum",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.clamp(log_pooling_sum, min=1e-10)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_121": {
                "variable": {
                    "value": "log_pooling_sum",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_pooling_sum",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.log(torch.clamp(pooling_sum, min=1e-10)) * attn_q",
                            "BinOp"
                        ],
                        [
                            "torch.sum(log_pooling_sum, 1) / (torch.sum(attn_q, 1) + 1e-10)",
                            "BinOp"
                        ],
                        [
                            "self.proj_select(log_pooling_sum).view([-1, 1])",
                            "Call"
                        ],
                        [
                            "torch.sum(pooling_value, 2)",
                            "Call"
                        ],
                        [
                            "torch.log(torch.clamp(log_pooling_sum, min=1e-10))",
                            "Call"
                        ],
                        [
                            "self.proj_att(log_pooling_sum).squeeze(-1)",
                            "Call"
                        ],
                        [
                            "log_pooling_sum.masked_fill_((1 - attn_q).bool(), -10000.0)",
                            "Call"
                        ],
                        [
                            "F.softmax(log_pooling_sum, dim=1)",
                            "Call"
                        ],
                        [
                            "self.get_intersect_matrix(inputs_hiddens_norm, inputs_hiddens_norm, mask_claim, mask_evidence)",
                            "Call"
                        ],
                        [
                            "log_pooling_sum.view([-1, self.evi_num, 1])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_135": {
                "variable": {
                    "value": "inputs_hiddens_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs_hiddens",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs_hiddens.view(-1, self.max_len, self.bert_hidden_dim)",
                            "Call"
                        ],
                        [
                            "inputs_hiddens.view([-1, self.evi_num, self.max_len, self.bert_hidden_dim])",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_138": {
                "variable": {
                    "value": "select_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_pooling_sum",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.log(torch.clamp(pooling_sum, min=1e-10)) * attn_q",
                            "BinOp"
                        ],
                        [
                            "torch.sum(log_pooling_sum, 1) / (torch.sum(attn_q, 1) + 1e-10)",
                            "BinOp"
                        ],
                        [
                            "self.proj_select(log_pooling_sum).view([-1, 1])",
                            "Call"
                        ],
                        [
                            "torch.sum(pooling_value, 2)",
                            "Call"
                        ],
                        [
                            "torch.log(torch.clamp(log_pooling_sum, min=1e-10))",
                            "Call"
                        ],
                        [
                            "self.proj_att(log_pooling_sum).squeeze(-1)",
                            "Call"
                        ],
                        [
                            "log_pooling_sum.masked_fill_((1 - attn_q).bool(), -10000.0)",
                            "Call"
                        ],
                        [
                            "F.softmax(log_pooling_sum, dim=1)",
                            "Call"
                        ],
                        [
                            "self.get_intersect_matrix(inputs_hiddens_norm, inputs_hiddens_norm, mask_claim, mask_evidence)",
                            "Call"
                        ],
                        [
                            "log_pooling_sum.view([-1, self.evi_num, 1])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_146": {
                "variable": {
                    "value": "inputs_att_de",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "inputs_att_de",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(inputs_att_de, dim=1)",
                            "Call"
                        ],
                        [
                            "inputs_att_de.view([-1, self.evi_num, self.bert_hidden_dim])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_148": {
                "variable": {
                    "value": "inputs_att",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[inputs_att, inputs_att_de]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_150": {
                "variable": {
                    "value": "class_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inference_feature",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.proj_inference_de(inputs_att)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_151": {
                "variable": {
                    "value": "prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "select_prob * class_prob",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_152": {
                "variable": {
                    "value": "prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sum(select_prob * class_prob, 1)",
                            "Call"
                        ],
                        [
                            "torch.log(prob)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_61": {
                "in_features": {
                    "value": "self.bert_hidden_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_62": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_63": {
                "in_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_105": {
                "input": {
                    "value": "-(sim - self.mu.cuda()) ** 2 / self.sigma.cuda() ** 2 / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_107": {
                "input": {
                    "value": "torch.clamp(pooling_sum, min=1e-10)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_108": {
                "input": {
                    "value": "attn_q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "attn_q.view(attn_q.size()[0], attn_q.size()[1], 1)",
                            "Call"
                        ],
                        [
                            "attn_q.view(attn_q.size()[0], attn_q.size()[1])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_116": {
                "input": {
                    "value": "-(sim - self.mu.cuda()) ** 2 / self.sigma.cuda() ** 2 / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clamp_118": {
                "input": {
                    "value": "log_pooling_sum",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.log(torch.clamp(pooling_sum, min=1e-10)) * attn_q",
                            "BinOp"
                        ],
                        [
                            "torch.sum(log_pooling_sum, 1) / (torch.sum(attn_q, 1) + 1e-10)",
                            "BinOp"
                        ],
                        [
                            "self.proj_select(log_pooling_sum).view([-1, 1])",
                            "Call"
                        ],
                        [
                            "torch.sum(pooling_value, 2)",
                            "Call"
                        ],
                        [
                            "torch.log(torch.clamp(log_pooling_sum, min=1e-10))",
                            "Call"
                        ],
                        [
                            "self.proj_att(log_pooling_sum).squeeze(-1)",
                            "Call"
                        ],
                        [
                            "log_pooling_sum.masked_fill_((1 - attn_q).bool(), -10000.0)",
                            "Call"
                        ],
                        [
                            "F.softmax(log_pooling_sum, dim=1)",
                            "Call"
                        ],
                        [
                            "self.get_intersect_matrix(inputs_hiddens_norm, inputs_hiddens_norm, mask_claim, mask_evidence)",
                            "Call"
                        ],
                        [
                            "log_pooling_sum.view([-1, self.evi_num, 1])",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "1e-10",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clamp_107": {
                "input": {
                    "value": "pooling_sum",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sum(pooling_value, 2)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "1e-10",
                    "type": "float",
                    "possible_values": []
                }
            },
            "transpose_104": {
                "input": {
                    "value": "d_embed",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_115": {
                "input": {
                    "value": "d_embed",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "kgat/test.py": {
        "torch": {
            "is_available_68": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_85": {
                "f": {
                    "value": "args.checkpoint",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "kgat/train.py": {
        "torch": {
            "DataParallel_162": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "ori_model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inference_model(bert_model, args)",
                            "Call"
                        ]
                    ]
                }
            },
            "nll_loss_73": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model(inputs)",
                            "Call"
                        ],
                        [
                            "model(inputs)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "lab_tensor",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "is_available_138": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_158": {
                "f": {
                    "value": "args.postpretrain",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_85": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_91": {
                "obj": {
                    "value": "{'epoch': epoch, 'model': ori_model.state_dict(), 'best_accuracy': best_accuracy}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "save_path + '.best.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "pretrain/data_loader.py": {
        "torch": {}
    },
    "pretrain/models.py": {
        "torch": {
            "Dropout_53": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "args.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_58": {
                "variable": {
                    "value": "self.proj_match",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.bert_hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_65": {
                "variable": {
                    "value": "prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.proj_match(inputs).squeeze(-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "pretrain/train.py": {
        "torch": {
            "CrossEntropyLoss_65": {
                "variable": {
                    "value": "crit",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_127": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_85": {
                "obj": {
                    "value": "{'epoch': epoch, 'model': model.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "save_path + '.best.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "retrieval_model/data_loader.py": {
        "torch": {}
    },
    "retrieval_model/models.py": {
        "torch": {
            "Dropout_53": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "args.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_58": {
                "variable": {
                    "value": "self.proj_match",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.bert_hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_65": {
                "variable": {
                    "value": "score",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.proj_match(inputs).squeeze(-1)",
                            "Call"
                        ],
                        [
                            "torch.tanh(score)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "retrieval_model/test.py": {
        "torch": {
            "is_available_71": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_86": {
                "f": {
                    "value": "args.checkpoint",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "retrieval_model/train.py": {
        "torch": {
            "MarginRankingLoss_70": {
                "variable": {
                    "value": "crit",
                    "type": "Variable",
                    "possible_values": []
                },
                "margin": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_77": {
                "variable": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "score_pos.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_136": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_94": {
                "obj": {
                    "value": "{'epoch': epoch, 'model': model.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "save_path + '.best.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "scikgat/abstract_rerank/bert_dataloader.py": {
        "torch": {}
    },
    "scikgat/abstract_rerank/inference.py": {
        "torch": {
            "load_65": {
                "variable": {
                    "value": "ckpt",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.checkpoint",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_18": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "scikgat/abstract_rerank/scibert.py": {
        "torch": {
            "Linear_10": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "768",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_16": {
                "variable": {
                    "value": "score",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.classifier(features).squeeze(-1)",
                            "Call"
                        ],
                        [
                            "F.softmax(score, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_18": {
                "variable": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[features, raw_score.unsqueeze(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "scikgat/kgat/data_loader.py": {
        "torch": {}
    },
    "scikgat/kgat/models.py": {
        "torch": {
            "Dropout_48": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "args.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_55": {
                "variable": {
                    "value": "self.proj_inference_de",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.bert_hidden_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_56": {
                "variable": {
                    "value": "self.proj_att",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.kernel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_57": {
                "variable": {
                    "value": "self.proj_input_de",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.bert_hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.bert_hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_58": {
                "variable": {
                    "value": "self.proj_gat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Linear(self.bert_hidden_dim * 2, 128)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_63": {
                "variable": {
                    "value": "self.proj_select",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.kernel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "index_select_72": {
                "variable": {
                    "value": "own_hidden",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs_hiddens",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs_hiddens.view(-1, self.max_len, self.bert_hidden_dim)",
                            "Call"
                        ],
                        [
                            "inputs_hiddens.view([-1, self.evi_num, self.max_len, self.bert_hidden_dim])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "idx",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.LongTensor([index]).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_73": {
                "variable": {
                    "value": "own_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "mask.view([-1, self.evi_num, self.max_len])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "idx",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.LongTensor([index]).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_74": {
                "variable": {
                    "value": "own_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs.view([-1, self.evi_num, self.bert_hidden_dim])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "idx",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.LongTensor([index]).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "normalize_79": {
                "variable": {
                    "value": "hiddens_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs_hiddens",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs_hiddens.view(-1, self.max_len, self.bert_hidden_dim)",
                            "Call"
                        ],
                        [
                            "inputs_hiddens.view([-1, self.evi_num, self.max_len, self.bert_hidden_dim])",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "normalize_80": {
                "variable": {
                    "value": "own_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "own_hidden",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.index_select(inputs_hiddens, 1, idx)",
                            "Call"
                        ],
                        [
                            "own_hidden.repeat(1, self.evi_num, 1, 1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_88": {
                "variable": {
                    "value": "denoise_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "att_score * inputs_hiddens",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_89": {
                "variable": {
                    "value": "weight_inp",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[own_input, inputs]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_91": {
                "variable": {
                    "value": "weight_inp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight_inp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat([own_input, inputs], -1)",
                            "Call"
                        ],
                        [
                            "self.proj_gat(weight_inp)",
                            "Call"
                        ],
                        [
                            "F.softmax(weight_inp, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_93": {
                "variable": {
                    "value": "weight_de",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[own_input, denoise_inputs]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_95": {
                "variable": {
                    "value": "weight_de",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight_de",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat([own_input, denoise_inputs], -1)",
                            "Call"
                        ],
                        [
                            "self.proj_gat(weight_de)",
                            "Call"
                        ],
                        [
                            "F.softmax(weight_de, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_102": {
                "variable": {
                    "value": "sim",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q_embed",
                    "type": "Variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "torch.transpose(d_embed, 1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_104": {
                "variable": {
                    "value": "pooling_sum",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pooling_value",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.exp(-(sim - self.mu.cuda()) ** 2 / self.sigma.cuda() ** 2 / 2) * attn_d",
                            "BinOp"
                        ],
                        [
                            "torch.exp(-(sim - self.mu.cuda()) ** 2 / self.sigma.cuda() ** 2 / 2) * attn_d",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_113": {
                "variable": {
                    "value": "sim",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q_embed",
                    "type": "Variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "torch.transpose(d_embed, 1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_115": {
                "variable": {
                    "value": "log_pooling_sum",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pooling_value",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.exp(-(sim - self.mu.cuda()) ** 2 / self.sigma.cuda() ** 2 / 2) * attn_d",
                            "BinOp"
                        ],
                        [
                            "torch.exp(-(sim - self.mu.cuda()) ** 2 / self.sigma.cuda() ** 2 / 2) * attn_d",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_116": {
                "variable": {
                    "value": "log_pooling_sum",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.clamp(log_pooling_sum, min=1e-10)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_119": {
                "variable": {
                    "value": "log_pooling_sum",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_pooling_sum",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.log(torch.clamp(pooling_sum, min=1e-10)) * attn_q",
                            "BinOp"
                        ],
                        [
                            "torch.sum(log_pooling_sum, 1) / (torch.sum(attn_q, 1) + 1e-10)",
                            "BinOp"
                        ],
                        [
                            "self.proj_select(log_pooling_sum).view([-1, 1])",
                            "Call"
                        ],
                        [
                            "torch.sum(pooling_value, 2)",
                            "Call"
                        ],
                        [
                            "torch.log(torch.clamp(log_pooling_sum, min=1e-10))",
                            "Call"
                        ],
                        [
                            "self.proj_att(log_pooling_sum).squeeze(-1)",
                            "Call"
                        ],
                        [
                            "log_pooling_sum.masked_fill_((1 - attn_q).bool(), -10000.0)",
                            "Call"
                        ],
                        [
                            "F.softmax(log_pooling_sum, dim=1)",
                            "Call"
                        ],
                        [
                            "self.get_intersect_matrix(inputs_hiddens_norm, inputs_hiddens_norm, mask_claim, mask_evidence)",
                            "Call"
                        ],
                        [
                            "log_pooling_sum.view([-1, self.evi_num, 1])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_136": {
                "variable": {
                    "value": "inputs_hiddens_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs_hiddens",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs_hiddens.view(-1, self.max_len, self.bert_hidden_dim)",
                            "Call"
                        ],
                        [
                            "inputs_hiddens.view([-1, self.evi_num, self.max_len, self.bert_hidden_dim])",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_139": {
                "variable": {
                    "value": "select_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_pooling_sum",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.log(torch.clamp(pooling_sum, min=1e-10)) * attn_q",
                            "BinOp"
                        ],
                        [
                            "torch.sum(log_pooling_sum, 1) / (torch.sum(attn_q, 1) + 1e-10)",
                            "BinOp"
                        ],
                        [
                            "self.proj_select(log_pooling_sum).view([-1, 1])",
                            "Call"
                        ],
                        [
                            "torch.sum(pooling_value, 2)",
                            "Call"
                        ],
                        [
                            "torch.log(torch.clamp(log_pooling_sum, min=1e-10))",
                            "Call"
                        ],
                        [
                            "self.proj_att(log_pooling_sum).squeeze(-1)",
                            "Call"
                        ],
                        [
                            "log_pooling_sum.masked_fill_((1 - attn_q).bool(), -10000.0)",
                            "Call"
                        ],
                        [
                            "F.softmax(log_pooling_sum, dim=1)",
                            "Call"
                        ],
                        [
                            "self.get_intersect_matrix(inputs_hiddens_norm, inputs_hiddens_norm, mask_claim, mask_evidence)",
                            "Call"
                        ],
                        [
                            "log_pooling_sum.view([-1, self.evi_num, 1])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_147": {
                "variable": {
                    "value": "inputs_att_de",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "inputs_att_de",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(inputs_att_de, dim=1)",
                            "Call"
                        ],
                        [
                            "inputs_att_de.view([-1, self.evi_num, self.bert_hidden_dim])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_149": {
                "variable": {
                    "value": "inputs_att",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[inputs_att, inputs_att_de]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_151": {
                "variable": {
                    "value": "class_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inference_feature",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.proj_inference_de(inputs_att)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_152": {
                "variable": {
                    "value": "prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "select_prob * class_prob",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_59": {
                "in_features": {
                    "value": "self.bert_hidden_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_60": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_61": {
                "in_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_103": {
                "input": {
                    "value": "-(sim - self.mu.cuda()) ** 2 / self.sigma.cuda() ** 2 / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_105": {
                "input": {
                    "value": "torch.clamp(pooling_sum, min=1e-10)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_106": {
                "input": {
                    "value": "attn_q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "attn_q.view(attn_q.size()[0], attn_q.size()[1], 1)",
                            "Call"
                        ],
                        [
                            "attn_q.view(attn_q.size()[0], attn_q.size()[1])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_114": {
                "input": {
                    "value": "-(sim - self.mu.cuda()) ** 2 / self.sigma.cuda() ** 2 / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clamp_116": {
                "input": {
                    "value": "log_pooling_sum",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.log(torch.clamp(pooling_sum, min=1e-10)) * attn_q",
                            "BinOp"
                        ],
                        [
                            "torch.sum(log_pooling_sum, 1) / (torch.sum(attn_q, 1) + 1e-10)",
                            "BinOp"
                        ],
                        [
                            "self.proj_select(log_pooling_sum).view([-1, 1])",
                            "Call"
                        ],
                        [
                            "torch.sum(pooling_value, 2)",
                            "Call"
                        ],
                        [
                            "torch.log(torch.clamp(log_pooling_sum, min=1e-10))",
                            "Call"
                        ],
                        [
                            "self.proj_att(log_pooling_sum).squeeze(-1)",
                            "Call"
                        ],
                        [
                            "log_pooling_sum.masked_fill_((1 - attn_q).bool(), -10000.0)",
                            "Call"
                        ],
                        [
                            "F.softmax(log_pooling_sum, dim=1)",
                            "Call"
                        ],
                        [
                            "self.get_intersect_matrix(inputs_hiddens_norm, inputs_hiddens_norm, mask_claim, mask_evidence)",
                            "Call"
                        ],
                        [
                            "log_pooling_sum.view([-1, self.evi_num, 1])",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "1e-10",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clamp_105": {
                "input": {
                    "value": "pooling_sum",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sum(pooling_value, 2)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "1e-10",
                    "type": "float",
                    "possible_values": []
                }
            },
            "transpose_102": {
                "input": {
                    "value": "d_embed",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_113": {
                "input": {
                    "value": "d_embed",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "scikgat/kgat/test.py": {
        "torch": {
            "no_grad_28": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_83": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_100": {
                "f": {
                    "value": "args.checkpoint",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "scikgat/kgat/train.py": {
        "torch": {
            "DataParallel_164": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "ori_model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inference_model(bert, args)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_157": {
                "variable": {
                    "value": "pretrained_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.bert_pretrain, 'pytorch_model.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_71": {
                "variable": {
                    "value": "prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model(inputs)",
                            "Call"
                        ],
                        [
                            "model(inputs)",
                            "Call"
                        ],
                        [
                            "torch.log(prob)",
                            "Call"
                        ]
                    ]
                }
            },
            "nll_loss_72": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model(inputs)",
                            "Call"
                        ],
                        [
                            "model(inputs)",
                            "Call"
                        ],
                        [
                            "torch.log(prob)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "lab_tensor",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "is_available_137": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_85": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_91": {
                "obj": {
                    "value": "{'epoch': epoch, 'model': ori_model.state_dict(), 'best_accuracy': best_accuracy}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "save_path + '.best.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "scikgat/kgat/train_roberta.py": {
        "torch": {
            "DataParallel_172": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "ori_model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inference_model(bert, args)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_166": {
                "variable": {
                    "value": "pretrained_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.bert_pretrain, 'pytorch_model.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_79": {
                "variable": {
                    "value": "prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model(inputs, roberta=True)",
                            "Call"
                        ],
                        [
                            "model(inputs, roberta=True)",
                            "Call"
                        ],
                        [
                            "torch.log(prob)",
                            "Call"
                        ]
                    ]
                }
            },
            "nll_loss_80": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model(inputs, roberta=True)",
                            "Call"
                        ],
                        [
                            "model(inputs, roberta=True)",
                            "Call"
                        ],
                        [
                            "torch.log(prob)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "lab_tensor",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "is_available_146": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_93": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_99": {
                "obj": {
                    "value": "{'epoch': epoch, 'model': ori_model.state_dict(), 'best_accuracy': best_accuracy}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "save_path + '.best.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "scikgat/rationale_selection/transformer.py": {
        "torch": {
            "device_25": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "no_grad_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_49": {
                "input": {
                    "value": "model(**encoded_dict)[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    }
}