{
    "Scripts/PETA/002_ZZZ_Augmentation.py": {
        "sklearn": {},
        "tensorflow": {
            "where_59": {
                "variable": {
                    "value": "pt_1",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.equal(y_true, 1)",
                    "possible_values": []
                },
                "x": {
                    "value": "y_pred",
                    "possible_values": [
                        [
                            "K.round(y_pred)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.ones_like(y_pred)",
                    "possible_values": []
                }
            },
            "where_60": {
                "variable": {
                    "value": "pt_0",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.equal(y_true, 0)",
                    "possible_values": []
                },
                "x": {
                    "value": "y_pred",
                    "possible_values": [
                        [
                            "K.round(y_pred)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.zeros_like(y_pred)",
                    "possible_values": []
                }
            },
            "where_75": {
                "variable": {
                    "value": "f1",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.is_nan(f1)",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.zeros_like(f1)",
                    "possible_values": []
                },
                "y": {
                    "value": "f1",
                    "possible_values": [
                        [
                            "2 * p * r / (p + r + K.epsilon())",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.is_nan(f1), tf.zeros_like(f1), f1)",
                            "Call"
                        ],
                        [
                            "2 * p * r / (p + r + K.epsilon())",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.is_nan(f1), tf.zeros_like(f1), f1)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_89": {
                "variable": {
                    "value": "f1",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.is_nan(f1)",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.zeros_like(f1)",
                    "possible_values": []
                },
                "y": {
                    "value": "f1",
                    "possible_values": [
                        [
                            "2 * p * r / (p + r + K.epsilon())",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.is_nan(f1), tf.zeros_like(f1), f1)",
                            "Call"
                        ],
                        [
                            "2 * p * r / (p + r + K.epsilon())",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.is_nan(f1), tf.zeros_like(f1), f1)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_59": {
                "x": {
                    "value": "y_true",
                    "possible_values": []
                },
                "y": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "ones_like_59": {
                "input": {
                    "value": "y_pred",
                    "possible_values": [
                        [
                            "K.round(y_pred)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_60": {
                "x": {
                    "value": "y_true",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "zeros_like_60": {
                "input": {
                    "value": "y_pred",
                    "possible_values": [
                        [
                            "K.round(y_pred)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_nan_75": {
                "x": {
                    "value": "f1",
                    "possible_values": [
                        [
                            "2 * p * r / (p + r + K.epsilon())",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.is_nan(f1), tf.zeros_like(f1), f1)",
                            "Call"
                        ],
                        [
                            "2 * p * r / (p + r + K.epsilon())",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.is_nan(f1), tf.zeros_like(f1), f1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_75": {
                "input": {
                    "value": "f1",
                    "possible_values": [
                        [
                            "2 * p * r / (p + r + K.epsilon())",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.is_nan(f1), tf.zeros_like(f1), f1)",
                            "Call"
                        ],
                        [
                            "2 * p * r / (p + r + K.epsilon())",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.is_nan(f1), tf.zeros_like(f1), f1)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_nan_89": {
                "x": {
                    "value": "f1",
                    "possible_values": [
                        [
                            "2 * p * r / (p + r + K.epsilon())",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.is_nan(f1), tf.zeros_like(f1), f1)",
                            "Call"
                        ],
                        [
                            "2 * p * r / (p + r + K.epsilon())",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.is_nan(f1), tf.zeros_like(f1), f1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_89": {
                "input": {
                    "value": "f1",
                    "possible_values": [
                        [
                            "2 * p * r / (p + r + K.epsilon())",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.is_nan(f1), tf.zeros_like(f1), f1)",
                            "Call"
                        ],
                        [
                            "2 * p * r / (p + r + K.epsilon())",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.is_nan(f1), tf.zeros_like(f1), f1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "Scripts/PETA/003_Test_the_Model.py": {
        "sklearn": {},
        "tensorflow": {
            "where_59": {
                "variable": {
                    "value": "pt_1",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.equal(y_true, 1)",
                    "possible_values": []
                },
                "x": {
                    "value": "y_pred",
                    "possible_values": [
                        [
                            "K.round(y_pred)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.ones_like(y_pred)",
                    "possible_values": []
                }
            },
            "where_60": {
                "variable": {
                    "value": "pt_0",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.equal(y_true, 0)",
                    "possible_values": []
                },
                "x": {
                    "value": "y_pred",
                    "possible_values": [
                        [
                            "K.round(y_pred)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.zeros_like(y_pred)",
                    "possible_values": []
                }
            },
            "where_75": {
                "variable": {
                    "value": "f1",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.is_nan(f1)",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.zeros_like(f1)",
                    "possible_values": []
                },
                "y": {
                    "value": "f1",
                    "possible_values": [
                        [
                            "2 * p * r / (p + r + K.epsilon())",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.is_nan(f1), tf.zeros_like(f1), f1)",
                            "Call"
                        ],
                        [
                            "2 * p * r / (p + r + K.epsilon())",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.is_nan(f1), tf.zeros_like(f1), f1)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_89": {
                "variable": {
                    "value": "f1",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.is_nan(f1)",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.zeros_like(f1)",
                    "possible_values": []
                },
                "y": {
                    "value": "f1",
                    "possible_values": [
                        [
                            "2 * p * r / (p + r + K.epsilon())",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.is_nan(f1), tf.zeros_like(f1), f1)",
                            "Call"
                        ],
                        [
                            "2 * p * r / (p + r + K.epsilon())",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.is_nan(f1), tf.zeros_like(f1), f1)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_59": {
                "x": {
                    "value": "y_true",
                    "possible_values": []
                },
                "y": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "ones_like_59": {
                "input": {
                    "value": "y_pred",
                    "possible_values": [
                        [
                            "K.round(y_pred)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_60": {
                "x": {
                    "value": "y_true",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "zeros_like_60": {
                "input": {
                    "value": "y_pred",
                    "possible_values": [
                        [
                            "K.round(y_pred)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_nan_75": {
                "x": {
                    "value": "f1",
                    "possible_values": [
                        [
                            "2 * p * r / (p + r + K.epsilon())",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.is_nan(f1), tf.zeros_like(f1), f1)",
                            "Call"
                        ],
                        [
                            "2 * p * r / (p + r + K.epsilon())",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.is_nan(f1), tf.zeros_like(f1), f1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_75": {
                "input": {
                    "value": "f1",
                    "possible_values": [
                        [
                            "2 * p * r / (p + r + K.epsilon())",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.is_nan(f1), tf.zeros_like(f1), f1)",
                            "Call"
                        ],
                        [
                            "2 * p * r / (p + r + K.epsilon())",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.is_nan(f1), tf.zeros_like(f1), f1)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_nan_89": {
                "x": {
                    "value": "f1",
                    "possible_values": [
                        [
                            "2 * p * r / (p + r + K.epsilon())",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.is_nan(f1), tf.zeros_like(f1), f1)",
                            "Call"
                        ],
                        [
                            "2 * p * r / (p + r + K.epsilon())",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.is_nan(f1), tf.zeros_like(f1), f1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_89": {
                "input": {
                    "value": "f1",
                    "possible_values": [
                        [
                            "2 * p * r / (p + r + K.epsilon())",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.is_nan(f1), tf.zeros_like(f1), f1)",
                            "Call"
                        ],
                        [
                            "2 * p * r / (p + r + K.epsilon())",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.is_nan(f1), tf.zeros_like(f1), f1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "Scripts/RAP/002_Augmentation_TransferLearning_ResNet_RAP.py": {
        "tensorflow": {
            "where_56": {
                "variable": {
                    "value": "pt_1",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.equal(y_true, 1)",
                    "possible_values": []
                },
                "x": {
                    "value": "y_pred",
                    "possible_values": [
                        [
                            "K.round(y_pred)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.ones_like(y_pred)",
                    "possible_values": []
                }
            },
            "where_57": {
                "variable": {
                    "value": "pt_0",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.equal(y_true, 0)",
                    "possible_values": []
                },
                "x": {
                    "value": "y_pred",
                    "possible_values": [
                        [
                            "K.round(y_pred)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.zeros_like(y_pred)",
                    "possible_values": []
                }
            },
            "where_72": {
                "variable": {
                    "value": "f1",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.is_nan(f1)",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.zeros_like(f1)",
                    "possible_values": []
                },
                "y": {
                    "value": "f1",
                    "possible_values": [
                        [
                            "2 * p * r / (p + r + K.epsilon())",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.is_nan(f1), tf.zeros_like(f1), f1)",
                            "Call"
                        ],
                        [
                            "2 * p * r / (p + r + K.epsilon())",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.is_nan(f1), tf.zeros_like(f1), f1)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_86": {
                "variable": {
                    "value": "f1",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.is_nan(f1)",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.zeros_like(f1)",
                    "possible_values": []
                },
                "y": {
                    "value": "f1",
                    "possible_values": [
                        [
                            "2 * p * r / (p + r + K.epsilon())",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.is_nan(f1), tf.zeros_like(f1), f1)",
                            "Call"
                        ],
                        [
                            "2 * p * r / (p + r + K.epsilon())",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.is_nan(f1), tf.zeros_like(f1), f1)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_56": {
                "x": {
                    "value": "y_true",
                    "possible_values": []
                },
                "y": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "ones_like_56": {
                "input": {
                    "value": "y_pred",
                    "possible_values": [
                        [
                            "K.round(y_pred)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_57": {
                "x": {
                    "value": "y_true",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "zeros_like_57": {
                "input": {
                    "value": "y_pred",
                    "possible_values": [
                        [
                            "K.round(y_pred)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_nan_72": {
                "x": {
                    "value": "f1",
                    "possible_values": [
                        [
                            "2 * p * r / (p + r + K.epsilon())",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.is_nan(f1), tf.zeros_like(f1), f1)",
                            "Call"
                        ],
                        [
                            "2 * p * r / (p + r + K.epsilon())",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.is_nan(f1), tf.zeros_like(f1), f1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_72": {
                "input": {
                    "value": "f1",
                    "possible_values": [
                        [
                            "2 * p * r / (p + r + K.epsilon())",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.is_nan(f1), tf.zeros_like(f1), f1)",
                            "Call"
                        ],
                        [
                            "2 * p * r / (p + r + K.epsilon())",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.is_nan(f1), tf.zeros_like(f1), f1)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_nan_86": {
                "x": {
                    "value": "f1",
                    "possible_values": [
                        [
                            "2 * p * r / (p + r + K.epsilon())",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.is_nan(f1), tf.zeros_like(f1), f1)",
                            "Call"
                        ],
                        [
                            "2 * p * r / (p + r + K.epsilon())",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.is_nan(f1), tf.zeros_like(f1), f1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_86": {
                "input": {
                    "value": "f1",
                    "possible_values": [
                        [
                            "2 * p * r / (p + r + K.epsilon())",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.is_nan(f1), tf.zeros_like(f1), f1)",
                            "Call"
                        ],
                        [
                            "2 * p * r / (p + r + K.epsilon())",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.is_nan(f1), tf.zeros_like(f1), f1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}