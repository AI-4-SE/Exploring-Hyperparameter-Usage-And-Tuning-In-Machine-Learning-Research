{
    "keras/data_loader.py": {
        "sklearn": {
            "shuffle_40": {
                "variable": {
                    "value": "(self.images, self.labels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "self.images",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "self.labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shuffle_76": {
                "variable": {
                    "value": "(x, y_rec, y_cls)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y_rec",
                    "type": "Variable",
                    "possible_values": []
                },
                "*arrays_2": {
                    "value": "y_cls",
                    "type": "Variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch/train.py": {
        "sklearn": {
            "accuracy_score_207": {
                "y_true": {
                    "value": "y.cpu().numpy().astype('int32')",
                    "type": "Call",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "np.argmax(pred.cpu().detach().numpy(), axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "accuracy_score_225": {
                "y_true": {
                    "value": "y.cpu().numpy().astype('int32')",
                    "type": "Call",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "np.argmax(pred.cpu().detach().numpy(), axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "accuracy_score_264": {
                "y_true": {
                    "value": "y_clc.cpu().numpy().astype('int32')",
                    "type": "Call",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "np.argmax(pred_clc.cpu().detach().numpy(), axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "DataLoader_126": {
                "variable": {
                    "value": "training_generator",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "training_data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "TransVW_Dataset(x_train, y_train, conf)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_127": {
                "variable": {
                    "value": "validation_generator",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "validation_data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "TransVW_Dataset(x_valid, y_valid, conf)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_129": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "MSELoss_150": {
                "variable": {
                    "value": "criterion_mse",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_151": {
                "variable": {
                    "value": "criterion_cce",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "StepLR_160": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.optim.SGD(model.parameters(), conf.lr, momentum=0.9, weight_decay=0.0, nesterov=False)",
                            "Call"
                        ],
                        [
                            "torch.optim.Adam(model.parameters(), conf.lr)",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "int(conf.patience * 0.8)",
                    "type": "Call",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "DataParallel_144": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ClassificationNet3D(cls_classes=conf.cls_classes)",
                            "Call"
                        ],
                        [
                            "YNet3D(cls_classes=conf.cls_classes)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model, device_ids=[i for i in range(torch.cuda.device_count())])",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[i for i in range(torch.cuda.device_count())]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "SGD_154": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "conf.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_175": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(conf.model_path, 'TransVW_chest_ct.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_count_131": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_147": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_156": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "conf.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_129": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_138": {
                "variable": {
                    "value": "checkpoint_en",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.pre_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_cache_255": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_284": {
                "obj": {
                    "value": "{'epoch': epoch + 1, 'state_dict': model.state_dict(), 'optimizer_state_dict': optimizer.state_dict(), 'num_epoch_no_improvement': num_epoch_no_improvement, 'best_loss': best_loss, 'best_acc': best_acc}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(conf.model_path, 'TransVW_chest_ct.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "empty_cache_215": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_216": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_256": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_202": {
                "input": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model(image)",
                            "Call"
                        ],
                        [
                            "model(image)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_222": {
                "input": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model(image)",
                            "Call"
                        ],
                        [
                            "model(image)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_240": {
                "input": {
                    "value": "pred_clc",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "device_count_144": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_262": {
                "input": {
                    "value": "pred_clc",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "self_discovery/feature_extractor.py": {
        "sklearn": {},
        "tensorflow": {}
    },
    "self_discovery/pattern_generator_3D.py": {
        "sklearn": {},
        "tensorflow": {}
    },
    "self_discovery/train_autoencoder.py": {
        "sklearn": {
            "shuffle_160": {
                "variable": {
                    "value": "(x, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        },
        "tensorflow": {}
    },
    "keras/train.py": {
        "tensorflow": {}
    },
    "pytorch/data_loader.py": {
        "torch": {}
    },
    "pytorch/models/ynet3d.py": {
        "torch": {
            "Conv3d_32": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_chan",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_chan",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_57": {
                "*args": {
                    "value": "layer1",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv3d_63": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_chan",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool3d_75": {
                "variable": {
                    "value": "self.avgpool1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_76": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "cls_classes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "44",
                            "MethodArgument"
                        ],
                        [
                            "44",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "flatten_85": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature_space",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.avgpool1(self.activation(self.bn1(self.conv1(x))))",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool3d_95": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose3d_111": {
                "variable": {
                    "value": "self.up_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inChans",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "outChans",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_116": {
                "variable": {
                    "value": "concat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out_up_conv, skip_x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv3d_125": {
                "variable": {
                    "value": "self.final_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inChans",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_126": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "batch_norm_24": {
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "running_mean": {
                    "value": "self.running_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "running_var": {
                    "value": "self.running_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_36": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "out_chan",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_67": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Softmax_78": {
                "variable": {
                    "value": "self.lst_act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_80": {
                "variable": {
                    "value": "self.lst_act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "PReLU_38": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_parameters": {
                    "value": "out_chan",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "PReLU_69": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_parameters": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ELU_40": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ELU_71": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch/utils/purturbation.py": {
        "torch": {}
    }
}