{
    "gpflow_sampling/bases/core.py": {
        "tensorflow": {}
    },
    "gpflow_sampling/bases/fourier_bases.py": {
        "tensorflow": {
            "tensordot_70": {
                "variable": {
                    "value": "proj",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inducing_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "inducing_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "inducing_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "inducing_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "x.as_images",
                            "Attribute"
                        ],
                        [
                            "x.as_images",
                            "Attribute"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "self.weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axes": {
                    "value": "[-1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cos_71": {
                "variable": {
                    "value": "feat",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "proj + self.biases",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_115": {
                "variable": {
                    "value": "feat",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "proj + expand_to(self.biases, axis=1, ndims=ndims)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_136": {
                "variable": {
                    "value": "self._biases",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "biases",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "biases",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_137": {
                "variable": {
                    "value": "self._weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weights",
                            "Call"
                        ],
                        [
                            "weights",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "weight_initializer(self.kernel.kernel, patch_size, batch_shape=[self.num_bases], dtype=dtype)",
                            "Call"
                        ],
                        [
                            "weight_initializer(self.kernel.kernel, patch_size, batch_shape=batch_shape, dtype=dtype)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_170": {
                "variable": {
                    "value": "variances",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[k.variance for k in self.kernel.latent_kernels]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "reshape_228": {
                "variable": {
                    "value": "self._filters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "move_axis(weights, -1, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.kernel.patch_shape + [self.kernel.channels_in, self.num_bases]",
                            "BinOp"
                        ],
                        [
                            "list(self.kernel.patch_shape) + [self.kernel.channels_in, 1]",
                            "BinOp"
                        ],
                        [
                            "list(self.kernel.patch_shape) + [self.kernel.channels_in, 1]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reciprocal_236": {
                "variable": {
                    "value": "inv_ls",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.kernel.kernel.lengthscales",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_285": {
                "variable": {
                    "value": "self._filters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "move_axis(weights, -1, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.kernel.patch_shape + batch_shape",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reciprocal_294": {
                "variable": {
                    "value": "inv_ls",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.kernel.kernel.lengthscales",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_98": {
                "x": {
                    "value": "2 * self.kernel.variance / self.num_bases",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reciprocal_156": {
                "variable": {
                    "value": "inv_ls",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "kernel.lengthscales",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_171": {
                "x": {
                    "value": "2 * variances / self.num_bases",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_238": {
                "variable": {
                    "value": "coeffs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inv_ls",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.reciprocal(kernel.lengthscales)",
                            "Call"
                        ],
                        [
                            "tf.fill([num_lengthscales], inv_ls)",
                            "Call"
                        ],
                        [
                            "tf.math.reciprocal(self.kernel.kernel.lengthscales)",
                            "Call"
                        ],
                        [
                            "tf.math.reciprocal(self.kernel.kernel.lengthscales)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.kernel.patch_shape + [self.kernel.channels_in, self.num_bases]",
                            "BinOp"
                        ],
                        [
                            "list(self.kernel.patch_shape) + [self.kernel.channels_in, 1]",
                            "BinOp"
                        ],
                        [
                            "list(self.kernel.patch_shape) + [self.kernel.channels_in, 1]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "fill_240": {
                "variable": {
                    "value": "coeffs",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.kernel.patch_shape + [self.kernel.channels_in, self.num_bases]",
                            "BinOp"
                        ],
                        [
                            "list(self.kernel.patch_shape) + [self.kernel.channels_in, 1]",
                            "BinOp"
                        ],
                        [
                            "list(self.kernel.patch_shape) + [self.kernel.channels_in, 1]",
                            "BinOp"
                        ]
                    ]
                },
                "value": {
                    "value": "inv_ls",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.reciprocal(kernel.lengthscales)",
                            "Call"
                        ],
                        [
                            "tf.fill([num_lengthscales], inv_ls)",
                            "Call"
                        ],
                        [
                            "tf.math.reciprocal(self.kernel.kernel.lengthscales)",
                            "Call"
                        ],
                        [
                            "tf.math.reciprocal(self.kernel.kernel.lengthscales)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_250": {
                "x": {
                    "value": "2 * self.kernel.kernel.variance / self.num_bases",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_296": {
                "variable": {
                    "value": "coeffs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.transpose(inv_ls)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.kernel.patch_shape + [self.kernel.channels_in, self.num_bases]",
                            "BinOp"
                        ],
                        [
                            "list(self.kernel.patch_shape) + [self.kernel.channels_in, 1]",
                            "BinOp"
                        ],
                        [
                            "list(self.kernel.patch_shape) + [self.kernel.channels_in, 1]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "fill_298": {
                "variable": {
                    "value": "coeffs",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.kernel.patch_shape + [self.kernel.channels_in, self.num_bases]",
                            "BinOp"
                        ],
                        [
                            "list(self.kernel.patch_shape) + [self.kernel.channels_in, 1]",
                            "BinOp"
                        ],
                        [
                            "list(self.kernel.patch_shape) + [self.kernel.channels_in, 1]",
                            "BinOp"
                        ]
                    ]
                },
                "value": {
                    "value": "inv_ls",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.reciprocal(kernel.lengthscales)",
                            "Call"
                        ],
                        [
                            "tf.fill([num_lengthscales], inv_ls)",
                            "Call"
                        ],
                        [
                            "tf.math.reciprocal(self.kernel.kernel.lengthscales)",
                            "Call"
                        ],
                        [
                            "tf.math.reciprocal(self.kernel.kernel.lengthscales)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_305": {
                "x": {
                    "value": "2 * self.kernel.kernel.variance / num_features_out",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reciprocal_90": {
                "x": {
                    "value": "self.kernel.lengthscales",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "fill_158": {
                "variable": {
                    "value": "inv_ls",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "[num_lengthscales]",
                    "type": "List",
                    "possible_values": []
                },
                "value": {
                    "value": "inv_ls",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.reciprocal(kernel.lengthscales)",
                            "Call"
                        ],
                        [
                            "tf.fill([num_lengthscales], inv_ls)",
                            "Call"
                        ],
                        [
                            "tf.math.reciprocal(self.kernel.kernel.lengthscales)",
                            "Call"
                        ],
                        [
                            "tf.math.reciprocal(self.kernel.kernel.lengthscales)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_193": {
                "variable": {
                    "value": "x_4d",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inducing_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "inducing_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "inducing_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "inducing_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "x.as_images",
                            "Attribute"
                        ],
                        [
                            "x.as_images",
                            "Attribute"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1] + list(x.shape[-3:])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_195": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.convolve(x)",
                            "Call"
                        ],
                        [
                            "self.convolve(x_4d)",
                            "Call"
                        ],
                        [
                            "tf.reshape(conv, list(x.shape[:-3]) + list(conv.shape[1:]))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "list(x.shape[:-3]) + list(conv.shape[1:])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_198": {
                "x": {
                    "value": "conv + self.biases",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_202": {
                "input": {
                    "value": "x.as_images",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "self.filters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "depthwise_conv2d_260": {
                "input": {
                    "value": "x.as_images",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filter": {
                    "value": "self.filters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "stack_162": {
                "values": {
                    "value": "inv_lengthscales",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "expand_to(arr=tf.stack(inv_lengthscales), axis=1, ndims=self._weights.shape.ndims)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_296": {
                "a": {
                    "value": "inv_ls",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.reciprocal(kernel.lengthscales)",
                            "Call"
                        ],
                        [
                            "tf.fill([num_lengthscales], inv_ls)",
                            "Call"
                        ],
                        [
                            "tf.math.reciprocal(self.kernel.kernel.lengthscales)",
                            "Call"
                        ],
                        [
                            "tf.math.reciprocal(self.kernel.kernel.lengthscales)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "gpflow_sampling/bases/fourier_initializers.py": {
        "tensorflow": {
            "uniform_39": {
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[ndims] if batch_shape is None else list(batch_shape) + [ndims]",
                            "IfExp"
                        ],
                        [
                            "[ndims] if batch_shape is None else list(batch_shape) + [ndims]",
                            "IfExp"
                        ]
                    ]
                },
                "maxval": {
                    "value": "maxval",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "default_float()",
                            "Call"
                        ],
                        [
                            "default_float()",
                            "Call"
                        ],
                        [
                            "default_float()",
                            "Call"
                        ]
                    ]
                }
            },
            "convert_to_tensor_60": {
                "value": {
                    "value": "normal_rvs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random.normal(shape=batch_shape + [ndims], dtype=dtype)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(normal_rvs, dtype=dtype)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "default_float()",
                            "Call"
                        ],
                        [
                            "default_float()",
                            "Call"
                        ],
                        [
                            "default_float()",
                            "Call"
                        ]
                    ]
                }
            },
            "normal_85": {
                "variable": {
                    "value": "normal_rvs",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "batch_shape + [ndims]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "default_float()",
                            "Call"
                        ],
                        [
                            "default_float()",
                            "Call"
                        ],
                        [
                            "default_float()",
                            "Call"
                        ]
                    ]
                }
            },
            "convert_to_tensor_88": {
                "variable": {
                    "value": "normal_rvs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "normal_rvs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random.normal(shape=batch_shape + [ndims], dtype=dtype)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(normal_rvs, dtype=dtype)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "default_float()",
                            "Call"
                        ],
                        [
                            "default_float()",
                            "Call"
                        ],
                        [
                            "default_float()",
                            "Call"
                        ]
                    ]
                }
            },
            "gamma_91": {
                "variable": {
                    "value": "gamma_rvs",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "batch_shape + [1]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "alpha": {
                    "value": "smoothness",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 / 2",
                            "BinOp"
                        ],
                        [
                            "3 / 2",
                            "BinOp"
                        ],
                        [
                            "5 / 2",
                            "BinOp"
                        ]
                    ]
                },
                "beta": {
                    "value": "smoothness",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 / 2",
                            "BinOp"
                        ],
                        [
                            "3 / 2",
                            "BinOp"
                        ],
                        [
                            "5 / 2",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "default_float()",
                            "Call"
                        ],
                        [
                            "default_float()",
                            "Call"
                        ],
                        [
                            "default_float()",
                            "Call"
                        ]
                    ]
                }
            },
            "convert_to_tensor_97": {
                "variable": {
                    "value": "gamma_rvs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "gamma_rvs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random.gamma(shape=batch_shape + [1], alpha=smoothness, beta=smoothness, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(gamma_rvs, dtype=dtype)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "default_float()",
                            "Call"
                        ],
                        [
                            "default_float()",
                            "Call"
                        ],
                        [
                            "default_float()",
                            "Call"
                        ]
                    ]
                }
            },
            "normal_57": {
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[ndims] if batch_shape is None else list(batch_shape) + [ndims]",
                            "IfExp"
                        ],
                        [
                            "[ndims] if batch_shape is None else list(batch_shape) + [ndims]",
                            "IfExp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "default_float()",
                            "Call"
                        ],
                        [
                            "default_float()",
                            "Call"
                        ],
                        [
                            "default_float()",
                            "Call"
                        ]
                    ]
                }
            },
            "rsqrt_100": {
                "x": {
                    "value": "gamma_rvs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random.gamma(shape=batch_shape + [1], alpha=smoothness, beta=smoothness, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(gamma_rvs, dtype=dtype)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "gpflow_sampling/covariances/Kfus.py": {
        "tensorflow": {
            "square_95": {
                "variable": {
                    "value": "precis",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.math.reciprocal(kern.kernel.lengthscales)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_103": {
                "variable": {
                    "value": "r2",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.nn.conv2d(input=tf.square(feat.as_images), filters=filters, strides=[1, 1], padding='VALID')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_108": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "Xnew",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1] + list(Xnew.shape)[-3:]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_133": {
                "variable": {
                    "value": "r2",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.math.squared_difference(tf.expand_dims(kern.kernel.scale(Xp), -Zp.shape.ndims), kern.kernel.scale(Zp))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "square_160": {
                "variable": {
                    "value": "precis",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.math.reciprocal(kern.kernel.lengthscales)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "depthwise_conv2d_169": {
                "variable": {
                    "value": "ZZ",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.square(feat.as_images)",
                    "type": "Call",
                    "possible_values": []
                },
                "filter": {
                    "value": "filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(precis, patch_shape + [channels_in, 1])",
                            "Call"
                        ],
                        [
                            "tf.fill(patch_shape + [channels_in, 1], precis)",
                            "Call"
                        ],
                        [
                            "filters * feat.as_filters",
                            "BinOp"
                        ],
                        [
                            "tf.fill(patch_shape + [channels_in, 1], precis)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.transpose(precis), patch_shape + [channels_in, 1])",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_174": {
                "variable": {
                    "value": "r2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "move_axis(ZZ, 0, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 1, 1, channels_out]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_176": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "Xnew",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1] + list(Xnew.shape)[-3:]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "transpose_40": {
                "a": {
                    "value": "Kuf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Kuf_dispatch(Z, kern, X, **kwargs)",
                            "Call"
                        ],
                        [
                            "Kuf_dispatch(Z, kern, X, **kwargs)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "perm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "axes[ndims_z:ndims_z + ndims_x] + axes[:ndims_z]",
                            "BinOp"
                        ],
                        [
                            "[0] + axes[ndims_z:ndims_z + ndims_x] + axes[:ndims_z]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "transpose_55": {
                "a": {
                    "value": "Kuf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Kuf_dispatch(Z, kern, X, **kwargs)",
                            "Call"
                        ],
                        [
                            "Kuf_dispatch(Z, kern, X, **kwargs)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "perm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "axes[ndims_z:ndims_z + ndims_x] + axes[:ndims_z]",
                            "BinOp"
                        ],
                        [
                            "[0] + axes[ndims_z:ndims_z + ndims_x] + axes[:ndims_z]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tensordot_80": {
                "a": {
                    "value": "Kxz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kern.kernel.K(Xp, Zp)",
                            "Call"
                        ],
                        [
                            "kern.kernel.K_r2(r2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(Kxz, list(Kxz.shape[:-3]) + [-1, len(feat)])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(Kxz, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.tensordot(Kxz, kern.weights, [-2, -1])",
                            "Call"
                        ],
                        [
                            "kern.kernel.K_r2(r2)",
                            "Call"
                        ],
                        [
                            "kern.kernel.K_r2(r2)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.reshape(Kxz, list(Kxz.shape[:-1]) + [channels_in, -1]), axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(Kxz, list(Kxz.shape[:-3]) + [-1, len(feat)])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(Kxz, axis=-2)",
                            "Call"
                        ],
                        [
                            "div * tf.tensordot(Kxz, tf.reshape(kern.weights, [-1]), [-2, -1])",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "kern.weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axes": {
                    "value": "[-2, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_99": {
                "variable": {
                    "value": "filters",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "precis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.square(tf.math.reciprocal(kern.kernel.lengthscales))",
                            "Call"
                        ],
                        [
                            "tf.square(tf.math.reciprocal(kern.kernel.lengthscales))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "patch_shape + [channels_in, 1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "fill_101": {
                "variable": {
                    "value": "filters",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "patch_shape + [channels_in, 1]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "value": {
                    "value": "precis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.square(tf.math.reciprocal(kern.kernel.lengthscales))",
                            "Call"
                        ],
                        [
                            "tf.square(tf.math.reciprocal(kern.kernel.lengthscales))",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_116": {
                "variable": {
                    "value": "Kxz",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "Kxz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kern.kernel.K(Xp, Zp)",
                            "Call"
                        ],
                        [
                            "kern.kernel.K_r2(r2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(Kxz, list(Kxz.shape[:-3]) + [-1, len(feat)])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(Kxz, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.tensordot(Kxz, kern.weights, [-2, -1])",
                            "Call"
                        ],
                        [
                            "kern.kernel.K_r2(r2)",
                            "Call"
                        ],
                        [
                            "kern.kernel.K_r2(r2)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.reshape(Kxz, list(Kxz.shape[:-1]) + [channels_in, -1]), axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(Kxz, list(Kxz.shape[:-3]) + [-1, len(feat)])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(Kxz, axis=-2)",
                            "Call"
                        ],
                        [
                            "div * tf.tensordot(Kxz, tf.reshape(kern.weights, [-1]), [-2, -1])",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "list(Kxz.shape[:-3]) + [-1, len(feat)]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_123": {
                "tensor": {
                    "value": "Kxz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kern.kernel.K(Xp, Zp)",
                            "Call"
                        ],
                        [
                            "kern.kernel.K_r2(r2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(Kxz, list(Kxz.shape[:-3]) + [-1, len(feat)])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(Kxz, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.tensordot(Kxz, kern.weights, [-2, -1])",
                            "Call"
                        ],
                        [
                            "kern.kernel.K_r2(r2)",
                            "Call"
                        ],
                        [
                            "kern.kernel.K_r2(r2)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.reshape(Kxz, list(Kxz.shape[:-1]) + [channels_in, -1]), axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(Kxz, list(Kxz.shape[:-3]) + [-1, len(feat)])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(Kxz, axis=-2)",
                            "Call"
                        ],
                        [
                            "div * tf.tensordot(Kxz, tf.reshape(kern.weights, [-1]), [-2, -1])",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "list(Xnew.shape[:-3]) + list(Kxz.shape[1:])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensordot_144": {
                "a": {
                    "value": "kern.weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "b": {
                    "value": "Kxz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kern.kernel.K(Xp, Zp)",
                            "Call"
                        ],
                        [
                            "kern.kernel.K_r2(r2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(Kxz, list(Kxz.shape[:-3]) + [-1, len(feat)])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(Kxz, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.tensordot(Kxz, kern.weights, [-2, -1])",
                            "Call"
                        ],
                        [
                            "kern.kernel.K_r2(r2)",
                            "Call"
                        ],
                        [
                            "kern.kernel.K_r2(r2)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.reshape(Kxz, list(Kxz.shape[:-1]) + [channels_in, -1]), axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(Kxz, list(Kxz.shape[:-3]) + [-1, len(feat)])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(Kxz, axis=-2)",
                            "Call"
                        ],
                        [
                            "div * tf.tensordot(Kxz, tf.reshape(kern.weights, [-1]), [-2, -1])",
                            "BinOp"
                        ]
                    ]
                },
                "axes": {
                    "value": "[(0, 1), (-3, -1)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_165": {
                "variable": {
                    "value": "filters",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.transpose(precis)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "patch_shape + [channels_in, 1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "fill_167": {
                "variable": {
                    "value": "filters",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "patch_shape + [channels_in, 1]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "value": {
                    "value": "precis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.square(tf.math.reciprocal(kern.kernel.lengthscales))",
                            "Call"
                        ],
                        [
                            "tf.square(tf.math.reciprocal(kern.kernel.lengthscales))",
                            "Call"
                        ]
                    ]
                }
            },
            "repeat_177": {
                "input": {
                    "value": "kern.convolve(tf.square(X), filters)",
                    "type": "Call",
                    "possible_values": []
                },
                "repeats": {
                    "value": "len(feat)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_mean_184": {
                "variable": {
                    "value": "Kxz",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reshape(Kxz, list(Kxz.shape[:-1]) + [channels_in, -1])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_188": {
                "variable": {
                    "value": "Kxz",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "Kxz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kern.kernel.K(Xp, Zp)",
                            "Call"
                        ],
                        [
                            "kern.kernel.K_r2(r2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(Kxz, list(Kxz.shape[:-3]) + [-1, len(feat)])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(Kxz, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.tensordot(Kxz, kern.weights, [-2, -1])",
                            "Call"
                        ],
                        [
                            "kern.kernel.K_r2(r2)",
                            "Call"
                        ],
                        [
                            "kern.kernel.K_r2(r2)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.reshape(Kxz, list(Kxz.shape[:-1]) + [channels_in, -1]), axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(Kxz, list(Kxz.shape[:-3]) + [-1, len(feat)])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(Kxz, axis=-2)",
                            "Call"
                        ],
                        [
                            "div * tf.tensordot(Kxz, tf.reshape(kern.weights, [-1]), [-2, -1])",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "list(Kxz.shape[:-3]) + [-1, len(feat)]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_196": {
                "tensor": {
                    "value": "Kxz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kern.kernel.K(Xp, Zp)",
                            "Call"
                        ],
                        [
                            "kern.kernel.K_r2(r2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(Kxz, list(Kxz.shape[:-3]) + [-1, len(feat)])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(Kxz, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.tensordot(Kxz, kern.weights, [-2, -1])",
                            "Call"
                        ],
                        [
                            "kern.kernel.K_r2(r2)",
                            "Call"
                        ],
                        [
                            "kern.kernel.K_r2(r2)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.reshape(Kxz, list(Kxz.shape[:-1]) + [channels_in, -1]), axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(Kxz, list(Kxz.shape[:-3]) + [-1, len(feat)])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(Kxz, axis=-2)",
                            "Call"
                        ],
                        [
                            "div * tf.tensordot(Kxz, tf.reshape(kern.weights, [-1]), [-2, -1])",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "list(Xnew.shape[:-3]) + list(Kxz.shape[1:])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_75": {
                "tensor": {
                    "value": "Kxz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kern.kernel.K(Xp, Zp)",
                            "Call"
                        ],
                        [
                            "kern.kernel.K_r2(r2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(Kxz, list(Kxz.shape[:-3]) + [-1, len(feat)])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(Kxz, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.tensordot(Kxz, kern.weights, [-2, -1])",
                            "Call"
                        ],
                        [
                            "kern.kernel.K_r2(r2)",
                            "Call"
                        ],
                        [
                            "kern.kernel.K_r2(r2)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.reshape(Kxz, list(Kxz.shape[:-1]) + [channels_in, -1]), axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(Kxz, list(Kxz.shape[:-3]) + [-1, len(feat)])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(Kxz, axis=-2)",
                            "Call"
                        ],
                        [
                            "div * tf.tensordot(Kxz, tf.reshape(kern.weights, [-1]), [-2, -1])",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "list(Kxz.shape[:-2]) + spatial_out + [Kxz.shape[-1]]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_78": {
                "input_tensor": {
                    "value": "Kxz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kern.kernel.K(Xp, Zp)",
                            "Call"
                        ],
                        [
                            "kern.kernel.K_r2(r2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(Kxz, list(Kxz.shape[:-3]) + [-1, len(feat)])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(Kxz, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.tensordot(Kxz, kern.weights, [-2, -1])",
                            "Call"
                        ],
                        [
                            "kern.kernel.K_r2(r2)",
                            "Call"
                        ],
                        [
                            "kern.kernel.K_r2(r2)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.reshape(Kxz, list(Kxz.shape[:-1]) + [channels_in, -1]), axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(Kxz, list(Kxz.shape[:-3]) + [-1, len(feat)])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(Kxz, axis=-2)",
                            "Call"
                        ],
                        [
                            "div * tf.tensordot(Kxz, tf.reshape(kern.weights, [-1]), [-2, -1])",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reciprocal_95": {
                "x": {
                    "value": "kern.kernel.lengthscales",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_103": {
                "input": {
                    "value": "tf.square(feat.as_images)",
                    "type": "Call",
                    "possible_values": []
                },
                "filters": {
                    "value": "filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(precis, patch_shape + [channels_in, 1])",
                            "Call"
                        ],
                        [
                            "tf.fill(patch_shape + [channels_in, 1], precis)",
                            "Call"
                        ],
                        [
                            "filters * feat.as_filters",
                            "BinOp"
                        ],
                        [
                            "tf.fill(patch_shape + [channels_in, 1], precis)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.transpose(precis), patch_shape + [channels_in, 1])",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "square_109": {
                "x": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(Xnew, [-1] + list(Xnew.shape)[-3:])",
                            "Call"
                        ],
                        [
                            "tf.reshape(Xnew, [-1] + list(Xnew.shape)[-3:])",
                            "Call"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_mean_118": {
                "variable": {
                    "value": "Kxz",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "Kxz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kern.kernel.K(Xp, Zp)",
                            "Call"
                        ],
                        [
                            "kern.kernel.K_r2(r2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(Kxz, list(Kxz.shape[:-3]) + [-1, len(feat)])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(Kxz, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.tensordot(Kxz, kern.weights, [-2, -1])",
                            "Call"
                        ],
                        [
                            "kern.kernel.K_r2(r2)",
                            "Call"
                        ],
                        [
                            "kern.kernel.K_r2(r2)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.reshape(Kxz, list(Kxz.shape[:-1]) + [channels_in, -1]), axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(Kxz, list(Kxz.shape[:-3]) + [-1, len(feat)])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(Kxz, axis=-2)",
                            "Call"
                        ],
                        [
                            "div * tf.tensordot(Kxz, tf.reshape(kern.weights, [-1]), [-2, -1])",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensordot_120": {
                "variable": {
                    "value": "Kxz",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "Kxz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kern.kernel.K(Xp, Zp)",
                            "Call"
                        ],
                        [
                            "kern.kernel.K_r2(r2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(Kxz, list(Kxz.shape[:-3]) + [-1, len(feat)])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(Kxz, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.tensordot(Kxz, kern.weights, [-2, -1])",
                            "Call"
                        ],
                        [
                            "kern.kernel.K_r2(r2)",
                            "Call"
                        ],
                        [
                            "kern.kernel.K_r2(r2)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.reshape(Kxz, list(Kxz.shape[:-1]) + [channels_in, -1]), axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(Kxz, list(Kxz.shape[:-3]) + [-1, len(feat)])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(Kxz, axis=-2)",
                            "Call"
                        ],
                        [
                            "div * tf.tensordot(Kxz, tf.reshape(kern.weights, [-1]), [-2, -1])",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "kern.weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axes": {
                    "value": "[-2, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squared_difference_133": {
                "x": {
                    "value": "tf.expand_dims(kern.kernel.scale(Xp), -Zp.shape.ndims)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "kern.kernel.scale(Zp)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_139": {
                "tensor": {
                    "value": "move_axis(Kxz, -1, -2)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "list(Kxz.shape[:-2]) + [-1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_142": {
                "input_tensor": {
                    "value": "Kxz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kern.kernel.K(Xp, Zp)",
                            "Call"
                        ],
                        [
                            "kern.kernel.K_r2(r2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(Kxz, list(Kxz.shape[:-3]) + [-1, len(feat)])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(Kxz, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.tensordot(Kxz, kern.weights, [-2, -1])",
                            "Call"
                        ],
                        [
                            "kern.kernel.K_r2(r2)",
                            "Call"
                        ],
                        [
                            "kern.kernel.K_r2(r2)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.reshape(Kxz, list(Kxz.shape[:-1]) + [channels_in, -1]), axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(Kxz, list(Kxz.shape[:-3]) + [-1, len(feat)])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(Kxz, axis=-2)",
                            "Call"
                        ],
                        [
                            "div * tf.tensordot(Kxz, tf.reshape(kern.weights, [-1]), [-2, -1])",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "[-3, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reciprocal_160": {
                "x": {
                    "value": "kern.kernel.lengthscales",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_190": {
                "variable": {
                    "value": "Kxz",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "Kxz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kern.kernel.K(Xp, Zp)",
                            "Call"
                        ],
                        [
                            "kern.kernel.K_r2(r2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(Kxz, list(Kxz.shape[:-3]) + [-1, len(feat)])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(Kxz, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.tensordot(Kxz, kern.weights, [-2, -1])",
                            "Call"
                        ],
                        [
                            "kern.kernel.K_r2(r2)",
                            "Call"
                        ],
                        [
                            "kern.kernel.K_r2(r2)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.reshape(Kxz, list(Kxz.shape[:-1]) + [channels_in, -1]), axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(Kxz, list(Kxz.shape[:-3]) + [-1, len(feat)])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(Kxz, axis=-2)",
                            "Call"
                        ],
                        [
                            "div * tf.tensordot(Kxz, tf.reshape(kern.weights, [-1]), [-2, -1])",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cast_192": {
                "variable": {
                    "value": "div",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "1 / channels_in",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "Kxz.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_134": {
                "input": {
                    "value": "kern.kernel.scale(Xp)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-Zp.shape.ndims",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "transpose_165": {
                "a": {
                    "value": "precis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.square(tf.math.reciprocal(kern.kernel.lengthscales))",
                            "Call"
                        ],
                        [
                            "tf.square(tf.math.reciprocal(kern.kernel.lengthscales))",
                            "Call"
                        ]
                    ]
                }
            },
            "square_169": {
                "x": {
                    "value": "feat.as_images",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_177": {
                "x": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(Xnew, [-1] + list(Xnew.shape)[-3:])",
                            "Call"
                        ],
                        [
                            "tf.reshape(Xnew, [-1] + list(Xnew.shape)[-3:])",
                            "Call"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_185": {
                "tensor": {
                    "value": "Kxz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kern.kernel.K(Xp, Zp)",
                            "Call"
                        ],
                        [
                            "kern.kernel.K_r2(r2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(Kxz, list(Kxz.shape[:-3]) + [-1, len(feat)])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(Kxz, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.tensordot(Kxz, kern.weights, [-2, -1])",
                            "Call"
                        ],
                        [
                            "kern.kernel.K_r2(r2)",
                            "Call"
                        ],
                        [
                            "kern.kernel.K_r2(r2)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.reshape(Kxz, list(Kxz.shape[:-1]) + [channels_in, -1]), axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(Kxz, list(Kxz.shape[:-3]) + [-1, len(feat)])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(Kxz, axis=-2)",
                            "Call"
                        ],
                        [
                            "div * tf.tensordot(Kxz, tf.reshape(kern.weights, [-1]), [-2, -1])",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "list(Kxz.shape[:-1]) + [channels_in, -1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_103": {
                "x": {
                    "value": "feat.as_images",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_prod_164": {
                "input_tensor": {
                    "value": "patch_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(kern.patch_shape)",
                            "Call"
                        ],
                        [
                            "list(kern.patch_shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensordot_193": {
                "a": {
                    "value": "Kxz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kern.kernel.K(Xp, Zp)",
                            "Call"
                        ],
                        [
                            "kern.kernel.K_r2(r2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(Kxz, list(Kxz.shape[:-3]) + [-1, len(feat)])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(Kxz, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.tensordot(Kxz, kern.weights, [-2, -1])",
                            "Call"
                        ],
                        [
                            "kern.kernel.K_r2(r2)",
                            "Call"
                        ],
                        [
                            "kern.kernel.K_r2(r2)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.reshape(Kxz, list(Kxz.shape[:-1]) + [channels_in, -1]), axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(Kxz, list(Kxz.shape[:-3]) + [-1, len(feat)])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(Kxz, axis=-2)",
                            "Call"
                        ],
                        [
                            "div * tf.tensordot(Kxz, tf.reshape(kern.weights, [-1]), [-2, -1])",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.reshape(kern.weights, [-1])",
                    "type": "Call",
                    "possible_values": []
                },
                "axes": {
                    "value": "[-2, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_193": {
                "tensor": {
                    "value": "kern.weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "gpflow_sampling/covariances/Kufs.py": {
        "tensorflow": {
            "transpose_36": {
                "a": {
                    "value": "Kfu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Kfu_dispatch(Z, kernel, X, full_spatial=full_spatial, **kwargs)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "perm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "axes[ndims_x:ndims_x + ndims_z] + axes[:ndims_x]",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "gpflow_sampling/covariances/Kuus.py": {
        "tensorflow": {
            "reduce_mean_36": {
                "variable": {
                    "value": "_Kuu",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "kern.kernel.K_r2(r2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "set_diag_25": {
                "input": {
                    "value": "_Kuu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kern.kernel.K(feat.as_patches)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(kern.kernel.K_r2(r2), axis=0)",
                            "Call"
                        ]
                    ]
                },
                "diagonal": {
                    "value": "tf.linalg.diag_part(_Kuu) + jitter",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "set_diag_37": {
                "input": {
                    "value": "_Kuu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kern.kernel.K(feat.as_patches)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(kern.kernel.K_r2(r2), axis=0)",
                            "Call"
                        ]
                    ]
                },
                "diagonal": {
                    "value": "tf.linalg.diag_part(_Kuu) + jitter",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "diag_part_25": {
                "input": {
                    "value": "_Kuu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kern.kernel.K(feat.as_patches)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(kern.kernel.K_r2(r2), axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "diag_part_37": {
                "input": {
                    "value": "_Kuu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kern.kernel.K(feat.as_patches)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(kern.kernel.K_r2(r2), axis=0)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "gpflow_sampling/inducing_variables.py": {
        "tensorflow": {
            "reshape_109": {
                "variable": {
                    "value": "patches",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.as_images",
                            "Attribute"
                        ]
                    ]
                },
                "shape": {
                    "value": "[images.shape[0], -1, images.shape[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_54": {
                "tensor": {
                    "value": "self._images",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[len(self), -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_58": {
                "tensor": {
                    "value": "self.as_images",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[len(self), -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "convert_to_tensor_66": {
                "value": {
                    "value": "self._images",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self._images.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tile_93": {
                "input": {
                    "value": "self._images",
                    "type": "Attribute",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, 1, self.channels_in]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_110": {
                "a": {
                    "value": "patches",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(images, [images.shape[0], -1, images.shape[-1]])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "gpflow_sampling/kernels.py": {
        "tensorflow": {
            "extract_patches_155": {
                "variable": {
                    "value": "patches",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "X_nchw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_ops.reformat_data(X, self.data_format, 'NHWC')",
                            "Call"
                        ]
                    ]
                },
                "sizes": {
                    "value": "[1] + self.patch_shape + [1]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1] + self.strides + [1]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "rates": {
                    "value": "[1] + self.dilations + [1]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_333": {
                "variable": {
                    "value": "X_pad",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.slice(X, X2)",
                            "Call"
                        ],
                        [
                            "tf.scatter_nd(tf.stack(grid, -1), X, shape)",
                            "Call"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[2 * [0], h_pad, w_pad, 2 * [0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "extract_patches_334": {
                "variable": {
                    "value": "patches",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "X_pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(X, [2 * [0], h_pad, w_pad, 2 * [0]])",
                            "Call"
                        ]
                    ]
                },
                "sizes": {
                    "value": "[1] + self.patch_shape + [1]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "rates": {
                    "value": "[1] + self.dilations + [1]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_445": {
                "variable": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.kernel.K(P)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_490": {
                "variable": {
                    "value": "depthwise_patches",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "patches",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.extract_patches(images=X_nchw, sizes=[1] + self.patch_shape + [1], strides=[1] + self.strides + [1], rates=[1] + self.dilations + [1], padding=self.padding)",
                            "Call"
                        ],
                        [
                            "tf.image.extract_patches(images=X_pad, sizes=[1] + self.patch_shape + [1], strides=[1, 1, 1, 1], rates=[1] + self.dilations + [1], padding=self.padding)",
                            "Call"
                        ],
                        [
                            "super().get_patches(X, full_spatial=full_spatial)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "list(patches.shape[:-1]) + [-1, channels_in]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_62": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[tf.reduce_prod(spatial_out)]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "default_float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensordot_110": {
                "a": {
                    "value": "tf.linalg.matvec(K, self.weights)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "self.weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axes": {
                    "value": "[-2, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matvec_123": {
                "a": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K",
                            "Call"
                        ],
                        [
                            "self.kernel.K(P, P2)",
                            "Call"
                        ],
                        [
                            "self.kernel.K_diag(P)",
                            "Call"
                        ],
                        [
                            "K",
                            "Call"
                        ],
                        [
                            "move_axis(tf.linalg.diag_part(move_axis(self.kernel.K(P, P2), P.shape.ndims - 2, -2)), -1, 0)",
                            "Call"
                        ],
                        [
                            "batch_tensordot(K, self.weights, axes=[-1, 0], batch_axes=[0, 1])",
                            "Call"
                        ],
                        [
                            "batch_tensordot(K, self.weights, axes=[-2, 0], batch_axes=[0, 1])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.weights",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_145": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filters",
                            "Method Argument"
                        ],
                        [
                            "filters",
                            "Method Argument"
                        ],
                        [
                            "filters",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "strides",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list((1, 1) if strides is None else strides)",
                            "Call"
                        ],
                        [
                            "self.strides",
                            "Attribute"
                        ],
                        [
                            "self.strides",
                            "Attribute"
                        ],
                        [
                            "list((1, 1) if strides is None else strides)",
                            "Call"
                        ],
                        [
                            "self.strides",
                            "Attribute"
                        ],
                        [
                            "self.strides",
                            "Attribute"
                        ],
                        [
                            "list((1, 1) if strides is None else strides)",
                            "Call"
                        ],
                        [
                            "self.strides",
                            "Attribute"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.padding",
                            "Attribute"
                        ],
                        [
                            "self.padding",
                            "Attribute"
                        ],
                        [
                            "self.padding",
                            "Attribute"
                        ],
                        [
                            "self.padding",
                            "Attribute"
                        ],
                        [
                            "self.padding",
                            "Attribute"
                        ]
                    ]
                },
                "dilations": {
                    "value": "dilations",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list((1, 1) if dilations is None else dilations)",
                            "Call"
                        ],
                        [
                            "self.dilations",
                            "Attribute"
                        ],
                        [
                            "self.dilations",
                            "Attribute"
                        ],
                        [
                            "list((1, 1) if dilations is None else dilations)",
                            "Call"
                        ],
                        [
                            "self.dilations",
                            "Attribute"
                        ],
                        [
                            "self.dilations",
                            "Attribute"
                        ],
                        [
                            "list((1, 1) if dilations is None else dilations)",
                            "Call"
                        ],
                        [
                            "self.dilations",
                            "Attribute"
                        ]
                    ]
                },
                "data_format": {
                    "value": "data_format",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.data_format",
                            "Attribute"
                        ],
                        [
                            "self.data_format",
                            "Attribute"
                        ],
                        [
                            "self.data_format",
                            "Attribute"
                        ],
                        [
                            "self.data_format",
                            "Attribute"
                        ],
                        [
                            "self.data_format",
                            "Attribute"
                        ]
                    ]
                }
            },
            "reshape_166": {
                "tensor": {
                    "value": "patches",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.extract_patches(images=X_nchw, sizes=[1] + self.patch_shape + [1], strides=[1] + self.strides + [1], rates=[1] + self.dilations + [1], padding=self.padding)",
                            "Call"
                        ],
                        [
                            "tf.image.extract_patches(images=X_pad, sizes=[1] + self.patch_shape + [1], strides=[1, 1, 1, 1], rates=[1] + self.dilations + [1], padding=self.padding)",
                            "Call"
                        ],
                        [
                            "super().get_patches(X, full_spatial=full_spatial)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "output_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(X.shape[:-3]) + list(patches.shape[-3:])",
                            "BinOp"
                        ],
                        [
                            "list(X.shape[:-3]) + [-1, patches.shape[-1]]",
                            "BinOp"
                        ],
                        [
                            "list(X.shape[:-3]) + list(patches.shape[-3:])",
                            "BinOp"
                        ],
                        [
                            "list(X.shape[:-3]) + [-1, patches.shape[-1]]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_prod_223": {
                "input_tensor": {
                    "value": "self.get_spatial_out()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_transpose_294": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "strides",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list((1, 1) if strides is None else strides)",
                            "Call"
                        ],
                        [
                            "self.strides",
                            "Attribute"
                        ],
                        [
                            "self.strides",
                            "Attribute"
                        ],
                        [
                            "list((1, 1) if strides is None else strides)",
                            "Call"
                        ],
                        [
                            "self.strides",
                            "Attribute"
                        ],
                        [
                            "self.strides",
                            "Attribute"
                        ],
                        [
                            "list((1, 1) if strides is None else strides)",
                            "Call"
                        ],
                        [
                            "self.strides",
                            "Attribute"
                        ]
                    ]
                },
                "dilations": {
                    "value": "dilations",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list((1, 1) if dilations is None else dilations)",
                            "Call"
                        ],
                        [
                            "self.dilations",
                            "Attribute"
                        ],
                        [
                            "self.dilations",
                            "Attribute"
                        ],
                        [
                            "list((1, 1) if dilations is None else dilations)",
                            "Call"
                        ],
                        [
                            "self.dilations",
                            "Attribute"
                        ],
                        [
                            "self.dilations",
                            "Attribute"
                        ],
                        [
                            "list((1, 1) if dilations is None else dilations)",
                            "Call"
                        ],
                        [
                            "self.dilations",
                            "Attribute"
                        ]
                    ]
                },
                "data_format": {
                    "value": "data_format",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.data_format",
                            "Attribute"
                        ],
                        [
                            "self.data_format",
                            "Attribute"
                        ],
                        [
                            "self.data_format",
                            "Attribute"
                        ],
                        [
                            "self.data_format",
                            "Attribute"
                        ],
                        [
                            "self.data_format",
                            "Attribute"
                        ]
                    ]
                }
            },
            "meshgrid_315": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "*terms",
                    "type": "Starred",
                    "possible_values": []
                },
                "indexing": {
                    "value": "ij",
                    "type": "str",
                    "possible_values": []
                }
            },
            "scatter_nd_316": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "tf.stack(grid, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "updates": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.slice(X, X2)",
                            "Call"
                        ],
                        [
                            "tf.scatter_nd(tf.stack(grid, -1), X, shape)",
                            "Call"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(X.shape[:-3])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_345": {
                "tensor": {
                    "value": "tf.reverse(tf.reshape(patches, list(patches.shape[:-1]) + [-1, X.shape[-1]]), axis=[-2])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "output_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(X.shape[:-3]) + list(patches.shape[-3:])",
                            "BinOp"
                        ],
                        [
                            "list(X.shape[:-3]) + [-1, patches.shape[-1]]",
                            "BinOp"
                        ],
                        [
                            "list(X.shape[:-3]) + list(patches.shape[-3:])",
                            "BinOp"
                        ],
                        [
                            "list(X.shape[:-3]) + [-1, patches.shape[-1]]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_407": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[tf.reduce_prod(spatial_out), channels_in]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "default_float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_439": {
                "input_tensor": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K",
                            "Call"
                        ],
                        [
                            "self.kernel.K(P, P2)",
                            "Call"
                        ],
                        [
                            "self.kernel.K_diag(P)",
                            "Call"
                        ],
                        [
                            "K",
                            "Call"
                        ],
                        [
                            "move_axis(tf.linalg.diag_part(move_axis(self.kernel.K(P, P2), P.shape.ndims - 2, -2)), -1, 0)",
                            "Call"
                        ],
                        [
                            "batch_tensordot(K, self.weights, axes=[-1, 0], batch_axes=[0, 1])",
                            "Call"
                        ],
                        [
                            "batch_tensordot(K, self.weights, axes=[-2, 0], batch_axes=[0, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_455": {
                "input_tensor": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K",
                            "Call"
                        ],
                        [
                            "self.kernel.K(P, P2)",
                            "Call"
                        ],
                        [
                            "self.kernel.K_diag(P)",
                            "Call"
                        ],
                        [
                            "K",
                            "Call"
                        ],
                        [
                            "move_axis(tf.linalg.diag_part(move_axis(self.kernel.K(P, P2), P.shape.ndims - 2, -2)), -1, 0)",
                            "Call"
                        ],
                        [
                            "batch_tensordot(K, self.weights, axes=[-1, 0], batch_axes=[0, 1])",
                            "Call"
                        ],
                        [
                            "batch_tensordot(K, self.weights, axes=[-2, 0], batch_axes=[0, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "depthwise_conv2d_477": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "filter": {
                    "value": "filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filters",
                            "Method Argument"
                        ],
                        [
                            "filters",
                            "Method Argument"
                        ],
                        [
                            "filters",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1] + strides + [1]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.padding",
                            "Attribute"
                        ],
                        [
                            "self.padding",
                            "Attribute"
                        ],
                        [
                            "self.padding",
                            "Attribute"
                        ],
                        [
                            "self.padding",
                            "Attribute"
                        ],
                        [
                            "self.padding",
                            "Attribute"
                        ]
                    ]
                },
                "dilations": {
                    "value": "dilations",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list((1, 1) if dilations is None else dilations)",
                            "Call"
                        ],
                        [
                            "self.dilations",
                            "Attribute"
                        ],
                        [
                            "self.dilations",
                            "Attribute"
                        ],
                        [
                            "list((1, 1) if dilations is None else dilations)",
                            "Call"
                        ],
                        [
                            "self.dilations",
                            "Attribute"
                        ],
                        [
                            "self.dilations",
                            "Attribute"
                        ],
                        [
                            "list((1, 1) if dilations is None else dilations)",
                            "Call"
                        ],
                        [
                            "self.dilations",
                            "Attribute"
                        ]
                    ]
                },
                "data_format": {
                    "value": "data_format",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.data_format",
                            "Attribute"
                        ],
                        [
                            "self.data_format",
                            "Attribute"
                        ],
                        [
                            "self.data_format",
                            "Attribute"
                        ],
                        [
                            "self.data_format",
                            "Attribute"
                        ],
                        [
                            "self.data_format",
                            "Attribute"
                        ]
                    ]
                }
            },
            "reduce_mean_109": {
                "input_tensor": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K",
                            "Call"
                        ],
                        [
                            "self.kernel.K(P, P2)",
                            "Call"
                        ],
                        [
                            "self.kernel.K_diag(P)",
                            "Call"
                        ],
                        [
                            "K",
                            "Call"
                        ],
                        [
                            "move_axis(tf.linalg.diag_part(move_axis(self.kernel.K(P, P2), P.shape.ndims - 2, -2)), -1, 0)",
                            "Call"
                        ],
                        [
                            "batch_tensordot(K, self.weights, axes=[-1, 0], batch_axes=[0, 1])",
                            "Call"
                        ],
                        [
                            "batch_tensordot(K, self.weights, axes=[-2, 0], batch_axes=[0, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[-3, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matvec_110": {
                "a": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K",
                            "Call"
                        ],
                        [
                            "self.kernel.K(P, P2)",
                            "Call"
                        ],
                        [
                            "self.kernel.K_diag(P)",
                            "Call"
                        ],
                        [
                            "K",
                            "Call"
                        ],
                        [
                            "move_axis(tf.linalg.diag_part(move_axis(self.kernel.K(P, P2), P.shape.ndims - 2, -2)), -1, 0)",
                            "Call"
                        ],
                        [
                            "batch_tensordot(K, self.weights, axes=[-1, 0], batch_axes=[0, 1])",
                            "Call"
                        ],
                        [
                            "batch_tensordot(K, self.weights, axes=[-2, 0], batch_axes=[0, 1])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.weights",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_122": {
                "input_tensor": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K",
                            "Call"
                        ],
                        [
                            "self.kernel.K(P, P2)",
                            "Call"
                        ],
                        [
                            "self.kernel.K_diag(P)",
                            "Call"
                        ],
                        [
                            "K",
                            "Call"
                        ],
                        [
                            "move_axis(tf.linalg.diag_part(move_axis(self.kernel.K(P, P2), P.shape.ndims - 2, -2)), -1, 0)",
                            "Call"
                        ],
                        [
                            "batch_tensordot(K, self.weights, axes=[-1, 0], batch_axes=[0, 1])",
                            "Call"
                        ],
                        [
                            "batch_tensordot(K, self.weights, axes=[-2, 0], batch_axes=[0, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[-2, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_229": {
                "x": {
                    "value": "1 / self.num_patches",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self._weights.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "atrous_conv2d_transpose_290": {
                "value": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "rate": {
                    "value": "dilations[0]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "list((1, 1) if dilations is None else dilations)",
                            "Call"
                        ],
                        [
                            "self.dilations",
                            "Attribute"
                        ],
                        [
                            "self.dilations",
                            "Attribute"
                        ],
                        [
                            "list((1, 1) if dilations is None else dilations)",
                            "Call"
                        ],
                        [
                            "self.dilations",
                            "Attribute"
                        ],
                        [
                            "self.dilations",
                            "Attribute"
                        ],
                        [
                            "list((1, 1) if dilations is None else dilations)",
                            "Call"
                        ],
                        [
                            "self.dilations",
                            "Attribute"
                        ]
                    ]
                }
            },
            "reverse_345": {
                "tensor": {
                    "value": "tf.reshape(patches, list(patches.shape[:-1]) + [-1, X.shape[-1]])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[-2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "diag_part_427": {
                "input": {
                    "value": "move_axis(self.kernel.K(P, P2), P.shape.ndims - 2, -2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_435": {
                "input_tensor": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K",
                            "Call"
                        ],
                        [
                            "self.kernel.K(P, P2)",
                            "Call"
                        ],
                        [
                            "self.kernel.K_diag(P)",
                            "Call"
                        ],
                        [
                            "K",
                            "Call"
                        ],
                        [
                            "move_axis(tf.linalg.diag_part(move_axis(self.kernel.K(P, P2), P.shape.ndims - 2, -2)), -1, 0)",
                            "Call"
                        ],
                        [
                            "batch_tensordot(K, self.weights, axes=[-1, 0], batch_axes=[0, 1])",
                            "Call"
                        ],
                        [
                            "batch_tensordot(K, self.weights, axes=[-2, 0], batch_axes=[0, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[0, -3, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_451": {
                "input_tensor": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K",
                            "Call"
                        ],
                        [
                            "self.kernel.K(P, P2)",
                            "Call"
                        ],
                        [
                            "self.kernel.K_diag(P)",
                            "Call"
                        ],
                        [
                            "K",
                            "Call"
                        ],
                        [
                            "move_axis(tf.linalg.diag_part(move_axis(self.kernel.K(P, P2), P.shape.ndims - 2, -2)), -1, 0)",
                            "Call"
                        ],
                        [
                            "batch_tensordot(K, self.weights, axes=[-1, 0], batch_axes=[0, 1])",
                            "Call"
                        ],
                        [
                            "batch_tensordot(K, self.weights, axes=[-2, 0], batch_axes=[0, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[-2, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_316": {
                "values": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.meshgrid(*terms, indexing='ij')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_346": {
                "tensor": {
                    "value": "patches",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.extract_patches(images=X_nchw, sizes=[1] + self.patch_shape + [1], strides=[1] + self.strides + [1], rates=[1] + self.dilations + [1], padding=self.padding)",
                            "Call"
                        ],
                        [
                            "tf.image.extract_patches(images=X_pad, sizes=[1] + self.patch_shape + [1], strides=[1, 1, 1, 1], rates=[1] + self.dilations + [1], padding=self.padding)",
                            "Call"
                        ],
                        [
                            "super().get_patches(X, full_spatial=full_spatial)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "list(patches.shape[:-1]) + [-1, X.shape[-1]]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_prod_62": {
                "input_tensor": {
                    "value": "spatial_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_spatial_out(spatial_in=image_shape, filter_shape=patch_shape, strides=strides, padding=padding, dilations=dilations)",
                            "Call"
                        ],
                        [
                            "self.get_spatial_out(spatial_in=[height, width], filter_shape=filter_shape[:2], strides=strides, dilations=dilations)",
                            "Call"
                        ],
                        [
                            "self.get_spatial_out(spatial_in=image_shape, filter_shape=patch_shape, strides=strides, padding=padding, dilations=dilations)",
                            "Call"
                        ],
                        [
                            "self.get_spatial_out(spatial_in=[height, width], filter_shape=filter_shape[:2], strides=strides, dilations=dilations)",
                            "Call"
                        ]
                    ]
                }
            },
            "range_313": {
                "delta": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride in enumerate(self.strides)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_prod_407": {
                "input_tensor": {
                    "value": "spatial_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_spatial_out(spatial_in=image_shape, filter_shape=patch_shape, strides=strides, padding=padding, dilations=dilations)",
                            "Call"
                        ],
                        [
                            "self.get_spatial_out(spatial_in=[height, width], filter_shape=filter_shape[:2], strides=strides, dilations=dilations)",
                            "Call"
                        ],
                        [
                            "self.get_spatial_out(spatial_in=image_shape, filter_shape=patch_shape, strides=strides, padding=padding, dilations=dilations)",
                            "Call"
                        ],
                        [
                            "self.get_spatial_out(spatial_in=[height, width], filter_shape=filter_shape[:2], strides=strides, dilations=dilations)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_325": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ceil_326": {
                "x": {
                    "value": "0.5 * extra",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "floor_326": {
                "x": {
                    "value": "0.5 * extra",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_329": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ceil_330": {
                "x": {
                    "value": "0.5 * extra",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "floor_330": {
                "x": {
                    "value": "0.5 * extra",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "gpflow_sampling/models.py": {
        "tensorflow": {
            "convert_to_tensor_101": {
                "variable": {
                    "value": "diag",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self.likelihood.variance",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "band_part_143": {
                "variable": {
                    "value": "q_sqrt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.q_sqrt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_lower": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "num_upper": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normal_145": {
                "variable": {
                    "value": "rvs",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(self.num_latent_gps, q_sqrt.shape[-1], num_samples)",
                            "Tuple"
                        ]
                    ]
                },
                "dtype": {
                    "value": "default_float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_153": {
                "a": {
                    "value": "uT",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q_sqrt @ rvs + tf.transpose(self.q_mu)[..., None]",
                            "BinOp"
                        ],
                        [
                            "L @ uT",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cholesky_151": {
                "variable": {
                    "value": "L",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "covariances.Kuu(Z, self.kernel, jitter=default_jitter())",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_146": {
                "a": {
                    "value": "self.q_mu",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "gpflow_sampling/sampling/core.py": {
        "tensorflow": {}
    },
    "gpflow_sampling/sampling/decoupled_samplers.py": {
        "tensorflow": {
            "squeeze_100": {
                "variable": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prior(Z, sample_axis=None)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[-3, -2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensordot_85": {
                "a": {
                    "value": "kern.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "b": {
                    "value": "sum(terms)",
                    "type": "Call",
                    "possible_values": []
                },
                "axes": {
                    "value": "[-1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "gpflow_sampling/sampling/priors/fourier_priors.py": {
        "tensorflow": {
            "normal_42": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "list(sample_shape) + [1, num_bases]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "default_float()",
                            "Call"
                        ],
                        [
                            "default_float()",
                            "Call"
                        ],
                        [
                            "default_float()",
                            "Call"
                        ],
                        [
                            "default_float()",
                            "Call"
                        ]
                    ]
                }
            },
            "normal_62": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(sample_shape) + [kernel.num_latent_gps, num_bases]",
                            "BinOp"
                        ],
                        [
                            "list(sample_shape) + [kernel.num_latent_gps, num_bases]",
                            "BinOp"
                        ],
                        [
                            "list(sample_shape) + [kernel.num_latent_gps, channels_out]",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "default_float()",
                            "Call"
                        ],
                        [
                            "default_float()",
                            "Call"
                        ],
                        [
                            "default_float()",
                            "Call"
                        ],
                        [
                            "default_float()",
                            "Call"
                        ]
                    ]
                }
            },
            "normal_86": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(sample_shape) + [kernel.num_latent_gps, num_bases]",
                            "BinOp"
                        ],
                        [
                            "list(sample_shape) + [kernel.num_latent_gps, num_bases]",
                            "BinOp"
                        ],
                        [
                            "list(sample_shape) + [kernel.num_latent_gps, channels_out]",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "default_float()",
                            "Call"
                        ],
                        [
                            "default_float()",
                            "Call"
                        ],
                        [
                            "default_float()",
                            "Call"
                        ],
                        [
                            "default_float()",
                            "Call"
                        ]
                    ]
                }
            },
            "normal_110": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(sample_shape) + [kernel.num_latent_gps, num_bases]",
                            "BinOp"
                        ],
                        [
                            "list(sample_shape) + [kernel.num_latent_gps, num_bases]",
                            "BinOp"
                        ],
                        [
                            "list(sample_shape) + [kernel.num_latent_gps, channels_out]",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "default_float()",
                            "Call"
                        ],
                        [
                            "default_float()",
                            "Call"
                        ],
                        [
                            "default_float()",
                            "Call"
                        ],
                        [
                            "default_float()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "gpflow_sampling/sampling/updates/cg_updates.py": {
        "tensorflow": {
            "set_diag_60": {
                "variable": {
                    "value": "Kuu",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Kff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "covariances.Kuu(Z, kern, jitter=0.0)",
                            "Call"
                        ],
                        [
                            "kern(Z, full_cov=True)",
                            "Call"
                        ],
                        [
                            "covariances.Kuu(Z, kern, jitter=0.0)",
                            "Call"
                        ],
                        [
                            "kern(Z, full_cov=True, full_output_cov=False)",
                            "Call"
                        ]
                    ]
                },
                "diagonal": {
                    "value": "tf.linalg.diag_part(Kff) + diag",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "LinearOperatorFullMatrix_61": {
                "variable": {
                    "value": "operator",
                    "type": "variable",
                    "possible_values": []
                },
                "matrix": {
                    "value": "Kuu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.linalg.set_diag(Kff, tf.linalg.diag_part(Kff) + diag)",
                            "Call"
                        ],
                        [
                            "tf.linalg.set_diag(Kff, tf.linalg.diag_part(Kff) + diag)",
                            "Call"
                        ]
                    ]
                },
                "is_non_singular": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "is_self_adjoint": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "is_positive_definite": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "is_square": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "adjoint_71": {
                "variable": {
                    "value": "err",
                    "type": "variable",
                    "possible_values": []
                },
                "matrix": {
                    "value": "u - f",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conjugate_gradient_79": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "operator": {
                    "value": "operator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.linalg.LinearOperatorFullMatrix(Kuu, is_non_singular=True, is_self_adjoint=True, is_positive_definite=True, is_square=True)",
                            "Call"
                        ],
                        [
                            "tf.linalg.LinearOperatorFullMatrix(Kuu, is_non_singular=True, is_self_adjoint=True, is_positive_definite=True, is_square=True)",
                            "Call"
                        ]
                    ]
                },
                "rhs": {
                    "value": "err",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.linalg.adjoint(u - f)",
                            "Call"
                        ],
                        [
                            "err - diag ** 0.5 * tf.random.normal(err.shape, dtype=err.dtype)",
                            "BinOp"
                        ],
                        [
                            "tf.linalg.adjoint(u - f)",
                            "Call"
                        ]
                    ]
                },
                "preconditioner": {
                    "value": "preconditioner",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_default_preconditioner(Kff, diag=diag)",
                            "Call"
                        ],
                        [
                            "get_default_preconditioner(Kff, diag=diag)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "preconditioner.matvec(err)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "preconditioner.matvec(err)",
                            "Call"
                        ]
                    ]
                },
                "tol": {
                    "value": "tol",
                    "type": "variable",
                    "possible_values": []
                },
                "max_iter": {
                    "value": "max_iter",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "set_diag_130": {
                "variable": {
                    "value": "Kuu",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Kff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "covariances.Kuu(Z, kern, jitter=0.0)",
                            "Call"
                        ],
                        [
                            "kern(Z, full_cov=True)",
                            "Call"
                        ],
                        [
                            "covariances.Kuu(Z, kern, jitter=0.0)",
                            "Call"
                        ],
                        [
                            "kern(Z, full_cov=True, full_output_cov=False)",
                            "Call"
                        ]
                    ]
                },
                "diagonal": {
                    "value": "tf.linalg.diag_part(Kff) + diag",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "LinearOperatorFullMatrix_131": {
                "variable": {
                    "value": "operator",
                    "type": "variable",
                    "possible_values": []
                },
                "matrix": {
                    "value": "Kuu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.linalg.set_diag(Kff, tf.linalg.diag_part(Kff) + diag)",
                            "Call"
                        ],
                        [
                            "tf.linalg.set_diag(Kff, tf.linalg.diag_part(Kff) + diag)",
                            "Call"
                        ]
                    ]
                },
                "is_non_singular": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "is_self_adjoint": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "is_positive_definite": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "is_square": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "adjoint_140": {
                "variable": {
                    "value": "err",
                    "type": "variable",
                    "possible_values": []
                },
                "matrix": {
                    "value": "u - f",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conjugate_gradient_148": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "operator": {
                    "value": "operator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.linalg.LinearOperatorFullMatrix(Kuu, is_non_singular=True, is_self_adjoint=True, is_positive_definite=True, is_square=True)",
                            "Call"
                        ],
                        [
                            "tf.linalg.LinearOperatorFullMatrix(Kuu, is_non_singular=True, is_self_adjoint=True, is_positive_definite=True, is_square=True)",
                            "Call"
                        ]
                    ]
                },
                "rhs": {
                    "value": "err",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.linalg.adjoint(u - f)",
                            "Call"
                        ],
                        [
                            "err - diag ** 0.5 * tf.random.normal(err.shape, dtype=err.dtype)",
                            "BinOp"
                        ],
                        [
                            "tf.linalg.adjoint(u - f)",
                            "Call"
                        ]
                    ]
                },
                "preconditioner": {
                    "value": "preconditioner",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_default_preconditioner(Kff, diag=diag)",
                            "Call"
                        ],
                        [
                            "get_default_preconditioner(Kff, diag=diag)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "preconditioner.matvec(err)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "preconditioner.matvec(err)",
                            "Call"
                        ]
                    ]
                },
                "tol": {
                    "value": "tol",
                    "type": "variable",
                    "possible_values": []
                },
                "max_iter": {
                    "value": "max_iter",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "count_nonzero_87": {
                "input": {
                    "value": "tf.math.is_nan(weights)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "count_nonzero_156": {
                "input": {
                    "value": "tf.math.is_nan(weights)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "normal_72": {
                "shape": {
                    "value": "err.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "err.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_nan_87": {
                "x": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "res.x",
                            "Attribute"
                        ],
                        [
                            "res.x",
                            "Attribute"
                        ]
                    ]
                }
            },
            "normal_141": {
                "shape": {
                    "value": "err.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "err.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_nan_156": {
                "x": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "res.x",
                            "Attribute"
                        ],
                        [
                            "res.x",
                            "Attribute"
                        ]
                    ]
                }
            },
            "diag_part_60": {
                "input": {
                    "value": "Kff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "covariances.Kuu(Z, kern, jitter=0.0)",
                            "Call"
                        ],
                        [
                            "kern(Z, full_cov=True)",
                            "Call"
                        ],
                        [
                            "covariances.Kuu(Z, kern, jitter=0.0)",
                            "Call"
                        ],
                        [
                            "kern(Z, full_cov=True, full_output_cov=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "diag_part_130": {
                "input": {
                    "value": "Kff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "covariances.Kuu(Z, kern, jitter=0.0)",
                            "Call"
                        ],
                        [
                            "kern(Z, full_cov=True)",
                            "Call"
                        ],
                        [
                            "covariances.Kuu(Z, kern, jitter=0.0)",
                            "Call"
                        ],
                        [
                            "kern(Z, full_cov=True, full_output_cov=False)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "gpflow_sampling/sampling/updates/exact_updates.py": {
        "tensorflow": {
            "expand_dims_54": {
                "variable": {
                    "value": "diag",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "diag",
                    "type": "variable",
                    "possible_values": [
                        [
                            "default_jitter()",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(diag, dtype=f.dtype)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(diag, axis=-1)",
                            "Call"
                        ],
                        [
                            "default_jitter()",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(diag, dtype=f.dtype)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(diag, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "adjoint_68": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "matrix": {
                    "value": "tf.linalg.cholesky_solve(L, err)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_104": {
                "variable": {
                    "value": "diag",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "diag",
                    "type": "variable",
                    "possible_values": [
                        [
                            "default_jitter()",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(diag, dtype=f.dtype)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(diag, axis=-1)",
                            "Call"
                        ],
                        [
                            "default_jitter()",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(diag, dtype=f.dtype)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(diag, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "convert_to_tensor_53": {
                "variable": {
                    "value": "diag",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "diag",
                    "type": "variable",
                    "possible_values": [
                        [
                            "default_jitter()",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(diag, dtype=f.dtype)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(diag, axis=-1)",
                            "Call"
                        ],
                        [
                            "default_jitter()",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(diag, dtype=f.dtype)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(diag, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "f.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_diag_64": {
                "variable": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "covariances.Kuu(Z, kern, jitter=0.0)",
                            "Call"
                        ],
                        [
                            "kern(Z, full_cov=True)",
                            "Call"
                        ],
                        [
                            "tf.linalg.set_diag(K, tf.linalg.diag_part(K) + diag[..., 0])",
                            "Call"
                        ],
                        [
                            "covariances.Kuu(Z, kern, jitter=0.0)",
                            "Call"
                        ],
                        [
                            "kern(Z, full_cov=True, full_output_cov=False)",
                            "Call"
                        ],
                        [
                            "tf.linalg.set_diag(K, tf.linalg.diag_part(K) + diag[..., 0])",
                            "Call"
                        ]
                    ]
                },
                "diagonal": {
                    "value": "tf.linalg.diag_part(K) + diag[..., 0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cholesky_65": {
                "variable": {
                    "value": "L",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "covariances.Kuu(Z, kern, jitter=0.0)",
                            "Call"
                        ],
                        [
                            "kern(Z, full_cov=True)",
                            "Call"
                        ],
                        [
                            "tf.linalg.set_diag(K, tf.linalg.diag_part(K) + diag[..., 0])",
                            "Call"
                        ],
                        [
                            "covariances.Kuu(Z, kern, jitter=0.0)",
                            "Call"
                        ],
                        [
                            "kern(Z, full_cov=True, full_output_cov=False)",
                            "Call"
                        ],
                        [
                            "tf.linalg.set_diag(K, tf.linalg.diag_part(K) + diag[..., 0])",
                            "Call"
                        ]
                    ]
                }
            },
            "convert_to_tensor_103": {
                "variable": {
                    "value": "diag",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "diag",
                    "type": "variable",
                    "possible_values": [
                        [
                            "default_jitter()",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(diag, dtype=f.dtype)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(diag, axis=-1)",
                            "Call"
                        ],
                        [
                            "default_jitter()",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(diag, dtype=f.dtype)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(diag, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "f.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_diag_114": {
                "variable": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "covariances.Kuu(Z, kern, jitter=0.0)",
                            "Call"
                        ],
                        [
                            "kern(Z, full_cov=True)",
                            "Call"
                        ],
                        [
                            "tf.linalg.set_diag(K, tf.linalg.diag_part(K) + diag[..., 0])",
                            "Call"
                        ],
                        [
                            "covariances.Kuu(Z, kern, jitter=0.0)",
                            "Call"
                        ],
                        [
                            "kern(Z, full_cov=True, full_output_cov=False)",
                            "Call"
                        ],
                        [
                            "tf.linalg.set_diag(K, tf.linalg.diag_part(K) + diag[..., 0])",
                            "Call"
                        ]
                    ]
                },
                "diagonal": {
                    "value": "tf.linalg.diag_part(K) + diag[..., 0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cholesky_115": {
                "variable": {
                    "value": "L",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "covariances.Kuu(Z, kern, jitter=0.0)",
                            "Call"
                        ],
                        [
                            "kern(Z, full_cov=True)",
                            "Call"
                        ],
                        [
                            "tf.linalg.set_diag(K, tf.linalg.diag_part(K) + diag[..., 0])",
                            "Call"
                        ],
                        [
                            "covariances.Kuu(Z, kern, jitter=0.0)",
                            "Call"
                        ],
                        [
                            "kern(Z, full_cov=True, full_output_cov=False)",
                            "Call"
                        ],
                        [
                            "tf.linalg.set_diag(K, tf.linalg.diag_part(K) + diag[..., 0])",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_58": {
                "x": {
                    "value": "diag",
                    "type": "variable",
                    "possible_values": [
                        [
                            "default_jitter()",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(diag, dtype=f.dtype)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(diag, axis=-1)",
                            "Call"
                        ],
                        [
                            "default_jitter()",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(diag, dtype=f.dtype)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(diag, axis=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "normal_58": {
                "shape": {
                    "value": "err.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "err.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cholesky_solve_68": {
                "chol": {
                    "value": "L",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.linalg.cholesky(K)",
                            "Call"
                        ],
                        [
                            "tf.linalg.cholesky(K)",
                            "Call"
                        ]
                    ]
                },
                "rhs": {
                    "value": "err",
                    "type": "variable",
                    "possible_values": [
                        [
                            "u - f",
                            "BinOp"
                        ],
                        [
                            "err - tf.sqrt(diag) * tf.random.normal(err.shape, dtype=err.dtype)",
                            "BinOp"
                        ],
                        [
                            "swap_axes(u - f, -3, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_108": {
                "x": {
                    "value": "diag",
                    "type": "variable",
                    "possible_values": [
                        [
                            "default_jitter()",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(diag, dtype=f.dtype)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(diag, axis=-1)",
                            "Call"
                        ],
                        [
                            "default_jitter()",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(diag, dtype=f.dtype)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(diag, axis=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "normal_108": {
                "shape": {
                    "value": "err.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "err.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cholesky_solve_118": {
                "chol": {
                    "value": "L",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.linalg.cholesky(K)",
                            "Call"
                        ],
                        [
                            "tf.linalg.cholesky(K)",
                            "Call"
                        ]
                    ]
                },
                "rhs": {
                    "value": "err",
                    "type": "variable",
                    "possible_values": [
                        [
                            "u - f",
                            "BinOp"
                        ],
                        [
                            "err - tf.sqrt(diag) * tf.random.normal(err.shape, dtype=err.dtype)",
                            "BinOp"
                        ],
                        [
                            "swap_axes(u - f, -3, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "diag_part_64": {
                "input": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "covariances.Kuu(Z, kern, jitter=0.0)",
                            "Call"
                        ],
                        [
                            "kern(Z, full_cov=True)",
                            "Call"
                        ],
                        [
                            "tf.linalg.set_diag(K, tf.linalg.diag_part(K) + diag[..., 0])",
                            "Call"
                        ],
                        [
                            "covariances.Kuu(Z, kern, jitter=0.0)",
                            "Call"
                        ],
                        [
                            "kern(Z, full_cov=True, full_output_cov=False)",
                            "Call"
                        ],
                        [
                            "tf.linalg.set_diag(K, tf.linalg.diag_part(K) + diag[..., 0])",
                            "Call"
                        ]
                    ]
                }
            },
            "diag_part_114": {
                "input": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "covariances.Kuu(Z, kern, jitter=0.0)",
                            "Call"
                        ],
                        [
                            "kern(Z, full_cov=True)",
                            "Call"
                        ],
                        [
                            "tf.linalg.set_diag(K, tf.linalg.diag_part(K) + diag[..., 0])",
                            "Call"
                        ],
                        [
                            "covariances.Kuu(Z, kern, jitter=0.0)",
                            "Call"
                        ],
                        [
                            "kern(Z, full_cov=True, full_output_cov=False)",
                            "Call"
                        ],
                        [
                            "tf.linalg.set_diag(K, tf.linalg.diag_part(K) + diag[..., 0])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "gpflow_sampling/sampling/updates/linear_updates.py": {
        "tensorflow": {
            "expand_dims_49": {
                "variable": {
                    "value": "diag",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "diag",
                    "type": "variable",
                    "possible_values": [
                        [
                            "default_jitter()",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(diag, dtype=f.dtype)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(diag, axis=-1)",
                            "Call"
                        ],
                        [
                            "default_jitter()",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(diag, dtype=f.dtype)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(diag, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_109": {
                "variable": {
                    "value": "diag",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "diag",
                    "type": "variable",
                    "possible_values": [
                        [
                            "default_jitter()",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(diag, dtype=f.dtype)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(diag, axis=-1)",
                            "Call"
                        ],
                        [
                            "default_jitter()",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(diag, dtype=f.dtype)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(diag, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "convert_to_tensor_48": {
                "variable": {
                    "value": "diag",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "diag",
                    "type": "variable",
                    "possible_values": [
                        [
                            "default_jitter()",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(diag, dtype=f.dtype)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(diag, axis=-1)",
                            "Call"
                        ],
                        [
                            "default_jitter()",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(diag, dtype=f.dtype)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(diag, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "f.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "adjoint_79": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "matrix": {
                    "value": "tf.linalg.cholesky_solve(L, tf.matmul(feat_iDiag, err, transpose_a=True))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cholesky_solve_82": {
                "variable": {
                    "value": "iK_err",
                    "type": "variable",
                    "possible_values": []
                },
                "chol": {
                    "value": "L",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.linalg.cholesky(S + tf.eye(S.shape[-1], dtype=S.dtype))",
                            "Call"
                        ],
                        [
                            "tf.linalg.cholesky(K)",
                            "Call"
                        ],
                        [
                            "tf.linalg.cholesky(S + tf.eye(S.shape[-1], dtype=S.dtype))",
                            "Call"
                        ],
                        [
                            "tf.linalg.cholesky(K)",
                            "Call"
                        ]
                    ]
                },
                "rhs": {
                    "value": "err",
                    "type": "variable",
                    "possible_values": [
                        [
                            "swap_axes(u - f, -3, -1)",
                            "Call"
                        ],
                        [
                            "err - tf.sqrt(diag) * tf.random.normal(err.shape, dtype=err.dtype)",
                            "BinOp"
                        ],
                        [
                            "swap_axes(u - f, -3, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_83": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "iK_err",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.linalg.cholesky_solve(L, err)",
                            "Call"
                        ],
                        [
                            "tf.linalg.cholesky_solve(L, err)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "basis(Z)",
                            "Call"
                        ],
                        [
                            "inducing_to_tensor(Z)",
                            "Call"
                        ],
                        [
                            "Z",
                            "variable"
                        ],
                        [
                            "inducing_to_tensor(Z)",
                            "Call"
                        ],
                        [
                            "Z",
                            "variable"
                        ],
                        [
                            "basis(Z)",
                            "Call"
                        ],
                        [
                            "basis(Z, multioutput_axis=0)",
                            "Call"
                        ]
                    ]
                },
                "transpose_a": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "convert_to_tensor_108": {
                "variable": {
                    "value": "diag",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "diag",
                    "type": "variable",
                    "possible_values": [
                        [
                            "default_jitter()",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(diag, dtype=f.dtype)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(diag, axis=-1)",
                            "Call"
                        ],
                        [
                            "default_jitter()",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(diag, dtype=f.dtype)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(diag, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "f.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "adjoint_141": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "matrix": {
                    "value": "tf.linalg.cholesky_solve(L, tf.matmul(feat_iDiag, err, transpose_a=True))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cholesky_solve_144": {
                "variable": {
                    "value": "iK_err",
                    "type": "variable",
                    "possible_values": []
                },
                "chol": {
                    "value": "L",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.linalg.cholesky(S + tf.eye(S.shape[-1], dtype=S.dtype))",
                            "Call"
                        ],
                        [
                            "tf.linalg.cholesky(K)",
                            "Call"
                        ],
                        [
                            "tf.linalg.cholesky(S + tf.eye(S.shape[-1], dtype=S.dtype))",
                            "Call"
                        ],
                        [
                            "tf.linalg.cholesky(K)",
                            "Call"
                        ]
                    ]
                },
                "rhs": {
                    "value": "err",
                    "type": "variable",
                    "possible_values": [
                        [
                            "swap_axes(u - f, -3, -1)",
                            "Call"
                        ],
                        [
                            "err - tf.sqrt(diag) * tf.random.normal(err.shape, dtype=err.dtype)",
                            "BinOp"
                        ],
                        [
                            "swap_axes(u - f, -3, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_145": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "iK_err",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.linalg.cholesky_solve(L, err)",
                            "Call"
                        ],
                        [
                            "tf.linalg.cholesky_solve(L, err)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "basis(Z)",
                            "Call"
                        ],
                        [
                            "inducing_to_tensor(Z)",
                            "Call"
                        ],
                        [
                            "Z",
                            "variable"
                        ],
                        [
                            "inducing_to_tensor(Z)",
                            "Call"
                        ],
                        [
                            "Z",
                            "variable"
                        ],
                        [
                            "basis(Z)",
                            "Call"
                        ],
                        [
                            "basis(Z, multioutput_axis=0)",
                            "Call"
                        ]
                    ]
                },
                "transpose_a": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sqrt_62": {
                "x": {
                    "value": "diag",
                    "type": "variable",
                    "possible_values": [
                        [
                            "default_jitter()",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(diag, dtype=f.dtype)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(diag, axis=-1)",
                            "Call"
                        ],
                        [
                            "default_jitter()",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(diag, dtype=f.dtype)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(diag, axis=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "normal_62": {
                "shape": {
                    "value": "err.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "err.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_67": {
                "variable": {
                    "value": "S",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "feat_iDiag",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feat * tf.math.reciprocal(diag)",
                            "BinOp"
                        ],
                        [
                            "feat * tf.math.reciprocal(diag)",
                            "BinOp"
                        ],
                        [
                            "feat * tf.math.reciprocal(diag)",
                            "BinOp"
                        ],
                        [
                            "feat * tf.math.reciprocal(diag)",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "basis(Z)",
                            "Call"
                        ],
                        [
                            "inducing_to_tensor(Z)",
                            "Call"
                        ],
                        [
                            "Z",
                            "variable"
                        ],
                        [
                            "inducing_to_tensor(Z)",
                            "Call"
                        ],
                        [
                            "Z",
                            "variable"
                        ],
                        [
                            "basis(Z)",
                            "Call"
                        ],
                        [
                            "basis(Z, multioutput_axis=0)",
                            "Call"
                        ]
                    ]
                },
                "transpose_a": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cholesky_68": {
                "variable": {
                    "value": "L",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "S + tf.eye(S.shape[-1], dtype=S.dtype)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_70": {
                "variable": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "basis(Z)",
                            "Call"
                        ],
                        [
                            "inducing_to_tensor(Z)",
                            "Call"
                        ],
                        [
                            "Z",
                            "variable"
                        ],
                        [
                            "inducing_to_tensor(Z)",
                            "Call"
                        ],
                        [
                            "Z",
                            "variable"
                        ],
                        [
                            "basis(Z)",
                            "Call"
                        ],
                        [
                            "basis(Z, multioutput_axis=0)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "basis(Z)",
                            "Call"
                        ],
                        [
                            "inducing_to_tensor(Z)",
                            "Call"
                        ],
                        [
                            "Z",
                            "variable"
                        ],
                        [
                            "inducing_to_tensor(Z)",
                            "Call"
                        ],
                        [
                            "Z",
                            "variable"
                        ],
                        [
                            "basis(Z)",
                            "Call"
                        ],
                        [
                            "basis(Z, multioutput_axis=0)",
                            "Call"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "set_diag_71": {
                "variable": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(feat, feat, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.linalg.set_diag(K, tf.linalg.diag_part(K) + diag[..., 0])",
                            "Call"
                        ],
                        [
                            "tf.matmul(feat, feat, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.linalg.set_diag(K, tf.linalg.diag_part(K) + diag[..., 0])",
                            "Call"
                        ]
                    ]
                },
                "diagonal": {
                    "value": "tf.linalg.diag_part(K) + diag[..., 0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cholesky_72": {
                "variable": {
                    "value": "L",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(feat, feat, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.linalg.set_diag(K, tf.linalg.diag_part(K) + diag[..., 0])",
                            "Call"
                        ],
                        [
                            "tf.matmul(feat, feat, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.linalg.set_diag(K, tf.linalg.diag_part(K) + diag[..., 0])",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_124": {
                "x": {
                    "value": "diag",
                    "type": "variable",
                    "possible_values": [
                        [
                            "default_jitter()",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(diag, dtype=f.dtype)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(diag, axis=-1)",
                            "Call"
                        ],
                        [
                            "default_jitter()",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(diag, dtype=f.dtype)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(diag, axis=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "normal_124": {
                "shape": {
                    "value": "err.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "err.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_129": {
                "variable": {
                    "value": "S",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "feat_iDiag",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feat * tf.math.reciprocal(diag)",
                            "BinOp"
                        ],
                        [
                            "feat * tf.math.reciprocal(diag)",
                            "BinOp"
                        ],
                        [
                            "feat * tf.math.reciprocal(diag)",
                            "BinOp"
                        ],
                        [
                            "feat * tf.math.reciprocal(diag)",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "basis(Z)",
                            "Call"
                        ],
                        [
                            "inducing_to_tensor(Z)",
                            "Call"
                        ],
                        [
                            "Z",
                            "variable"
                        ],
                        [
                            "inducing_to_tensor(Z)",
                            "Call"
                        ],
                        [
                            "Z",
                            "variable"
                        ],
                        [
                            "basis(Z)",
                            "Call"
                        ],
                        [
                            "basis(Z, multioutput_axis=0)",
                            "Call"
                        ]
                    ]
                },
                "transpose_a": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cholesky_130": {
                "variable": {
                    "value": "L",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "S + tf.eye(S.shape[-1], dtype=S.dtype)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_132": {
                "variable": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "basis(Z)",
                            "Call"
                        ],
                        [
                            "inducing_to_tensor(Z)",
                            "Call"
                        ],
                        [
                            "Z",
                            "variable"
                        ],
                        [
                            "inducing_to_tensor(Z)",
                            "Call"
                        ],
                        [
                            "Z",
                            "variable"
                        ],
                        [
                            "basis(Z)",
                            "Call"
                        ],
                        [
                            "basis(Z, multioutput_axis=0)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "basis(Z)",
                            "Call"
                        ],
                        [
                            "inducing_to_tensor(Z)",
                            "Call"
                        ],
                        [
                            "Z",
                            "variable"
                        ],
                        [
                            "inducing_to_tensor(Z)",
                            "Call"
                        ],
                        [
                            "Z",
                            "variable"
                        ],
                        [
                            "basis(Z)",
                            "Call"
                        ],
                        [
                            "basis(Z, multioutput_axis=0)",
                            "Call"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "set_diag_133": {
                "variable": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(feat, feat, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.linalg.set_diag(K, tf.linalg.diag_part(K) + diag[..., 0])",
                            "Call"
                        ],
                        [
                            "tf.matmul(feat, feat, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.linalg.set_diag(K, tf.linalg.diag_part(K) + diag[..., 0])",
                            "Call"
                        ]
                    ]
                },
                "diagonal": {
                    "value": "tf.linalg.diag_part(K) + diag[..., 0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cholesky_134": {
                "variable": {
                    "value": "L",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(feat, feat, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.linalg.set_diag(K, tf.linalg.diag_part(K) + diag[..., 0])",
                            "Call"
                        ],
                        [
                            "tf.matmul(feat, feat, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.linalg.set_diag(K, tf.linalg.diag_part(K) + diag[..., 0])",
                            "Call"
                        ]
                    ]
                }
            },
            "reciprocal_78": {
                "x": {
                    "value": "diag",
                    "type": "variable",
                    "possible_values": [
                        [
                            "default_jitter()",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(diag, dtype=f.dtype)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(diag, axis=-1)",
                            "Call"
                        ],
                        [
                            "default_jitter()",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(diag, dtype=f.dtype)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(diag, axis=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cholesky_solve_79": {
                "chol": {
                    "value": "L",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.linalg.cholesky(S + tf.eye(S.shape[-1], dtype=S.dtype))",
                            "Call"
                        ],
                        [
                            "tf.linalg.cholesky(K)",
                            "Call"
                        ],
                        [
                            "tf.linalg.cholesky(S + tf.eye(S.shape[-1], dtype=S.dtype))",
                            "Call"
                        ],
                        [
                            "tf.linalg.cholesky(K)",
                            "Call"
                        ]
                    ]
                },
                "rhs": {
                    "value": "tf.matmul(feat_iDiag, err, transpose_a=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reciprocal_140": {
                "x": {
                    "value": "diag",
                    "type": "variable",
                    "possible_values": [
                        [
                            "default_jitter()",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(diag, dtype=f.dtype)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(diag, axis=-1)",
                            "Call"
                        ],
                        [
                            "default_jitter()",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(diag, dtype=f.dtype)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(diag, axis=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cholesky_solve_141": {
                "chol": {
                    "value": "L",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.linalg.cholesky(S + tf.eye(S.shape[-1], dtype=S.dtype))",
                            "Call"
                        ],
                        [
                            "tf.linalg.cholesky(K)",
                            "Call"
                        ],
                        [
                            "tf.linalg.cholesky(S + tf.eye(S.shape[-1], dtype=S.dtype))",
                            "Call"
                        ],
                        [
                            "tf.linalg.cholesky(K)",
                            "Call"
                        ]
                    ]
                },
                "rhs": {
                    "value": "tf.matmul(feat_iDiag, err, transpose_a=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reciprocal_66": {
                "x": {
                    "value": "diag",
                    "type": "variable",
                    "possible_values": [
                        [
                            "default_jitter()",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(diag, dtype=f.dtype)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(diag, axis=-1)",
                            "Call"
                        ],
                        [
                            "default_jitter()",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(diag, dtype=f.dtype)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(diag, axis=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_80": {
                "a": {
                    "value": "feat_iDiag",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feat * tf.math.reciprocal(diag)",
                            "BinOp"
                        ],
                        [
                            "feat * tf.math.reciprocal(diag)",
                            "BinOp"
                        ],
                        [
                            "feat * tf.math.reciprocal(diag)",
                            "BinOp"
                        ],
                        [
                            "feat * tf.math.reciprocal(diag)",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "err",
                    "type": "variable",
                    "possible_values": [
                        [
                            "swap_axes(u - f, -3, -1)",
                            "Call"
                        ],
                        [
                            "err - tf.sqrt(diag) * tf.random.normal(err.shape, dtype=err.dtype)",
                            "BinOp"
                        ],
                        [
                            "swap_axes(u - f, -3, -1)",
                            "Call"
                        ]
                    ]
                },
                "transpose_a": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reciprocal_128": {
                "x": {
                    "value": "diag",
                    "type": "variable",
                    "possible_values": [
                        [
                            "default_jitter()",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(diag, dtype=f.dtype)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(diag, axis=-1)",
                            "Call"
                        ],
                        [
                            "default_jitter()",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(diag, dtype=f.dtype)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(diag, axis=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_142": {
                "a": {
                    "value": "feat_iDiag",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feat * tf.math.reciprocal(diag)",
                            "BinOp"
                        ],
                        [
                            "feat * tf.math.reciprocal(diag)",
                            "BinOp"
                        ],
                        [
                            "feat * tf.math.reciprocal(diag)",
                            "BinOp"
                        ],
                        [
                            "feat * tf.math.reciprocal(diag)",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "err",
                    "type": "variable",
                    "possible_values": [
                        [
                            "swap_axes(u - f, -3, -1)",
                            "Call"
                        ],
                        [
                            "err - tf.sqrt(diag) * tf.random.normal(err.shape, dtype=err.dtype)",
                            "BinOp"
                        ],
                        [
                            "swap_axes(u - f, -3, -1)",
                            "Call"
                        ]
                    ]
                },
                "transpose_a": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "eye_68": {
                "num_rows": {
                    "value": "S.shape[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "S.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "diag_part_71": {
                "input": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(feat, feat, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.linalg.set_diag(K, tf.linalg.diag_part(K) + diag[..., 0])",
                            "Call"
                        ],
                        [
                            "tf.matmul(feat, feat, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.linalg.set_diag(K, tf.linalg.diag_part(K) + diag[..., 0])",
                            "Call"
                        ]
                    ]
                }
            },
            "eye_130": {
                "num_rows": {
                    "value": "S.shape[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "S.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "diag_part_133": {
                "input": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(feat, feat, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.linalg.set_diag(K, tf.linalg.diag_part(K) + diag[..., 0])",
                            "Call"
                        ],
                        [
                            "tf.matmul(feat, feat, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.linalg.set_diag(K, tf.linalg.diag_part(K) + diag[..., 0])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "gpflow_sampling/utils/array_ops.py": {
        "tensorflow": {
            "transpose_45": {
                "a": {
                    "value": "arr",
                    "type": "variable",
                    "possible_values": []
                },
                "perm": {
                    "value": "perm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(range(ndims))",
                            "Call"
                        ],
                        [
                            "list(range(ndims))",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_56": {
                "a": {
                    "value": "arr",
                    "type": "variable",
                    "possible_values": []
                },
                "perm": {
                    "value": "perm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(range(ndims))",
                            "Call"
                        ],
                        [
                            "list(range(ndims))",
                            "Call"
                        ]
                    ]
                }
            },
            "identity_68": {
                "input": {
                    "value": "arr",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "gpflow_sampling/utils/conv_ops.py": {
        "tensorflow": {}
    },
    "gpflow_sampling/utils/gpflow_ops.py": {
        "tensorflow": {
            "convert_to_tensor_52": {
                "value": {
                    "value": "x.Z",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_63": {
                "values": {
                    "value": "[inducing_to_tensor(z, **kwargs) for z in x.inducing_variables]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "gpflow_sampling/utils/linalg.py": {
        "tensorflow": {
            "LinearOperatorLowRankUpdate_136": {
                "variable": {
                    "value": "low_rank",
                    "type": "variable",
                    "possible_values": []
                },
                "base_operator": {
                    "value": "diag",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(diag, dtype=arr.dtype)",
                            "Call"
                        ],
                        [
                            "tf.linalg.LinearOperatorDiag(diag)",
                            "Call"
                        ],
                        [
                            "tf.linalg.LinearOperatorScaledIdentity(N, diag)",
                            "Call"
                        ]
                    ]
                },
                "u": {
                    "value": "piv_chol",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pivoted_cholesky(arr, max_rank=max_rank, diag_rtol=diag_rtol)",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_112": {
                "equation": {
                    "value": "f\"{''.join(lhs_a)},{''.join(lhs_b)}->{''.join(rhs)}\"",
                    "type": "JoinedStr",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(a, axis=pos_a)",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(b, axis=pos_b)",
                            "Call"
                        ]
                    ]
                }
            },
            "convert_to_tensor_129": {
                "variable": {
                    "value": "diag",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "diag",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(diag, dtype=arr.dtype)",
                            "Call"
                        ],
                        [
                            "tf.linalg.LinearOperatorDiag(diag)",
                            "Call"
                        ],
                        [
                            "tf.linalg.LinearOperatorScaledIdentity(N, diag)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "arr.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_104": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(a, axis=pos_a)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "pos_a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(active_a, active_b)",
                            "Call"
                        ],
                        [
                            "zip(batch_a, batch_b)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_108": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(b, axis=pos_b)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "pos_b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(active_a, active_b)",
                            "Call"
                        ],
                        [
                            "zip(batch_a, batch_b)",
                            "Call"
                        ]
                    ]
                }
            },
            "LinearOperatorDiag_131": {
                "variable": {
                    "value": "diag",
                    "type": "variable",
                    "possible_values": []
                },
                "diag": {
                    "value": "diag",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(diag, dtype=arr.dtype)",
                            "Call"
                        ],
                        [
                            "tf.linalg.LinearOperatorDiag(diag)",
                            "Call"
                        ],
                        [
                            "tf.linalg.LinearOperatorScaledIdentity(N, diag)",
                            "Call"
                        ]
                    ]
                }
            },
            "LinearOperatorScaledIdentity_133": {
                "variable": {
                    "value": "diag",
                    "type": "variable",
                    "possible_values": []
                },
                "num_rows": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "arr.shape[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "multiplier": {
                    "value": "diag",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(diag, dtype=arr.dtype)",
                            "Call"
                        ],
                        [
                            "tf.linalg.LinearOperatorDiag(diag)",
                            "Call"
                        ],
                        [
                            "tf.linalg.LinearOperatorScaledIdentity(N, diag)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tests/kernels/test_conv2d.py": {
        "tensorflow": {
            "reshape_59": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.range(tf.reduce_prod(X_shape), dtype=floatx())",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "X_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[config.num_test] + config.image_shape + [config.channels_in]",
                            "BinOp"
                        ],
                        [
                            "[config.num_test] + config.image_shape + [config.channels_in]",
                            "BinOp"
                        ],
                        [
                            "[config.num_test] + config.image_shape + [config.channels_in]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_102": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.range(tf.reduce_prod(X_shape), dtype=floatx())",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "X_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[config.num_test] + config.image_shape + [config.channels_in]",
                            "BinOp"
                        ],
                        [
                            "[config.num_test] + config.image_shape + [config.channels_in]",
                            "BinOp"
                        ],
                        [
                            "[config.num_test] + config.image_shape + [config.channels_in]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_145": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.range(tf.reduce_prod(X_shape), dtype=floatx())",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "X_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[config.num_test] + config.image_shape + [config.channels_in]",
                            "BinOp"
                        ],
                        [
                            "[config.num_test] + config.image_shape + [config.channels_in]",
                            "BinOp"
                        ],
                        [
                            "[config.num_test] + config.image_shape + [config.channels_in]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "set_seed_54": {
                "seed": {
                    "value": "config.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_max_60": {
                "input_tensor": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.range(tf.reduce_prod(X_shape), dtype=floatx()), X_shape)",
                            "Call"
                        ],
                        [
                            "X / tf.reduce_max(X)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(tf.range(tf.reduce_prod(X_shape), dtype=floatx()), X_shape)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.range(tf.reduce_prod(X_shape), dtype=floatx()), X_shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "uniform_66": {
                "variable": {
                    "value": "lenscales",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[patch_len]",
                    "type": "List",
                    "possible_values": []
                },
                "minval": {
                    "value": "minval",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.rel_lengthscales_min * patch_len ** 0.5",
                            "BinOp"
                        ],
                        [
                            "config.rel_lengthscales_min * patch_len ** 0.5",
                            "BinOp"
                        ],
                        [
                            "config.rel_lengthscales_min * patch_len ** 0.5",
                            "BinOp"
                        ]
                    ]
                },
                "maxval": {
                    "value": "maxval",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.rel_lengthscales_max * patch_len ** 0.5",
                            "BinOp"
                        ],
                        [
                            "config.rel_lengthscales_max * patch_len ** 0.5",
                            "BinOp"
                        ],
                        [
                            "config.rel_lengthscales_max * patch_len ** 0.5",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "floatx()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "normal_81": {
                "variable": {
                    "value": "kern._weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "kern._weights.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "floatx()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "normal_85": {
                "variable": {
                    "value": "Zsrc",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "Z_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[config.num_cond] + config.patch_shape + [config.channels_in]",
                            "BinOp"
                        ],
                        [
                            "[config.num_cond] + config.patch_shape + [config.channels_in]",
                            "BinOp"
                        ],
                        [
                            "[config.num_cond] + config.patch_shape + [config.channels_in]",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "floatx()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_seed_97": {
                "seed": {
                    "value": "config.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_max_103": {
                "input_tensor": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.range(tf.reduce_prod(X_shape), dtype=floatx()), X_shape)",
                            "Call"
                        ],
                        [
                            "X / tf.reduce_max(X)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(tf.range(tf.reduce_prod(X_shape), dtype=floatx()), X_shape)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.range(tf.reduce_prod(X_shape), dtype=floatx()), X_shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "uniform_109": {
                "variable": {
                    "value": "lenscales",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[patch_len]",
                    "type": "List",
                    "possible_values": []
                },
                "minval": {
                    "value": "minval",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.rel_lengthscales_min * patch_len ** 0.5",
                            "BinOp"
                        ],
                        [
                            "config.rel_lengthscales_min * patch_len ** 0.5",
                            "BinOp"
                        ],
                        [
                            "config.rel_lengthscales_min * patch_len ** 0.5",
                            "BinOp"
                        ]
                    ]
                },
                "maxval": {
                    "value": "maxval",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.rel_lengthscales_max * patch_len ** 0.5",
                            "BinOp"
                        ],
                        [
                            "config.rel_lengthscales_max * patch_len ** 0.5",
                            "BinOp"
                        ],
                        [
                            "config.rel_lengthscales_max * patch_len ** 0.5",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "floatx()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "normal_124": {
                "variable": {
                    "value": "kern._weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "kern._weights.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "floatx()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "normal_128": {
                "variable": {
                    "value": "Zsrc",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "Z_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[config.num_cond] + config.patch_shape + [config.channels_in]",
                            "BinOp"
                        ],
                        [
                            "[config.num_cond] + config.patch_shape + [config.channels_in]",
                            "BinOp"
                        ],
                        [
                            "[config.num_cond] + config.patch_shape + [config.channels_in]",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "floatx()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_seed_140": {
                "seed": {
                    "value": "config.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_max_146": {
                "input_tensor": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.range(tf.reduce_prod(X_shape), dtype=floatx()), X_shape)",
                            "Call"
                        ],
                        [
                            "X / tf.reduce_max(X)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(tf.range(tf.reduce_prod(X_shape), dtype=floatx()), X_shape)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.range(tf.reduce_prod(X_shape), dtype=floatx()), X_shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "uniform_152": {
                "variable": {
                    "value": "lenscales",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[config.channels_in, patch_len]",
                    "type": "List",
                    "possible_values": []
                },
                "minval": {
                    "value": "minval",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.rel_lengthscales_min * patch_len ** 0.5",
                            "BinOp"
                        ],
                        [
                            "config.rel_lengthscales_min * patch_len ** 0.5",
                            "BinOp"
                        ],
                        [
                            "config.rel_lengthscales_min * patch_len ** 0.5",
                            "BinOp"
                        ]
                    ]
                },
                "maxval": {
                    "value": "maxval",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.rel_lengthscales_max * patch_len ** 0.5",
                            "BinOp"
                        ],
                        [
                            "config.rel_lengthscales_max * patch_len ** 0.5",
                            "BinOp"
                        ],
                        [
                            "config.rel_lengthscales_max * patch_len ** 0.5",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "floatx()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "normal_167": {
                "variable": {
                    "value": "kern._weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "kern._weights.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "floatx()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "normal_171": {
                "variable": {
                    "value": "Zsrc",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "Z_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[config.num_cond] + config.patch_shape + [config.channels_in]",
                            "BinOp"
                        ],
                        [
                            "[config.num_cond] + config.patch_shape + [config.channels_in]",
                            "BinOp"
                        ],
                        [
                            "[config.num_cond] + config.patch_shape + [config.channels_in]",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "floatx()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "range_59": {
                "dtype": {
                    "value": "floatx()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "range_102": {
                "dtype": {
                    "value": "floatx()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "range_145": {
                "dtype": {
                    "value": "floatx()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_prod_148": {
                "input_tensor": {
                    "value": "config.patch_shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_prod_59": {
                "input_tensor": {
                    "value": "X_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[config.num_test] + config.image_shape + [config.channels_in]",
                            "BinOp"
                        ],
                        [
                            "[config.num_test] + config.image_shape + [config.channels_in]",
                            "BinOp"
                        ],
                        [
                            "[config.num_test] + config.image_shape + [config.channels_in]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_prod_62": {
                "input_tensor": {
                    "value": "config.patch_shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_prod_102": {
                "input_tensor": {
                    "value": "X_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[config.num_test] + config.image_shape + [config.channels_in]",
                            "BinOp"
                        ],
                        [
                            "[config.num_test] + config.image_shape + [config.channels_in]",
                            "BinOp"
                        ],
                        [
                            "[config.num_test] + config.image_shape + [config.channels_in]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_prod_105": {
                "input_tensor": {
                    "value": "config.patch_shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_prod_145": {
                "input_tensor": {
                    "value": "X_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[config.num_test] + config.image_shape + [config.channels_in]",
                            "BinOp"
                        ],
                        [
                            "[config.num_test] + config.image_shape + [config.channels_in]",
                            "BinOp"
                        ],
                        [
                            "[config.num_test] + config.image_shape + [config.channels_in]",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "tests/sampling/priors/test_fourier_conv2d.py": {
        "tensorflow": {
            "reshape_53": {
                "variable": {
                    "value": "_a",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "a",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "list(a.shape[:-3]) + [-1, a.shape[-1]]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_120": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.range(tf.reduce_prod(X_shape), dtype=floatx())",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "X_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[config.num_test] + config.image_shape + [config.channels_in]",
                            "BinOp"
                        ],
                        [
                            "[config.num_test] + config.image_shape + [config.channels_in]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "normal_124": {
                "variable": {
                    "value": "Zsrc",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "Z_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[config.num_cond] + config.patch_shape + [config.channels_in]",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "floatx()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "uniform_159": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "X_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[config.num_test] + config.image_shape + [config.channels_in]",
                            "BinOp"
                        ],
                        [
                            "[config.num_test] + config.image_shape + [config.channels_in]",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "floatx()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "normal_162": {
                "variable": {
                    "value": "Zsrc",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "img_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[config.num_cond] + config.patch_shape + [config.channels_in]",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "floatx()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_57": {
                "variable": {
                    "value": "_b",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "list(b.shape[:-3]) + [-1, b.shape[-1]]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_61": {
                "input_tensor": {
                    "value": "prod",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_tensordot(_a, _b, axes=[-1, -1], batch_axes=batch_axes)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[-3, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "set_seed_115": {
                "seed": {
                    "value": "config.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_max_121": {
                "input_tensor": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.range(tf.reduce_prod(X_shape), dtype=floatx()), X_shape)",
                            "Call"
                        ],
                        [
                            "X / tf.reduce_max(X)",
                            "BinOp"
                        ],
                        [
                            "tf.random.uniform(X_shape, dtype=floatx())",
                            "Call"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "uniform_131": {
                "variable": {
                    "value": "lenscales",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[patch_len]",
                    "type": "List",
                    "possible_values": []
                },
                "minval": {
                    "value": "minval",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.rel_lengthscales_min * patch_len ** 0.5",
                            "BinOp"
                        ],
                        [
                            "config.rel_lengthscales_min * patch_len ** 0.5",
                            "BinOp"
                        ]
                    ]
                },
                "maxval": {
                    "value": "maxval",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.rel_lengthscales_max * patch_len ** 0.5",
                            "BinOp"
                        ],
                        [
                            "config.rel_lengthscales_max * patch_len ** 0.5",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "floatx()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_seed_154": {
                "seed": {
                    "value": "config.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "uniform_169": {
                "variable": {
                    "value": "lenscales",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[config.channels_in, patch_len]",
                    "type": "List",
                    "possible_values": []
                },
                "minval": {
                    "value": "minval",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.rel_lengthscales_min * patch_len ** 0.5",
                            "BinOp"
                        ],
                        [
                            "config.rel_lengthscales_min * patch_len ** 0.5",
                            "BinOp"
                        ]
                    ]
                },
                "maxval": {
                    "value": "maxval",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.rel_lengthscales_max * patch_len ** 0.5",
                            "BinOp"
                        ],
                        [
                            "config.rel_lengthscales_max * patch_len ** 0.5",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "floatx()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_96": {
                "values": {
                    "value": "fx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "swap_axes(tf.concat(fx, axis=0), 0, -1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_97": {
                "values": {
                    "value": "fz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "swap_axes(tf.concat(fz, axis=0), 0, -1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "range_120": {
                "dtype": {
                    "value": "floatx()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_prod_120": {
                "input_tensor": {
                    "value": "X_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[config.num_test] + config.image_shape + [config.channels_in]",
                            "BinOp"
                        ],
                        [
                            "[config.num_test] + config.image_shape + [config.channels_in]",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "tests/sampling/priors/test_fourier_dense.py": {
        "tensorflow": {
            "transpose_90": {
                "variable": {
                    "value": "fx",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.concat(fx, axis=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_91": {
                "variable": {
                    "value": "fz",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.concat(fz, axis=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "uniform_107": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[config.num_test, config.input_dims]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "floatx()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "uniform_108": {
                "variable": {
                    "value": "Z",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[config.num_cond, config.input_dims]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "floatx()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "uniform_128": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[config.num_test, config.input_dims]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "floatx()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "uniform_129": {
                "variable": {
                    "value": "Z",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[config.num_cond, config.input_dims]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "floatx()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "uniform_171": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[config.num_test, config.input_dims]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "floatx()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_seed_103": {
                "seed": {
                    "value": "config.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "uniform_111": {
                "variable": {
                    "value": "lenscales",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[config.input_dims]",
                    "type": "List",
                    "possible_values": []
                },
                "minval": {
                    "value": "config.lengthscales_min",
                    "type": "Attribute",
                    "possible_values": []
                },
                "maxval": {
                    "value": "config.lengthscales_max",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "floatx()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_seed_124": {
                "seed": {
                    "value": "config.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "uniform_132": {
                "variable": {
                    "value": "lenscales",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[config.input_dims]",
                    "type": "List",
                    "possible_values": []
                },
                "minval": {
                    "value": "config.lengthscales_min",
                    "type": "Attribute",
                    "possible_values": []
                },
                "maxval": {
                    "value": "config.lengthscales_max",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "floatx()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_seed_146": {
                "seed": {
                    "value": "config.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "uniform_153": {
                "variable": {
                    "value": "lenscales",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[config.input_dims]",
                    "type": "List",
                    "possible_values": []
                },
                "minval": {
                    "value": "config.lengthscales_min",
                    "type": "Attribute",
                    "possible_values": []
                },
                "maxval": {
                    "value": "config.lengthscales_max",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "floatx()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "uniform_158": {
                "variable": {
                    "value": "rel_variance",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "minval": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "maxval": {
                    "value": "1.1",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "floatx()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_70": {
                "a": {
                    "value": "feat_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "basis(X)",
                            "Call"
                        ],
                        [
                            "basis(X)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "feat_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "basis(X)",
                            "Call"
                        ],
                        [
                            "basis(X)",
                            "Call"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "matmul_71": {
                "a": {
                    "value": "feat_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "basis(X)",
                            "Call"
                        ],
                        [
                            "basis(X)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "feat_z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "basis(Z)",
                            "Call"
                        ],
                        [
                            "basis(Z, **Z_opt)",
                            "Call"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "matmul_72": {
                "a": {
                    "value": "feat_z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "basis(Z)",
                            "Call"
                        ],
                        [
                            "basis(Z, **Z_opt)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "feat_z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "basis(Z)",
                            "Call"
                        ],
                        [
                            "basis(Z, **Z_opt)",
                            "Call"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "concat_90": {
                "values": {
                    "value": "fx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.transpose(tf.concat(fx, axis=0))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_91": {
                "values": {
                    "value": "fz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.transpose(tf.concat(fz, axis=0))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_94": {
                "a": {
                    "value": "fx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.transpose(tf.concat(fx, axis=0))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "fx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.transpose(tf.concat(fx, axis=0))",
                            "Call"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "matmul_95": {
                "a": {
                    "value": "fx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.transpose(tf.concat(fx, axis=0))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "fz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.transpose(tf.concat(fz, axis=0))",
                            "Call"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "matmul_96": {
                "a": {
                    "value": "fz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.transpose(tf.concat(fz, axis=0))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "fz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.transpose(tf.concat(fz, axis=0))",
                            "Call"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "uniform_167": {
                "shape": {
                    "value": "[config.num_cond, config.input_dims]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "floatx()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "tests/sampling/updates/common.py": {
        "tensorflow": {
            "normal_67": {
                "variable": {
                    "value": "rvs",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "list(L.shape[:-1]) + [num_samples]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "floatx()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_68": {
                "variable": {
                    "value": "draws",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "L @ rvs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normal_107": {
                "variable": {
                    "value": "rvs",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "list(L.shape[:-1]) + [num_samples]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "floatx()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "normal_142": {
                "variable": {
                    "value": "rvs",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "list(L.shape[:-1]) + [num_samples]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "floatx()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_143": {
                "variable": {
                    "value": "draws",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "L @ rvs",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "split_144": {
                "variable": {
                    "value": "(fz, fx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "draws",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(L @ rvs, 0)",
                            "Call"
                        ],
                        [
                            "L @ rvs",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(draws, 0)",
                            "Call"
                        ],
                        [
                            "tf.transpose(L @ rvs)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "[len(Z), -1]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_148": {
                "variable": {
                    "value": "fx",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "fx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.split(draws, [len(Z), -1], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(fx, fx_shape)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "fx_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[num_samples, Xnew.shape[0]] + spatial_out + [kern.channels_out]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_157": {
                "variable": {
                    "value": "_a",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "a",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "list(a.shape[:-3]) + [-1, a.shape[-1]]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "set_diag_63": {
                "variable": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kern(tf.concat([X, Xnew], axis=-2), full_cov=True)",
                            "Call"
                        ],
                        [
                            "tf.linalg.set_diag(K, tf.linalg.diag_part(K) + diag)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.concat([Kuu, Kuf], axis=-1), tf.concat([tf.linalg.adjoint(Kuf), Kff], axis=-1)], axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.linalg.set_diag(K, tf.linalg.diag_part(K) + diag)",
                            "Call"
                        ],
                        [
                            "kern.kernel(P, full_cov=True)",
                            "Call"
                        ],
                        [
                            "tf.linalg.set_diag(K, tf.linalg.diag_part(K) + diag)",
                            "Call"
                        ],
                        [
                            "kern(X, full_cov=True)",
                            "Call"
                        ],
                        [
                            "tf.linalg.set_diag(K, tf.linalg.diag_part(K) + config.noise_variance)",
                            "Call"
                        ]
                    ]
                },
                "diagonal": {
                    "value": "tf.linalg.diag_part(K) + diag",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cholesky_64": {
                "variable": {
                    "value": "L",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kern(tf.concat([X, Xnew], axis=-2), full_cov=True)",
                            "Call"
                        ],
                        [
                            "tf.linalg.set_diag(K, tf.linalg.diag_part(K) + diag)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.concat([Kuu, Kuf], axis=-1), tf.concat([tf.linalg.adjoint(Kuf), Kff], axis=-1)], axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.linalg.set_diag(K, tf.linalg.diag_part(K) + diag)",
                            "Call"
                        ],
                        [
                            "kern.kernel(P, full_cov=True)",
                            "Call"
                        ],
                        [
                            "tf.linalg.set_diag(K, tf.linalg.diag_part(K) + diag)",
                            "Call"
                        ],
                        [
                            "kern(X, full_cov=True)",
                            "Call"
                        ],
                        [
                            "tf.linalg.set_diag(K, tf.linalg.diag_part(K) + config.noise_variance)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_100": {
                "values": {
                    "value": "[Kuu, Kuf]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "set_diag_103": {
                "variable": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kern(tf.concat([X, Xnew], axis=-2), full_cov=True)",
                            "Call"
                        ],
                        [
                            "tf.linalg.set_diag(K, tf.linalg.diag_part(K) + diag)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.concat([Kuu, Kuf], axis=-1), tf.concat([tf.linalg.adjoint(Kuf), Kff], axis=-1)], axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.linalg.set_diag(K, tf.linalg.diag_part(K) + diag)",
                            "Call"
                        ],
                        [
                            "kern.kernel(P, full_cov=True)",
                            "Call"
                        ],
                        [
                            "tf.linalg.set_diag(K, tf.linalg.diag_part(K) + diag)",
                            "Call"
                        ],
                        [
                            "kern(X, full_cov=True)",
                            "Call"
                        ],
                        [
                            "tf.linalg.set_diag(K, tf.linalg.diag_part(K) + config.noise_variance)",
                            "Call"
                        ]
                    ]
                },
                "diagonal": {
                    "value": "tf.linalg.diag_part(K) + diag",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cholesky_104": {
                "variable": {
                    "value": "L",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kern(tf.concat([X, Xnew], axis=-2), full_cov=True)",
                            "Call"
                        ],
                        [
                            "tf.linalg.set_diag(K, tf.linalg.diag_part(K) + diag)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.concat([Kuu, Kuf], axis=-1), tf.concat([tf.linalg.adjoint(Kuf), Kff], axis=-1)], axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.linalg.set_diag(K, tf.linalg.diag_part(K) + diag)",
                            "Call"
                        ],
                        [
                            "kern.kernel(P, full_cov=True)",
                            "Call"
                        ],
                        [
                            "tf.linalg.set_diag(K, tf.linalg.diag_part(K) + diag)",
                            "Call"
                        ],
                        [
                            "kern(X, full_cov=True)",
                            "Call"
                        ],
                        [
                            "tf.linalg.set_diag(K, tf.linalg.diag_part(K) + config.noise_variance)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_110": {
                "variable": {
                    "value": "draws",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "draws",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(L @ rvs, 0)",
                            "Call"
                        ],
                        [
                            "L @ rvs",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(draws, 0)",
                            "Call"
                        ],
                        [
                            "tf.transpose(L @ rvs)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_133": {
                "variable": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[Zp, tf.reshape(Xp, [-1, Xp.shape[-1]])]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "set_diag_135": {
                "variable": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kern(tf.concat([X, Xnew], axis=-2), full_cov=True)",
                            "Call"
                        ],
                        [
                            "tf.linalg.set_diag(K, tf.linalg.diag_part(K) + diag)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.concat([Kuu, Kuf], axis=-1), tf.concat([tf.linalg.adjoint(Kuf), Kff], axis=-1)], axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.linalg.set_diag(K, tf.linalg.diag_part(K) + diag)",
                            "Call"
                        ],
                        [
                            "kern.kernel(P, full_cov=True)",
                            "Call"
                        ],
                        [
                            "tf.linalg.set_diag(K, tf.linalg.diag_part(K) + diag)",
                            "Call"
                        ],
                        [
                            "kern(X, full_cov=True)",
                            "Call"
                        ],
                        [
                            "tf.linalg.set_diag(K, tf.linalg.diag_part(K) + config.noise_variance)",
                            "Call"
                        ]
                    ]
                },
                "diagonal": {
                    "value": "tf.linalg.diag_part(K) + diag",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cholesky_136": {
                "variable": {
                    "value": "L",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kern(tf.concat([X, Xnew], axis=-2), full_cov=True)",
                            "Call"
                        ],
                        [
                            "tf.linalg.set_diag(K, tf.linalg.diag_part(K) + diag)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.concat([Kuu, Kuf], axis=-1), tf.concat([tf.linalg.adjoint(Kuf), Kff], axis=-1)], axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.linalg.set_diag(K, tf.linalg.diag_part(K) + diag)",
                            "Call"
                        ],
                        [
                            "kern.kernel(P, full_cov=True)",
                            "Call"
                        ],
                        [
                            "tf.linalg.set_diag(K, tf.linalg.diag_part(K) + diag)",
                            "Call"
                        ],
                        [
                            "kern(X, full_cov=True)",
                            "Call"
                        ],
                        [
                            "tf.linalg.set_diag(K, tf.linalg.diag_part(K) + config.noise_variance)",
                            "Call"
                        ]
                    ]
                }
            },
            "tile_137": {
                "variable": {
                    "value": "L",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "L[None]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[kern.channels_out, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_161": {
                "variable": {
                    "value": "_b",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "list(b.shape[:-3]) + [-1, b.shape[-1]]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_164": {
                "input_tensor": {
                    "value": "prod",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_tensordot(_a, _b, axes=[-1, -1], batch_axes=batch_axes)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[-3, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "split_69": {
                "value": {
                    "value": "tf.transpose(draws)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "[-1, Xnew.shape[0]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tile_97": {
                "variable": {
                    "value": "Kuu",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Kuu[None]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[Kff.shape[0], 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_98": {
                "variable": {
                    "value": "Kuf",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Kuf[None]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[Kff.shape[0], 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "split_112": {
                "value": {
                    "value": "tf.transpose(draws)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "[-1, Xnew.shape[0]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "uniform_175": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[config.num_cond, config.input_dims]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "floatx()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "uniform_176": {
                "variable": {
                    "value": "Xnew",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[config.num_test, config.input_dims]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "floatx()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "uniform_217": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[config.num_test, config.input_dims]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "floatx()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "uniform_257": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[config.num_test, config.input_dims]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "floatx()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "uniform_302": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[config.num_test, config.input_dims]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "floatx()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "normal_334": {
                "variable": {
                    "value": "const",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[len(kern.kernels)]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "floatx()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_361": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.range(tf.reduce_prod(X_shape), dtype=floatx())",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "X_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[config.num_test] + config.image_shape + [config.channels_in]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "concat_62": {
                "values": {
                    "value": "[X, Xnew]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "transpose_69": {
                "a": {
                    "value": "draws",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(L @ rvs, 0)",
                            "Call"
                        ],
                        [
                            "L @ rvs",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(draws, 0)",
                            "Call"
                        ],
                        [
                            "tf.transpose(L @ rvs)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_112": {
                "a": {
                    "value": "draws",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(L @ rvs, 0)",
                            "Call"
                        ],
                        [
                            "L @ rvs",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(draws, 0)",
                            "Call"
                        ],
                        [
                            "tf.transpose(L @ rvs)",
                            "Call"
                        ]
                    ]
                }
            },
            "set_seed_171": {
                "seed": {
                    "value": "config.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "uniform_180": {
                "variable": {
                    "value": "lenscales",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[config.input_dims]",
                    "type": "List",
                    "possible_values": []
                },
                "minval": {
                    "value": "minval",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.rel_lengthscales_min * config.input_dims ** 0.5",
                            "BinOp"
                        ],
                        [
                            "config.rel_lengthscales_min * config.input_dims ** 0.5",
                            "BinOp"
                        ],
                        [
                            "config.rel_lengthscales_min * config.input_dims ** 0.5",
                            "BinOp"
                        ],
                        [
                            "config.rel_lengthscales_min * config.input_dims ** 0.5",
                            "BinOp"
                        ],
                        [
                            "config.rel_lengthscales_min * patch_len ** 0.5",
                            "BinOp"
                        ]
                    ]
                },
                "maxval": {
                    "value": "maxval",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.rel_lengthscales_max * config.input_dims ** 0.5",
                            "BinOp"
                        ],
                        [
                            "config.rel_lengthscales_max * config.input_dims ** 0.5",
                            "BinOp"
                        ],
                        [
                            "config.rel_lengthscales_max * config.input_dims ** 0.5",
                            "BinOp"
                        ],
                        [
                            "config.rel_lengthscales_max * config.input_dims ** 0.5",
                            "BinOp"
                        ],
                        [
                            "config.rel_lengthscales_max * patch_len ** 0.5",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "floatx()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "normal_186": {
                "variable": {
                    "value": "const",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "floatx()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_diag_189": {
                "variable": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kern(tf.concat([X, Xnew], axis=-2), full_cov=True)",
                            "Call"
                        ],
                        [
                            "tf.linalg.set_diag(K, tf.linalg.diag_part(K) + diag)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.concat([Kuu, Kuf], axis=-1), tf.concat([tf.linalg.adjoint(Kuf), Kff], axis=-1)], axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.linalg.set_diag(K, tf.linalg.diag_part(K) + diag)",
                            "Call"
                        ],
                        [
                            "kern.kernel(P, full_cov=True)",
                            "Call"
                        ],
                        [
                            "tf.linalg.set_diag(K, tf.linalg.diag_part(K) + diag)",
                            "Call"
                        ],
                        [
                            "kern(X, full_cov=True)",
                            "Call"
                        ],
                        [
                            "tf.linalg.set_diag(K, tf.linalg.diag_part(K) + config.noise_variance)",
                            "Call"
                        ]
                    ]
                },
                "diagonal": {
                    "value": "tf.linalg.diag_part(K) + config.noise_variance",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cholesky_190": {
                "variable": {
                    "value": "L",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kern(tf.concat([X, Xnew], axis=-2), full_cov=True)",
                            "Call"
                        ],
                        [
                            "tf.linalg.set_diag(K, tf.linalg.diag_part(K) + diag)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.concat([Kuu, Kuf], axis=-1), tf.concat([tf.linalg.adjoint(Kuf), Kff], axis=-1)], axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.linalg.set_diag(K, tf.linalg.diag_part(K) + diag)",
                            "Call"
                        ],
                        [
                            "kern.kernel(P, full_cov=True)",
                            "Call"
                        ],
                        [
                            "tf.linalg.set_diag(K, tf.linalg.diag_part(K) + diag)",
                            "Call"
                        ],
                        [
                            "kern(X, full_cov=True)",
                            "Call"
                        ],
                        [
                            "tf.linalg.set_diag(K, tf.linalg.diag_part(K) + config.noise_variance)",
                            "Call"
                        ]
                    ]
                }
            },
            "set_seed_213": {
                "seed": {
                    "value": "config.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "uniform_222": {
                "variable": {
                    "value": "lenscales",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[config.input_dims]",
                    "type": "List",
                    "possible_values": []
                },
                "minval": {
                    "value": "minval",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.rel_lengthscales_min * config.input_dims ** 0.5",
                            "BinOp"
                        ],
                        [
                            "config.rel_lengthscales_min * config.input_dims ** 0.5",
                            "BinOp"
                        ],
                        [
                            "config.rel_lengthscales_min * config.input_dims ** 0.5",
                            "BinOp"
                        ],
                        [
                            "config.rel_lengthscales_min * config.input_dims ** 0.5",
                            "BinOp"
                        ],
                        [
                            "config.rel_lengthscales_min * patch_len ** 0.5",
                            "BinOp"
                        ]
                    ]
                },
                "maxval": {
                    "value": "maxval",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.rel_lengthscales_max * config.input_dims ** 0.5",
                            "BinOp"
                        ],
                        [
                            "config.rel_lengthscales_max * config.input_dims ** 0.5",
                            "BinOp"
                        ],
                        [
                            "config.rel_lengthscales_max * config.input_dims ** 0.5",
                            "BinOp"
                        ],
                        [
                            "config.rel_lengthscales_max * config.input_dims ** 0.5",
                            "BinOp"
                        ],
                        [
                            "config.rel_lengthscales_max * patch_len ** 0.5",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "floatx()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_227": {
                "variable": {
                    "value": "q_sqrt",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1] + 2 * [config.num_cond]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "floatx()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "normal_231": {
                "variable": {
                    "value": "const",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "floatx()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_seed_253": {
                "seed": {
                    "value": "config.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "uniform_262": {
                "variable": {
                    "value": "lenscales",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[config.input_dims]",
                    "type": "List",
                    "possible_values": []
                },
                "minval": {
                    "value": "minval",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.rel_lengthscales_min * config.input_dims ** 0.5",
                            "BinOp"
                        ],
                        [
                            "config.rel_lengthscales_min * config.input_dims ** 0.5",
                            "BinOp"
                        ],
                        [
                            "config.rel_lengthscales_min * config.input_dims ** 0.5",
                            "BinOp"
                        ],
                        [
                            "config.rel_lengthscales_min * config.input_dims ** 0.5",
                            "BinOp"
                        ],
                        [
                            "config.rel_lengthscales_min * patch_len ** 0.5",
                            "BinOp"
                        ]
                    ]
                },
                "maxval": {
                    "value": "maxval",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.rel_lengthscales_max * config.input_dims ** 0.5",
                            "BinOp"
                        ],
                        [
                            "config.rel_lengthscales_max * config.input_dims ** 0.5",
                            "BinOp"
                        ],
                        [
                            "config.rel_lengthscales_max * config.input_dims ** 0.5",
                            "BinOp"
                        ],
                        [
                            "config.rel_lengthscales_max * config.input_dims ** 0.5",
                            "BinOp"
                        ],
                        [
                            "config.rel_lengthscales_max * patch_len ** 0.5",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "floatx()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_273": {
                "variable": {
                    "value": "q_sqrt",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.zeros(2 * [config.num_cond], dtype=floatx()), tf.linalg.cholesky(Kuu)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "normal_276": {
                "variable": {
                    "value": "const",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "floatx()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_seed_298": {
                "seed": {
                    "value": "config.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "uniform_309": {
                "variable": {
                    "value": "lenscales",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[config.input_dims]",
                    "type": "List",
                    "possible_values": []
                },
                "minval": {
                    "value": "minval",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.rel_lengthscales_min * config.input_dims ** 0.5",
                            "BinOp"
                        ],
                        [
                            "config.rel_lengthscales_min * config.input_dims ** 0.5",
                            "BinOp"
                        ],
                        [
                            "config.rel_lengthscales_min * config.input_dims ** 0.5",
                            "BinOp"
                        ],
                        [
                            "config.rel_lengthscales_min * config.input_dims ** 0.5",
                            "BinOp"
                        ],
                        [
                            "config.rel_lengthscales_min * patch_len ** 0.5",
                            "BinOp"
                        ]
                    ]
                },
                "maxval": {
                    "value": "maxval",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.rel_lengthscales_max * config.input_dims ** 0.5",
                            "BinOp"
                        ],
                        [
                            "config.rel_lengthscales_max * config.input_dims ** 0.5",
                            "BinOp"
                        ],
                        [
                            "config.rel_lengthscales_max * config.input_dims ** 0.5",
                            "BinOp"
                        ],
                        [
                            "config.rel_lengthscales_max * config.input_dims ** 0.5",
                            "BinOp"
                        ],
                        [
                            "config.rel_lengthscales_max * patch_len ** 0.5",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "floatx()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "uniform_314": {
                "variable": {
                    "value": "rel_variance",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "minval": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "maxval": {
                    "value": "1.1",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "floatx()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_seed_356": {
                "seed": {
                    "value": "config.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_max_362": {
                "input_tensor": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random.uniform([config.num_cond, config.input_dims], dtype=floatx())",
                            "Call"
                        ],
                        [
                            "tf.random.uniform([config.num_test, config.input_dims], dtype=floatx())",
                            "Call"
                        ],
                        [
                            "tf.random.uniform([config.num_test, config.input_dims], dtype=floatx())",
                            "Call"
                        ],
                        [
                            "tf.random.uniform([config.num_test, config.input_dims], dtype=floatx())",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.range(tf.reduce_prod(X_shape), dtype=floatx()), X_shape)",
                            "Call"
                        ],
                        [
                            "X / tf.reduce_max(X)",
                            "BinOp"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "uniform_368": {
                "variable": {
                    "value": "lenscales",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[patch_len]",
                    "type": "List",
                    "possible_values": []
                },
                "minval": {
                    "value": "minval",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.rel_lengthscales_min * config.input_dims ** 0.5",
                            "BinOp"
                        ],
                        [
                            "config.rel_lengthscales_min * config.input_dims ** 0.5",
                            "BinOp"
                        ],
                        [
                            "config.rel_lengthscales_min * config.input_dims ** 0.5",
                            "BinOp"
                        ],
                        [
                            "config.rel_lengthscales_min * config.input_dims ** 0.5",
                            "BinOp"
                        ],
                        [
                            "config.rel_lengthscales_min * patch_len ** 0.5",
                            "BinOp"
                        ]
                    ]
                },
                "maxval": {
                    "value": "maxval",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.rel_lengthscales_max * config.input_dims ** 0.5",
                            "BinOp"
                        ],
                        [
                            "config.rel_lengthscales_max * config.input_dims ** 0.5",
                            "BinOp"
                        ],
                        [
                            "config.rel_lengthscales_max * config.input_dims ** 0.5",
                            "BinOp"
                        ],
                        [
                            "config.rel_lengthscales_max * config.input_dims ** 0.5",
                            "BinOp"
                        ],
                        [
                            "config.rel_lengthscales_max * patch_len ** 0.5",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "floatx()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "diag_part_63": {
                "input": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kern(tf.concat([X, Xnew], axis=-2), full_cov=True)",
                            "Call"
                        ],
                        [
                            "tf.linalg.set_diag(K, tf.linalg.diag_part(K) + diag)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.concat([Kuu, Kuf], axis=-1), tf.concat([tf.linalg.adjoint(Kuf), Kff], axis=-1)], axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.linalg.set_diag(K, tf.linalg.diag_part(K) + diag)",
                            "Call"
                        ],
                        [
                            "kern.kernel(P, full_cov=True)",
                            "Call"
                        ],
                        [
                            "tf.linalg.set_diag(K, tf.linalg.diag_part(K) + diag)",
                            "Call"
                        ],
                        [
                            "kern(X, full_cov=True)",
                            "Call"
                        ],
                        [
                            "tf.linalg.set_diag(K, tf.linalg.diag_part(K) + config.noise_variance)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_101": {
                "values": {
                    "value": "[tf.linalg.adjoint(Kuf), Kff]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "diag_part_103": {
                "input": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kern(tf.concat([X, Xnew], axis=-2), full_cov=True)",
                            "Call"
                        ],
                        [
                            "tf.linalg.set_diag(K, tf.linalg.diag_part(K) + diag)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.concat([Kuu, Kuf], axis=-1), tf.concat([tf.linalg.adjoint(Kuf), Kff], axis=-1)], axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.linalg.set_diag(K, tf.linalg.diag_part(K) + diag)",
                            "Call"
                        ],
                        [
                            "kern.kernel(P, full_cov=True)",
                            "Call"
                        ],
                        [
                            "tf.linalg.set_diag(K, tf.linalg.diag_part(K) + diag)",
                            "Call"
                        ],
                        [
                            "kern(X, full_cov=True)",
                            "Call"
                        ],
                        [
                            "tf.linalg.set_diag(K, tf.linalg.diag_part(K) + config.noise_variance)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_133": {
                "tensor": {
                    "value": "Xp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kern.get_patches(Xnew, full_spatial=False)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, Xp.shape[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "diag_part_135": {
                "input": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kern(tf.concat([X, Xnew], axis=-2), full_cov=True)",
                            "Call"
                        ],
                        [
                            "tf.linalg.set_diag(K, tf.linalg.diag_part(K) + diag)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.concat([Kuu, Kuf], axis=-1), tf.concat([tf.linalg.adjoint(Kuf), Kff], axis=-1)], axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.linalg.set_diag(K, tf.linalg.diag_part(K) + diag)",
                            "Call"
                        ],
                        [
                            "kern.kernel(P, full_cov=True)",
                            "Call"
                        ],
                        [
                            "tf.linalg.set_diag(K, tf.linalg.diag_part(K) + diag)",
                            "Call"
                        ],
                        [
                            "kern(X, full_cov=True)",
                            "Call"
                        ],
                        [
                            "tf.linalg.set_diag(K, tf.linalg.diag_part(K) + config.noise_variance)",
                            "Call"
                        ]
                    ]
                }
            },
            "cholesky_328": {
                "input": {
                    "value": "Kuu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "covariances.Kuu(Z, kern, jitter=0.0)",
                            "Call"
                        ],
                        [
                            "tf.tile(Kuu[None], [Kff.shape[0], 1, 1])",
                            "Call"
                        ],
                        [
                            "covariances.Kuu(Z, kern, jitter=gpflow_config.default_jitter())",
                            "Call"
                        ],
                        [
                            "covariances.Kuu(Z, kern, jitter=gpflow_config.default_jitter())",
                            "Call"
                        ]
                    ]
                }
            },
            "uniform_329": {
                "shape": {
                    "value": "[kern.num_latent_gps, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "minval": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "maxval": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "floatx()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "range_361": {
                "dtype": {
                    "value": "floatx()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cholesky_386": {
                "variable": {
                    "value": "q_sqrt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "covariances.Kuu(Z, kern)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "normal_395": {
                "variable": {
                    "value": "const",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[config.num_latent_gps]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "floatx()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "uniform_229": {
                "shape": {
                    "value": "Z_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(config.num_cond, config.input_dims)",
                            "Tuple"
                        ],
                        [
                            "(config.num_cond, config.input_dims)",
                            "Tuple"
                        ],
                        [
                            "(config.num_cond, config.input_dims)",
                            "Tuple"
                        ],
                        [
                            "[config.num_cond] + config.patch_shape + [config.channels_in]",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "floatx()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_prod_361": {
                "input_tensor": {
                    "value": "X_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[config.num_test] + config.image_shape + [config.channels_in]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_prod_364": {
                "input_tensor": {
                    "value": "config.patch_shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "uniform_387": {
                "shape": {
                    "value": "[config.num_latent_gps, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "minval": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "maxval": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "floatx()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "adjoint_101": {
                "matrix": {
                    "value": "Kuf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "covariances.Kuf(Z, kern, Xnew)",
                            "Call"
                        ],
                        [
                            "tf.tile(Kuf[None], [Kff.shape[0], 1, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "diag_part_189": {
                "input": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kern(tf.concat([X, Xnew], axis=-2), full_cov=True)",
                            "Call"
                        ],
                        [
                            "tf.linalg.set_diag(K, tf.linalg.diag_part(K) + diag)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.concat([Kuu, Kuf], axis=-1), tf.concat([tf.linalg.adjoint(Kuf), Kff], axis=-1)], axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.linalg.set_diag(K, tf.linalg.diag_part(K) + diag)",
                            "Call"
                        ],
                        [
                            "kern.kernel(P, full_cov=True)",
                            "Call"
                        ],
                        [
                            "tf.linalg.set_diag(K, tf.linalg.diag_part(K) + diag)",
                            "Call"
                        ],
                        [
                            "kern(X, full_cov=True)",
                            "Call"
                        ],
                        [
                            "tf.linalg.set_diag(K, tf.linalg.diag_part(K) + config.noise_variance)",
                            "Call"
                        ]
                    ]
                }
            },
            "normal_191": {
                "shape": {
                    "value": "[L.shape[-1], 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "floatx()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "uniform_271": {
                "shape": {
                    "value": "Z_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(config.num_cond, config.input_dims)",
                            "Tuple"
                        ],
                        [
                            "(config.num_cond, config.input_dims)",
                            "Tuple"
                        ],
                        [
                            "(config.num_cond, config.input_dims)",
                            "Tuple"
                        ],
                        [
                            "[config.num_cond] + config.patch_shape + [config.channels_in]",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "floatx()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_273": {
                "shape": {
                    "value": "2 * [config.num_cond]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "floatx()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cholesky_274": {
                "input": {
                    "value": "Kuu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "covariances.Kuu(Z, kern, jitter=0.0)",
                            "Call"
                        ],
                        [
                            "tf.tile(Kuu[None], [Kff.shape[0], 1, 1])",
                            "Call"
                        ],
                        [
                            "covariances.Kuu(Z, kern, jitter=gpflow_config.default_jitter())",
                            "Call"
                        ],
                        [
                            "covariances.Kuu(Z, kern, jitter=gpflow_config.default_jitter())",
                            "Call"
                        ]
                    ]
                }
            },
            "uniform_322": {
                "shape": {
                    "value": "Z_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(config.num_cond, config.input_dims)",
                            "Tuple"
                        ],
                        [
                            "(config.num_cond, config.input_dims)",
                            "Tuple"
                        ],
                        [
                            "(config.num_cond, config.input_dims)",
                            "Tuple"
                        ],
                        [
                            "[config.num_cond] + config.patch_shape + [config.channels_in]",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "floatx()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "uniform_385": {
                "shape": {
                    "value": "Z_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(config.num_cond, config.input_dims)",
                            "Tuple"
                        ],
                        [
                            "(config.num_cond, config.input_dims)",
                            "Tuple"
                        ],
                        [
                            "(config.num_cond, config.input_dims)",
                            "Tuple"
                        ],
                        [
                            "[config.num_cond] + config.patch_shape + [config.channels_in]",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "floatx()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "tests/sampling/updates/test_cg.py": {
        "tensorflow": {
            "concat_113": {
                "variable": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(samples, axis=0)",
                            "Call"
                        ],
                        [
                            "samples + model.mean_function(Xnew)",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(samples, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_162": {
                "variable": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(samples, axis=0)",
                            "Call"
                        ],
                        [
                            "samples + model.mean_function(Xnew)",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(samples, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_171": {
                "variable": {
                    "value": "mf",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_test_cg_gpr(*args, **kwargs)",
                            "Call"
                        ],
                        [
                            "_test_cg_svgp(*args, **kwargs)",
                            "Call"
                        ],
                        [
                            "_test_cg_svgp(*args, **kwargs)",
                            "Call"
                        ],
                        [
                            "_test_cg_svgp(*args, **kwargs)",
                            "Call"
                        ],
                        [
                            "swap_axes(_test_cg_svgp(*args, **kwargs), 0, -1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_172": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f - mf",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_mean_180": {
                "variable": {
                    "value": "mf",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_test_cg_gpr(*args, **kwargs)",
                            "Call"
                        ],
                        [
                            "_test_cg_svgp(*args, **kwargs)",
                            "Call"
                        ],
                        [
                            "_test_cg_svgp(*args, **kwargs)",
                            "Call"
                        ],
                        [
                            "_test_cg_svgp(*args, **kwargs)",
                            "Call"
                        ],
                        [
                            "swap_axes(_test_cg_svgp(*args, **kwargs), 0, -1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_181": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f - mf",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_mean_189": {
                "variable": {
                    "value": "mf",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_test_cg_gpr(*args, **kwargs)",
                            "Call"
                        ],
                        [
                            "_test_cg_svgp(*args, **kwargs)",
                            "Call"
                        ],
                        [
                            "_test_cg_svgp(*args, **kwargs)",
                            "Call"
                        ],
                        [
                            "_test_cg_svgp(*args, **kwargs)",
                            "Call"
                        ],
                        [
                            "swap_axes(_test_cg_svgp(*args, **kwargs), 0, -1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_190": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "f - mf",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_198": {
                "variable": {
                    "value": "mf",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_test_cg_gpr(*args, **kwargs)",
                            "Call"
                        ],
                        [
                            "_test_cg_svgp(*args, **kwargs)",
                            "Call"
                        ],
                        [
                            "_test_cg_svgp(*args, **kwargs)",
                            "Call"
                        ],
                        [
                            "_test_cg_svgp(*args, **kwargs)",
                            "Call"
                        ],
                        [
                            "swap_axes(_test_cg_svgp(*args, **kwargs), 0, -1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_199": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "f - mf",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "transpose_207": {
                "variable": {
                    "value": "mf",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.reduce_mean(f, [-3, -2, -1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "normal_140": {
                "variable": {
                    "value": "rvs",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(model.num_latent_gps, config.num_cond, size)",
                            "Tuple"
                        ]
                    ]
                },
                "dtype": {
                    "value": "floatx()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_141": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "model.q_sqrt @ rvs",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_173": {
                "a": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(f - mf, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(f - mf, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(f - mf)",
                            "Call"
                        ],
                        [
                            "tf.transpose(f - mf)",
                            "Call"
                        ],
                        [
                            "f - tf.reduce_mean(f, axis=-1, keepdims=True)",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(f - mf, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(f - mf, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(f - mf)",
                            "Call"
                        ],
                        [
                            "tf.transpose(f - mf)",
                            "Call"
                        ],
                        [
                            "f - tf.reduce_mean(f, axis=-1, keepdims=True)",
                            "BinOp"
                        ]
                    ]
                },
                "transpose_a": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "matmul_182": {
                "a": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(f - mf, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(f - mf, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(f - mf)",
                            "Call"
                        ],
                        [
                            "tf.transpose(f - mf)",
                            "Call"
                        ],
                        [
                            "f - tf.reduce_mean(f, axis=-1, keepdims=True)",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(f - mf, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(f - mf, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(f - mf)",
                            "Call"
                        ],
                        [
                            "tf.transpose(f - mf)",
                            "Call"
                        ],
                        [
                            "f - tf.reduce_mean(f, axis=-1, keepdims=True)",
                            "BinOp"
                        ]
                    ]
                },
                "transpose_a": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "matmul_191": {
                "a": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(f - mf, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(f - mf, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(f - mf)",
                            "Call"
                        ],
                        [
                            "tf.transpose(f - mf)",
                            "Call"
                        ],
                        [
                            "f - tf.reduce_mean(f, axis=-1, keepdims=True)",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(f - mf, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(f - mf, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(f - mf)",
                            "Call"
                        ],
                        [
                            "tf.transpose(f - mf)",
                            "Call"
                        ],
                        [
                            "f - tf.reduce_mean(f, axis=-1, keepdims=True)",
                            "BinOp"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "matmul_200": {
                "a": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(f - mf, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(f - mf, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(f - mf)",
                            "Call"
                        ],
                        [
                            "tf.transpose(f - mf)",
                            "Call"
                        ],
                        [
                            "f - tf.reduce_mean(f, axis=-1, keepdims=True)",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(f - mf, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(f - mf, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(f - mf)",
                            "Call"
                        ],
                        [
                            "tf.transpose(f - mf)",
                            "Call"
                        ],
                        [
                            "f - tf.reduce_mean(f, axis=-1, keepdims=True)",
                            "BinOp"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_mean_207": {
                "input_tensor": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_test_cg_gpr(*args, **kwargs)",
                            "Call"
                        ],
                        [
                            "_test_cg_svgp(*args, **kwargs)",
                            "Call"
                        ],
                        [
                            "_test_cg_svgp(*args, **kwargs)",
                            "Call"
                        ],
                        [
                            "_test_cg_svgp(*args, **kwargs)",
                            "Call"
                        ],
                        [
                            "swap_axes(_test_cg_svgp(*args, **kwargs), 0, -1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[-3, -2, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_208": {
                "input_tensor": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_test_cg_gpr(*args, **kwargs)",
                            "Call"
                        ],
                        [
                            "_test_cg_svgp(*args, **kwargs)",
                            "Call"
                        ],
                        [
                            "_test_cg_svgp(*args, **kwargs)",
                            "Call"
                        ],
                        [
                            "_test_cg_svgp(*args, **kwargs)",
                            "Call"
                        ],
                        [
                            "swap_axes(_test_cg_svgp(*args, **kwargs), 0, -1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "tests/sampling/updates/test_exact.py": {
        "tensorflow": {
            "set_diag_79": {
                "variable": {
                    "value": "Kyy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Kyy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.kernel(X, full_cov=True)",
                            "Call"
                        ],
                        [
                            "tf.linalg.set_diag(Kyy, tf.linalg.diag_part(Kyy) + model.likelihood.variance)",
                            "Call"
                        ]
                    ]
                },
                "diagonal": {
                    "value": "tf.linalg.diag_part(Kyy) + model.likelihood.variance",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cholesky_81": {
                "variable": {
                    "value": "Lyy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Kyy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.kernel(X, full_cov=True)",
                            "Call"
                        ],
                        [
                            "tf.linalg.set_diag(Kyy, tf.linalg.diag_part(Kyy) + model.likelihood.variance)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_108": {
                "variable": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(samples, axis=0)",
                            "Call"
                        ],
                        [
                            "samples + model.mean_function(Xnew)",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(samples, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cholesky_123": {
                "variable": {
                    "value": "Luu",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Kuu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "covariances.Kuu(Z, model.kernel, jitter=default_jitter())",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_147": {
                "variable": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(samples, axis=0)",
                            "Call"
                        ],
                        [
                            "samples + model.mean_function(Xnew)",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(samples, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_156": {
                "variable": {
                    "value": "mf",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_test_exact_gpr(*args, **kwargs)",
                            "Call"
                        ],
                        [
                            "_test_exact_svgp(*args, **kwargs)",
                            "Call"
                        ],
                        [
                            "_test_exact_svgp(*args, **kwargs)",
                            "Call"
                        ],
                        [
                            "_test_exact_svgp(*args, **kwargs)",
                            "Call"
                        ],
                        [
                            "swap_axes(_test_exact_svgp(*args, **kwargs), 0, -1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_157": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f - mf",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_mean_165": {
                "variable": {
                    "value": "mf",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_test_exact_gpr(*args, **kwargs)",
                            "Call"
                        ],
                        [
                            "_test_exact_svgp(*args, **kwargs)",
                            "Call"
                        ],
                        [
                            "_test_exact_svgp(*args, **kwargs)",
                            "Call"
                        ],
                        [
                            "_test_exact_svgp(*args, **kwargs)",
                            "Call"
                        ],
                        [
                            "swap_axes(_test_exact_svgp(*args, **kwargs), 0, -1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_166": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f - mf",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_mean_174": {
                "variable": {
                    "value": "mf",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_test_exact_gpr(*args, **kwargs)",
                            "Call"
                        ],
                        [
                            "_test_exact_svgp(*args, **kwargs)",
                            "Call"
                        ],
                        [
                            "_test_exact_svgp(*args, **kwargs)",
                            "Call"
                        ],
                        [
                            "_test_exact_svgp(*args, **kwargs)",
                            "Call"
                        ],
                        [
                            "swap_axes(_test_exact_svgp(*args, **kwargs), 0, -1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_175": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "f - mf",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_183": {
                "variable": {
                    "value": "mf",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_test_exact_gpr(*args, **kwargs)",
                            "Call"
                        ],
                        [
                            "_test_exact_svgp(*args, **kwargs)",
                            "Call"
                        ],
                        [
                            "_test_exact_svgp(*args, **kwargs)",
                            "Call"
                        ],
                        [
                            "_test_exact_svgp(*args, **kwargs)",
                            "Call"
                        ],
                        [
                            "swap_axes(_test_exact_svgp(*args, **kwargs), 0, -1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_184": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "f - mf",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "transpose_192": {
                "variable": {
                    "value": "mf",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.reduce_mean(f, [-3, -2, -1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "normal_132": {
                "variable": {
                    "value": "rvs",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(model.num_latent_gps, config.num_cond, size)",
                            "Tuple"
                        ]
                    ]
                },
                "dtype": {
                    "value": "floatx()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_133": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "model.q_sqrt @ rvs",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_158": {
                "a": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(f - mf, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(f - mf, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(f - mf)",
                            "Call"
                        ],
                        [
                            "tf.transpose(f - mf)",
                            "Call"
                        ],
                        [
                            "f - tf.reduce_mean(f, axis=-1, keepdims=True)",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(f - mf, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(f - mf, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(f - mf)",
                            "Call"
                        ],
                        [
                            "tf.transpose(f - mf)",
                            "Call"
                        ],
                        [
                            "f - tf.reduce_mean(f, axis=-1, keepdims=True)",
                            "BinOp"
                        ]
                    ]
                },
                "transpose_a": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "matmul_167": {
                "a": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(f - mf, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(f - mf, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(f - mf)",
                            "Call"
                        ],
                        [
                            "tf.transpose(f - mf)",
                            "Call"
                        ],
                        [
                            "f - tf.reduce_mean(f, axis=-1, keepdims=True)",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(f - mf, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(f - mf, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(f - mf)",
                            "Call"
                        ],
                        [
                            "tf.transpose(f - mf)",
                            "Call"
                        ],
                        [
                            "f - tf.reduce_mean(f, axis=-1, keepdims=True)",
                            "BinOp"
                        ]
                    ]
                },
                "transpose_a": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "matmul_176": {
                "a": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(f - mf, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(f - mf, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(f - mf)",
                            "Call"
                        ],
                        [
                            "tf.transpose(f - mf)",
                            "Call"
                        ],
                        [
                            "f - tf.reduce_mean(f, axis=-1, keepdims=True)",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(f - mf, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(f - mf, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(f - mf)",
                            "Call"
                        ],
                        [
                            "tf.transpose(f - mf)",
                            "Call"
                        ],
                        [
                            "f - tf.reduce_mean(f, axis=-1, keepdims=True)",
                            "BinOp"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "matmul_185": {
                "a": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(f - mf, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(f - mf, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(f - mf)",
                            "Call"
                        ],
                        [
                            "tf.transpose(f - mf)",
                            "Call"
                        ],
                        [
                            "f - tf.reduce_mean(f, axis=-1, keepdims=True)",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(f - mf, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(f - mf, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(f - mf)",
                            "Call"
                        ],
                        [
                            "tf.transpose(f - mf)",
                            "Call"
                        ],
                        [
                            "f - tf.reduce_mean(f, axis=-1, keepdims=True)",
                            "BinOp"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_mean_192": {
                "input_tensor": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_test_exact_gpr(*args, **kwargs)",
                            "Call"
                        ],
                        [
                            "_test_exact_svgp(*args, **kwargs)",
                            "Call"
                        ],
                        [
                            "_test_exact_svgp(*args, **kwargs)",
                            "Call"
                        ],
                        [
                            "_test_exact_svgp(*args, **kwargs)",
                            "Call"
                        ],
                        [
                            "swap_axes(_test_exact_svgp(*args, **kwargs), 0, -1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[-3, -2, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_193": {
                "input_tensor": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_test_exact_gpr(*args, **kwargs)",
                            "Call"
                        ],
                        [
                            "_test_exact_svgp(*args, **kwargs)",
                            "Call"
                        ],
                        [
                            "_test_exact_svgp(*args, **kwargs)",
                            "Call"
                        ],
                        [
                            "_test_exact_svgp(*args, **kwargs)",
                            "Call"
                        ],
                        [
                            "swap_axes(_test_exact_svgp(*args, **kwargs), 0, -1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "diag_part_80": {
                "input": {
                    "value": "Kyy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.kernel(X, full_cov=True)",
                            "Call"
                        ],
                        [
                            "tf.linalg.set_diag(Kyy, tf.linalg.diag_part(Kyy) + model.likelihood.variance)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tests/sampling/updates/test_linear.py": {
        "tensorflow": {
            "concat_72": {
                "variable": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(samples, axis=0)",
                            "Call"
                        ],
                        [
                            "samples + model.mean_function(Xnew)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_81": {
                "variable": {
                    "value": "mf",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_test_linear_svgp(*args, **kwargs)",
                            "Call"
                        ],
                        [
                            "_test_linear_svgp(*args, **kwargs)",
                            "Call"
                        ],
                        [
                            "_test_linear_svgp(*args, **kwargs)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_82": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f - mf",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_mean_90": {
                "variable": {
                    "value": "mf",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_test_linear_svgp(*args, **kwargs)",
                            "Call"
                        ],
                        [
                            "_test_linear_svgp(*args, **kwargs)",
                            "Call"
                        ],
                        [
                            "_test_linear_svgp(*args, **kwargs)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_91": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "f - mf",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_99": {
                "variable": {
                    "value": "mf",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_test_linear_svgp(*args, **kwargs)",
                            "Call"
                        ],
                        [
                            "_test_linear_svgp(*args, **kwargs)",
                            "Call"
                        ],
                        [
                            "_test_linear_svgp(*args, **kwargs)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_100": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "f - mf",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "normal_57": {
                "variable": {
                    "value": "rvs",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(model.num_latent_gps, config.num_cond, size)",
                            "Tuple"
                        ]
                    ]
                },
                "dtype": {
                    "value": "floatx()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_58": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "model.q_sqrt @ rvs",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_83": {
                "a": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(f - mf, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(f - mf)",
                            "Call"
                        ],
                        [
                            "tf.transpose(f - mf)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(f - mf, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(f - mf)",
                            "Call"
                        ],
                        [
                            "tf.transpose(f - mf)",
                            "Call"
                        ]
                    ]
                },
                "transpose_a": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "matmul_92": {
                "a": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(f - mf, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(f - mf)",
                            "Call"
                        ],
                        [
                            "tf.transpose(f - mf)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(f - mf, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(f - mf)",
                            "Call"
                        ],
                        [
                            "tf.transpose(f - mf)",
                            "Call"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "matmul_101": {
                "a": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(f - mf, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(f - mf)",
                            "Call"
                        ],
                        [
                            "tf.transpose(f - mf)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(f - mf, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(f - mf)",
                            "Call"
                        ],
                        [
                            "tf.transpose(f - mf)",
                            "Call"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    }
}