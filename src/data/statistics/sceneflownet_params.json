{
    "segNet2/inference/infer.py": {
        "tensorflow": {}
    },
    "segNet2/lossf/loss_corr.py": {
        "tensorflow": {
            "greater_13": {
                "variable": {
                    "value": "obj_mask_origin",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "gt_traj[:, :, :, 2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.zeros_like(gt_traj[:, :, :, 2])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_14": {
                "variable": {
                    "value": "obj_mask_origin",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "obj_mask_origin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.greater(gt_traj[:, :, :, 2], tf.zeros_like(gt_traj[:, :, :, 2]))",
                            "Call"
                        ],
                        [
                            "tf.cast(obj_mask_origin, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_15": {
                "variable": {
                    "value": "obj_mask_1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "obj_mask_origin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.greater(gt_traj[:, :, :, 2], tf.zeros_like(gt_traj[:, :, :, 2]))",
                            "Call"
                        ],
                        [
                            "tf.cast(obj_mask_origin, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, h, w, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_16": {
                "variable": {
                    "value": "obj_mask_6",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "obj_mask_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(obj_mask_origin, [-1, h, w, 1])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, 1, 1, 6]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_17": {
                "variable": {
                    "value": "obj_mask_3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "obj_mask_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(obj_mask_origin, [-1, h, w, 1])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, 1, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_like_18": {
                "variable": {
                    "value": "obj_tmp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "obj_mask_3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(obj_mask_1, [1, 1, 1, 3])",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_19": {
                "variable": {
                    "value": "obj_final",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[obj_mask_3, obj_tmp]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_21": {
                "variable": {
                    "value": "loss_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sparse_softmax_cross_entropy_with_logits(labels=tf.cast(obj_mask_origin, dtype=tf.int32), logits=pred_mask)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_42": {
                "variable": {
                    "value": "tmp",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gt_traj[b_i, :, :, 2]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(tmp, (-1,))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "unique_43": {
                "variable": {
                    "value": "(y, idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gt_traj[b_i, :, :, 2]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(tmp, (-1,))",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_44": {
                "variable": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(idx, (h, w, 1))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(h, w, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_like_46": {
                "variable": {
                    "value": "ins_tmp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(idx, (h, w, 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_47": {
                "variable": {
                    "value": "ones",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_traj[b_i, :, :, 2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_like_13": {
                "input": {
                    "value": "gt_traj[:, :, :, 2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_with_logits_21": {
                "labels": {
                    "value": "tf.cast(obj_mask_origin, dtype=tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "logits": {
                    "value": "pred_mask",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_sum_24": {
                "input_tensor": {
                    "value": "score_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "obj_mask_origin + 1e-05",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_26": {
                "input_tensor": {
                    "value": "obj_mask_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(obj_mask_origin, [-1, h, w, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_27": {
                "input_tensor": {
                    "value": "obj_mask_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(obj_mask_origin, [-1, h, w, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_29": {
                "input_tensor": {
                    "value": "obj_mask_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(obj_mask_origin, [-1, h, w, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_30": {
                "input_tensor": {
                    "value": "obj_mask_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(obj_mask_origin, [-1, h, w, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_31": {
                "input_tensor": {
                    "value": "obj_mask_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(obj_mask_origin, [-1, h, w, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "acos_32": {
                "x": {
                    "value": "gt_quater[:, :, :, 0:1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_sum_35": {
                "input_tensor": {
                    "value": "obj_mask_1 + 1e-06",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "equal_52": {
                "variable": {
                    "value": "idx_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "gt_traj[b_i, :, :, 2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "ones * z",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_53": {
                "variable": {
                    "value": "idx_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "idx_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(gt_traj[b_i, :, :, 2], ones * z)",
                            "Call"
                        ],
                        [
                            "tf.reshape(idx_mask, [h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(idx_mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.equal(gt_traj[b_i, :, :, dim - 1], ones * z)",
                            "Call"
                        ],
                        [
                            "tf.logical_and(idx_mask, tf.cast(obj_mask, tf.bool))",
                            "Call"
                        ],
                        [
                            "tf.reshape(idx_mask, [h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(idx_mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.equal(gt_traj[b_i, :, :, dim - 1], ones * z)",
                            "Call"
                        ],
                        [
                            "tf.logical_and(idx_mask, tf.cast(obj_mask, tf.bool))",
                            "Call"
                        ],
                        [
                            "tf.reshape(idx_mask, [h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(idx_mask, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[h, w, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_54": {
                "variable": {
                    "value": "idx_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "idx_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(gt_traj[b_i, :, :, 2], ones * z)",
                            "Call"
                        ],
                        [
                            "tf.reshape(idx_mask, [h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(idx_mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.equal(gt_traj[b_i, :, :, dim - 1], ones * z)",
                            "Call"
                        ],
                        [
                            "tf.logical_and(idx_mask, tf.cast(obj_mask, tf.bool))",
                            "Call"
                        ],
                        [
                            "tf.reshape(idx_mask, [h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(idx_mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.equal(gt_traj[b_i, :, :, dim - 1], ones * z)",
                            "Call"
                        ],
                        [
                            "tf.logical_and(idx_mask, tf.cast(obj_mask, tf.bool))",
                            "Call"
                        ],
                        [
                            "tf.reshape(idx_mask, [h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(idx_mask, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tile_55": {
                "variable": {
                    "value": "idx_mask_6d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "idx_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(gt_traj[b_i, :, :, 2], ones * z)",
                            "Call"
                        ],
                        [
                            "tf.reshape(idx_mask, [h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(idx_mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.equal(gt_traj[b_i, :, :, dim - 1], ones * z)",
                            "Call"
                        ],
                        [
                            "tf.logical_and(idx_mask, tf.cast(obj_mask, tf.bool))",
                            "Call"
                        ],
                        [
                            "tf.reshape(idx_mask, [h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(idx_mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.equal(gt_traj[b_i, :, :, dim - 1], ones * z)",
                            "Call"
                        ],
                        [
                            "tf.logical_and(idx_mask, tf.cast(obj_mask, tf.bool))",
                            "Call"
                        ],
                        [
                            "tf.reshape(idx_mask, [h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(idx_mask, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, 1, 6]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_57": {
                "variable": {
                    "value": "tmp_prd",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tmp_prd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "idx_mask_6d * pred_traj[b_i]",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(tmp_prd, (-1, 6))",
                            "Call"
                        ],
                        [
                            "idx_mask_6d * pred_traj[b_i, :, :, 0:6]",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(tmp_prd, (-1, 6))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, 6)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_59": {
                "variable": {
                    "value": "tmp_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tmp_mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tmp_prd, axis=0) / (tf.reduce_sum(idx_mask) + 1e-06)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(tmp_mean, (1, 1, 6))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(1, 1, 6)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tile_60": {
                "variable": {
                    "value": "tmp_mean_final",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tmp_mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tmp_prd, axis=0) / (tf.reduce_sum(idx_mask) + 1e-06)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(tmp_mean, (1, 1, 6))",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[h, w, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_64": {
                "input_tensor": {
                    "value": "tf.map_fn(instance_variance_loss, y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_67": {
                "variable": {
                    "value": "idx_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "gt_traj[b_i, :, :, dim - 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "ones * z",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "logical_and_68": {
                "variable": {
                    "value": "idx_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "idx_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(gt_traj[b_i, :, :, 2], ones * z)",
                            "Call"
                        ],
                        [
                            "tf.reshape(idx_mask, [h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(idx_mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.equal(gt_traj[b_i, :, :, dim - 1], ones * z)",
                            "Call"
                        ],
                        [
                            "tf.logical_and(idx_mask, tf.cast(obj_mask, tf.bool))",
                            "Call"
                        ],
                        [
                            "tf.reshape(idx_mask, [h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(idx_mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.equal(gt_traj[b_i, :, :, dim - 1], ones * z)",
                            "Call"
                        ],
                        [
                            "tf.logical_and(idx_mask, tf.cast(obj_mask, tf.bool))",
                            "Call"
                        ],
                        [
                            "tf.reshape(idx_mask, [h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(idx_mask, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.cast(obj_mask, tf.bool)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_69": {
                "variable": {
                    "value": "idx_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "idx_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(gt_traj[b_i, :, :, 2], ones * z)",
                            "Call"
                        ],
                        [
                            "tf.reshape(idx_mask, [h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(idx_mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.equal(gt_traj[b_i, :, :, dim - 1], ones * z)",
                            "Call"
                        ],
                        [
                            "tf.logical_and(idx_mask, tf.cast(obj_mask, tf.bool))",
                            "Call"
                        ],
                        [
                            "tf.reshape(idx_mask, [h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(idx_mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.equal(gt_traj[b_i, :, :, dim - 1], ones * z)",
                            "Call"
                        ],
                        [
                            "tf.logical_and(idx_mask, tf.cast(obj_mask, tf.bool))",
                            "Call"
                        ],
                        [
                            "tf.reshape(idx_mask, [h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(idx_mask, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[h, w, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_70": {
                "variable": {
                    "value": "idx_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "idx_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(gt_traj[b_i, :, :, 2], ones * z)",
                            "Call"
                        ],
                        [
                            "tf.reshape(idx_mask, [h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(idx_mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.equal(gt_traj[b_i, :, :, dim - 1], ones * z)",
                            "Call"
                        ],
                        [
                            "tf.logical_and(idx_mask, tf.cast(obj_mask, tf.bool))",
                            "Call"
                        ],
                        [
                            "tf.reshape(idx_mask, [h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(idx_mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.equal(gt_traj[b_i, :, :, dim - 1], ones * z)",
                            "Call"
                        ],
                        [
                            "tf.logical_and(idx_mask, tf.cast(obj_mask, tf.bool))",
                            "Call"
                        ],
                        [
                            "tf.reshape(idx_mask, [h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(idx_mask, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tile_71": {
                "variable": {
                    "value": "idx_mask_6d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "idx_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(gt_traj[b_i, :, :, 2], ones * z)",
                            "Call"
                        ],
                        [
                            "tf.reshape(idx_mask, [h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(idx_mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.equal(gt_traj[b_i, :, :, dim - 1], ones * z)",
                            "Call"
                        ],
                        [
                            "tf.logical_and(idx_mask, tf.cast(obj_mask, tf.bool))",
                            "Call"
                        ],
                        [
                            "tf.reshape(idx_mask, [h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(idx_mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.equal(gt_traj[b_i, :, :, dim - 1], ones * z)",
                            "Call"
                        ],
                        [
                            "tf.logical_and(idx_mask, tf.cast(obj_mask, tf.bool))",
                            "Call"
                        ],
                        [
                            "tf.reshape(idx_mask, [h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(idx_mask, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, 1, 6]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_74": {
                "variable": {
                    "value": "tmp_prd",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tmp_prd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "idx_mask_6d * pred_traj[b_i]",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(tmp_prd, (-1, 6))",
                            "Call"
                        ],
                        [
                            "idx_mask_6d * pred_traj[b_i, :, :, 0:6]",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(tmp_prd, (-1, 6))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, 6)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reduce_sum_81": {
                "variable": {
                    "value": "l2_error",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.squared_difference(pred_traj[b_i], gt_traj[b_i])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_82": {
                "variable": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "l2_error",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.squared_difference(pred_traj[b_i], gt_traj[b_i]), 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "less_83": {
                "variable": {
                    "value": "pull_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "r * ones",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sqrt(l2_error)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_84": {
                "variable": {
                    "value": "pull_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "pull_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.less(r * ones, dist)",
                            "Call"
                        ],
                        [
                            "tf.cast(pull_mask, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_88": {
                "input_tensor": {
                    "value": "tf.map_fn(instance_violation_loss, y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_91": {
                "variable": {
                    "value": "idx_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "gt_traj[b_i, :, :, dim - 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "ones * z",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "logical_and_92": {
                "variable": {
                    "value": "idx_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "idx_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(gt_traj[b_i, :, :, 2], ones * z)",
                            "Call"
                        ],
                        [
                            "tf.reshape(idx_mask, [h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(idx_mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.equal(gt_traj[b_i, :, :, dim - 1], ones * z)",
                            "Call"
                        ],
                        [
                            "tf.logical_and(idx_mask, tf.cast(obj_mask, tf.bool))",
                            "Call"
                        ],
                        [
                            "tf.reshape(idx_mask, [h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(idx_mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.equal(gt_traj[b_i, :, :, dim - 1], ones * z)",
                            "Call"
                        ],
                        [
                            "tf.logical_and(idx_mask, tf.cast(obj_mask, tf.bool))",
                            "Call"
                        ],
                        [
                            "tf.reshape(idx_mask, [h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(idx_mask, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.cast(obj_mask, tf.bool)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_93": {
                "variable": {
                    "value": "idx_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "idx_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(gt_traj[b_i, :, :, 2], ones * z)",
                            "Call"
                        ],
                        [
                            "tf.reshape(idx_mask, [h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(idx_mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.equal(gt_traj[b_i, :, :, dim - 1], ones * z)",
                            "Call"
                        ],
                        [
                            "tf.logical_and(idx_mask, tf.cast(obj_mask, tf.bool))",
                            "Call"
                        ],
                        [
                            "tf.reshape(idx_mask, [h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(idx_mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.equal(gt_traj[b_i, :, :, dim - 1], ones * z)",
                            "Call"
                        ],
                        [
                            "tf.logical_and(idx_mask, tf.cast(obj_mask, tf.bool))",
                            "Call"
                        ],
                        [
                            "tf.reshape(idx_mask, [h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(idx_mask, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[h, w, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_94": {
                "variable": {
                    "value": "idx_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "idx_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(gt_traj[b_i, :, :, 2], ones * z)",
                            "Call"
                        ],
                        [
                            "tf.reshape(idx_mask, [h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(idx_mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.equal(gt_traj[b_i, :, :, dim - 1], ones * z)",
                            "Call"
                        ],
                        [
                            "tf.logical_and(idx_mask, tf.cast(obj_mask, tf.bool))",
                            "Call"
                        ],
                        [
                            "tf.reshape(idx_mask, [h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(idx_mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.equal(gt_traj[b_i, :, :, dim - 1], ones * z)",
                            "Call"
                        ],
                        [
                            "tf.logical_and(idx_mask, tf.cast(obj_mask, tf.bool))",
                            "Call"
                        ],
                        [
                            "tf.reshape(idx_mask, [h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(idx_mask, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tile_95": {
                "variable": {
                    "value": "idx_mask_3d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "idx_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(gt_traj[b_i, :, :, 2], ones * z)",
                            "Call"
                        ],
                        [
                            "tf.reshape(idx_mask, [h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(idx_mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.equal(gt_traj[b_i, :, :, dim - 1], ones * z)",
                            "Call"
                        ],
                        [
                            "tf.logical_and(idx_mask, tf.cast(obj_mask, tf.bool))",
                            "Call"
                        ],
                        [
                            "tf.reshape(idx_mask, [h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(idx_mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.equal(gt_traj[b_i, :, :, dim - 1], ones * z)",
                            "Call"
                        ],
                        [
                            "tf.logical_and(idx_mask, tf.cast(obj_mask, tf.bool))",
                            "Call"
                        ],
                        [
                            "tf.reshape(idx_mask, [h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(idx_mask, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_98": {
                "variable": {
                    "value": "tmp_quater",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tmp_quater",
                    "type": "variable",
                    "possible_values": [
                        [
                            "idx_mask_3d * pred_quater[b_i, :, :, 0:3]",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(tmp_quater, (-1, 3))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tmp_quater, axis=0) / (tf.reduce_sum(idx_mask) + 1e-06)",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_102": {
                "variable": {
                    "value": "tmp_transl",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tmp_transl",
                    "type": "variable",
                    "possible_values": [
                        [
                            "idx_mask_3d * pred_transl[b_i, :, :, 0:3]",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(tmp_transl, (-1, 3))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tmp_transl, axis=0) / (tf.reduce_sum(idx_mask) + 1e-06)",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "unstack_105": {
                "variable": {
                    "value": "(w1, x1, y1, z1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "tmp_quater",
                    "type": "variable",
                    "possible_values": [
                        [
                            "idx_mask_3d * pred_quater[b_i, :, :, 0:3]",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(tmp_quater, (-1, 3))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tmp_quater, axis=0) / (tf.reduce_sum(idx_mask) + 1e-06)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unstack_106": {
                "variable": {
                    "value": "(x2, y2, z2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "frame2_input_xyz[b_i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_116": {
                "variable": {
                    "value": "tmp_flow",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(x, y, z)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "map_fn_64": {
                "fn": {
                    "value": "instance_variance_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "elems": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-wm * y1 + ym * w1 - zm * x1 + xm * z1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "map_fn_88": {
                "fn": {
                    "value": "instance_violation_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "elems": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-wm * y1 + ym * w1 - zm * x1 + xm * z1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cast_21": {
                "x": {
                    "value": "obj_mask_origin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.greater(gt_traj[:, :, :, 2], tf.zeros_like(gt_traj[:, :, :, 2]))",
                            "Call"
                        ],
                        [
                            "tf.cast(obj_mask_origin, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_with_logits_24": {
                "labels": {
                    "value": "tf.cast(gt_score, dtype=tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "logits": {
                    "value": "pred_score",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "squared_difference_26": {
                "x": {
                    "value": "pred_traj[:, :, :, 0:3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "gt_traj[:, :, :, 0:3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "squared_difference_27": {
                "x": {
                    "value": "pred_traj[:, :, :, 3:6]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "gt_traj[:, :, :, 3:6]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "squared_difference_29": {
                "x": {
                    "value": "gt_r",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "pred_r",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "squared_difference_30": {
                "x": {
                    "value": "pred_flow",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "gt_flow",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "squared_difference_31": {
                "x": {
                    "value": "pred_transl",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "gt_transl",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sin_33": {
                "x": {
                    "value": "gt_angle / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "squared_difference_35": {
                "x": {
                    "value": "gt_angle_axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gt_quater[:, :, :, 1:4] / (tf.sin(gt_angle / 2) + 1e-06) * gt_angle",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "pred_quater",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_sum_58": {
                "input_tensor": {
                    "value": "idx_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(gt_traj[b_i, :, :, 2], ones * z)",
                            "Call"
                        ],
                        [
                            "tf.reshape(idx_mask, [h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(idx_mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.equal(gt_traj[b_i, :, :, dim - 1], ones * z)",
                            "Call"
                        ],
                        [
                            "tf.logical_and(idx_mask, tf.cast(obj_mask, tf.bool))",
                            "Call"
                        ],
                        [
                            "tf.reshape(idx_mask, [h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(idx_mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.equal(gt_traj[b_i, :, :, dim - 1], ones * z)",
                            "Call"
                        ],
                        [
                            "tf.logical_and(idx_mask, tf.cast(obj_mask, tf.bool))",
                            "Call"
                        ],
                        [
                            "tf.reshape(idx_mask, [h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(idx_mask, tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_61": {
                "input_tensor": {
                    "value": "idx_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(gt_traj[b_i, :, :, 2], ones * z)",
                            "Call"
                        ],
                        [
                            "tf.reshape(idx_mask, [h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(idx_mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.equal(gt_traj[b_i, :, :, dim - 1], ones * z)",
                            "Call"
                        ],
                        [
                            "tf.logical_and(idx_mask, tf.cast(obj_mask, tf.bool))",
                            "Call"
                        ],
                        [
                            "tf.reshape(idx_mask, [h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(idx_mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.equal(gt_traj[b_i, :, :, dim - 1], ones * z)",
                            "Call"
                        ],
                        [
                            "tf.logical_and(idx_mask, tf.cast(obj_mask, tf.bool))",
                            "Call"
                        ],
                        [
                            "tf.reshape(idx_mask, [h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(idx_mask, tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_68": {
                "x": {
                    "value": "obj_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "obj_mask_origin[b_i]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_77": {
                "input_tensor": {
                    "value": "idx_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(gt_traj[b_i, :, :, 2], ones * z)",
                            "Call"
                        ],
                        [
                            "tf.reshape(idx_mask, [h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(idx_mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.equal(gt_traj[b_i, :, :, dim - 1], ones * z)",
                            "Call"
                        ],
                        [
                            "tf.logical_and(idx_mask, tf.cast(obj_mask, tf.bool))",
                            "Call"
                        ],
                        [
                            "tf.reshape(idx_mask, [h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(idx_mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.equal(gt_traj[b_i, :, :, dim - 1], ones * z)",
                            "Call"
                        ],
                        [
                            "tf.logical_and(idx_mask, tf.cast(obj_mask, tf.bool))",
                            "Call"
                        ],
                        [
                            "tf.reshape(idx_mask, [h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(idx_mask, tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "squared_difference_81": {
                "x": {
                    "value": "pred_traj[b_i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "gt_traj[b_i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_sum_85": {
                "input_tensor": {
                    "value": "friend_mask * pull_mask",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_92": {
                "x": {
                    "value": "obj_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "obj_mask_origin[b_i]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_99": {
                "input_tensor": {
                    "value": "idx_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(gt_traj[b_i, :, :, 2], ones * z)",
                            "Call"
                        ],
                        [
                            "tf.reshape(idx_mask, [h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(idx_mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.equal(gt_traj[b_i, :, :, dim - 1], ones * z)",
                            "Call"
                        ],
                        [
                            "tf.logical_and(idx_mask, tf.cast(obj_mask, tf.bool))",
                            "Call"
                        ],
                        [
                            "tf.reshape(idx_mask, [h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(idx_mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.equal(gt_traj[b_i, :, :, dim - 1], ones * z)",
                            "Call"
                        ],
                        [
                            "tf.logical_and(idx_mask, tf.cast(obj_mask, tf.bool))",
                            "Call"
                        ],
                        [
                            "tf.reshape(idx_mask, [h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(idx_mask, tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_103": {
                "input_tensor": {
                    "value": "idx_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(gt_traj[b_i, :, :, 2], ones * z)",
                            "Call"
                        ],
                        [
                            "tf.reshape(idx_mask, [h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(idx_mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.equal(gt_traj[b_i, :, :, dim - 1], ones * z)",
                            "Call"
                        ],
                        [
                            "tf.logical_and(idx_mask, tf.cast(obj_mask, tf.bool))",
                            "Call"
                        ],
                        [
                            "tf.reshape(idx_mask, [h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(idx_mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.equal(gt_traj[b_i, :, :, dim - 1], ones * z)",
                            "Call"
                        ],
                        [
                            "tf.logical_and(idx_mask, tf.cast(obj_mask, tf.bool))",
                            "Call"
                        ],
                        [
                            "tf.reshape(idx_mask, [h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(idx_mask, tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_118": {
                "input_tensor": {
                    "value": "idx_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(gt_traj[b_i, :, :, 2], ones * z)",
                            "Call"
                        ],
                        [
                            "tf.reshape(idx_mask, [h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(idx_mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.equal(gt_traj[b_i, :, :, dim - 1], ones * z)",
                            "Call"
                        ],
                        [
                            "tf.logical_and(idx_mask, tf.cast(obj_mask, tf.bool))",
                            "Call"
                        ],
                        [
                            "tf.reshape(idx_mask, [h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(idx_mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.equal(gt_traj[b_i, :, :, dim - 1], ones * z)",
                            "Call"
                        ],
                        [
                            "tf.logical_and(idx_mask, tf.cast(obj_mask, tf.bool))",
                            "Call"
                        ],
                        [
                            "tf.reshape(idx_mask, [h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(idx_mask, tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_24": {
                "x": {
                    "value": "gt_score",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squared_difference_61": {
                "x": {
                    "value": "tmp_mean_final",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(tmp_mean, [h, w, 1])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "pred_traj[b_i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "squared_difference_118": {
                "x": {
                    "value": "tmp_flow",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack((x, y, z), axis=-1)",
                            "Call"
                        ],
                        [
                            "tmp_flow + tmp_transl - frame2_input_xyz[b_i]",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "gt_flow[b_i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "segNet2/lossf/loss_corr_no_loss.py": {
        "tensorflow": {
            "greater_13": {
                "variable": {
                    "value": "obj_mask_origin",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "gt_traj[:, :, :, 2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.zeros_like(gt_traj[:, :, :, 2])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_14": {
                "variable": {
                    "value": "obj_mask_origin",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "obj_mask_origin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.greater(gt_traj[:, :, :, 2], tf.zeros_like(gt_traj[:, :, :, 2]))",
                            "Call"
                        ],
                        [
                            "tf.cast(obj_mask_origin, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_15": {
                "variable": {
                    "value": "obj_mask_1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "obj_mask_origin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.greater(gt_traj[:, :, :, 2], tf.zeros_like(gt_traj[:, :, :, 2]))",
                            "Call"
                        ],
                        [
                            "tf.cast(obj_mask_origin, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, h, w, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_16": {
                "variable": {
                    "value": "obj_mask_6",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "obj_mask_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(obj_mask_origin, [-1, h, w, 1])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, 1, 1, 6]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_17": {
                "variable": {
                    "value": "obj_mask_3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "obj_mask_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(obj_mask_origin, [-1, h, w, 1])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, 1, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_like_18": {
                "variable": {
                    "value": "obj_tmp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "obj_mask_3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(obj_mask_1, [1, 1, 1, 3])",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_19": {
                "variable": {
                    "value": "obj_final",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[obj_mask_3, obj_tmp]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_21": {
                "variable": {
                    "value": "loss_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sparse_softmax_cross_entropy_with_logits(labels=tf.cast(obj_mask_origin, dtype=tf.int32), logits=pred_mask)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_42": {
                "variable": {
                    "value": "tmp",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gt_traj[b_i, :, :, 2]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(tmp, (-1,))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "unique_43": {
                "variable": {
                    "value": "(y, idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gt_traj[b_i, :, :, 2]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(tmp, (-1,))",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_44": {
                "variable": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(idx, (h, w, 1))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(h, w, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_like_46": {
                "variable": {
                    "value": "ins_tmp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(idx, (h, w, 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_47": {
                "variable": {
                    "value": "ones",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_traj[b_i, :, :, 2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_like_13": {
                "input": {
                    "value": "gt_traj[:, :, :, 2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_with_logits_21": {
                "labels": {
                    "value": "tf.cast(obj_mask_origin, dtype=tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "logits": {
                    "value": "pred_mask",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_sum_24": {
                "input_tensor": {
                    "value": "score_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "obj_mask_origin + 1e-05",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_26": {
                "input_tensor": {
                    "value": "obj_mask_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(obj_mask_origin, [-1, h, w, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_27": {
                "input_tensor": {
                    "value": "obj_mask_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(obj_mask_origin, [-1, h, w, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_29": {
                "input_tensor": {
                    "value": "obj_mask_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(obj_mask_origin, [-1, h, w, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_30": {
                "input_tensor": {
                    "value": "obj_mask_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(obj_mask_origin, [-1, h, w, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_31": {
                "input_tensor": {
                    "value": "obj_mask_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(obj_mask_origin, [-1, h, w, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "acos_32": {
                "x": {
                    "value": "gt_quater[:, :, :, 0:1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_sum_35": {
                "input_tensor": {
                    "value": "obj_mask_1 + 1e-06",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "equal_52": {
                "variable": {
                    "value": "idx_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "gt_traj[b_i, :, :, 2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "ones * z",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_53": {
                "variable": {
                    "value": "idx_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "idx_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(gt_traj[b_i, :, :, 2], ones * z)",
                            "Call"
                        ],
                        [
                            "tf.reshape(idx_mask, [h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(idx_mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.equal(gt_traj[b_i, :, :, dim - 1], ones * z)",
                            "Call"
                        ],
                        [
                            "tf.logical_and(idx_mask, tf.cast(obj_mask, tf.bool))",
                            "Call"
                        ],
                        [
                            "tf.reshape(idx_mask, [h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(idx_mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.equal(gt_traj[b_i, :, :, dim - 1], ones * z)",
                            "Call"
                        ],
                        [
                            "tf.logical_and(idx_mask, tf.cast(obj_mask, tf.bool))",
                            "Call"
                        ],
                        [
                            "tf.reshape(idx_mask, [h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(idx_mask, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[h, w, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_54": {
                "variable": {
                    "value": "idx_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "idx_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(gt_traj[b_i, :, :, 2], ones * z)",
                            "Call"
                        ],
                        [
                            "tf.reshape(idx_mask, [h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(idx_mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.equal(gt_traj[b_i, :, :, dim - 1], ones * z)",
                            "Call"
                        ],
                        [
                            "tf.logical_and(idx_mask, tf.cast(obj_mask, tf.bool))",
                            "Call"
                        ],
                        [
                            "tf.reshape(idx_mask, [h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(idx_mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.equal(gt_traj[b_i, :, :, dim - 1], ones * z)",
                            "Call"
                        ],
                        [
                            "tf.logical_and(idx_mask, tf.cast(obj_mask, tf.bool))",
                            "Call"
                        ],
                        [
                            "tf.reshape(idx_mask, [h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(idx_mask, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tile_55": {
                "variable": {
                    "value": "idx_mask_6d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "idx_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(gt_traj[b_i, :, :, 2], ones * z)",
                            "Call"
                        ],
                        [
                            "tf.reshape(idx_mask, [h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(idx_mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.equal(gt_traj[b_i, :, :, dim - 1], ones * z)",
                            "Call"
                        ],
                        [
                            "tf.logical_and(idx_mask, tf.cast(obj_mask, tf.bool))",
                            "Call"
                        ],
                        [
                            "tf.reshape(idx_mask, [h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(idx_mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.equal(gt_traj[b_i, :, :, dim - 1], ones * z)",
                            "Call"
                        ],
                        [
                            "tf.logical_and(idx_mask, tf.cast(obj_mask, tf.bool))",
                            "Call"
                        ],
                        [
                            "tf.reshape(idx_mask, [h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(idx_mask, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, 1, 6]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_57": {
                "variable": {
                    "value": "tmp_prd",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tmp_prd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "idx_mask_6d * pred_traj[b_i]",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(tmp_prd, (-1, 6))",
                            "Call"
                        ],
                        [
                            "idx_mask_6d * pred_traj[b_i, :, :, 0:6]",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(tmp_prd, (-1, 6))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, 6)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_59": {
                "variable": {
                    "value": "tmp_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tmp_mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tmp_prd, axis=0) / (tf.reduce_sum(idx_mask) + 1e-06)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(tmp_mean, (1, 1, 6))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(1, 1, 6)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tile_60": {
                "variable": {
                    "value": "tmp_mean_final",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tmp_mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tmp_prd, axis=0) / (tf.reduce_sum(idx_mask) + 1e-06)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(tmp_mean, (1, 1, 6))",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[h, w, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "equal_67": {
                "variable": {
                    "value": "idx_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "gt_traj[b_i, :, :, dim - 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "ones * z",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "logical_and_68": {
                "variable": {
                    "value": "idx_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "idx_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(gt_traj[b_i, :, :, 2], ones * z)",
                            "Call"
                        ],
                        [
                            "tf.reshape(idx_mask, [h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(idx_mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.equal(gt_traj[b_i, :, :, dim - 1], ones * z)",
                            "Call"
                        ],
                        [
                            "tf.logical_and(idx_mask, tf.cast(obj_mask, tf.bool))",
                            "Call"
                        ],
                        [
                            "tf.reshape(idx_mask, [h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(idx_mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.equal(gt_traj[b_i, :, :, dim - 1], ones * z)",
                            "Call"
                        ],
                        [
                            "tf.logical_and(idx_mask, tf.cast(obj_mask, tf.bool))",
                            "Call"
                        ],
                        [
                            "tf.reshape(idx_mask, [h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(idx_mask, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.cast(obj_mask, tf.bool)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_69": {
                "variable": {
                    "value": "idx_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "idx_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(gt_traj[b_i, :, :, 2], ones * z)",
                            "Call"
                        ],
                        [
                            "tf.reshape(idx_mask, [h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(idx_mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.equal(gt_traj[b_i, :, :, dim - 1], ones * z)",
                            "Call"
                        ],
                        [
                            "tf.logical_and(idx_mask, tf.cast(obj_mask, tf.bool))",
                            "Call"
                        ],
                        [
                            "tf.reshape(idx_mask, [h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(idx_mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.equal(gt_traj[b_i, :, :, dim - 1], ones * z)",
                            "Call"
                        ],
                        [
                            "tf.logical_and(idx_mask, tf.cast(obj_mask, tf.bool))",
                            "Call"
                        ],
                        [
                            "tf.reshape(idx_mask, [h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(idx_mask, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[h, w, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_70": {
                "variable": {
                    "value": "idx_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "idx_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(gt_traj[b_i, :, :, 2], ones * z)",
                            "Call"
                        ],
                        [
                            "tf.reshape(idx_mask, [h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(idx_mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.equal(gt_traj[b_i, :, :, dim - 1], ones * z)",
                            "Call"
                        ],
                        [
                            "tf.logical_and(idx_mask, tf.cast(obj_mask, tf.bool))",
                            "Call"
                        ],
                        [
                            "tf.reshape(idx_mask, [h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(idx_mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.equal(gt_traj[b_i, :, :, dim - 1], ones * z)",
                            "Call"
                        ],
                        [
                            "tf.logical_and(idx_mask, tf.cast(obj_mask, tf.bool))",
                            "Call"
                        ],
                        [
                            "tf.reshape(idx_mask, [h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(idx_mask, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tile_71": {
                "variable": {
                    "value": "idx_mask_6d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "idx_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(gt_traj[b_i, :, :, 2], ones * z)",
                            "Call"
                        ],
                        [
                            "tf.reshape(idx_mask, [h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(idx_mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.equal(gt_traj[b_i, :, :, dim - 1], ones * z)",
                            "Call"
                        ],
                        [
                            "tf.logical_and(idx_mask, tf.cast(obj_mask, tf.bool))",
                            "Call"
                        ],
                        [
                            "tf.reshape(idx_mask, [h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(idx_mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.equal(gt_traj[b_i, :, :, dim - 1], ones * z)",
                            "Call"
                        ],
                        [
                            "tf.logical_and(idx_mask, tf.cast(obj_mask, tf.bool))",
                            "Call"
                        ],
                        [
                            "tf.reshape(idx_mask, [h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(idx_mask, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, 1, 6]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_74": {
                "variable": {
                    "value": "tmp_prd",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tmp_prd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "idx_mask_6d * pred_traj[b_i]",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(tmp_prd, (-1, 6))",
                            "Call"
                        ],
                        [
                            "idx_mask_6d * pred_traj[b_i, :, :, 0:6]",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(tmp_prd, (-1, 6))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, 6)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reduce_sum_81": {
                "variable": {
                    "value": "l2_error",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.squared_difference(pred_traj[b_i], gt_traj[b_i])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_82": {
                "variable": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "l2_error",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.squared_difference(pred_traj[b_i], gt_traj[b_i]), 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "less_83": {
                "variable": {
                    "value": "pull_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "r * ones",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sqrt(l2_error)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_84": {
                "variable": {
                    "value": "pull_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "pull_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.less(r * ones, dist)",
                            "Call"
                        ],
                        [
                            "tf.cast(pull_mask, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_91": {
                "variable": {
                    "value": "idx_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "gt_traj[b_i, :, :, dim - 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "ones * z",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "logical_and_92": {
                "variable": {
                    "value": "idx_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "idx_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(gt_traj[b_i, :, :, 2], ones * z)",
                            "Call"
                        ],
                        [
                            "tf.reshape(idx_mask, [h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(idx_mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.equal(gt_traj[b_i, :, :, dim - 1], ones * z)",
                            "Call"
                        ],
                        [
                            "tf.logical_and(idx_mask, tf.cast(obj_mask, tf.bool))",
                            "Call"
                        ],
                        [
                            "tf.reshape(idx_mask, [h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(idx_mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.equal(gt_traj[b_i, :, :, dim - 1], ones * z)",
                            "Call"
                        ],
                        [
                            "tf.logical_and(idx_mask, tf.cast(obj_mask, tf.bool))",
                            "Call"
                        ],
                        [
                            "tf.reshape(idx_mask, [h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(idx_mask, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.cast(obj_mask, tf.bool)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_93": {
                "variable": {
                    "value": "idx_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "idx_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(gt_traj[b_i, :, :, 2], ones * z)",
                            "Call"
                        ],
                        [
                            "tf.reshape(idx_mask, [h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(idx_mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.equal(gt_traj[b_i, :, :, dim - 1], ones * z)",
                            "Call"
                        ],
                        [
                            "tf.logical_and(idx_mask, tf.cast(obj_mask, tf.bool))",
                            "Call"
                        ],
                        [
                            "tf.reshape(idx_mask, [h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(idx_mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.equal(gt_traj[b_i, :, :, dim - 1], ones * z)",
                            "Call"
                        ],
                        [
                            "tf.logical_and(idx_mask, tf.cast(obj_mask, tf.bool))",
                            "Call"
                        ],
                        [
                            "tf.reshape(idx_mask, [h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(idx_mask, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[h, w, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_94": {
                "variable": {
                    "value": "idx_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "idx_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(gt_traj[b_i, :, :, 2], ones * z)",
                            "Call"
                        ],
                        [
                            "tf.reshape(idx_mask, [h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(idx_mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.equal(gt_traj[b_i, :, :, dim - 1], ones * z)",
                            "Call"
                        ],
                        [
                            "tf.logical_and(idx_mask, tf.cast(obj_mask, tf.bool))",
                            "Call"
                        ],
                        [
                            "tf.reshape(idx_mask, [h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(idx_mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.equal(gt_traj[b_i, :, :, dim - 1], ones * z)",
                            "Call"
                        ],
                        [
                            "tf.logical_and(idx_mask, tf.cast(obj_mask, tf.bool))",
                            "Call"
                        ],
                        [
                            "tf.reshape(idx_mask, [h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(idx_mask, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tile_95": {
                "variable": {
                    "value": "idx_mask_3d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "idx_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(gt_traj[b_i, :, :, 2], ones * z)",
                            "Call"
                        ],
                        [
                            "tf.reshape(idx_mask, [h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(idx_mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.equal(gt_traj[b_i, :, :, dim - 1], ones * z)",
                            "Call"
                        ],
                        [
                            "tf.logical_and(idx_mask, tf.cast(obj_mask, tf.bool))",
                            "Call"
                        ],
                        [
                            "tf.reshape(idx_mask, [h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(idx_mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.equal(gt_traj[b_i, :, :, dim - 1], ones * z)",
                            "Call"
                        ],
                        [
                            "tf.logical_and(idx_mask, tf.cast(obj_mask, tf.bool))",
                            "Call"
                        ],
                        [
                            "tf.reshape(idx_mask, [h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(idx_mask, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_98": {
                "variable": {
                    "value": "tmp_quater",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tmp_quater",
                    "type": "variable",
                    "possible_values": [
                        [
                            "idx_mask_3d * pred_quater[b_i, :, :, 0:3]",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(tmp_quater, (-1, 3))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tmp_quater, axis=0) / (tf.reduce_sum(idx_mask) + 1e-06)",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_102": {
                "variable": {
                    "value": "tmp_transl",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tmp_transl",
                    "type": "variable",
                    "possible_values": [
                        [
                            "idx_mask_3d * pred_transl[b_i, :, :, 0:3]",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(tmp_transl, (-1, 3))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tmp_transl, axis=0) / (tf.reduce_sum(idx_mask) + 1e-06)",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "unstack_105": {
                "variable": {
                    "value": "(w1, x1, y1, z1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "tmp_quater",
                    "type": "variable",
                    "possible_values": [
                        [
                            "idx_mask_3d * pred_quater[b_i, :, :, 0:3]",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(tmp_quater, (-1, 3))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tmp_quater, axis=0) / (tf.reduce_sum(idx_mask) + 1e-06)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unstack_106": {
                "variable": {
                    "value": "(x2, y2, z2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "frame2_input_xyz[b_i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_116": {
                "variable": {
                    "value": "tmp_flow",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(x, y, z)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cast_21": {
                "x": {
                    "value": "obj_mask_origin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.greater(gt_traj[:, :, :, 2], tf.zeros_like(gt_traj[:, :, :, 2]))",
                            "Call"
                        ],
                        [
                            "tf.cast(obj_mask_origin, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_with_logits_24": {
                "labels": {
                    "value": "tf.cast(gt_score, dtype=tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "logits": {
                    "value": "pred_score",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "squared_difference_26": {
                "x": {
                    "value": "pred_traj[:, :, :, 0:3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "gt_traj[:, :, :, 0:3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "squared_difference_27": {
                "x": {
                    "value": "pred_traj[:, :, :, 3:6]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "gt_traj[:, :, :, 3:6]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "squared_difference_29": {
                "x": {
                    "value": "gt_r",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "pred_r",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "squared_difference_30": {
                "x": {
                    "value": "pred_flow",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "gt_flow",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "squared_difference_31": {
                "x": {
                    "value": "pred_transl",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "gt_transl",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sin_33": {
                "x": {
                    "value": "gt_angle / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "squared_difference_35": {
                "x": {
                    "value": "gt_angle_axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gt_quater[:, :, :, 1:4] / (tf.sin(gt_angle / 2) + 1e-06) * gt_angle",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "pred_quater",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_sum_58": {
                "input_tensor": {
                    "value": "idx_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(gt_traj[b_i, :, :, 2], ones * z)",
                            "Call"
                        ],
                        [
                            "tf.reshape(idx_mask, [h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(idx_mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.equal(gt_traj[b_i, :, :, dim - 1], ones * z)",
                            "Call"
                        ],
                        [
                            "tf.logical_and(idx_mask, tf.cast(obj_mask, tf.bool))",
                            "Call"
                        ],
                        [
                            "tf.reshape(idx_mask, [h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(idx_mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.equal(gt_traj[b_i, :, :, dim - 1], ones * z)",
                            "Call"
                        ],
                        [
                            "tf.logical_and(idx_mask, tf.cast(obj_mask, tf.bool))",
                            "Call"
                        ],
                        [
                            "tf.reshape(idx_mask, [h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(idx_mask, tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_61": {
                "input_tensor": {
                    "value": "idx_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(gt_traj[b_i, :, :, 2], ones * z)",
                            "Call"
                        ],
                        [
                            "tf.reshape(idx_mask, [h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(idx_mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.equal(gt_traj[b_i, :, :, dim - 1], ones * z)",
                            "Call"
                        ],
                        [
                            "tf.logical_and(idx_mask, tf.cast(obj_mask, tf.bool))",
                            "Call"
                        ],
                        [
                            "tf.reshape(idx_mask, [h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(idx_mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.equal(gt_traj[b_i, :, :, dim - 1], ones * z)",
                            "Call"
                        ],
                        [
                            "tf.logical_and(idx_mask, tf.cast(obj_mask, tf.bool))",
                            "Call"
                        ],
                        [
                            "tf.reshape(idx_mask, [h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(idx_mask, tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_68": {
                "x": {
                    "value": "obj_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "obj_mask_origin[b_i]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_77": {
                "input_tensor": {
                    "value": "idx_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(gt_traj[b_i, :, :, 2], ones * z)",
                            "Call"
                        ],
                        [
                            "tf.reshape(idx_mask, [h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(idx_mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.equal(gt_traj[b_i, :, :, dim - 1], ones * z)",
                            "Call"
                        ],
                        [
                            "tf.logical_and(idx_mask, tf.cast(obj_mask, tf.bool))",
                            "Call"
                        ],
                        [
                            "tf.reshape(idx_mask, [h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(idx_mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.equal(gt_traj[b_i, :, :, dim - 1], ones * z)",
                            "Call"
                        ],
                        [
                            "tf.logical_and(idx_mask, tf.cast(obj_mask, tf.bool))",
                            "Call"
                        ],
                        [
                            "tf.reshape(idx_mask, [h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(idx_mask, tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "squared_difference_81": {
                "x": {
                    "value": "pred_traj[b_i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "gt_traj[b_i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_sum_85": {
                "input_tensor": {
                    "value": "friend_mask * pull_mask",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_92": {
                "x": {
                    "value": "obj_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "obj_mask_origin[b_i]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_99": {
                "input_tensor": {
                    "value": "idx_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(gt_traj[b_i, :, :, 2], ones * z)",
                            "Call"
                        ],
                        [
                            "tf.reshape(idx_mask, [h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(idx_mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.equal(gt_traj[b_i, :, :, dim - 1], ones * z)",
                            "Call"
                        ],
                        [
                            "tf.logical_and(idx_mask, tf.cast(obj_mask, tf.bool))",
                            "Call"
                        ],
                        [
                            "tf.reshape(idx_mask, [h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(idx_mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.equal(gt_traj[b_i, :, :, dim - 1], ones * z)",
                            "Call"
                        ],
                        [
                            "tf.logical_and(idx_mask, tf.cast(obj_mask, tf.bool))",
                            "Call"
                        ],
                        [
                            "tf.reshape(idx_mask, [h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(idx_mask, tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_103": {
                "input_tensor": {
                    "value": "idx_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(gt_traj[b_i, :, :, 2], ones * z)",
                            "Call"
                        ],
                        [
                            "tf.reshape(idx_mask, [h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(idx_mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.equal(gt_traj[b_i, :, :, dim - 1], ones * z)",
                            "Call"
                        ],
                        [
                            "tf.logical_and(idx_mask, tf.cast(obj_mask, tf.bool))",
                            "Call"
                        ],
                        [
                            "tf.reshape(idx_mask, [h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(idx_mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.equal(gt_traj[b_i, :, :, dim - 1], ones * z)",
                            "Call"
                        ],
                        [
                            "tf.logical_and(idx_mask, tf.cast(obj_mask, tf.bool))",
                            "Call"
                        ],
                        [
                            "tf.reshape(idx_mask, [h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(idx_mask, tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_118": {
                "input_tensor": {
                    "value": "idx_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(gt_traj[b_i, :, :, 2], ones * z)",
                            "Call"
                        ],
                        [
                            "tf.reshape(idx_mask, [h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(idx_mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.equal(gt_traj[b_i, :, :, dim - 1], ones * z)",
                            "Call"
                        ],
                        [
                            "tf.logical_and(idx_mask, tf.cast(obj_mask, tf.bool))",
                            "Call"
                        ],
                        [
                            "tf.reshape(idx_mask, [h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(idx_mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.equal(gt_traj[b_i, :, :, dim - 1], ones * z)",
                            "Call"
                        ],
                        [
                            "tf.logical_and(idx_mask, tf.cast(obj_mask, tf.bool))",
                            "Call"
                        ],
                        [
                            "tf.reshape(idx_mask, [h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(idx_mask, tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_24": {
                "x": {
                    "value": "gt_score",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squared_difference_61": {
                "x": {
                    "value": "tmp_mean_final",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(tmp_mean, [h, w, 1])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "pred_traj[b_i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "squared_difference_118": {
                "x": {
                    "value": "tmp_flow",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack((x, y, z), axis=-1)",
                            "Call"
                        ],
                        [
                            "tmp_flow + tmp_transl - frame2_input_xyz[b_i]",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "gt_flow[b_i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "segNet2/lossf/loss_corr_rigid.py": {
        "tensorflow": {
            "greater_13": {
                "variable": {
                    "value": "obj_mask_origin",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "gt_traj[:, :, :, 2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.zeros_like(gt_traj[:, :, :, 2])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_14": {
                "variable": {
                    "value": "obj_mask_origin",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "obj_mask_origin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.greater(gt_traj[:, :, :, 2], tf.zeros_like(gt_traj[:, :, :, 2]))",
                            "Call"
                        ],
                        [
                            "tf.cast(obj_mask_origin, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_15": {
                "variable": {
                    "value": "obj_mask_1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "obj_mask_origin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.greater(gt_traj[:, :, :, 2], tf.zeros_like(gt_traj[:, :, :, 2]))",
                            "Call"
                        ],
                        [
                            "tf.cast(obj_mask_origin, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, h, w, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_16": {
                "variable": {
                    "value": "obj_mask_6",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "obj_mask_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(obj_mask_origin, [-1, h, w, 1])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, 1, 1, 6]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_17": {
                "variable": {
                    "value": "obj_mask_3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "obj_mask_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(obj_mask_origin, [-1, h, w, 1])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, 1, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_like_18": {
                "variable": {
                    "value": "obj_tmp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "obj_mask_3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(obj_mask_1, [1, 1, 1, 3])",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_19": {
                "variable": {
                    "value": "obj_final",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[obj_mask_3, obj_tmp]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_21": {
                "variable": {
                    "value": "loss_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sparse_softmax_cross_entropy_with_logits(labels=tf.cast(obj_mask_origin, dtype=tf.int32), logits=pred_mask)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_43": {
                "variable": {
                    "value": "tmp",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gt_traj[b_i, :, :, 2]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(tmp, (-1,))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "unique_44": {
                "variable": {
                    "value": "(y, idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gt_traj[b_i, :, :, 2]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(tmp, (-1,))",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_45": {
                "variable": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(idx, (h, w, 1))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(h, w, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_like_47": {
                "variable": {
                    "value": "ins_tmp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(idx, (h, w, 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_48": {
                "variable": {
                    "value": "ones",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_traj[b_i, :, :, 2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_like_13": {
                "input": {
                    "value": "gt_traj[:, :, :, 2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_with_logits_21": {
                "labels": {
                    "value": "tf.cast(obj_mask_origin, dtype=tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "logits": {
                    "value": "pred_mask",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_sum_24": {
                "input_tensor": {
                    "value": "score_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "obj_mask_origin + 1e-05",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_26": {
                "input_tensor": {
                    "value": "obj_mask_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(obj_mask_origin, [-1, h, w, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_27": {
                "input_tensor": {
                    "value": "obj_mask_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(obj_mask_origin, [-1, h, w, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_29": {
                "input_tensor": {
                    "value": "obj_mask_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(obj_mask_origin, [-1, h, w, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_30": {
                "input_tensor": {
                    "value": "obj_mask_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(obj_mask_origin, [-1, h, w, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_31": {
                "input_tensor": {
                    "value": "obj_mask_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(obj_mask_origin, [-1, h, w, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "acos_32": {
                "x": {
                    "value": "gt_quater[:, :, :, 0:1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_sum_35": {
                "input_tensor": {
                    "value": "obj_mask_1 + 1e-06",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "equal_53": {
                "variable": {
                    "value": "idx_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "gt_traj[b_i, :, :, 2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "ones * z",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_54": {
                "variable": {
                    "value": "idx_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "idx_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(gt_traj[b_i, :, :, 2], ones * z)",
                            "Call"
                        ],
                        [
                            "tf.reshape(idx_mask, [h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(idx_mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.equal(gt_traj[b_i, :, :, dim - 1], ones * z)",
                            "Call"
                        ],
                        [
                            "tf.logical_and(idx_mask, tf.cast(obj_mask, tf.bool))",
                            "Call"
                        ],
                        [
                            "tf.reshape(idx_mask, [h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(idx_mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.equal(gt_traj[b_i, :, :, dim - 1], ones * z)",
                            "Call"
                        ],
                        [
                            "tf.logical_and(idx_mask, tf.cast(obj_mask, tf.bool))",
                            "Call"
                        ],
                        [
                            "tf.reshape(idx_mask, [h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(idx_mask, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[h, w, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_55": {
                "variable": {
                    "value": "idx_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "idx_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(gt_traj[b_i, :, :, 2], ones * z)",
                            "Call"
                        ],
                        [
                            "tf.reshape(idx_mask, [h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(idx_mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.equal(gt_traj[b_i, :, :, dim - 1], ones * z)",
                            "Call"
                        ],
                        [
                            "tf.logical_and(idx_mask, tf.cast(obj_mask, tf.bool))",
                            "Call"
                        ],
                        [
                            "tf.reshape(idx_mask, [h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(idx_mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.equal(gt_traj[b_i, :, :, dim - 1], ones * z)",
                            "Call"
                        ],
                        [
                            "tf.logical_and(idx_mask, tf.cast(obj_mask, tf.bool))",
                            "Call"
                        ],
                        [
                            "tf.reshape(idx_mask, [h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(idx_mask, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tile_56": {
                "variable": {
                    "value": "idx_mask_6d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "idx_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(gt_traj[b_i, :, :, 2], ones * z)",
                            "Call"
                        ],
                        [
                            "tf.reshape(idx_mask, [h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(idx_mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.equal(gt_traj[b_i, :, :, dim - 1], ones * z)",
                            "Call"
                        ],
                        [
                            "tf.logical_and(idx_mask, tf.cast(obj_mask, tf.bool))",
                            "Call"
                        ],
                        [
                            "tf.reshape(idx_mask, [h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(idx_mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.equal(gt_traj[b_i, :, :, dim - 1], ones * z)",
                            "Call"
                        ],
                        [
                            "tf.logical_and(idx_mask, tf.cast(obj_mask, tf.bool))",
                            "Call"
                        ],
                        [
                            "tf.reshape(idx_mask, [h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(idx_mask, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, 1, 6]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_58": {
                "variable": {
                    "value": "tmp_prd",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tmp_prd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "idx_mask_6d * pred_traj[b_i]",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(tmp_prd, (-1, 6))",
                            "Call"
                        ],
                        [
                            "idx_mask_6d * pred_traj[b_i, :, :, 0:6]",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(tmp_prd, (-1, 6))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, 6)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_60": {
                "variable": {
                    "value": "tmp_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tmp_mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tmp_prd, axis=0) / (tf.reduce_sum(idx_mask) + 1e-06)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(tmp_mean, (1, 1, 6))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(1, 1, 6)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tile_61": {
                "variable": {
                    "value": "tmp_mean_final",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tmp_mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tmp_prd, axis=0) / (tf.reduce_sum(idx_mask) + 1e-06)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(tmp_mean, (1, 1, 6))",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[h, w, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_65": {
                "input_tensor": {
                    "value": "tf.map_fn(instance_variance_loss, y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_68": {
                "variable": {
                    "value": "idx_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "gt_traj[b_i, :, :, dim - 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "ones * z",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "logical_and_69": {
                "variable": {
                    "value": "idx_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "idx_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(gt_traj[b_i, :, :, 2], ones * z)",
                            "Call"
                        ],
                        [
                            "tf.reshape(idx_mask, [h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(idx_mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.equal(gt_traj[b_i, :, :, dim - 1], ones * z)",
                            "Call"
                        ],
                        [
                            "tf.logical_and(idx_mask, tf.cast(obj_mask, tf.bool))",
                            "Call"
                        ],
                        [
                            "tf.reshape(idx_mask, [h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(idx_mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.equal(gt_traj[b_i, :, :, dim - 1], ones * z)",
                            "Call"
                        ],
                        [
                            "tf.logical_and(idx_mask, tf.cast(obj_mask, tf.bool))",
                            "Call"
                        ],
                        [
                            "tf.reshape(idx_mask, [h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(idx_mask, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.cast(obj_mask, tf.bool)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_70": {
                "variable": {
                    "value": "idx_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "idx_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(gt_traj[b_i, :, :, 2], ones * z)",
                            "Call"
                        ],
                        [
                            "tf.reshape(idx_mask, [h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(idx_mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.equal(gt_traj[b_i, :, :, dim - 1], ones * z)",
                            "Call"
                        ],
                        [
                            "tf.logical_and(idx_mask, tf.cast(obj_mask, tf.bool))",
                            "Call"
                        ],
                        [
                            "tf.reshape(idx_mask, [h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(idx_mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.equal(gt_traj[b_i, :, :, dim - 1], ones * z)",
                            "Call"
                        ],
                        [
                            "tf.logical_and(idx_mask, tf.cast(obj_mask, tf.bool))",
                            "Call"
                        ],
                        [
                            "tf.reshape(idx_mask, [h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(idx_mask, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[h, w, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_71": {
                "variable": {
                    "value": "idx_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "idx_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(gt_traj[b_i, :, :, 2], ones * z)",
                            "Call"
                        ],
                        [
                            "tf.reshape(idx_mask, [h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(idx_mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.equal(gt_traj[b_i, :, :, dim - 1], ones * z)",
                            "Call"
                        ],
                        [
                            "tf.logical_and(idx_mask, tf.cast(obj_mask, tf.bool))",
                            "Call"
                        ],
                        [
                            "tf.reshape(idx_mask, [h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(idx_mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.equal(gt_traj[b_i, :, :, dim - 1], ones * z)",
                            "Call"
                        ],
                        [
                            "tf.logical_and(idx_mask, tf.cast(obj_mask, tf.bool))",
                            "Call"
                        ],
                        [
                            "tf.reshape(idx_mask, [h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(idx_mask, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tile_72": {
                "variable": {
                    "value": "idx_mask_6d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "idx_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(gt_traj[b_i, :, :, 2], ones * z)",
                            "Call"
                        ],
                        [
                            "tf.reshape(idx_mask, [h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(idx_mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.equal(gt_traj[b_i, :, :, dim - 1], ones * z)",
                            "Call"
                        ],
                        [
                            "tf.logical_and(idx_mask, tf.cast(obj_mask, tf.bool))",
                            "Call"
                        ],
                        [
                            "tf.reshape(idx_mask, [h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(idx_mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.equal(gt_traj[b_i, :, :, dim - 1], ones * z)",
                            "Call"
                        ],
                        [
                            "tf.logical_and(idx_mask, tf.cast(obj_mask, tf.bool))",
                            "Call"
                        ],
                        [
                            "tf.reshape(idx_mask, [h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(idx_mask, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, 1, 6]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_75": {
                "variable": {
                    "value": "tmp_prd",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tmp_prd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "idx_mask_6d * pred_traj[b_i]",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(tmp_prd, (-1, 6))",
                            "Call"
                        ],
                        [
                            "idx_mask_6d * pred_traj[b_i, :, :, 0:6]",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(tmp_prd, (-1, 6))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, 6)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reduce_sum_82": {
                "variable": {
                    "value": "l2_error",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.squared_difference(pred_traj[b_i], gt_traj[b_i])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_83": {
                "variable": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "l2_error",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.squared_difference(pred_traj[b_i], gt_traj[b_i]), 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "less_84": {
                "variable": {
                    "value": "pull_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "r * ones",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sqrt(l2_error)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_85": {
                "variable": {
                    "value": "pull_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "pull_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.less(r * ones, dist)",
                            "Call"
                        ],
                        [
                            "tf.cast(pull_mask, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_89": {
                "input_tensor": {
                    "value": "tf.map_fn(instance_violation_loss, y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_92": {
                "variable": {
                    "value": "idx_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "gt_traj[b_i, :, :, dim - 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "ones * z",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "logical_and_93": {
                "variable": {
                    "value": "idx_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "idx_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(gt_traj[b_i, :, :, 2], ones * z)",
                            "Call"
                        ],
                        [
                            "tf.reshape(idx_mask, [h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(idx_mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.equal(gt_traj[b_i, :, :, dim - 1], ones * z)",
                            "Call"
                        ],
                        [
                            "tf.logical_and(idx_mask, tf.cast(obj_mask, tf.bool))",
                            "Call"
                        ],
                        [
                            "tf.reshape(idx_mask, [h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(idx_mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.equal(gt_traj[b_i, :, :, dim - 1], ones * z)",
                            "Call"
                        ],
                        [
                            "tf.logical_and(idx_mask, tf.cast(obj_mask, tf.bool))",
                            "Call"
                        ],
                        [
                            "tf.reshape(idx_mask, [h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(idx_mask, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.cast(obj_mask, tf.bool)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_94": {
                "variable": {
                    "value": "idx_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "idx_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(gt_traj[b_i, :, :, 2], ones * z)",
                            "Call"
                        ],
                        [
                            "tf.reshape(idx_mask, [h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(idx_mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.equal(gt_traj[b_i, :, :, dim - 1], ones * z)",
                            "Call"
                        ],
                        [
                            "tf.logical_and(idx_mask, tf.cast(obj_mask, tf.bool))",
                            "Call"
                        ],
                        [
                            "tf.reshape(idx_mask, [h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(idx_mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.equal(gt_traj[b_i, :, :, dim - 1], ones * z)",
                            "Call"
                        ],
                        [
                            "tf.logical_and(idx_mask, tf.cast(obj_mask, tf.bool))",
                            "Call"
                        ],
                        [
                            "tf.reshape(idx_mask, [h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(idx_mask, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[h, w, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_95": {
                "variable": {
                    "value": "idx_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "idx_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(gt_traj[b_i, :, :, 2], ones * z)",
                            "Call"
                        ],
                        [
                            "tf.reshape(idx_mask, [h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(idx_mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.equal(gt_traj[b_i, :, :, dim - 1], ones * z)",
                            "Call"
                        ],
                        [
                            "tf.logical_and(idx_mask, tf.cast(obj_mask, tf.bool))",
                            "Call"
                        ],
                        [
                            "tf.reshape(idx_mask, [h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(idx_mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.equal(gt_traj[b_i, :, :, dim - 1], ones * z)",
                            "Call"
                        ],
                        [
                            "tf.logical_and(idx_mask, tf.cast(obj_mask, tf.bool))",
                            "Call"
                        ],
                        [
                            "tf.reshape(idx_mask, [h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(idx_mask, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tile_96": {
                "variable": {
                    "value": "idx_mask_3d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "idx_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(gt_traj[b_i, :, :, 2], ones * z)",
                            "Call"
                        ],
                        [
                            "tf.reshape(idx_mask, [h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(idx_mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.equal(gt_traj[b_i, :, :, dim - 1], ones * z)",
                            "Call"
                        ],
                        [
                            "tf.logical_and(idx_mask, tf.cast(obj_mask, tf.bool))",
                            "Call"
                        ],
                        [
                            "tf.reshape(idx_mask, [h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(idx_mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.equal(gt_traj[b_i, :, :, dim - 1], ones * z)",
                            "Call"
                        ],
                        [
                            "tf.logical_and(idx_mask, tf.cast(obj_mask, tf.bool))",
                            "Call"
                        ],
                        [
                            "tf.reshape(idx_mask, [h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(idx_mask, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_99": {
                "variable": {
                    "value": "tmp_center",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tmp_center",
                    "type": "variable",
                    "possible_values": [
                        [
                            "idx_mask_3d * pred_traj[b_i, :, :, 0:3]",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(tmp_center, (-1, 3))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tmp_center, axis=0) / (tf.reduce_sum(idx_mask) + 1e-06)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(tmp_center, (1, 1, 3))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_101": {
                "variable": {
                    "value": "tmp_center",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tmp_center",
                    "type": "variable",
                    "possible_values": [
                        [
                            "idx_mask_3d * pred_traj[b_i, :, :, 0:3]",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(tmp_center, (-1, 3))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tmp_center, axis=0) / (tf.reduce_sum(idx_mask) + 1e-06)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(tmp_center, (1, 1, 3))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(1, 1, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_104": {
                "variable": {
                    "value": "tmp_rot",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tmp_rot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "idx_mask_3d * pred_quater[b_i, :, :, 0:3]",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(tmp_rot, (-1, 3))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tmp_rot, axis=0) / (tf.reduce_sum(idx_mask) + 1e-06)",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_108": {
                "variable": {
                    "value": "tmp_transl",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tmp_transl",
                    "type": "variable",
                    "possible_values": [
                        [
                            "idx_mask_3d * pred_transl[b_i, :, :, 0:3]",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(tmp_transl, (-1, 3))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tmp_transl, axis=0) / (tf.reduce_sum(idx_mask) + 1e-06)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(tmp_transl, (1, 1, 3))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_110": {
                "variable": {
                    "value": "tmp_transl",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tmp_transl",
                    "type": "variable",
                    "possible_values": [
                        [
                            "idx_mask_3d * pred_transl[b_i, :, :, 0:3]",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(tmp_transl, (-1, 3))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tmp_transl, axis=0) / (tf.reduce_sum(idx_mask) + 1e-06)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(tmp_transl, (1, 1, 3))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(1, 1, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "norm_114": {
                "variable": {
                    "value": "angle",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tmp_rot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "idx_mask_3d * pred_quater[b_i, :, :, 0:3]",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(tmp_rot, (-1, 3))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tmp_rot, axis=0) / (tf.reduce_sum(idx_mask) + 1e-06)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cos_116": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "angle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.norm(tmp_rot)",
                            "Call"
                        ]
                    ]
                }
            },
            "sin_118": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "angle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.norm(tmp_rot)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_133": {
                "variable": {
                    "value": "tmp_flow",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(x, y, z)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_mean_139": {
                "input_tensor": {
                    "value": "tf.map_fn(instance_rigid_loss, y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "map_fn_65": {
                "fn": {
                    "value": "instance_variance_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "elems": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "r10 * tmp_input[:, :, 0] + r11 * tmp_input[:, :, 1] + r12 * tmp_input[:, :, 2]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "map_fn_89": {
                "fn": {
                    "value": "instance_violation_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "elems": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "r10 * tmp_input[:, :, 0] + r11 * tmp_input[:, :, 1] + r12 * tmp_input[:, :, 2]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "map_fn_139": {
                "fn": {
                    "value": "instance_rigid_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "elems": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "r10 * tmp_input[:, :, 0] + r11 * tmp_input[:, :, 1] + r12 * tmp_input[:, :, 2]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cast_21": {
                "x": {
                    "value": "obj_mask_origin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.greater(gt_traj[:, :, :, 2], tf.zeros_like(gt_traj[:, :, :, 2]))",
                            "Call"
                        ],
                        [
                            "tf.cast(obj_mask_origin, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_with_logits_24": {
                "labels": {
                    "value": "tf.cast(gt_score, dtype=tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "logits": {
                    "value": "pred_score",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "squared_difference_26": {
                "x": {
                    "value": "pred_traj[:, :, :, 0:3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "gt_traj[:, :, :, 0:3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "squared_difference_27": {
                "x": {
                    "value": "pred_traj[:, :, :, 3:6]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "gt_traj[:, :, :, 3:6]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "squared_difference_29": {
                "x": {
                    "value": "gt_r",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "pred_r",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "squared_difference_30": {
                "x": {
                    "value": "pred_flow",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "gt_flow",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "squared_difference_31": {
                "x": {
                    "value": "pred_transl",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "gt_transl",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sin_33": {
                "x": {
                    "value": "gt_angle / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "squared_difference_35": {
                "x": {
                    "value": "gt_angle_axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gt_quater[:, :, :, 1:4] / (tf.sin(gt_angle / 2) + 1e-06) * gt_angle",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "pred_quater",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_sum_59": {
                "input_tensor": {
                    "value": "idx_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(gt_traj[b_i, :, :, 2], ones * z)",
                            "Call"
                        ],
                        [
                            "tf.reshape(idx_mask, [h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(idx_mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.equal(gt_traj[b_i, :, :, dim - 1], ones * z)",
                            "Call"
                        ],
                        [
                            "tf.logical_and(idx_mask, tf.cast(obj_mask, tf.bool))",
                            "Call"
                        ],
                        [
                            "tf.reshape(idx_mask, [h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(idx_mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.equal(gt_traj[b_i, :, :, dim - 1], ones * z)",
                            "Call"
                        ],
                        [
                            "tf.logical_and(idx_mask, tf.cast(obj_mask, tf.bool))",
                            "Call"
                        ],
                        [
                            "tf.reshape(idx_mask, [h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(idx_mask, tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_62": {
                "input_tensor": {
                    "value": "idx_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(gt_traj[b_i, :, :, 2], ones * z)",
                            "Call"
                        ],
                        [
                            "tf.reshape(idx_mask, [h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(idx_mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.equal(gt_traj[b_i, :, :, dim - 1], ones * z)",
                            "Call"
                        ],
                        [
                            "tf.logical_and(idx_mask, tf.cast(obj_mask, tf.bool))",
                            "Call"
                        ],
                        [
                            "tf.reshape(idx_mask, [h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(idx_mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.equal(gt_traj[b_i, :, :, dim - 1], ones * z)",
                            "Call"
                        ],
                        [
                            "tf.logical_and(idx_mask, tf.cast(obj_mask, tf.bool))",
                            "Call"
                        ],
                        [
                            "tf.reshape(idx_mask, [h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(idx_mask, tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_69": {
                "x": {
                    "value": "obj_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "obj_mask_origin[b_i]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_78": {
                "input_tensor": {
                    "value": "idx_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(gt_traj[b_i, :, :, 2], ones * z)",
                            "Call"
                        ],
                        [
                            "tf.reshape(idx_mask, [h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(idx_mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.equal(gt_traj[b_i, :, :, dim - 1], ones * z)",
                            "Call"
                        ],
                        [
                            "tf.logical_and(idx_mask, tf.cast(obj_mask, tf.bool))",
                            "Call"
                        ],
                        [
                            "tf.reshape(idx_mask, [h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(idx_mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.equal(gt_traj[b_i, :, :, dim - 1], ones * z)",
                            "Call"
                        ],
                        [
                            "tf.logical_and(idx_mask, tf.cast(obj_mask, tf.bool))",
                            "Call"
                        ],
                        [
                            "tf.reshape(idx_mask, [h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(idx_mask, tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "squared_difference_82": {
                "x": {
                    "value": "pred_traj[b_i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "gt_traj[b_i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_sum_86": {
                "input_tensor": {
                    "value": "friend_mask * pull_mask",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_93": {
                "x": {
                    "value": "obj_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "obj_mask_origin[b_i]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_100": {
                "input_tensor": {
                    "value": "idx_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(gt_traj[b_i, :, :, 2], ones * z)",
                            "Call"
                        ],
                        [
                            "tf.reshape(idx_mask, [h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(idx_mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.equal(gt_traj[b_i, :, :, dim - 1], ones * z)",
                            "Call"
                        ],
                        [
                            "tf.logical_and(idx_mask, tf.cast(obj_mask, tf.bool))",
                            "Call"
                        ],
                        [
                            "tf.reshape(idx_mask, [h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(idx_mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.equal(gt_traj[b_i, :, :, dim - 1], ones * z)",
                            "Call"
                        ],
                        [
                            "tf.logical_and(idx_mask, tf.cast(obj_mask, tf.bool))",
                            "Call"
                        ],
                        [
                            "tf.reshape(idx_mask, [h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(idx_mask, tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_105": {
                "input_tensor": {
                    "value": "idx_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(gt_traj[b_i, :, :, 2], ones * z)",
                            "Call"
                        ],
                        [
                            "tf.reshape(idx_mask, [h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(idx_mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.equal(gt_traj[b_i, :, :, dim - 1], ones * z)",
                            "Call"
                        ],
                        [
                            "tf.logical_and(idx_mask, tf.cast(obj_mask, tf.bool))",
                            "Call"
                        ],
                        [
                            "tf.reshape(idx_mask, [h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(idx_mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.equal(gt_traj[b_i, :, :, dim - 1], ones * z)",
                            "Call"
                        ],
                        [
                            "tf.logical_and(idx_mask, tf.cast(obj_mask, tf.bool))",
                            "Call"
                        ],
                        [
                            "tf.reshape(idx_mask, [h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(idx_mask, tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_109": {
                "input_tensor": {
                    "value": "idx_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(gt_traj[b_i, :, :, 2], ones * z)",
                            "Call"
                        ],
                        [
                            "tf.reshape(idx_mask, [h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(idx_mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.equal(gt_traj[b_i, :, :, dim - 1], ones * z)",
                            "Call"
                        ],
                        [
                            "tf.logical_and(idx_mask, tf.cast(obj_mask, tf.bool))",
                            "Call"
                        ],
                        [
                            "tf.reshape(idx_mask, [h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(idx_mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.equal(gt_traj[b_i, :, :, dim - 1], ones * z)",
                            "Call"
                        ],
                        [
                            "tf.logical_and(idx_mask, tf.cast(obj_mask, tf.bool))",
                            "Call"
                        ],
                        [
                            "tf.reshape(idx_mask, [h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(idx_mask, tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_136": {
                "input_tensor": {
                    "value": "idx_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(gt_traj[b_i, :, :, 2], ones * z)",
                            "Call"
                        ],
                        [
                            "tf.reshape(idx_mask, [h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(idx_mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.equal(gt_traj[b_i, :, :, dim - 1], ones * z)",
                            "Call"
                        ],
                        [
                            "tf.logical_and(idx_mask, tf.cast(obj_mask, tf.bool))",
                            "Call"
                        ],
                        [
                            "tf.reshape(idx_mask, [h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(idx_mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.equal(gt_traj[b_i, :, :, dim - 1], ones * z)",
                            "Call"
                        ],
                        [
                            "tf.logical_and(idx_mask, tf.cast(obj_mask, tf.bool))",
                            "Call"
                        ],
                        [
                            "tf.reshape(idx_mask, [h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(idx_mask, tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_24": {
                "x": {
                    "value": "gt_score",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squared_difference_62": {
                "x": {
                    "value": "tmp_mean_final",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(tmp_mean, [h, w, 1])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "pred_traj[b_i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "squared_difference_136": {
                "x": {
                    "value": "tmp_flow",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack((x, y, z), axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "gt_flow[b_i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "segNet2/models/cc.py": {
        "tensorflow": {
            "name_scope_12": {
                "name": {
                    "value": "model_xyz",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "segNet2/models/nets_factory.py": {
        "tensorflow": {}
    },
    "segNet2/models/resnet_utils.py": {
        "tensorflow": {
            "pad_120": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(inputs, [[0, 0], [pad_beg, pad_end], [pad_beg, pad_end], [0, 0]])",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [pad_beg, pad_end], [pad_beg, pad_end], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "max_pool2d_75": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(inputs, [[0, 0], [pad_beg, pad_end], [pad_beg, pad_end], [0, 0]])",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "factor",
                    "type": "variable",
                    "possible_values": []
                },
                "scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "conv2d_113": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(inputs, [[0, 0], [pad_beg, pad_end], [pad_beg, pad_end], [0, 0]])",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "num_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "strides": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "rate": {
                    "value": "rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "rate * unit_stride",
                            "BinOp"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "conv2d_122": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(inputs, [[0, 0], [pad_beg, pad_end], [pad_beg, pad_end], [0, 0]])",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "num_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "strides": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                },
                "rate": {
                    "value": "rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "rate * unit_stride",
                            "BinOp"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_176": {
                "name_or_scope": {
                    "value": "block.scope",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_name": {
                    "value": "block",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[net]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_181": {
                "name_or_scope": {
                    "value": "'unit_%d' % (i + 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "values": {
                    "value": "[net]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "segNet2/models/resnet_v1.py": {
        "tensorflow": {
            "relu_108": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "shortcut + residual",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_93": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "'resnet_v1_50'",
                            "Method Argument"
                        ],
                        [
                            "'resnet_v1_50'",
                            "Method Argument"
                        ],
                        [
                            "'resnet_v1_101'",
                            "Method Argument"
                        ],
                        [
                            "'resnet_v1_152'",
                            "Method Argument"
                        ],
                        [
                            "'resnet_v1_200'",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "bottleneck_v1",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_182": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "'resnet_v1_50'",
                            "Method Argument"
                        ],
                        [
                            "'resnet_v1_50'",
                            "Method Argument"
                        ],
                        [
                            "'resnet_v1_101'",
                            "Method Argument"
                        ],
                        [
                            "'resnet_v1_152'",
                            "Method Argument"
                        ],
                        [
                            "'resnet_v1_200'",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "resnet_v1",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_mean_199": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "resnet_utils.stack_blocks_dense(net, blocks, output_stride)",
                            "Call"
                        ],
                        [
                            "resnet_utils.conv2d_same(net, 64, 7, stride=2, scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [3, 3], stride=2, scope='pool1')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(net, [1, 2], name='pool5', keep_dims=True)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='logits')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "pool5",
                    "type": "str",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_205": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "resnet_utils.stack_blocks_dense(net, blocks, output_stride)",
                            "Call"
                        ],
                        [
                            "resnet_utils.conv2d_same(net, 64, 7, stride=2, scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [3, 3], stride=2, scope='pool1')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(net, [1, 2], name='pool5', keep_dims=True)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='logits')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "SpatialSqueeze",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "segNet2/models/sceneflownet.py": {
        "tensorflow": {
            "unstack_92": {
                "variable": {
                    "value": "(w1, x1, y1, z1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unstack_93": {
                "variable": {
                    "value": "(w2, x2, y2, z2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_101": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[frame1_xyz, frame1_rgb, frame2_xyz, frame2_rgb]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_109": {
                "variable": {
                    "value": "quaternion_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "quaternion_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.norm(rot_quaternion, axis=3) * tf.sign(rot_quaternion[:, :, :, 0])",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(quaternion_norm, -1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unstack_112": {
                "variable": {
                    "value": "(w1, x1, y1, z1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "x_quaternion",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rot_quaternion / (quaternion_norm + 1e-10)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unstack_113": {
                "variable": {
                    "value": "(x2, y2, z2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "frame2_xyz",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_124": {
                "variable": {
                    "value": "x_flow",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(x, y, z)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "add_132": {
                "variable": {
                    "value": "x_center",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x_center",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tflearn.layers.conv.conv_2d(x_s, 3, (3, 3), strides=1, activation='linear', weight_decay=0.001, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tf.add(x_center, frame2_xyz)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "frame2_xyz",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "unstack_133": {
                "variable": {
                    "value": "(xc, yc, zc)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "x_center",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tflearn.layers.conv.conv_2d(x_s, 3, (3, 3), strides=1, activation='linear', weight_decay=0.001, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tf.add(x_center, frame2_xyz)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_144": {
                "variable": {
                    "value": "x_center_p",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(xc, yc, zc)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_147": {
                "variable": {
                    "value": "x_traj",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[x_center, x_center]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_50": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.add(x, x4)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_57": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.add(x, x3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_64": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.add(x, x2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_98": {
                "input": {
                    "value": "tf.stack((w, x, y, z), axis=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_9": {
                "name_or_scope": {
                    "value": "encodexyz",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_25": {
                "name_or_scope": {
                    "value": "decode",
                    "type": "str",
                    "possible_values": []
                }
            },
            "stack_98": {
                "values": {
                    "value": "(w, x, y, z)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "norm_108": {
                "tensor": {
                    "value": "rot_quaternion",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tflearn.layers.conv.conv_2d(x_s, 4, (3, 3), strides=1, activation='linear', weight_decay=0.001, regularizer='L2')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sign_108": {
                "x": {
                    "value": "rot_quaternion[:, :, :, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "add_50": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tflearn.layers.conv.conv_2d(x, 16, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv1_1')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 16, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv1_2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 16, (3, 3), strides=2, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv1_3')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 16, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv2_1')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 16, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv2_2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 32, (3, 3), strides=2, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv2_3')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 32, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv3_1')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 32, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv3_2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=2, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv3_3')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 128, (5, 5), strides=2, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 128, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 128, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 256, (5, 5), strides=2, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 256, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 256, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 512, (5, 5), strides=2, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 512, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 512, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d_transpose(x, 256, [5, 5], [8, 10], strides=2, activation='linear', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add(x, x4))",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 512, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 256, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d_transpose(x, 128, [5, 5], [15, 20], strides=2, activation='linear', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add(x, x3))",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 128, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 128, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d_transpose(x, 64, [5, 5], [30, 40], strides=2, activation='linear', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add(x, x2))",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 128, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d_transpose(x, 64, [5, 5], [60, 80], strides=2, activation='linear', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='linear', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d_transpose(x, 64, [5, 5], [120, 160], strides=2, activation='linear', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='linear', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d_transpose(x, 64, [5, 5], [240, 320], strides=2, activation='linear', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "w1 * x2 + x1 * w2 + y1 * z2 - z1 * y2",
                            "BinOp"
                        ],
                        [
                            "tf.concat([frame1_xyz, frame1_rgb, frame2_xyz, frame2_rgb], 3)",
                            "Call"
                        ],
                        [
                            "encoder(x)",
                            "Call"
                        ],
                        [
                            "-wm * x1 + xm * w1 - ym * z1 + zm * y1",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "x4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x4, 256, (3, 3), strides=1, activation='linear', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ]
                    ]
                }
            },
            "add_57": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tflearn.layers.conv.conv_2d(x, 16, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv1_1')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 16, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv1_2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 16, (3, 3), strides=2, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv1_3')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 16, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv2_1')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 16, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv2_2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 32, (3, 3), strides=2, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv2_3')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 32, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv3_1')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 32, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv3_2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=2, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv3_3')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 128, (5, 5), strides=2, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 128, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 128, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 256, (5, 5), strides=2, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 256, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 256, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 512, (5, 5), strides=2, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 512, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 512, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d_transpose(x, 256, [5, 5], [8, 10], strides=2, activation='linear', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add(x, x4))",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 512, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 256, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d_transpose(x, 128, [5, 5], [15, 20], strides=2, activation='linear', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add(x, x3))",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 128, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 128, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d_transpose(x, 64, [5, 5], [30, 40], strides=2, activation='linear', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add(x, x2))",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 128, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d_transpose(x, 64, [5, 5], [60, 80], strides=2, activation='linear', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='linear', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d_transpose(x, 64, [5, 5], [120, 160], strides=2, activation='linear', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='linear', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d_transpose(x, 64, [5, 5], [240, 320], strides=2, activation='linear', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "w1 * x2 + x1 * w2 + y1 * z2 - z1 * y2",
                            "BinOp"
                        ],
                        [
                            "tf.concat([frame1_xyz, frame1_rgb, frame2_xyz, frame2_rgb], 3)",
                            "Call"
                        ],
                        [
                            "encoder(x)",
                            "Call"
                        ],
                        [
                            "-wm * x1 + xm * w1 - ym * z1 + zm * y1",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "x3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x3, 128, (3, 3), strides=1, activation='linear', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ]
                    ]
                }
            },
            "add_64": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tflearn.layers.conv.conv_2d(x, 16, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv1_1')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 16, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv1_2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 16, (3, 3), strides=2, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv1_3')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 16, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv2_1')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 16, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv2_2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 32, (3, 3), strides=2, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv2_3')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 32, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv3_1')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 32, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv3_2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=2, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv3_3')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 128, (5, 5), strides=2, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 128, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 128, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 256, (5, 5), strides=2, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 256, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 256, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 512, (5, 5), strides=2, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 512, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 512, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d_transpose(x, 256, [5, 5], [8, 10], strides=2, activation='linear', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add(x, x4))",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 512, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 256, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d_transpose(x, 128, [5, 5], [15, 20], strides=2, activation='linear', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add(x, x3))",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 128, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 128, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d_transpose(x, 64, [5, 5], [30, 40], strides=2, activation='linear', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add(x, x2))",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 128, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d_transpose(x, 64, [5, 5], [60, 80], strides=2, activation='linear', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='linear', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d_transpose(x, 64, [5, 5], [120, 160], strides=2, activation='linear', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='linear', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d_transpose(x, 64, [5, 5], [240, 320], strides=2, activation='linear', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "w1 * x2 + x1 * w2 + y1 * z2 - z1 * y2",
                            "BinOp"
                        ],
                        [
                            "tf.concat([frame1_xyz, frame1_rgb, frame2_xyz, frame2_rgb], 3)",
                            "Call"
                        ],
                        [
                            "encoder(x)",
                            "Call"
                        ],
                        [
                            "-wm * x1 + xm * w1 - ym * z1 + zm * y1",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x2, 64, (3, 3), strides=1, activation='linear', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "segNet2/models/sceneflownet_ccrgb.py": {
        "tensorflow": {
            "transpose_59": {
                "variable": {
                    "value": "frame1_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "frame1_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "encoder(frame1_xyz)",
                            "Call"
                        ],
                        [
                            "tf.transpose(frame1_feat, [0, 3, 1, 2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pad_61": {
                "variable": {
                    "value": "frame1_feat_padded",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "frame1_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "encoder(frame1_xyz)",
                            "Call"
                        ],
                        [
                            "tf.transpose(frame1_feat, [0, 3, 1, 2])",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [0, 0], [rad, rad], [rad, rad]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_70": {
                "variable": {
                    "value": "frame1_list",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "frame1_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.stack(frame1_list, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(frame1_list, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "frame1_list * cc_relu",
                            "BinOp"
                        ],
                        [
                            "tf.nn.max_pool(frame1_list, ksize=[1, 1, dia * dia, 1], strides=[1, 1, dia * dia, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.reshape(frame1_list, (-1, 30, 40, 64))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_71": {
                "variable": {
                    "value": "frame1_list",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "frame1_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.stack(frame1_list, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(frame1_list, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "frame1_list * cc_relu",
                            "BinOp"
                        ],
                        [
                            "tf.nn.max_pool(frame1_list, ksize=[1, 1, dia * dia, 1], strides=[1, 1, dia * dia, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.reshape(frame1_list, (-1, 30, 40, 64))",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_72": {
                "variable": {
                    "value": "cc_relu",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "cc_relu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "LeakyReLU(cc)",
                            "Call"
                        ],
                        [
                            "tf.reshape(cc_relu, [-1, 30 * 40, dia * dia, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 30 * 40, dia * dia, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "max_pool_75": {
                "variable": {
                    "value": "frame1_list",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "frame1_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.stack(frame1_list, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(frame1_list, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "frame1_list * cc_relu",
                            "BinOp"
                        ],
                        [
                            "tf.nn.max_pool(frame1_list, ksize=[1, 1, dia * dia, 1], strides=[1, 1, dia * dia, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.reshape(frame1_list, (-1, 30, 40, 64))",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 1, dia * dia, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, dia * dia, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_76": {
                "variable": {
                    "value": "frame1_list",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "frame1_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.stack(frame1_list, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(frame1_list, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "frame1_list * cc_relu",
                            "BinOp"
                        ],
                        [
                            "tf.nn.max_pool(frame1_list, ksize=[1, 1, dia * dia, 1], strides=[1, 1, dia * dia, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.reshape(frame1_list, (-1, 30, 40, 64))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, 30, 40, 64)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "concat_78": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[frame2_feat, frame1_list]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_105": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.add(x, x4)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_113": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.add(x, x3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_120": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.add(x, x2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_148": {
                "variable": {
                    "value": "pred_frame2_xyz",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "pred_frame2_xyz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tflearn.layers.conv.conv_2d(x_s, 3, (3, 3), strides=1, activation='linear', weight_decay=0.001, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tf.add(pred_frame2_xyz, frame2_xyz)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "frame2_xyz",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "name_scope_10": {
                "name": {
                    "value": "model_rgb",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_26": {
                "name": {
                    "value": "model_xyz",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_67": {
                "variable": {
                    "value": "tmp",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "frame1_feat_padded[:, :, 0 + i:2 * rad + 1 + i, 0 + j:2 * rad + 1 + j]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(tmp, [-1, 64, dia * dia])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 64, dia * dia]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "add_105": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tflearn.layers.conv.conv_2d(x, 16, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv1_1_rgb')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 16, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv1_2_rgb')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 16, (3, 3), strides=2, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv1_3_rgb')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 16, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv2_1_rgb')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 16, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv2_2_rgb')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 32, (3, 3), strides=2, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv2_3_rgb')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 32, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv3_1_rgb')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 32, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv3_2_rgb')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=2, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv3_3_rgb')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 16, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv1_1')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 16, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv1_2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 16, (3, 3), strides=2, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv1_3')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 16, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv2_1')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 16, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv2_2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 32, (3, 3), strides=2, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv2_3')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 32, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv3_1')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 32, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv3_2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=2, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv3_3')",
                            "Call"
                        ],
                        [
                            "tf.concat([frame2_feat, frame1_list], 3)",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 128, (5, 5), strides=2, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 128, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 128, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 256, (5, 5), strides=2, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 256, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 256, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 512, (5, 5), strides=2, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 512, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 512, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d_transpose(x, 256, [5, 5], [8, 10], strides=2, activation='linear', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add(x, x4))",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 512, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 256, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d_transpose(x, 128, [5, 5], [15, 20], strides=2, activation='linear', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add(x, x3))",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 128, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 128, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d_transpose(x, 64, [5, 5], [30, 40], strides=2, activation='linear', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add(x, x2))",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 128, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d_transpose(x, 64, [5, 5], [60, 80], strides=2, activation='linear', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='linear', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d_transpose(x, 64, [5, 5], [120, 160], strides=2, activation='linear', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='linear', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d_transpose(x, 64, [5, 5], [240, 320], strides=2, activation='linear', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "x4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x4, 256, (3, 3), strides=1, activation='linear', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ]
                    ]
                }
            },
            "add_113": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tflearn.layers.conv.conv_2d(x, 16, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv1_1_rgb')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 16, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv1_2_rgb')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 16, (3, 3), strides=2, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv1_3_rgb')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 16, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv2_1_rgb')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 16, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv2_2_rgb')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 32, (3, 3), strides=2, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv2_3_rgb')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 32, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv3_1_rgb')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 32, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv3_2_rgb')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=2, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv3_3_rgb')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 16, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv1_1')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 16, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv1_2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 16, (3, 3), strides=2, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv1_3')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 16, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv2_1')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 16, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv2_2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 32, (3, 3), strides=2, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv2_3')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 32, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv3_1')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 32, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv3_2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=2, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv3_3')",
                            "Call"
                        ],
                        [
                            "tf.concat([frame2_feat, frame1_list], 3)",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 128, (5, 5), strides=2, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 128, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 128, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 256, (5, 5), strides=2, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 256, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 256, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 512, (5, 5), strides=2, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 512, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 512, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d_transpose(x, 256, [5, 5], [8, 10], strides=2, activation='linear', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add(x, x4))",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 512, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 256, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d_transpose(x, 128, [5, 5], [15, 20], strides=2, activation='linear', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add(x, x3))",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 128, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 128, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d_transpose(x, 64, [5, 5], [30, 40], strides=2, activation='linear', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add(x, x2))",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 128, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d_transpose(x, 64, [5, 5], [60, 80], strides=2, activation='linear', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='linear', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d_transpose(x, 64, [5, 5], [120, 160], strides=2, activation='linear', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='linear', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d_transpose(x, 64, [5, 5], [240, 320], strides=2, activation='linear', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "x3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x3, 128, (3, 3), strides=1, activation='linear', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ]
                    ]
                }
            },
            "add_120": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tflearn.layers.conv.conv_2d(x, 16, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv1_1_rgb')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 16, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv1_2_rgb')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 16, (3, 3), strides=2, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv1_3_rgb')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 16, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv2_1_rgb')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 16, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv2_2_rgb')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 32, (3, 3), strides=2, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv2_3_rgb')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 32, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv3_1_rgb')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 32, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv3_2_rgb')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=2, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv3_3_rgb')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 16, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv1_1')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 16, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv1_2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 16, (3, 3), strides=2, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv1_3')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 16, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv2_1')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 16, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv2_2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 32, (3, 3), strides=2, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv2_3')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 32, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv3_1')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 32, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv3_2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=2, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv3_3')",
                            "Call"
                        ],
                        [
                            "tf.concat([frame2_feat, frame1_list], 3)",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 128, (5, 5), strides=2, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 128, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 128, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 256, (5, 5), strides=2, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 256, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 256, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 512, (5, 5), strides=2, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 512, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 512, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d_transpose(x, 256, [5, 5], [8, 10], strides=2, activation='linear', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add(x, x4))",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 512, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 256, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d_transpose(x, 128, [5, 5], [15, 20], strides=2, activation='linear', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add(x, x3))",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 128, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 128, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d_transpose(x, 64, [5, 5], [30, 40], strides=2, activation='linear', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add(x, x2))",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 128, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d_transpose(x, 64, [5, 5], [60, 80], strides=2, activation='linear', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='linear', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d_transpose(x, 64, [5, 5], [120, 160], strides=2, activation='linear', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='linear', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d_transpose(x, 64, [5, 5], [240, 320], strides=2, activation='linear', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x2, 64, (3, 3), strides=1, activation='linear', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "segNet2/models/sceneflownet_corr.py": {
        "tensorflow": {
            "reshape_101": {
                "variable": {
                    "value": "cc",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "cc_o",
                    "type": "variable",
                    "possible_values": [
                        [
                            "correlation(frame2_feat_rgb, frame1_feat_rgb, 1, rad, 1, 1, rad)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 30 * 40, dia * dia, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_102": {
                "variable": {
                    "value": "cc_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "cc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(cc_o, [-1, 30 * 40, dia * dia, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_105": {
                "variable": {
                    "value": "frame1_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "frame1_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "encoder(frame1_xyz)",
                            "Call"
                        ],
                        [
                            "tf.transpose(frame1_feat, [0, 3, 1, 2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pad_106": {
                "variable": {
                    "value": "frame1_feat_padded",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "frame1_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "encoder(frame1_xyz)",
                            "Call"
                        ],
                        [
                            "tf.transpose(frame1_feat, [0, 3, 1, 2])",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [0, 0], [rad, rad], [rad, rad]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_114": {
                "variable": {
                    "value": "frame1_list",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "frame1_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.stack(frame1_list, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(frame1_list, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "frame1_list * cc_weight",
                            "BinOp"
                        ],
                        [
                            "tf.nn.max_pool(frame1_list, ksize=[1, 1, dia * dia, 1], strides=[1, 1, dia * dia, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.reshape(frame1_list, (-1, 30, 40, 64))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_115": {
                "variable": {
                    "value": "frame1_list",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "frame1_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.stack(frame1_list, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(frame1_list, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "frame1_list * cc_weight",
                            "BinOp"
                        ],
                        [
                            "tf.nn.max_pool(frame1_list, ksize=[1, 1, dia * dia, 1], strides=[1, 1, dia * dia, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.reshape(frame1_list, (-1, 30, 40, 64))",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "max_pool_119": {
                "variable": {
                    "value": "frame1_list",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "frame1_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.stack(frame1_list, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(frame1_list, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "frame1_list * cc_weight",
                            "BinOp"
                        ],
                        [
                            "tf.nn.max_pool(frame1_list, ksize=[1, 1, dia * dia, 1], strides=[1, 1, dia * dia, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.reshape(frame1_list, (-1, 30, 40, 64))",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 1, dia * dia, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, dia * dia, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_120": {
                "variable": {
                    "value": "frame1_list",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "frame1_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.stack(frame1_list, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(frame1_list, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "frame1_list * cc_weight",
                            "BinOp"
                        ],
                        [
                            "tf.nn.max_pool(frame1_list, ksize=[1, 1, dia * dia, 1], strides=[1, 1, dia * dia, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.reshape(frame1_list, (-1, 30, 40, 64))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, 30, 40, 64)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "concat_122": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[frame2_feat, frame1_feat_o, frame1_list]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_133": {
                "variable": {
                    "value": "x_center",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x_center",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tflearn.layers.conv.conv_2d(x_s, 3, (3, 3), strides=1, activation='linear', weight_decay=0.001, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tf.add(x_center, frame2_xyz)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "frame2_xyz",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "norm_136": {
                "variable": {
                    "value": "angle",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "rot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tflearn.layers.conv.conv_2d(x_s, 3, (3, 3), strides=1, activation='linear', weight_decay=0.001, regularizer='L2')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_137": {
                "variable": {
                    "value": "angle_",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "angle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.norm(rot, axis=3)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cos_139": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "angle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.norm(rot, axis=3)",
                            "Call"
                        ]
                    ]
                }
            },
            "sin_141": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "angle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.norm(rot, axis=3)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_156": {
                "variable": {
                    "value": "x_flow",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(x, y, z)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_159": {
                "variable": {
                    "value": "x_traj",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[x_center, x_center_p]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_52": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.add(x, x4)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_59": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.add(x, x3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_66": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.add(x, x2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_11": {
                "name_or_scope": {
                    "value": "encodexyz",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_27": {
                "name_or_scope": {
                    "value": "decode",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_112": {
                "variable": {
                    "value": "tmp",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "frame1_feat_padded[:, :, 0 + i:2 * rad + 1 + i, 0 + j:2 * rad + 1 + j]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(tmp, [-1, 64, dia * dia])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 64, dia * dia]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "add_52": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tflearn.layers.conv.conv_2d(x, 16, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv1_1')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 16, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv1_2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 16, (3, 3), strides=2, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv1_3')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 16, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv2_1')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 16, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv2_2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 32, (3, 3), strides=2, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv2_3')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 32, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv3_1')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 32, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv3_2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=2, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv3_3')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 128, (5, 5), strides=2, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 128, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 128, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 256, (5, 5), strides=2, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 256, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 256, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 512, (5, 5), strides=2, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 512, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 512, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d_transpose(x, 256, [5, 5], [8, 10], strides=2, activation='linear', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add(x, x4))",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 512, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 256, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d_transpose(x, 128, [5, 5], [15, 20], strides=2, activation='linear', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add(x, x3))",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 128, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 128, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d_transpose(x, 64, [5, 5], [30, 40], strides=2, activation='linear', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add(x, x2))",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 128, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d_transpose(x, 64, [5, 5], [60, 80], strides=2, activation='linear', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='linear', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d_transpose(x, 64, [5, 5], [120, 160], strides=2, activation='linear', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='linear', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d_transpose(x, 64, [5, 5], [240, 320], strides=2, activation='linear', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tf.concat([frame2_feat, frame1_feat_o, frame1_list], 3)",
                            "Call"
                        ],
                        [
                            "r00 * frame2_xyz_[:, :, :, 0] + r01 * frame2_xyz_[:, :, :, 1] + r02 * frame2_xyz_[:, :, :, 2]",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "x4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x4, 256, (3, 3), strides=1, activation='linear', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ]
                    ]
                }
            },
            "add_59": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tflearn.layers.conv.conv_2d(x, 16, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv1_1')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 16, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv1_2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 16, (3, 3), strides=2, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv1_3')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 16, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv2_1')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 16, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv2_2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 32, (3, 3), strides=2, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv2_3')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 32, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv3_1')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 32, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv3_2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=2, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv3_3')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 128, (5, 5), strides=2, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 128, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 128, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 256, (5, 5), strides=2, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 256, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 256, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 512, (5, 5), strides=2, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 512, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 512, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d_transpose(x, 256, [5, 5], [8, 10], strides=2, activation='linear', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add(x, x4))",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 512, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 256, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d_transpose(x, 128, [5, 5], [15, 20], strides=2, activation='linear', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add(x, x3))",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 128, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 128, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d_transpose(x, 64, [5, 5], [30, 40], strides=2, activation='linear', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add(x, x2))",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 128, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d_transpose(x, 64, [5, 5], [60, 80], strides=2, activation='linear', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='linear', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d_transpose(x, 64, [5, 5], [120, 160], strides=2, activation='linear', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='linear', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d_transpose(x, 64, [5, 5], [240, 320], strides=2, activation='linear', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tf.concat([frame2_feat, frame1_feat_o, frame1_list], 3)",
                            "Call"
                        ],
                        [
                            "r00 * frame2_xyz_[:, :, :, 0] + r01 * frame2_xyz_[:, :, :, 1] + r02 * frame2_xyz_[:, :, :, 2]",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "x3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x3, 128, (3, 3), strides=1, activation='linear', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ]
                    ]
                }
            },
            "add_66": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tflearn.layers.conv.conv_2d(x, 16, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv1_1')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 16, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv1_2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 16, (3, 3), strides=2, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv1_3')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 16, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv2_1')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 16, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv2_2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 32, (3, 3), strides=2, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv2_3')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 32, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv3_1')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 32, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv3_2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=2, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv3_3')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 128, (5, 5), strides=2, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 128, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 128, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 256, (5, 5), strides=2, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 256, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 256, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 512, (5, 5), strides=2, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 512, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 512, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d_transpose(x, 256, [5, 5], [8, 10], strides=2, activation='linear', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add(x, x4))",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 512, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 256, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d_transpose(x, 128, [5, 5], [15, 20], strides=2, activation='linear', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add(x, x3))",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 128, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 128, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d_transpose(x, 64, [5, 5], [30, 40], strides=2, activation='linear', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add(x, x2))",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 128, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d_transpose(x, 64, [5, 5], [60, 80], strides=2, activation='linear', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='linear', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d_transpose(x, 64, [5, 5], [120, 160], strides=2, activation='linear', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='linear', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d_transpose(x, 64, [5, 5], [240, 320], strides=2, activation='linear', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tf.concat([frame2_feat, frame1_feat_o, frame1_list], 3)",
                            "Call"
                        ],
                        [
                            "r00 * frame2_xyz_[:, :, :, 0] + r01 * frame2_xyz_[:, :, :, 1] + r02 * frame2_xyz_[:, :, :, 2]",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x2, 64, (3, 3), strides=1, activation='linear', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "segNet2/models/sceneflownet_final.py": {
        "tensorflow": {
            "reshape_101": {
                "variable": {
                    "value": "cc",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "cc_o",
                    "type": "variable",
                    "possible_values": [
                        [
                            "correlation(frame2_feat_rgb, frame1_feat_rgb, 1, rad, 1, 1, rad)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 30 * 40, dia * dia, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_102": {
                "variable": {
                    "value": "cc_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "cc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(cc_o, [-1, 30 * 40, dia * dia, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_105": {
                "variable": {
                    "value": "frame1_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "frame1_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "encoder(frame1_xyz)",
                            "Call"
                        ],
                        [
                            "tf.transpose(frame1_feat, [0, 3, 1, 2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pad_106": {
                "variable": {
                    "value": "frame1_feat_padded",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "frame1_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "encoder(frame1_xyz)",
                            "Call"
                        ],
                        [
                            "tf.transpose(frame1_feat, [0, 3, 1, 2])",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [0, 0], [rad, rad], [rad, rad]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_113": {
                "variable": {
                    "value": "frame1_list",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "frame1_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.stack(frame1_list, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(frame1_list, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "frame1_list * cc_weight",
                            "BinOp"
                        ],
                        [
                            "tf.nn.max_pool(frame1_list, ksize=[1, 1, dia * dia, 1], strides=[1, 1, dia * dia, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.reshape(frame1_list, (-1, 30, 40, 64))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_114": {
                "variable": {
                    "value": "frame1_list",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "frame1_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.stack(frame1_list, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(frame1_list, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "frame1_list * cc_weight",
                            "BinOp"
                        ],
                        [
                            "tf.nn.max_pool(frame1_list, ksize=[1, 1, dia * dia, 1], strides=[1, 1, dia * dia, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.reshape(frame1_list, (-1, 30, 40, 64))",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "max_pool_118": {
                "variable": {
                    "value": "frame1_list",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "frame1_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.stack(frame1_list, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(frame1_list, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "frame1_list * cc_weight",
                            "BinOp"
                        ],
                        [
                            "tf.nn.max_pool(frame1_list, ksize=[1, 1, dia * dia, 1], strides=[1, 1, dia * dia, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.reshape(frame1_list, (-1, 30, 40, 64))",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 1, dia * dia, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, dia * dia, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_119": {
                "variable": {
                    "value": "frame1_list",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "frame1_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.stack(frame1_list, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(frame1_list, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "frame1_list * cc_weight",
                            "BinOp"
                        ],
                        [
                            "tf.nn.max_pool(frame1_list, ksize=[1, 1, dia * dia, 1], strides=[1, 1, dia * dia, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.reshape(frame1_list, (-1, 30, 40, 64))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, 30, 40, 64)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "concat_121": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[frame2_feat, frame1_feat_o, frame1_list]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_129": {
                "variable": {
                    "value": "quaternion_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "quaternion_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.norm(rot_quaternion, axis=3) * tf.sign(rot_quaternion[:, :, :, 0])",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(quaternion_norm, -1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unstack_132": {
                "variable": {
                    "value": "(w1, x1, y1, z1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "x_quaternion",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rot_quaternion / (quaternion_norm + 1e-06)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unstack_133": {
                "variable": {
                    "value": "(x2, y2, z2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "frame2_xyz",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_144": {
                "variable": {
                    "value": "x_flow",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(x, y, z)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "add_152": {
                "variable": {
                    "value": "x_center",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x_center",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tflearn.layers.conv.conv_2d(x_s, 3, (3, 3), strides=1, activation='linear', weight_decay=0.001, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tf.add(x_center, frame2_xyz)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "frame2_xyz",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "unstack_153": {
                "variable": {
                    "value": "(xc, yc, zc)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "x_center",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tflearn.layers.conv.conv_2d(x_s, 3, (3, 3), strides=1, activation='linear', weight_decay=0.001, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tf.add(x_center, frame2_xyz)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_165": {
                "variable": {
                    "value": "x_traj",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[x_center, x_center_p]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_52": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.add(x, x4)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_59": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.add(x, x3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_66": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.add(x, x2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_11": {
                "name_or_scope": {
                    "value": "encodexyz",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_27": {
                "name_or_scope": {
                    "value": "decode",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_111": {
                "variable": {
                    "value": "tmp",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "frame1_feat_padded[:, :, 0 + i:2 * rad + 1 + i, 0 + j:2 * rad + 1 + j]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(tmp, [-1, 64, dia * dia])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 64, dia * dia]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "norm_128": {
                "tensor": {
                    "value": "rot_quaternion",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tflearn.layers.conv.conv_2d(x_s, 4, (3, 3), strides=1, activation='linear', weight_decay=0.001, regularizer='L2')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sign_128": {
                "x": {
                    "value": "rot_quaternion[:, :, :, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "stack_164": {
                "values": {
                    "value": "(xc, yc, zc)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "add_52": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tflearn.layers.conv.conv_2d(x, 16, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv1_1')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 16, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv1_2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 16, (3, 3), strides=2, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv1_3')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 16, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv2_1')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 16, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv2_2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 32, (3, 3), strides=2, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv2_3')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 32, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv3_1')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 32, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv3_2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=2, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv3_3')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 128, (5, 5), strides=2, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 128, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 128, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 256, (5, 5), strides=2, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 256, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 256, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 512, (5, 5), strides=2, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 512, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 512, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d_transpose(x, 256, [5, 5], [8, 10], strides=2, activation='linear', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add(x, x4))",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 512, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 256, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d_transpose(x, 128, [5, 5], [15, 20], strides=2, activation='linear', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add(x, x3))",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 128, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 128, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d_transpose(x, 64, [5, 5], [30, 40], strides=2, activation='linear', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add(x, x2))",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 128, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d_transpose(x, 64, [5, 5], [60, 80], strides=2, activation='linear', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='linear', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d_transpose(x, 64, [5, 5], [120, 160], strides=2, activation='linear', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='linear', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d_transpose(x, 64, [5, 5], [240, 320], strides=2, activation='linear', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tf.concat([frame2_feat, frame1_feat_o, frame1_list], 3)",
                            "Call"
                        ],
                        [
                            "-wm * x1 + xm * w1 - ym * z1 + zm * y1",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "x4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x4, 256, (3, 3), strides=1, activation='linear', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ]
                    ]
                }
            },
            "add_59": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tflearn.layers.conv.conv_2d(x, 16, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv1_1')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 16, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv1_2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 16, (3, 3), strides=2, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv1_3')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 16, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv2_1')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 16, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv2_2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 32, (3, 3), strides=2, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv2_3')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 32, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv3_1')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 32, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv3_2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=2, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv3_3')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 128, (5, 5), strides=2, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 128, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 128, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 256, (5, 5), strides=2, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 256, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 256, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 512, (5, 5), strides=2, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 512, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 512, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d_transpose(x, 256, [5, 5], [8, 10], strides=2, activation='linear', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add(x, x4))",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 512, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 256, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d_transpose(x, 128, [5, 5], [15, 20], strides=2, activation='linear', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add(x, x3))",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 128, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 128, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d_transpose(x, 64, [5, 5], [30, 40], strides=2, activation='linear', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add(x, x2))",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 128, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d_transpose(x, 64, [5, 5], [60, 80], strides=2, activation='linear', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='linear', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d_transpose(x, 64, [5, 5], [120, 160], strides=2, activation='linear', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='linear', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d_transpose(x, 64, [5, 5], [240, 320], strides=2, activation='linear', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tf.concat([frame2_feat, frame1_feat_o, frame1_list], 3)",
                            "Call"
                        ],
                        [
                            "-wm * x1 + xm * w1 - ym * z1 + zm * y1",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "x3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x3, 128, (3, 3), strides=1, activation='linear', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ]
                    ]
                }
            },
            "add_66": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tflearn.layers.conv.conv_2d(x, 16, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv1_1')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 16, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv1_2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 16, (3, 3), strides=2, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv1_3')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 16, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv2_1')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 16, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv2_2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 32, (3, 3), strides=2, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv2_3')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 32, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv3_1')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 32, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv3_2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=2, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv3_3')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 128, (5, 5), strides=2, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 128, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 128, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 256, (5, 5), strides=2, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 256, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 256, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 512, (5, 5), strides=2, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 512, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 512, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d_transpose(x, 256, [5, 5], [8, 10], strides=2, activation='linear', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add(x, x4))",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 512, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 256, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d_transpose(x, 128, [5, 5], [15, 20], strides=2, activation='linear', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add(x, x3))",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 128, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 128, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d_transpose(x, 64, [5, 5], [30, 40], strides=2, activation='linear', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add(x, x2))",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 128, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d_transpose(x, 64, [5, 5], [60, 80], strides=2, activation='linear', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='linear', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d_transpose(x, 64, [5, 5], [120, 160], strides=2, activation='linear', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='linear', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d_transpose(x, 64, [5, 5], [240, 320], strides=2, activation='linear', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tf.concat([frame2_feat, frame1_feat_o, frame1_list], 3)",
                            "Call"
                        ],
                        [
                            "-wm * x1 + xm * w1 - ym * z1 + zm * y1",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x2, 64, (3, 3), strides=1, activation='linear', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "segNet2/models/sceneflownet_simple.py": {
        "tensorflow": {
            "concat_123": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[frame1_xyz, frame1_rgb, frame2_xyz, frame2_rgb]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_134": {
                "variable": {
                    "value": "x_center",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x_center",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tflearn.layers.conv.conv_2d(x_s, 3, (3, 3), strides=1, activation='linear', weight_decay=0.001, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tf.add(x_center, frame2_xyz)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "frame2_xyz",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "norm_137": {
                "variable": {
                    "value": "angle",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "rot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tflearn.layers.conv.conv_2d(x_s, 3, (3, 3), strides=1, activation='linear', weight_decay=0.001, regularizer='L2')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_138": {
                "variable": {
                    "value": "angle_",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "angle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.norm(rot, axis=3)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cos_140": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "angle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.norm(rot, axis=3)",
                            "Call"
                        ]
                    ]
                }
            },
            "sin_142": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "angle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.norm(rot, axis=3)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_157": {
                "variable": {
                    "value": "x_flow",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(x, y, z)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_160": {
                "variable": {
                    "value": "x_traj",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[x_center, x_center_p]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_52": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.add(x, x4)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_59": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.add(x, x3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_66": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.add(x, x2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_11": {
                "name_or_scope": {
                    "value": "encodexyz",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_27": {
                "name_or_scope": {
                    "value": "decode",
                    "type": "str",
                    "possible_values": []
                }
            },
            "add_52": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tflearn.layers.conv.conv_2d(x, 16, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv1_1')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 16, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv1_2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 16, (3, 3), strides=2, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv1_3')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 16, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv2_1')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 16, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv2_2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 32, (3, 3), strides=2, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv2_3')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 32, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv3_1')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 32, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv3_2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=2, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv3_3')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 128, (5, 5), strides=2, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 128, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 128, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 256, (5, 5), strides=2, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 256, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 256, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 512, (5, 5), strides=2, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 512, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 512, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d_transpose(x, 256, [5, 5], [8, 10], strides=2, activation='linear', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add(x, x4))",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 512, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 256, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d_transpose(x, 128, [5, 5], [15, 20], strides=2, activation='linear', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add(x, x3))",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 128, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 128, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d_transpose(x, 64, [5, 5], [30, 40], strides=2, activation='linear', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add(x, x2))",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 128, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d_transpose(x, 64, [5, 5], [60, 80], strides=2, activation='linear', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='linear', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d_transpose(x, 64, [5, 5], [120, 160], strides=2, activation='linear', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='linear', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d_transpose(x, 64, [5, 5], [240, 320], strides=2, activation='linear', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tf.concat([frame1_xyz, frame1_rgb, frame2_xyz, frame2_rgb], 3)",
                            "Call"
                        ],
                        [
                            "encoder(x)",
                            "Call"
                        ],
                        [
                            "r00 * frame2_xyz_[:, :, :, 0] + r01 * frame2_xyz_[:, :, :, 1] + r02 * frame2_xyz_[:, :, :, 2]",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "x4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x4, 256, (3, 3), strides=1, activation='linear', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ]
                    ]
                }
            },
            "add_59": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tflearn.layers.conv.conv_2d(x, 16, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv1_1')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 16, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv1_2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 16, (3, 3), strides=2, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv1_3')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 16, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv2_1')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 16, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv2_2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 32, (3, 3), strides=2, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv2_3')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 32, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv3_1')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 32, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv3_2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=2, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv3_3')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 128, (5, 5), strides=2, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 128, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 128, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 256, (5, 5), strides=2, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 256, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 256, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 512, (5, 5), strides=2, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 512, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 512, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d_transpose(x, 256, [5, 5], [8, 10], strides=2, activation='linear', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add(x, x4))",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 512, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 256, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d_transpose(x, 128, [5, 5], [15, 20], strides=2, activation='linear', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add(x, x3))",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 128, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 128, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d_transpose(x, 64, [5, 5], [30, 40], strides=2, activation='linear', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add(x, x2))",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 128, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d_transpose(x, 64, [5, 5], [60, 80], strides=2, activation='linear', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='linear', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d_transpose(x, 64, [5, 5], [120, 160], strides=2, activation='linear', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='linear', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d_transpose(x, 64, [5, 5], [240, 320], strides=2, activation='linear', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tf.concat([frame1_xyz, frame1_rgb, frame2_xyz, frame2_rgb], 3)",
                            "Call"
                        ],
                        [
                            "encoder(x)",
                            "Call"
                        ],
                        [
                            "r00 * frame2_xyz_[:, :, :, 0] + r01 * frame2_xyz_[:, :, :, 1] + r02 * frame2_xyz_[:, :, :, 2]",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "x3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x3, 128, (3, 3), strides=1, activation='linear', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ]
                    ]
                }
            },
            "add_66": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tflearn.layers.conv.conv_2d(x, 16, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv1_1')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 16, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv1_2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 16, (3, 3), strides=2, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv1_3')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 16, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv2_1')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 16, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv2_2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 32, (3, 3), strides=2, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv2_3')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 32, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv3_1')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 32, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv3_2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=2, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv3_3')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 128, (5, 5), strides=2, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 128, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 128, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 256, (5, 5), strides=2, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 256, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 256, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 512, (5, 5), strides=2, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 512, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 512, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d_transpose(x, 256, [5, 5], [8, 10], strides=2, activation='linear', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add(x, x4))",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 512, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 256, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d_transpose(x, 128, [5, 5], [15, 20], strides=2, activation='linear', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add(x, x3))",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 128, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 128, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d_transpose(x, 64, [5, 5], [30, 40], strides=2, activation='linear', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add(x, x2))",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 128, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d_transpose(x, 64, [5, 5], [60, 80], strides=2, activation='linear', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='linear', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d_transpose(x, 64, [5, 5], [120, 160], strides=2, activation='linear', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='linear', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d_transpose(x, 64, [5, 5], [240, 320], strides=2, activation='linear', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tf.concat([frame1_xyz, frame1_rgb, frame2_xyz, frame2_rgb], 3)",
                            "Call"
                        ],
                        [
                            "encoder(x)",
                            "Call"
                        ],
                        [
                            "r00 * frame2_xyz_[:, :, :, 0] + r01 * frame2_xyz_[:, :, :, 1] + r02 * frame2_xyz_[:, :, :, 2]",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x2, 64, (3, 3), strides=1, activation='linear', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "segNet2/models/sceneflownet_up.py": {
        "tensorflow": {
            "transpose_49": {
                "variable": {
                    "value": "frame1_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "frame1_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "encoder(frame1_xyz)",
                            "Call"
                        ],
                        [
                            "tf.transpose(frame1_feat, [0, 3, 1, 2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pad_50": {
                "variable": {
                    "value": "frame1_feat_padded",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "frame1_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "encoder(frame1_xyz)",
                            "Call"
                        ],
                        [
                            "tf.transpose(frame1_feat, [0, 3, 1, 2])",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [0, 0], [rad, rad], [rad, rad]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_60": {
                "variable": {
                    "value": "frame1_list",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "frame1_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.stack(frame1_list, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(frame1_list, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "frame1_list * cc",
                            "BinOp"
                        ],
                        [
                            "tf.nn.max_pool(frame1_list, ksize=[1, 1, dia * dia, 1], strides=[1, 1, dia * dia, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.reshape(frame1_list, (-1, 30, 40, 64))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_61": {
                "variable": {
                    "value": "frame1_list",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "frame1_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.stack(frame1_list, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(frame1_list, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "frame1_list * cc",
                            "BinOp"
                        ],
                        [
                            "tf.nn.max_pool(frame1_list, ksize=[1, 1, dia * dia, 1], strides=[1, 1, dia * dia, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.reshape(frame1_list, (-1, 30, 40, 64))",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_62": {
                "variable": {
                    "value": "cc",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "cc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(cc, [-1, 30 * 40, dia * dia, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 30 * 40, dia * dia, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "max_pool_65": {
                "variable": {
                    "value": "frame1_list",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "frame1_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.stack(frame1_list, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(frame1_list, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "frame1_list * cc",
                            "BinOp"
                        ],
                        [
                            "tf.nn.max_pool(frame1_list, ksize=[1, 1, dia * dia, 1], strides=[1, 1, dia * dia, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.reshape(frame1_list, (-1, 30, 40, 64))",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 1, dia * dia, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, dia * dia, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_66": {
                "variable": {
                    "value": "frame1_list",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "frame1_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.stack(frame1_list, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(frame1_list, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "frame1_list * cc",
                            "BinOp"
                        ],
                        [
                            "tf.nn.max_pool(frame1_list, ksize=[1, 1, dia * dia, 1], strides=[1, 1, dia * dia, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.reshape(frame1_list, (-1, 30, 40, 64))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, 30, 40, 64)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "concat_68": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[frame2_feat, frame1_list]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_95": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.add(x, x4)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_103": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.add(x, x3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_110": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.add(x, x2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_138": {
                "variable": {
                    "value": "pred_frame2_xyz",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "pred_frame2_xyz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tflearn.layers.conv.conv_2d(x_s, 3, (3, 3), strides=1, activation='linear', weight_decay=0.001, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tf.add(pred_frame2_xyz, frame2_xyz)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "frame2_xyz",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "name_scope_10": {
                "name": {
                    "value": "model_rgb",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_26": {
                "name": {
                    "value": "model_xyz",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_57": {
                "variable": {
                    "value": "tmp",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "frame1_feat_padded[:, :, 0 + i:2 * rad + 1 + i, 0 + j:2 * rad + 1 + j]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(tmp, [-1, 64, dia * dia])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 64, dia * dia]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "add_95": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tflearn.layers.conv.conv_2d(x, 16, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv1_1_rgb')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 16, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv1_2_rgb')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 16, (3, 3), strides=2, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv1_3_rgb')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 16, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv2_1_rgb')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 16, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv2_2_rgb')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 32, (3, 3), strides=2, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv2_3_rgb')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 32, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv3_1_rgb')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 32, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv3_2_rgb')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=2, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv3_3_rgb')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 16, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv1_1')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 16, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv1_2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 16, (3, 3), strides=2, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv1_3')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 16, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv2_1')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 16, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv2_2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 32, (3, 3), strides=2, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv2_3')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 32, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv3_1')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 32, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv3_2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=2, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv3_3')",
                            "Call"
                        ],
                        [
                            "tf.concat([frame2_feat, frame1_list], 3)",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 128, (5, 5), strides=2, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 128, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 128, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 256, (5, 5), strides=2, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 256, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 256, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 512, (5, 5), strides=2, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 512, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 512, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d_transpose(x, 256, [5, 5], [8, 10], strides=2, activation='linear', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add(x, x4))",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 512, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 256, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d_transpose(x, 128, [5, 5], [15, 20], strides=2, activation='linear', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add(x, x3))",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 128, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 128, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d_transpose(x, 64, [5, 5], [30, 40], strides=2, activation='linear', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add(x, x2))",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 128, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d_transpose(x, 64, [5, 5], [60, 80], strides=2, activation='linear', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='linear', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d_transpose(x, 64, [5, 5], [120, 160], strides=2, activation='linear', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='linear', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d_transpose(x, 64, [5, 5], [240, 320], strides=2, activation='linear', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "x4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x4, 256, (3, 3), strides=1, activation='linear', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ]
                    ]
                }
            },
            "add_103": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tflearn.layers.conv.conv_2d(x, 16, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv1_1_rgb')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 16, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv1_2_rgb')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 16, (3, 3), strides=2, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv1_3_rgb')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 16, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv2_1_rgb')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 16, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv2_2_rgb')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 32, (3, 3), strides=2, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv2_3_rgb')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 32, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv3_1_rgb')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 32, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv3_2_rgb')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=2, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv3_3_rgb')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 16, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv1_1')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 16, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv1_2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 16, (3, 3), strides=2, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv1_3')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 16, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv2_1')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 16, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv2_2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 32, (3, 3), strides=2, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv2_3')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 32, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv3_1')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 32, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv3_2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=2, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv3_3')",
                            "Call"
                        ],
                        [
                            "tf.concat([frame2_feat, frame1_list], 3)",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 128, (5, 5), strides=2, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 128, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 128, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 256, (5, 5), strides=2, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 256, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 256, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 512, (5, 5), strides=2, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 512, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 512, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d_transpose(x, 256, [5, 5], [8, 10], strides=2, activation='linear', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add(x, x4))",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 512, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 256, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d_transpose(x, 128, [5, 5], [15, 20], strides=2, activation='linear', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add(x, x3))",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 128, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 128, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d_transpose(x, 64, [5, 5], [30, 40], strides=2, activation='linear', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add(x, x2))",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 128, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d_transpose(x, 64, [5, 5], [60, 80], strides=2, activation='linear', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='linear', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d_transpose(x, 64, [5, 5], [120, 160], strides=2, activation='linear', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='linear', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d_transpose(x, 64, [5, 5], [240, 320], strides=2, activation='linear', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "x3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x3, 128, (3, 3), strides=1, activation='linear', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ]
                    ]
                }
            },
            "add_110": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tflearn.layers.conv.conv_2d(x, 16, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv1_1_rgb')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 16, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv1_2_rgb')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 16, (3, 3), strides=2, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv1_3_rgb')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 16, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv2_1_rgb')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 16, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv2_2_rgb')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 32, (3, 3), strides=2, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv2_3_rgb')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 32, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv3_1_rgb')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 32, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv3_2_rgb')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=2, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv3_3_rgb')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 16, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv1_1')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 16, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv1_2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 16, (3, 3), strides=2, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv1_3')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 16, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv2_1')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 16, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv2_2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 32, (3, 3), strides=2, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv2_3')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 32, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv3_1')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 32, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv3_2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=2, activation='relu', weight_decay=1e-05, regularizer='L2', reuse=reuse, scope='conv3_3')",
                            "Call"
                        ],
                        [
                            "tf.concat([frame2_feat, frame1_list], 3)",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 128, (5, 5), strides=2, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 128, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 128, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 256, (5, 5), strides=2, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 256, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 256, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 512, (5, 5), strides=2, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 512, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 512, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d_transpose(x, 256, [5, 5], [8, 10], strides=2, activation='linear', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add(x, x4))",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 512, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 256, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d_transpose(x, 128, [5, 5], [15, 20], strides=2, activation='linear', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add(x, x3))",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 128, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 128, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d_transpose(x, 64, [5, 5], [30, 40], strides=2, activation='linear', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add(x, x2))",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 128, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d_transpose(x, 64, [5, 5], [60, 80], strides=2, activation='linear', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='linear', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d_transpose(x, 64, [5, 5], [120, 160], strides=2, activation='linear', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='linear', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d_transpose(x, 64, [5, 5], [240, 320], strides=2, activation='linear', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x, 64, (3, 3), strides=1, activation='relu', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "tflearn.layers.conv.conv_2d(x2, 64, (3, 3), strides=1, activation='linear', weight_decay=1e-05, regularizer='L2')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "segNet2/models/utils.py": {
        "tensorflow": {
            "variable_scope_5": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'lrelu'",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "segNet2/preprocess/Dataset.py": {
        "tensorflow": {
            "TFRecordWriter_109": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "path": {
                    "value": "total_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(DATA_DIR, 'Tfrecords_test', str(db.base) + db.tfrecords_filename)",
                            "Call"
                        ]
                    ]
                }
            },
            "Feature_24": {
                "int64_list": {
                    "value": "tf.train.Int64List(value=[value])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_27": {
                "bytes_list": {
                    "value": "tf.train.BytesList(value=[value])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Example_146": {
                "variable": {
                    "value": "example",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.train.Features(feature={'instance_id': _int64_feature(instance_id), 'in_1frame_xyz': _bytes_feature(ins_1frame_xyz), 'in_2frame_xyz': _bytes_feature(ins_2frame_xyz), 'in_1frame_rgb': _bytes_feature(ins_1frame_rgb), 'in_2frame_rgb': _bytes_feature(ins_2frame_rgb), 'outs_2frame_xyz': _bytes_feature(outs_2frame_xyz), 'outs_2frame_r': _bytes_feature(outs_2frame_r), 'outs_2frame_score': _bytes_feature(outs_2frame_score), 'outs_end_center': _bytes_feature(outs_end_center), 'outs_transl': _bytes_feature(outs_transl), 'outs_rot': _bytes_feature(outs_rot), 'outs_flow': _bytes_feature(outs_flow)})",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Int64List_24": {
                "value": {
                    "value": "[value]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "BytesList_27": {
                "value": {
                    "value": "[value]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Features_146": {
                "feature": {
                    "value": "{'instance_id': _int64_feature(instance_id), 'in_1frame_xyz': _bytes_feature(ins_1frame_xyz), 'in_2frame_xyz': _bytes_feature(ins_2frame_xyz), 'in_1frame_rgb': _bytes_feature(ins_1frame_rgb), 'in_2frame_rgb': _bytes_feature(ins_2frame_rgb), 'outs_2frame_xyz': _bytes_feature(outs_2frame_xyz), 'outs_2frame_r': _bytes_feature(outs_2frame_r), 'outs_2frame_score': _bytes_feature(outs_2frame_score), 'outs_end_center': _bytes_feature(outs_end_center), 'outs_transl': _bytes_feature(outs_transl), 'outs_rot': _bytes_feature(outs_rot), 'outs_flow': _bytes_feature(outs_flow)}",
                    "type": "Dict",
                    "possible_values": []
                }
            }
        }
    },
    "segNet2/preprocess/Loader.py": {
        "tensorflow": {}
    },
    "segNet2/src/correlation.py": {
        "tensorflow": {
            "load_op_library_3": {
                "variable": {
                    "value": "_correlation_ops",
                    "type": "variable",
                    "possible_values": []
                },
                "library_filename": {
                    "value": "tf.resource_loader.get_path_to_datafile('./ops/build/correlation.so')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "RegisterGradient_17": {
                "op_type": {
                    "value": "Correlation",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_path_to_datafile_4": {
                "path": {
                    "value": "./ops/build/correlation.so",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "segNet2/src/corrtest.py": {
        "tensorflow": {
            "Session_19": {
                "target": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ones_21": {
                "variable": {
                    "value": "fmA",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(BATCH_SIZE, HEIGHT, WIDTH, CHANNELS)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_22": {
                "variable": {
                    "value": "fmB",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np.random.randint(1, 5, size=(BATCH_SIZE, HEIGHT, WIDTH, CHANNELS))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_30": {
                "target": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_34": {
                "variable": {
                    "value": "fmA",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "fmA1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.ones((BATCH_SIZE, HEIGHT, WIDTH, CHANNELS)).astype('float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "Variable_35": {
                "variable": {
                    "value": "fmB",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "fmB1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.randn(BATCH_SIZE, HEIGHT, WIDTH, CHANNELS).astype('float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_37": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "corr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "correlation(fmA, fmB, 1, 1, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "correlation(fmA, fmB, 1, 1, 1, 1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "GradientDescentOptimizer_38": {
                "variable": {
                    "value": "train",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "device_20": {
                "device_name": {
                    "value": "/gpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_33": {
                "device_name": {
                    "value": "/gpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "initialize_all_variables_24": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "initialize_all_variables_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "gradients_40": {
                "ys": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(corr)",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "[corr]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gradients_41": {
                "ys": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(corr)",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "[fmB]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gradients_42": {
                "ys": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(corr)",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "[fmA]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "segNet2/tf_libs/save_result.py": {
        "tensorflow": {}
    },
    "segNet2/tf_libs/sceneflownet_experiment_corr.py": {
        "tensorflow": {
            "Saver_78": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "self.flags.max_model_to_keep",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "group_79": {
                "variable": {
                    "value": "init_op",
                    "type": "variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "tf.global_variables_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "tf.local_variables_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ConfigProto_81": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_83": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "Variable_112": {
                "variable": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "concat_145": {
                "variable": {
                    "value": "self.gt[traj]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "values": {
                    "value": "[self.gt['frame2_xyz'], self.gt['end_center']]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_148": {
                "variable": {
                    "value": "self.pred[frame2_mask_truncated]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x": {
                    "value": "self.pred['frame2_mask_truncated']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_149": {
                "variable": {
                    "value": "self.pred[frame2_mask_truncated_1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.pred['frame2_mask_truncated']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 240, 320, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_150": {
                "variable": {
                    "value": "self.pred[frame2_mask_truncated_6]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "self.pred['frame2_mask_truncated_1']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, 1, 6]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_151": {
                "variable": {
                    "value": "self.pred[frame2_mask_truncated_3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "self.pred['frame2_mask_truncated_1']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Coordinator_249": {
                "variable": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "start_queue_runners_250": {
                "variable": {
                    "value": "threads",
                    "type": "variable",
                    "possible_values": []
                },
                "sess": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "coord": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ],
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ],
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ],
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ]
                    ]
                }
            },
            "Coordinator_317": {
                "variable": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "start_queue_runners_318": {
                "variable": {
                    "value": "threads",
                    "type": "variable",
                    "possible_values": []
                },
                "sess": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "coord": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ],
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ],
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ],
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ]
                    ]
                }
            },
            "Coordinator_385": {
                "variable": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "start_queue_runners_386": {
                "variable": {
                    "value": "threads",
                    "type": "variable",
                    "possible_values": []
                },
                "sess": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "coord": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ],
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ],
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ],
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ]
                    ]
                }
            },
            "Coordinator_526": {
                "variable": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "start_queue_runners_527": {
                "variable": {
                    "value": "threads",
                    "type": "variable",
                    "possible_values": []
                },
                "sess": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "coord": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ],
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ],
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ],
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ]
                    ]
                }
            },
            "Saver_102": {
                "variable": {
                    "value": "restorer",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "vars_to_restore",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_var_list_to_restore_by_name('res')",
                            "Call"
                        ],
                        [
                            "get_var_list_to_restore()",
                            "Call"
                        ]
                    ]
                }
            },
            "AdamOptimizer_208": {
                "variable": {
                    "value": "self.train_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.flags.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_79": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_80": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_92": {
                "variable": {
                    "value": "restorer",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "vars_to_restore",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_var_list_to_restore_by_name('res')",
                            "Call"
                        ],
                        [
                            "get_var_list_to_restore()",
                            "Call"
                        ]
                    ]
                }
            },
            "import_meta_graph_95": {
                "variable": {
                    "value": "new_saver",
                    "type": "variable",
                    "possible_values": []
                },
                "meta_graph_or_file": {
                    "value": "os.path.join(self.flags.model_save_dir, '-0.meta')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "trainable_variables_105": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sigmoid_146": {
                "x": {
                    "value": "self.pred['frame2_mask']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sigmoid_159": {
                "x": {
                    "value": "self.pred['frame2_score']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reset_default_graph_189": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "segNet2/tf_libs/sceneflownet_experiment_corr_no_loss.py": {
        "tensorflow": {
            "Saver_54": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "self.flags.max_model_to_keep",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "group_55": {
                "variable": {
                    "value": "init_op",
                    "type": "variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "tf.global_variables_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "tf.local_variables_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ConfigProto_57": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_59": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "Variable_88": {
                "variable": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "concat_121": {
                "variable": {
                    "value": "self.gt[traj]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "values": {
                    "value": "[self.gt['frame2_xyz'], self.gt['end_center']]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_124": {
                "variable": {
                    "value": "self.pred[frame2_mask_truncated]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x": {
                    "value": "self.pred['frame2_mask_truncated']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_125": {
                "variable": {
                    "value": "self.pred[frame2_mask_truncated_1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.pred['frame2_mask_truncated']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 240, 320, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_126": {
                "variable": {
                    "value": "self.pred[frame2_mask_truncated_6]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "self.pred['frame2_mask_truncated_1']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, 1, 6]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_127": {
                "variable": {
                    "value": "self.pred[frame2_mask_truncated_3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "self.pred['frame2_mask_truncated_1']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Coordinator_223": {
                "variable": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "start_queue_runners_224": {
                "variable": {
                    "value": "threads",
                    "type": "variable",
                    "possible_values": []
                },
                "sess": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "coord": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ],
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ],
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ],
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ]
                    ]
                }
            },
            "Coordinator_287": {
                "variable": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "start_queue_runners_288": {
                "variable": {
                    "value": "threads",
                    "type": "variable",
                    "possible_values": []
                },
                "sess": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "coord": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ],
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ],
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ],
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ]
                    ]
                }
            },
            "Coordinator_350": {
                "variable": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "start_queue_runners_351": {
                "variable": {
                    "value": "threads",
                    "type": "variable",
                    "possible_values": []
                },
                "sess": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "coord": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ],
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ],
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ],
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ]
                    ]
                }
            },
            "Coordinator_444": {
                "variable": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "start_queue_runners_445": {
                "variable": {
                    "value": "threads",
                    "type": "variable",
                    "possible_values": []
                },
                "sess": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "coord": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ],
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ],
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ],
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ]
                    ]
                }
            },
            "Saver_78": {
                "variable": {
                    "value": "restorer",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "vars_to_restore",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_var_list_to_restore_by_name('res')",
                            "Call"
                        ],
                        [
                            "get_var_list_to_restore()",
                            "Call"
                        ]
                    ]
                }
            },
            "AdamOptimizer_182": {
                "variable": {
                    "value": "self.train_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.flags.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_55": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_56": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_68": {
                "variable": {
                    "value": "restorer",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "vars_to_restore",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_var_list_to_restore_by_name('res')",
                            "Call"
                        ],
                        [
                            "get_var_list_to_restore()",
                            "Call"
                        ]
                    ]
                }
            },
            "import_meta_graph_71": {
                "variable": {
                    "value": "new_saver",
                    "type": "variable",
                    "possible_values": []
                },
                "meta_graph_or_file": {
                    "value": "os.path.join(self.flags.model_save_dir, '-0.meta')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "trainable_variables_81": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sigmoid_122": {
                "x": {
                    "value": "self.pred['frame2_mask']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sigmoid_135": {
                "x": {
                    "value": "self.pred['frame2_score']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reset_default_graph_163": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "segNet2/tf_libs/sceneflownet_experiment_corr_rigid.py": {
        "tensorflow": {
            "Saver_54": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "self.flags.max_model_to_keep",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "group_55": {
                "variable": {
                    "value": "init_op",
                    "type": "variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "tf.global_variables_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "tf.local_variables_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ConfigProto_57": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_59": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "Variable_88": {
                "variable": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "concat_121": {
                "variable": {
                    "value": "self.gt[traj]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "values": {
                    "value": "[self.gt['frame2_xyz'], self.gt['end_center']]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_124": {
                "variable": {
                    "value": "self.pred[frame2_mask_truncated]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x": {
                    "value": "self.pred['frame2_mask_truncated']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_125": {
                "variable": {
                    "value": "self.pred[frame2_mask_truncated_1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.pred['frame2_mask_truncated']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 240, 320, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_126": {
                "variable": {
                    "value": "self.pred[frame2_mask_truncated_6]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "self.pred['frame2_mask_truncated_1']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, 1, 6]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_127": {
                "variable": {
                    "value": "self.pred[frame2_mask_truncated_3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "self.pred['frame2_mask_truncated_1']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Coordinator_227": {
                "variable": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "start_queue_runners_228": {
                "variable": {
                    "value": "threads",
                    "type": "variable",
                    "possible_values": []
                },
                "sess": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "coord": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ],
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ],
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ],
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ]
                    ]
                }
            },
            "Coordinator_297": {
                "variable": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "start_queue_runners_298": {
                "variable": {
                    "value": "threads",
                    "type": "variable",
                    "possible_values": []
                },
                "sess": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "coord": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ],
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ],
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ],
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ]
                    ]
                }
            },
            "Coordinator_360": {
                "variable": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "start_queue_runners_361": {
                "variable": {
                    "value": "threads",
                    "type": "variable",
                    "possible_values": []
                },
                "sess": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "coord": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ],
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ],
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ],
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ]
                    ]
                }
            },
            "Coordinator_444": {
                "variable": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "start_queue_runners_445": {
                "variable": {
                    "value": "threads",
                    "type": "variable",
                    "possible_values": []
                },
                "sess": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "coord": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ],
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ],
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ],
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ]
                    ]
                }
            },
            "Saver_78": {
                "variable": {
                    "value": "restorer",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "vars_to_restore",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_var_list_to_restore_by_name('res')",
                            "Call"
                        ],
                        [
                            "get_var_list_to_restore()",
                            "Call"
                        ]
                    ]
                }
            },
            "AdamOptimizer_186": {
                "variable": {
                    "value": "self.train_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.flags.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_55": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_56": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_68": {
                "variable": {
                    "value": "restorer",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "vars_to_restore",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_var_list_to_restore_by_name('res')",
                            "Call"
                        ],
                        [
                            "get_var_list_to_restore()",
                            "Call"
                        ]
                    ]
                }
            },
            "import_meta_graph_71": {
                "variable": {
                    "value": "new_saver",
                    "type": "variable",
                    "possible_values": []
                },
                "meta_graph_or_file": {
                    "value": "os.path.join(self.flags.model_save_dir, '-0.meta')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "trainable_variables_81": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sigmoid_122": {
                "x": {
                    "value": "self.pred['frame2_mask']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sigmoid_135": {
                "x": {
                    "value": "self.pred['frame2_score']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reset_default_graph_167": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "segNet2/tf_libs/sceneflownet_experiment_simple.py": {
        "tensorflow": {
            "Saver_54": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "self.flags.max_model_to_keep",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "group_55": {
                "variable": {
                    "value": "init_op",
                    "type": "variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "tf.global_variables_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "tf.local_variables_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ConfigProto_57": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_59": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "Variable_88": {
                "variable": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "concat_121": {
                "variable": {
                    "value": "self.gt[traj]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "values": {
                    "value": "[self.gt['frame2_xyz'], self.gt['end_center']]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_124": {
                "variable": {
                    "value": "self.pred[frame2_mask_truncated]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x": {
                    "value": "self.pred['frame2_mask_truncated']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_125": {
                "variable": {
                    "value": "self.pred[frame2_mask_truncated_1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.pred['frame2_mask_truncated']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 240, 320, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_126": {
                "variable": {
                    "value": "self.pred[frame2_mask_truncated_6]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "self.pred['frame2_mask_truncated_1']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, 1, 6]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_127": {
                "variable": {
                    "value": "self.pred[frame2_mask_truncated_3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "self.pred['frame2_mask_truncated_1']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Coordinator_223": {
                "variable": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "start_queue_runners_224": {
                "variable": {
                    "value": "threads",
                    "type": "variable",
                    "possible_values": []
                },
                "sess": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "coord": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ],
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ],
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ],
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ]
                    ]
                }
            },
            "Coordinator_287": {
                "variable": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "start_queue_runners_288": {
                "variable": {
                    "value": "threads",
                    "type": "variable",
                    "possible_values": []
                },
                "sess": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "coord": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ],
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ],
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ],
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ]
                    ]
                }
            },
            "Coordinator_351": {
                "variable": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "start_queue_runners_352": {
                "variable": {
                    "value": "threads",
                    "type": "variable",
                    "possible_values": []
                },
                "sess": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "coord": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ],
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ],
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ],
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ]
                    ]
                }
            },
            "Coordinator_450": {
                "variable": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "start_queue_runners_451": {
                "variable": {
                    "value": "threads",
                    "type": "variable",
                    "possible_values": []
                },
                "sess": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "coord": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ],
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ],
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ],
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ]
                    ]
                }
            },
            "AdamOptimizer_182": {
                "variable": {
                    "value": "self.train_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.flags.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_55": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_56": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_68": {
                "variable": {
                    "value": "restorer",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "vars_to_restore",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_var_list_to_restore_by_name('res')",
                            "Call"
                        ],
                        [
                            "get_var_list_to_restore()",
                            "Call"
                        ]
                    ]
                }
            },
            "import_meta_graph_71": {
                "variable": {
                    "value": "new_saver",
                    "type": "variable",
                    "possible_values": []
                },
                "meta_graph_or_file": {
                    "value": "os.path.join(self.flags.model_save_dir, '-0.meta')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_122": {
                "x": {
                    "value": "self.pred['frame2_mask']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sigmoid_135": {
                "x": {
                    "value": "self.pred['frame2_score']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reset_default_graph_163": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "segNet2/tf_libs/tf_logging.py": {
        "tensorflow": {}
    },
    "segNet2/tf_libs/tfrecords.py": {
        "tensorflow": {
            "TFRecordReader_16": {
                "variable": {
                    "value": "reader",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "parse_single_example_18": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "serialized": {
                    "value": "serialized_example",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "{'in_1frame_xyz': tf.FixedLenFeature([], tf.string), 'in_2frame_xyz': tf.FixedLenFeature([], tf.string), 'in_1frame_rgb': tf.FixedLenFeature([], tf.string), 'in_2frame_rgb': tf.FixedLenFeature([], tf.string), 'outs_2frame_xyz': tf.FixedLenFeature([], tf.string), 'outs_2frame_r': tf.FixedLenFeature([], tf.string), 'outs_2frame_score': tf.FixedLenFeature([], tf.string), 'outs_flow': tf.FixedLenFeature([], tf.string), 'outs_end_center': tf.FixedLenFeature([], tf.string), 'outs_transl': tf.FixedLenFeature([], tf.string), 'outs_rot': tf.FixedLenFeature([], tf.string), 'instance_id': tf.FixedLenFeature([], tf.int64)}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "decode_raw_36": {
                "variable": {
                    "value": "in_1frame_xyz",
                    "type": "variable",
                    "possible_values": []
                },
                "input_bytes": {
                    "value": "features['in_1frame_xyz']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_type": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "decode_raw_37": {
                "variable": {
                    "value": "in_2frame_xyz",
                    "type": "variable",
                    "possible_values": []
                },
                "input_bytes": {
                    "value": "features['in_2frame_xyz']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_type": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "decode_raw_38": {
                "variable": {
                    "value": "in_1frame_rgb",
                    "type": "variable",
                    "possible_values": []
                },
                "input_bytes": {
                    "value": "features['in_1frame_rgb']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_type": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "decode_raw_39": {
                "variable": {
                    "value": "in_2frame_rgb",
                    "type": "variable",
                    "possible_values": []
                },
                "input_bytes": {
                    "value": "features['in_2frame_rgb']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_type": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "decode_raw_41": {
                "variable": {
                    "value": "outs_2frame_xyz",
                    "type": "variable",
                    "possible_values": []
                },
                "input_bytes": {
                    "value": "features['outs_2frame_xyz']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_type": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "decode_raw_42": {
                "variable": {
                    "value": "outs_2frame_score",
                    "type": "variable",
                    "possible_values": []
                },
                "input_bytes": {
                    "value": "features['outs_2frame_score']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_type": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "decode_raw_43": {
                "variable": {
                    "value": "outs_2frame_r",
                    "type": "variable",
                    "possible_values": []
                },
                "input_bytes": {
                    "value": "features['outs_2frame_r']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_type": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "decode_raw_44": {
                "variable": {
                    "value": "outs_flow",
                    "type": "variable",
                    "possible_values": []
                },
                "input_bytes": {
                    "value": "features['outs_flow']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_type": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "decode_raw_45": {
                "variable": {
                    "value": "outs_end_center",
                    "type": "variable",
                    "possible_values": []
                },
                "input_bytes": {
                    "value": "features['outs_end_center']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_type": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "decode_raw_46": {
                "variable": {
                    "value": "outs_transl",
                    "type": "variable",
                    "possible_values": []
                },
                "input_bytes": {
                    "value": "features['outs_transl']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_type": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "decode_raw_47": {
                "variable": {
                    "value": "outs_quater",
                    "type": "variable",
                    "possible_values": []
                },
                "input_bytes": {
                    "value": "features['outs_rot']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_type": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_49": {
                "variable": {
                    "value": "in_1frame_xyz",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "in_1frame_xyz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.decode_raw(features['in_1frame_xyz'], tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(in_1frame_xyz, [h, w, 3])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[h, w, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_50": {
                "variable": {
                    "value": "in_2frame_xyz",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "in_2frame_xyz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.decode_raw(features['in_2frame_xyz'], tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(in_2frame_xyz, [h, w, 3])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[h, w, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_51": {
                "variable": {
                    "value": "in_1frame_rgb",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "in_1frame_rgb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.decode_raw(features['in_1frame_rgb'], tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(in_1frame_rgb, [h, w, 3])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[h, w, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_52": {
                "variable": {
                    "value": "in_2frame_rgb",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "in_2frame_rgb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.decode_raw(features['in_2frame_rgb'], tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(in_2frame_rgb, [h, w, 3])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[h, w, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_54": {
                "variable": {
                    "value": "outs_2frame_xyz",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "outs_2frame_xyz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.decode_raw(features['outs_2frame_xyz'], tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(outs_2frame_xyz, [h, w, 3])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[h, w, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_56": {
                "variable": {
                    "value": "outs_2frame_r",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "outs_2frame_r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.decode_raw(features['outs_2frame_r'], tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(outs_2frame_r, [h, w, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[h, w, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_57": {
                "variable": {
                    "value": "outs_2frame_score",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "outs_2frame_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.decode_raw(features['outs_2frame_score'], tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(outs_2frame_score, [h, w])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[h, w]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_58": {
                "variable": {
                    "value": "outs_transl",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "outs_transl",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.decode_raw(features['outs_transl'], tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(outs_transl, [h, w, 3])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[h, w, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_59": {
                "variable": {
                    "value": "outs_quater",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "outs_quater",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.decode_raw(features['outs_rot'], tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(outs_quater, [h, w, 4])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[h, w, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_61": {
                "variable": {
                    "value": "outs_flow",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "outs_flow",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.decode_raw(features['outs_flow'], tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(outs_flow, [h, w, 3])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[h, w, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_62": {
                "variable": {
                    "value": "outs_end_center",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "outs_end_center",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.decode_raw(features['outs_end_center'], tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(outs_end_center, [h, w, 3])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[h, w, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_64": {
                "variable": {
                    "value": "instance_id",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "features['instance_id']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "string_input_producer_85": {
                "variable": {
                    "value": "filename_queue",
                    "type": "variable",
                    "possible_values": []
                },
                "string_tensor": {
                    "value": "tfrecords_filename",
                    "type": "variable",
                    "possible_values": []
                },
                "num_epochs": {
                    "value": "num_epochs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shuffle_batch_111": {
                "variable": {
                    "value": "(in_1frame_xyz, in_1frame_rgb, in_2frame_xyz, in_2frame_rgb, gt_2frame_xyz, gt_2frame_r, gt_2frame_score, gt_end_center, gt_flow, gt_trans, gt_quater, instance_id)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[in_1frame_xyz_, in_1frame_rgb_, in_2frame_xyz_, in_2frame_rgb_, gt_2frame_xyz_, gt_2frame_r_, gt_2frame_score_, gt_end_center_, gt_flow_, gt_trans_, gt_quater_, instance_id_]",
                    "type": "List",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "num_threads": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "capacity": {
                    "value": "2 * batch_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min_after_dequeue": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "name_scope_84": {
                "name": {
                    "value": "inputf",
                    "type": "str",
                    "possible_values": []
                }
            },
            "FixedLenFeature_22": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_23": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_24": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_25": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_26": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_27": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_28": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_29": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_30": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_31": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_32": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_33": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "segNet2/tf_libs/train_utils.py": {
        "tensorflow": {
            "model_variables_29": {
                "variable": {
                    "value": "variables_to_restore",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "model_variables_62": {
                "variable": {
                    "value": "variables_to_restore",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "model_variables_22": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "model_variables_55": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "segNet2/trainvaltest_corr.py": {
        "tensorflow": {
            "set_random_seed_21": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "42",
                            "int"
                        ]
                    ]
                }
            }
        }
    },
    "segNet2/trainvaltest_corr_no_loss.py": {
        "tensorflow": {
            "set_random_seed_21": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "42",
                            "int"
                        ]
                    ]
                }
            }
        }
    },
    "segNet2/trainvaltest_corr_rigid.py": {
        "tensorflow": {
            "set_random_seed_21": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "42",
                            "int"
                        ]
                    ]
                }
            }
        }
    },
    "segNet2/trainvaltest_simple.py": {
        "tensorflow": {
            "set_random_seed_21": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "42",
                            "int"
                        ]
                    ]
                }
            }
        }
    }
}