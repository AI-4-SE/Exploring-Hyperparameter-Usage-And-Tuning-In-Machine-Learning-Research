{
    "src/evaluate.py": {
        "sklearn": {},
        "tensorflow": {
            "load_model_38": {
                "variable": {
                    "value": "classifier",
                    "type": "Variable",
                    "possible_values": []
                },
                "filepath": {
                    "value": "model_dir",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "softmax_43": {
                "variable": {
                    "value": "predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "classifier(image)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "src/autoaugment.py": {
        "tensorflow": {
            "shape_61": {
                "variable": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "to_4d(image)",
                            "Call"
                        ],
                        [
                            "image_ops.transform(images=image, transforms=transforms, interpolation='nearest')",
                            "Call"
                        ],
                        [
                            "to_4d(image)",
                            "Call"
                        ],
                        [
                            "transform(image, transforms=transforms)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(mask, 0), tf.ones_like(image, dtype=image.dtype) * replace, image)",
                            "Call"
                        ],
                        [
                            "rotate(wrap(image), degrees=degrees)",
                            "Call"
                        ],
                        [
                            "translate(wrap(image), [-pixels, 0])",
                            "Call"
                        ],
                        [
                            "translate(wrap(image), [0, -pixels])",
                            "Call"
                        ],
                        [
                            "transform(image=wrap(image), transforms=[1.0, level, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "transform(image=wrap(image), transforms=[1.0, 0.0, 0.0, level, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(image)",
                            "Call"
                        ],
                        [
                            "tf.reshape(flattened_image, image_shape)",
                            "Call"
                        ],
                        [
                            "tf.slice(image, [0, 0, 0], [image_shape[0], image_shape[1], 3])",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(i, policy_to_select), lambda selected_policy=policy: selected_policy(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "select_and_apply_random_policy(tf_policies, image)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=input_image_type)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=input_image_type)",
                            "Call"
                        ],
                        [
                            "tf.switch_case(branch_index=op_to_select, branch_fns=branch_fns, default=lambda : tf.identity(image))",
                            "Call"
                        ]
                    ]
                }
            },
            "rank_62": {
                "variable": {
                    "value": "original_rank",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "to_4d(image)",
                            "Call"
                        ],
                        [
                            "image_ops.transform(images=image, transforms=transforms, interpolation='nearest')",
                            "Call"
                        ],
                        [
                            "to_4d(image)",
                            "Call"
                        ],
                        [
                            "transform(image, transforms=transforms)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(mask, 0), tf.ones_like(image, dtype=image.dtype) * replace, image)",
                            "Call"
                        ],
                        [
                            "rotate(wrap(image), degrees=degrees)",
                            "Call"
                        ],
                        [
                            "translate(wrap(image), [-pixels, 0])",
                            "Call"
                        ],
                        [
                            "translate(wrap(image), [0, -pixels])",
                            "Call"
                        ],
                        [
                            "transform(image=wrap(image), transforms=[1.0, level, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "transform(image=wrap(image), transforms=[1.0, 0.0, 0.0, level, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(image)",
                            "Call"
                        ],
                        [
                            "tf.reshape(flattened_image, image_shape)",
                            "Call"
                        ],
                        [
                            "tf.slice(image, [0, 0, 0], [image_shape[0], image_shape[1], 3])",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(i, policy_to_select), lambda selected_policy=policy: selected_policy(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "select_and_apply_random_policy(tf_policies, image)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=input_image_type)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=input_image_type)",
                            "Call"
                        ],
                        [
                            "tf.switch_case(branch_index=op_to_select, branch_fns=branch_fns, default=lambda : tf.identity(image))",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_63": {
                "variable": {
                    "value": "left_pad",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.less_equal(original_rank, 3)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_64": {
                "variable": {
                    "value": "right_pad",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.equal(original_rank, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_65": {
                "variable": {
                    "value": "new_shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.ones(shape=left_pad, dtype=tf.int32), shape, tf.ones(shape=right_pad, dtype=tf.int32)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "shape_78": {
                "variable": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "to_4d(image)",
                            "Call"
                        ],
                        [
                            "image_ops.transform(images=image, transforms=transforms, interpolation='nearest')",
                            "Call"
                        ],
                        [
                            "to_4d(image)",
                            "Call"
                        ],
                        [
                            "transform(image, transforms=transforms)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(mask, 0), tf.ones_like(image, dtype=image.dtype) * replace, image)",
                            "Call"
                        ],
                        [
                            "rotate(wrap(image), degrees=degrees)",
                            "Call"
                        ],
                        [
                            "translate(wrap(image), [-pixels, 0])",
                            "Call"
                        ],
                        [
                            "translate(wrap(image), [0, -pixels])",
                            "Call"
                        ],
                        [
                            "transform(image=wrap(image), transforms=[1.0, level, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "transform(image=wrap(image), transforms=[1.0, 0.0, 0.0, level, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(image)",
                            "Call"
                        ],
                        [
                            "tf.reshape(flattened_image, image_shape)",
                            "Call"
                        ],
                        [
                            "tf.slice(image, [0, 0, 0], [image_shape[0], image_shape[1], 3])",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(i, policy_to_select), lambda selected_policy=policy: selected_policy(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "select_and_apply_random_policy(tf_policies, image)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=input_image_type)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=input_image_type)",
                            "Call"
                        ],
                        [
                            "tf.switch_case(branch_index=op_to_select, branch_fns=branch_fns, default=lambda : tf.identity(image))",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_79": {
                "variable": {
                    "value": "begin",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.less_equal(ndims, 3)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_106": {
                "variable": {
                    "value": "translations",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "translations",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(translations, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "translations[None]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_146": {
                "variable": {
                    "value": "angles",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "angles",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(angles, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "angles[None]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rank_182": {
                "variable": {
                    "value": "original_ndims",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "to_4d(image)",
                            "Call"
                        ],
                        [
                            "image_ops.transform(images=image, transforms=transforms, interpolation='nearest')",
                            "Call"
                        ],
                        [
                            "to_4d(image)",
                            "Call"
                        ],
                        [
                            "transform(image, transforms=transforms)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(mask, 0), tf.ones_like(image, dtype=image.dtype) * replace, image)",
                            "Call"
                        ],
                        [
                            "rotate(wrap(image), degrees=degrees)",
                            "Call"
                        ],
                        [
                            "translate(wrap(image), [-pixels, 0])",
                            "Call"
                        ],
                        [
                            "translate(wrap(image), [0, -pixels])",
                            "Call"
                        ],
                        [
                            "transform(image=wrap(image), transforms=[1.0, level, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "transform(image=wrap(image), transforms=[1.0, 0.0, 0.0, level, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(image)",
                            "Call"
                        ],
                        [
                            "tf.reshape(flattened_image, image_shape)",
                            "Call"
                        ],
                        [
                            "tf.slice(image, [0, 0, 0], [image_shape[0], image_shape[1], 3])",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(i, policy_to_select), lambda selected_policy=policy: selected_policy(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "select_and_apply_random_policy(tf_policies, image)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=input_image_type)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=input_image_type)",
                            "Call"
                        ],
                        [
                            "tf.switch_case(branch_index=op_to_select, branch_fns=branch_fns, default=lambda : tf.identity(image))",
                            "Call"
                        ]
                    ]
                }
            },
            "convert_to_tensor_183": {
                "variable": {
                    "value": "transforms",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "transforms",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(transforms, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "transforms[None]",
                            "Subscript"
                        ],
                        [
                            "_convert_translation_to_transform(translations)",
                            "Call"
                        ],
                        [
                            "_convert_angles_to_transform(angles=radians, image_width=image_width, image_height=image_height)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_221": {
                "variable": {
                    "value": "radians",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "degrees * degrees_to_radians",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rank_223": {
                "variable": {
                    "value": "original_ndims",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "to_4d(image)",
                            "Call"
                        ],
                        [
                            "image_ops.transform(images=image, transforms=transforms, interpolation='nearest')",
                            "Call"
                        ],
                        [
                            "to_4d(image)",
                            "Call"
                        ],
                        [
                            "transform(image, transforms=transforms)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(mask, 0), tf.ones_like(image, dtype=image.dtype) * replace, image)",
                            "Call"
                        ],
                        [
                            "rotate(wrap(image), degrees=degrees)",
                            "Call"
                        ],
                        [
                            "translate(wrap(image), [-pixels, 0])",
                            "Call"
                        ],
                        [
                            "translate(wrap(image), [0, -pixels])",
                            "Call"
                        ],
                        [
                            "transform(image=wrap(image), transforms=[1.0, level, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "transform(image=wrap(image), transforms=[1.0, 0.0, 0.0, level, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(image)",
                            "Call"
                        ],
                        [
                            "tf.reshape(flattened_image, image_shape)",
                            "Call"
                        ],
                        [
                            "tf.slice(image, [0, 0, 0], [image_shape[0], image_shape[1], 3])",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(i, policy_to_select), lambda selected_policy=policy: selected_policy(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "select_and_apply_random_policy(tf_policies, image)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=input_image_type)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=input_image_type)",
                            "Call"
                        ],
                        [
                            "tf.switch_case(branch_index=op_to_select, branch_fns=branch_fns, default=lambda : tf.identity(image))",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_226": {
                "variable": {
                    "value": "image_height",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.shape(image)[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_227": {
                "variable": {
                    "value": "image_width",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.shape(image)[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_261": {
                "variable": {
                    "value": "image1",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "image1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(image1, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_262": {
                "variable": {
                    "value": "image2",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "image2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(image2, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "uniform_303": {
                "variable": {
                    "value": "cutout_center_height",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "minval": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "maxval": {
                    "value": "image_height",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(tf.shape(image)[1], tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.shape(image)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "uniform_307": {
                "variable": {
                    "value": "cutout_center_width",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "minval": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "maxval": {
                    "value": "image_width",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(tf.shape(image)[2], tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.shape(image)[1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "maximum_311": {
                "variable": {
                    "value": "lower_pad",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "y": {
                    "value": "cutout_center_height - pad_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_312": {
                "variable": {
                    "value": "upper_pad",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "y": {
                    "value": "image_height - cutout_center_height - pad_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_313": {
                "variable": {
                    "value": "left_pad",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "y": {
                    "value": "cutout_center_width - pad_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_314": {
                "variable": {
                    "value": "right_pad",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "y": {
                    "value": "image_width - cutout_center_width - pad_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pad_321": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.zeros(cutout_shape, dtype=image.dtype)",
                    "type": "Call",
                    "possible_values": []
                },
                "paddings": {
                    "value": "padding_dims",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[[lower_pad, upper_pad], [left_pad, right_pad]]",
                            "List"
                        ]
                    ]
                },
                "constant_values": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_324": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.pad(tf.zeros(cutout_shape, dtype=image.dtype), padding_dims, constant_values=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(mask, -1)",
                            "Call"
                        ],
                        [
                            "tf.tile(mask, [1, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.ones_like(degenerate)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tile_325": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.pad(tf.zeros(cutout_shape, dtype=image.dtype), padding_dims, constant_values=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(mask, -1)",
                            "Call"
                        ],
                        [
                            "tf.tile(mask, [1, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.ones_like(degenerate)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "where_326": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.equal(mask, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.ones_like(image, dtype=image.dtype) * replace",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "to_4d(image)",
                            "Call"
                        ],
                        [
                            "image_ops.transform(images=image, transforms=transforms, interpolation='nearest')",
                            "Call"
                        ],
                        [
                            "to_4d(image)",
                            "Call"
                        ],
                        [
                            "transform(image, transforms=transforms)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(mask, 0), tf.ones_like(image, dtype=image.dtype) * replace, image)",
                            "Call"
                        ],
                        [
                            "rotate(wrap(image), degrees=degrees)",
                            "Call"
                        ],
                        [
                            "translate(wrap(image), [-pixels, 0])",
                            "Call"
                        ],
                        [
                            "translate(wrap(image), [0, -pixels])",
                            "Call"
                        ],
                        [
                            "transform(image=wrap(image), transforms=[1.0, level, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "transform(image=wrap(image), transforms=[1.0, 0.0, 0.0, level, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(image)",
                            "Call"
                        ],
                        [
                            "tf.reshape(flattened_image, image_shape)",
                            "Call"
                        ],
                        [
                            "tf.slice(image, [0, 0, 0], [image_shape[0], image_shape[1], 3])",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(i, policy_to_select), lambda selected_policy=policy: selected_policy(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "select_and_apply_random_policy(tf_policies, image)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=input_image_type)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=input_image_type)",
                            "Call"
                        ],
                        [
                            "tf.switch_case(branch_index=op_to_select, branch_fns=branch_fns, default=lambda : tf.identity(image))",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_347": {
                "variable": {
                    "value": "added_image",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.clip_by_value(added_image, 0, 255)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "grayscale_to_rgb_353": {
                "variable": {
                    "value": "degenerate",
                    "type": "Variable",
                    "possible_values": []
                },
                "images": {
                    "value": "tf.image.rgb_to_grayscale(image)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "rgb_to_grayscale_359": {
                "variable": {
                    "value": "degenerate",
                    "type": "Variable",
                    "possible_values": []
                },
                "images": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "to_4d(image)",
                            "Call"
                        ],
                        [
                            "image_ops.transform(images=image, transforms=transforms, interpolation='nearest')",
                            "Call"
                        ],
                        [
                            "to_4d(image)",
                            "Call"
                        ],
                        [
                            "transform(image, transforms=transforms)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(mask, 0), tf.ones_like(image, dtype=image.dtype) * replace, image)",
                            "Call"
                        ],
                        [
                            "rotate(wrap(image), degrees=degrees)",
                            "Call"
                        ],
                        [
                            "translate(wrap(image), [-pixels, 0])",
                            "Call"
                        ],
                        [
                            "translate(wrap(image), [0, -pixels])",
                            "Call"
                        ],
                        [
                            "transform(image=wrap(image), transforms=[1.0, level, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "transform(image=wrap(image), transforms=[1.0, 0.0, 0.0, level, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(image)",
                            "Call"
                        ],
                        [
                            "tf.reshape(flattened_image, image_shape)",
                            "Call"
                        ],
                        [
                            "tf.slice(image, [0, 0, 0], [image_shape[0], image_shape[1], 3])",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(i, policy_to_select), lambda selected_policy=policy: selected_policy(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "select_and_apply_random_policy(tf_policies, image)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=input_image_type)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=input_image_type)",
                            "Call"
                        ],
                        [
                            "tf.switch_case(branch_index=op_to_select, branch_fns=branch_fns, default=lambda : tf.identity(image))",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_361": {
                "variable": {
                    "value": "degenerate",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "degenerate",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.image.grayscale_to_rgb(tf.image.rgb_to_grayscale(image))",
                            "Call"
                        ],
                        [
                            "tf.image.rgb_to_grayscale(image)",
                            "Call"
                        ],
                        [
                            "tf.cast(degenerate, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.ones_like(degenerate, dtype=tf.float32) * mean",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(degenerate, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.grayscale_to_rgb(tf.cast(degenerate, tf.uint8))",
                            "Call"
                        ],
                        [
                            "tf.zeros_like(image)",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(image, kernel, strides, padding='VALID', dilations=[1, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(degenerate, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(tf.cast(degenerate, tf.uint8), [0])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "histogram_fixed_width_366": {
                "variable": {
                    "value": "hist",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "degenerate",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.image.grayscale_to_rgb(tf.image.rgb_to_grayscale(image))",
                            "Call"
                        ],
                        [
                            "tf.image.rgb_to_grayscale(image)",
                            "Call"
                        ],
                        [
                            "tf.cast(degenerate, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.ones_like(degenerate, dtype=tf.float32) * mean",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(degenerate, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.grayscale_to_rgb(tf.cast(degenerate, tf.uint8))",
                            "Call"
                        ],
                        [
                            "tf.zeros_like(image)",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(image, kernel, strides, padding='VALID', dilations=[1, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(degenerate, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(tf.cast(degenerate, tf.uint8), [0])",
                            "Call"
                        ]
                    ]
                },
                "value_range": {
                    "value": "[0, 255]",
                    "type": "List",
                    "possible_values": []
                },
                "nbins": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clip_by_value_369": {
                "variable": {
                    "value": "degenerate",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "degenerate",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.image.grayscale_to_rgb(tf.image.rgb_to_grayscale(image))",
                            "Call"
                        ],
                        [
                            "tf.image.rgb_to_grayscale(image)",
                            "Call"
                        ],
                        [
                            "tf.cast(degenerate, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.ones_like(degenerate, dtype=tf.float32) * mean",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(degenerate, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.grayscale_to_rgb(tf.cast(degenerate, tf.uint8))",
                            "Call"
                        ],
                        [
                            "tf.zeros_like(image)",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(image, kernel, strides, padding='VALID', dilations=[1, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(degenerate, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(tf.cast(degenerate, tf.uint8), [0])",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "255.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "grayscale_to_rgb_370": {
                "variable": {
                    "value": "degenerate",
                    "type": "Variable",
                    "possible_values": []
                },
                "images": {
                    "value": "tf.cast(degenerate, tf.uint8)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_376": {
                "variable": {
                    "value": "degenerate",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "to_4d(image)",
                            "Call"
                        ],
                        [
                            "image_ops.transform(images=image, transforms=transforms, interpolation='nearest')",
                            "Call"
                        ],
                        [
                            "to_4d(image)",
                            "Call"
                        ],
                        [
                            "transform(image, transforms=transforms)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(mask, 0), tf.ones_like(image, dtype=image.dtype) * replace, image)",
                            "Call"
                        ],
                        [
                            "rotate(wrap(image), degrees=degrees)",
                            "Call"
                        ],
                        [
                            "translate(wrap(image), [-pixels, 0])",
                            "Call"
                        ],
                        [
                            "translate(wrap(image), [0, -pixels])",
                            "Call"
                        ],
                        [
                            "transform(image=wrap(image), transforms=[1.0, level, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "transform(image=wrap(image), transforms=[1.0, 0.0, 0.0, level, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(image)",
                            "Call"
                        ],
                        [
                            "tf.reshape(flattened_image, image_shape)",
                            "Call"
                        ],
                        [
                            "tf.slice(image, [0, 0, 0], [image_shape[0], image_shape[1], 3])",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(i, policy_to_select), lambda selected_policy=policy: selected_policy(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "select_and_apply_random_policy(tf_policies, image)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=input_image_type)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=input_image_type)",
                            "Call"
                        ],
                        [
                            "tf.switch_case(branch_index=op_to_select, branch_fns=branch_fns, default=lambda : tf.identity(image))",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_463": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[s1, s2, s3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_470": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "to_4d(image)",
                            "Call"
                        ],
                        [
                            "image_ops.transform(images=image, transforms=transforms, interpolation='nearest')",
                            "Call"
                        ],
                        [
                            "to_4d(image)",
                            "Call"
                        ],
                        [
                            "transform(image, transforms=transforms)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(mask, 0), tf.ones_like(image, dtype=image.dtype) * replace, image)",
                            "Call"
                        ],
                        [
                            "rotate(wrap(image), degrees=degrees)",
                            "Call"
                        ],
                        [
                            "translate(wrap(image), [-pixels, 0])",
                            "Call"
                        ],
                        [
                            "translate(wrap(image), [0, -pixels])",
                            "Call"
                        ],
                        [
                            "transform(image=wrap(image), transforms=[1.0, level, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "transform(image=wrap(image), transforms=[1.0, 0.0, 0.0, level, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(image)",
                            "Call"
                        ],
                        [
                            "tf.reshape(flattened_image, image_shape)",
                            "Call"
                        ],
                        [
                            "tf.slice(image, [0, 0, 0], [image_shape[0], image_shape[1], 3])",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(i, policy_to_select), lambda selected_policy=policy: selected_policy(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "select_and_apply_random_policy(tf_policies, image)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=input_image_type)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=input_image_type)",
                            "Call"
                        ],
                        [
                            "tf.switch_case(branch_index=op_to_select, branch_fns=branch_fns, default=lambda : tf.identity(image))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_472": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "to_4d(image)",
                            "Call"
                        ],
                        [
                            "image_ops.transform(images=image, transforms=transforms, interpolation='nearest')",
                            "Call"
                        ],
                        [
                            "to_4d(image)",
                            "Call"
                        ],
                        [
                            "transform(image, transforms=transforms)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(mask, 0), tf.ones_like(image, dtype=image.dtype) * replace, image)",
                            "Call"
                        ],
                        [
                            "rotate(wrap(image), degrees=degrees)",
                            "Call"
                        ],
                        [
                            "translate(wrap(image), [-pixels, 0])",
                            "Call"
                        ],
                        [
                            "translate(wrap(image), [0, -pixels])",
                            "Call"
                        ],
                        [
                            "transform(image=wrap(image), transforms=[1.0, level, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "transform(image=wrap(image), transforms=[1.0, 0.0, 0.0, level, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(image)",
                            "Call"
                        ],
                        [
                            "tf.reshape(flattened_image, image_shape)",
                            "Call"
                        ],
                        [
                            "tf.slice(image, [0, 0, 0], [image_shape[0], image_shape[1], 3])",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(i, policy_to_select), lambda selected_policy=policy: selected_policy(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "select_and_apply_random_policy(tf_policies, image)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=input_image_type)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=input_image_type)",
                            "Call"
                        ],
                        [
                            "tf.switch_case(branch_index=op_to_select, branch_fns=branch_fns, default=lambda : tf.identity(image))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tile_481": {
                "variable": {
                    "value": "kernel",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kernel",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.constant([[1, 1, 1], [1, 5, 1], [1, 1, 1]], dtype=tf.float32, shape=[3, 3, 1, 1]) / 13.0",
                            "BinOp"
                        ],
                        [
                            "tf.tile(kernel, [1, 1, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, 1, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "depthwise_conv2d_483": {
                "variable": {
                    "value": "degenerate",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "to_4d(image)",
                            "Call"
                        ],
                        [
                            "image_ops.transform(images=image, transforms=transforms, interpolation='nearest')",
                            "Call"
                        ],
                        [
                            "to_4d(image)",
                            "Call"
                        ],
                        [
                            "transform(image, transforms=transforms)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(mask, 0), tf.ones_like(image, dtype=image.dtype) * replace, image)",
                            "Call"
                        ],
                        [
                            "rotate(wrap(image), degrees=degrees)",
                            "Call"
                        ],
                        [
                            "translate(wrap(image), [-pixels, 0])",
                            "Call"
                        ],
                        [
                            "translate(wrap(image), [0, -pixels])",
                            "Call"
                        ],
                        [
                            "transform(image=wrap(image), transforms=[1.0, level, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "transform(image=wrap(image), transforms=[1.0, 0.0, 0.0, level, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(image)",
                            "Call"
                        ],
                        [
                            "tf.reshape(flattened_image, image_shape)",
                            "Call"
                        ],
                        [
                            "tf.slice(image, [0, 0, 0], [image_shape[0], image_shape[1], 3])",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(i, policy_to_select), lambda selected_policy=policy: selected_policy(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "select_and_apply_random_policy(tf_policies, image)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=input_image_type)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=input_image_type)",
                            "Call"
                        ],
                        [
                            "tf.switch_case(branch_index=op_to_select, branch_fns=branch_fns, default=lambda : tf.identity(image))",
                            "Call"
                        ]
                    ]
                },
                "filter": {
                    "value": "kernel",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.constant([[1, 1, 1], [1, 5, 1], [1, 1, 1]], dtype=tf.float32, shape=[3, 3, 1, 1]) / 13.0",
                            "BinOp"
                        ],
                        [
                            "tf.tile(kernel, [1, 1, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "strides",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[1, 1, 1, 1]",
                            "List"
                        ]
                    ]
                },
                "padding": {
                    "value": "VALID",
                    "type": "Constant",
                    "possible_values": []
                },
                "dilations": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "clip_by_value_486": {
                "variable": {
                    "value": "degenerate",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "degenerate",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.image.grayscale_to_rgb(tf.image.rgb_to_grayscale(image))",
                            "Call"
                        ],
                        [
                            "tf.image.rgb_to_grayscale(image)",
                            "Call"
                        ],
                        [
                            "tf.cast(degenerate, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.ones_like(degenerate, dtype=tf.float32) * mean",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(degenerate, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.grayscale_to_rgb(tf.cast(degenerate, tf.uint8))",
                            "Call"
                        ],
                        [
                            "tf.zeros_like(image)",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(image, kernel, strides, padding='VALID', dilations=[1, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(degenerate, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(tf.cast(degenerate, tf.uint8), [0])",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "255.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_487": {
                "variable": {
                    "value": "degenerate",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.cast(degenerate, tf.uint8)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_like_491": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "degenerate",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.image.grayscale_to_rgb(tf.image.rgb_to_grayscale(image))",
                            "Call"
                        ],
                        [
                            "tf.image.rgb_to_grayscale(image)",
                            "Call"
                        ],
                        [
                            "tf.cast(degenerate, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.ones_like(degenerate, dtype=tf.float32) * mean",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(degenerate, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.grayscale_to_rgb(tf.cast(degenerate, tf.uint8))",
                            "Call"
                        ],
                        [
                            "tf.zeros_like(image)",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(image, kernel, strides, padding='VALID', dilations=[1, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(degenerate, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(tf.cast(degenerate, tf.uint8), [0])",
                            "Call"
                        ]
                    ]
                }
            },
            "pad_492": {
                "variable": {
                    "value": "padded_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "mask",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.pad(tf.zeros(cutout_shape, dtype=image.dtype), padding_dims, constant_values=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(mask, -1)",
                            "Call"
                        ],
                        [
                            "tf.tile(mask, [1, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.ones_like(degenerate)",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[1, 1], [1, 1], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pad_493": {
                "variable": {
                    "value": "padded_degenerate",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "degenerate",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.image.grayscale_to_rgb(tf.image.rgb_to_grayscale(image))",
                            "Call"
                        ],
                        [
                            "tf.image.rgb_to_grayscale(image)",
                            "Call"
                        ],
                        [
                            "tf.cast(degenerate, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.ones_like(degenerate, dtype=tf.float32) * mean",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(degenerate, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.grayscale_to_rgb(tf.cast(degenerate, tf.uint8))",
                            "Call"
                        ],
                        [
                            "tf.zeros_like(image)",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(image, kernel, strides, padding='VALID', dilations=[1, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(degenerate, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(tf.cast(degenerate, tf.uint8), [0])",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[1, 1], [1, 1], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "where_494": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.equal(padded_mask, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "padded_degenerate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.pad(degenerate, [[1, 1], [1, 1], [0, 0]])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "orig_image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "image",
                            "Name"
                        ]
                    ]
                }
            },
            "stack_537": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[s1, s2, s3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "convert_to_tensor_543": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "to_4d(image)",
                            "Call"
                        ],
                        [
                            "image_ops.transform(images=image, transforms=transforms, interpolation='nearest')",
                            "Call"
                        ],
                        [
                            "to_4d(image)",
                            "Call"
                        ],
                        [
                            "transform(image, transforms=transforms)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(mask, 0), tf.ones_like(image, dtype=image.dtype) * replace, image)",
                            "Call"
                        ],
                        [
                            "rotate(wrap(image), degrees=degrees)",
                            "Call"
                        ],
                        [
                            "translate(wrap(image), [-pixels, 0])",
                            "Call"
                        ],
                        [
                            "translate(wrap(image), [0, -pixels])",
                            "Call"
                        ],
                        [
                            "transform(image=wrap(image), transforms=[1.0, level, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "transform(image=wrap(image), transforms=[1.0, 0.0, 0.0, level, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(image)",
                            "Call"
                        ],
                        [
                            "tf.reshape(flattened_image, image_shape)",
                            "Call"
                        ],
                        [
                            "tf.slice(image, [0, 0, 0], [image_shape[0], image_shape[1], 3])",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(i, policy_to_select), lambda selected_policy=policy: selected_policy(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "select_and_apply_random_policy(tf_policies, image)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=input_image_type)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=input_image_type)",
                            "Call"
                        ],
                        [
                            "tf.switch_case(branch_index=op_to_select, branch_fns=branch_fns, default=lambda : tf.identity(image))",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_549": {
                "variable": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "to_4d(image)",
                            "Call"
                        ],
                        [
                            "image_ops.transform(images=image, transforms=transforms, interpolation='nearest')",
                            "Call"
                        ],
                        [
                            "to_4d(image)",
                            "Call"
                        ],
                        [
                            "transform(image, transforms=transforms)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(mask, 0), tf.ones_like(image, dtype=image.dtype) * replace, image)",
                            "Call"
                        ],
                        [
                            "rotate(wrap(image), degrees=degrees)",
                            "Call"
                        ],
                        [
                            "translate(wrap(image), [-pixels, 0])",
                            "Call"
                        ],
                        [
                            "translate(wrap(image), [0, -pixels])",
                            "Call"
                        ],
                        [
                            "transform(image=wrap(image), transforms=[1.0, level, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "transform(image=wrap(image), transforms=[1.0, 0.0, 0.0, level, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(image)",
                            "Call"
                        ],
                        [
                            "tf.reshape(flattened_image, image_shape)",
                            "Call"
                        ],
                        [
                            "tf.slice(image, [0, 0, 0], [image_shape[0], image_shape[1], 3])",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(i, policy_to_select), lambda selected_policy=policy: selected_policy(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "select_and_apply_random_policy(tf_policies, image)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=input_image_type)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=input_image_type)",
                            "Call"
                        ],
                        [
                            "tf.switch_case(branch_index=op_to_select, branch_fns=branch_fns, default=lambda : tf.identity(image))",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_550": {
                "variable": {
                    "value": "extended_channel",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[shape[0], shape[1], 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "image.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_551": {
                "variable": {
                    "value": "extended",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[image, extended_channel]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "shape_573": {
                "variable": {
                    "value": "image_shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "to_4d(image)",
                            "Call"
                        ],
                        [
                            "image_ops.transform(images=image, transforms=transforms, interpolation='nearest')",
                            "Call"
                        ],
                        [
                            "to_4d(image)",
                            "Call"
                        ],
                        [
                            "transform(image, transforms=transforms)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(mask, 0), tf.ones_like(image, dtype=image.dtype) * replace, image)",
                            "Call"
                        ],
                        [
                            "rotate(wrap(image), degrees=degrees)",
                            "Call"
                        ],
                        [
                            "translate(wrap(image), [-pixels, 0])",
                            "Call"
                        ],
                        [
                            "translate(wrap(image), [0, -pixels])",
                            "Call"
                        ],
                        [
                            "transform(image=wrap(image), transforms=[1.0, level, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "transform(image=wrap(image), transforms=[1.0, 0.0, 0.0, level, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(image)",
                            "Call"
                        ],
                        [
                            "tf.reshape(flattened_image, image_shape)",
                            "Call"
                        ],
                        [
                            "tf.slice(image, [0, 0, 0], [image_shape[0], image_shape[1], 3])",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(i, policy_to_select), lambda selected_policy=policy: selected_policy(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "select_and_apply_random_policy(tf_policies, image)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=input_image_type)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=input_image_type)",
                            "Call"
                        ],
                        [
                            "tf.switch_case(branch_index=op_to_select, branch_fns=branch_fns, default=lambda : tf.identity(image))",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_575": {
                "variable": {
                    "value": "flattened_image",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "to_4d(image)",
                            "Call"
                        ],
                        [
                            "image_ops.transform(images=image, transforms=transforms, interpolation='nearest')",
                            "Call"
                        ],
                        [
                            "to_4d(image)",
                            "Call"
                        ],
                        [
                            "transform(image, transforms=transforms)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(mask, 0), tf.ones_like(image, dtype=image.dtype) * replace, image)",
                            "Call"
                        ],
                        [
                            "rotate(wrap(image), degrees=degrees)",
                            "Call"
                        ],
                        [
                            "translate(wrap(image), [-pixels, 0])",
                            "Call"
                        ],
                        [
                            "translate(wrap(image), [0, -pixels])",
                            "Call"
                        ],
                        [
                            "transform(image=wrap(image), transforms=[1.0, level, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "transform(image=wrap(image), transforms=[1.0, 0.0, 0.0, level, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(image)",
                            "Call"
                        ],
                        [
                            "tf.reshape(flattened_image, image_shape)",
                            "Call"
                        ],
                        [
                            "tf.slice(image, [0, 0, 0], [image_shape[0], image_shape[1], 3])",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(i, policy_to_select), lambda selected_policy=policy: selected_policy(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "select_and_apply_random_policy(tf_policies, image)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=input_image_type)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=input_image_type)",
                            "Call"
                        ],
                        [
                            "tf.switch_case(branch_index=op_to_select, branch_fns=branch_fns, default=lambda : tf.identity(image))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, image_shape[2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_578": {
                "variable": {
                    "value": "alpha_channel",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "flattened_image[:, 3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_580": {
                "variable": {
                    "value": "replace",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[replace, tf.ones([1], image.dtype)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "where_583": {
                "variable": {
                    "value": "flattened_image",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.equal(alpha_channel, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.ones_like(flattened_image, dtype=image.dtype) * replace",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "flattened_image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(image, [-1, image_shape[2]])",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(alpha_channel, 0), tf.ones_like(flattened_image, dtype=image.dtype) * replace, flattened_image)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_589": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "flattened_image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(image, [-1, image_shape[2]])",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(alpha_channel, 0), tf.ones_like(flattened_image, dtype=image.dtype) * replace, flattened_image)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "image_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.shape(image)",
                            "Call"
                        ]
                    ]
                }
            },
            "slice_590": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "to_4d(image)",
                            "Call"
                        ],
                        [
                            "image_ops.transform(images=image, transforms=transforms, interpolation='nearest')",
                            "Call"
                        ],
                        [
                            "to_4d(image)",
                            "Call"
                        ],
                        [
                            "transform(image, transforms=transforms)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(mask, 0), tf.ones_like(image, dtype=image.dtype) * replace, image)",
                            "Call"
                        ],
                        [
                            "rotate(wrap(image), degrees=degrees)",
                            "Call"
                        ],
                        [
                            "translate(wrap(image), [-pixels, 0])",
                            "Call"
                        ],
                        [
                            "translate(wrap(image), [0, -pixels])",
                            "Call"
                        ],
                        [
                            "transform(image=wrap(image), transforms=[1.0, level, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "transform(image=wrap(image), transforms=[1.0, 0.0, 0.0, level, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(image)",
                            "Call"
                        ],
                        [
                            "tf.reshape(flattened_image, image_shape)",
                            "Call"
                        ],
                        [
                            "tf.slice(image, [0, 0, 0], [image_shape[0], image_shape[1], 3])",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(i, policy_to_select), lambda selected_policy=policy: selected_policy(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "select_and_apply_random_policy(tf_policies, image)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=input_image_type)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=input_image_type)",
                            "Call"
                        ],
                        [
                            "tf.switch_case(branch_index=op_to_select, branch_fns=branch_fns, default=lambda : tf.identity(image))",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[image_shape[0], image_shape[1], 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_596": {
                "variable": {
                    "value": "should_flip",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.floor(tf.random.uniform([]) + 0.5)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cond_597": {
                "variable": {
                    "value": "final_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "should_flip",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(tf.floor(tf.random.uniform([]) + 0.5), tf.bool)",
                            "Call"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : tensor",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : -tensor",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cast_643": {
                "variable": {
                    "value": "should_apply_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.floor(tf.random.uniform([], dtype=tf.float32) + prob)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cond_646": {
                "variable": {
                    "value": "augmented_image",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "should_apply_op",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(tf.floor(tf.random.uniform([], dtype=tf.float32) + prob), tf.bool)",
                            "Call"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : func(image, *args)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : image",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "uniform_654": {
                "variable": {
                    "value": "policy_to_select",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "maxval": {
                    "value": "len(policies)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_73": {
                "tensor": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "to_4d(image)",
                            "Call"
                        ],
                        [
                            "image_ops.transform(images=image, transforms=transforms, interpolation='nearest')",
                            "Call"
                        ],
                        [
                            "to_4d(image)",
                            "Call"
                        ],
                        [
                            "transform(image, transforms=transforms)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(mask, 0), tf.ones_like(image, dtype=image.dtype) * replace, image)",
                            "Call"
                        ],
                        [
                            "rotate(wrap(image), degrees=degrees)",
                            "Call"
                        ],
                        [
                            "translate(wrap(image), [-pixels, 0])",
                            "Call"
                        ],
                        [
                            "translate(wrap(image), [0, -pixels])",
                            "Call"
                        ],
                        [
                            "transform(image=wrap(image), transforms=[1.0, level, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "transform(image=wrap(image), transforms=[1.0, 0.0, 0.0, level, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(image)",
                            "Call"
                        ],
                        [
                            "tf.reshape(flattened_image, image_shape)",
                            "Call"
                        ],
                        [
                            "tf.slice(image, [0, 0, 0], [image_shape[0], image_shape[1], 3])",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(i, policy_to_select), lambda selected_policy=policy: selected_policy(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "select_and_apply_random_policy(tf_policies, image)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=input_image_type)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=input_image_type)",
                            "Call"
                        ],
                        [
                            "tf.switch_case(branch_index=op_to_select, branch_fns=branch_fns, default=lambda : tf.identity(image))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "new_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat([tf.ones(shape=left_pad, dtype=tf.int32), shape, tf.ones(shape=right_pad, dtype=tf.int32)], axis=0)",
                            "Call"
                        ],
                        [
                            "shape[begin:end]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "reshape_82": {
                "tensor": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "to_4d(image)",
                            "Call"
                        ],
                        [
                            "image_ops.transform(images=image, transforms=transforms, interpolation='nearest')",
                            "Call"
                        ],
                        [
                            "to_4d(image)",
                            "Call"
                        ],
                        [
                            "transform(image, transforms=transforms)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(mask, 0), tf.ones_like(image, dtype=image.dtype) * replace, image)",
                            "Call"
                        ],
                        [
                            "rotate(wrap(image), degrees=degrees)",
                            "Call"
                        ],
                        [
                            "translate(wrap(image), [-pixels, 0])",
                            "Call"
                        ],
                        [
                            "translate(wrap(image), [0, -pixels])",
                            "Call"
                        ],
                        [
                            "transform(image=wrap(image), transforms=[1.0, level, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "transform(image=wrap(image), transforms=[1.0, 0.0, 0.0, level, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(image)",
                            "Call"
                        ],
                        [
                            "tf.reshape(flattened_image, image_shape)",
                            "Call"
                        ],
                        [
                            "tf.slice(image, [0, 0, 0], [image_shape[0], image_shape[1], 3])",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(i, policy_to_select), lambda selected_policy=policy: selected_policy(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "select_and_apply_random_policy(tf_policies, image)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=input_image_type)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=input_image_type)",
                            "Call"
                        ],
                        [
                            "tf.switch_case(branch_index=op_to_select, branch_fns=branch_fns, default=lambda : tf.identity(image))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "new_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat([tf.ones(shape=left_pad, dtype=tf.int32), shape, tf.ones(shape=right_pad, dtype=tf.int32)], axis=0)",
                            "Call"
                        ],
                        [
                            "shape[begin:end]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "concat_115": {
                "values": {
                    "value": "[tf.ones((num_translations, 1), tf.dtypes.float32), tf.zeros((num_translations, 1), tf.dtypes.float32), -translations[:, 0, None], tf.zeros((num_translations, 1), tf.dtypes.float32), tf.ones((num_translations, 1), tf.dtypes.float32), -translations[:, 1, None], tf.zeros((num_translations, 2), tf.dtypes.float32)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_166": {
                "values": {
                    "value": "[tf.math.cos(angles)[:, None], -tf.math.sin(angles)[:, None], x_offset[:, None], tf.math.sin(angles)[:, None], tf.math.cos(angles)[:, None], y_offset[:, None], tf.zeros((num_angles, 2), tf.dtypes.float32)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_278": {
                "x": {
                    "value": "tf.clip_by_value(temp, 0.0, 255.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_336": {
                "condition": {
                    "value": "image < threshold",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "to_4d(image)",
                            "Call"
                        ],
                        [
                            "image_ops.transform(images=image, transforms=transforms, interpolation='nearest')",
                            "Call"
                        ],
                        [
                            "to_4d(image)",
                            "Call"
                        ],
                        [
                            "transform(image, transforms=transforms)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(mask, 0), tf.ones_like(image, dtype=image.dtype) * replace, image)",
                            "Call"
                        ],
                        [
                            "rotate(wrap(image), degrees=degrees)",
                            "Call"
                        ],
                        [
                            "translate(wrap(image), [-pixels, 0])",
                            "Call"
                        ],
                        [
                            "translate(wrap(image), [0, -pixels])",
                            "Call"
                        ],
                        [
                            "transform(image=wrap(image), transforms=[1.0, level, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "transform(image=wrap(image), transforms=[1.0, 0.0, 0.0, level, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(image)",
                            "Call"
                        ],
                        [
                            "tf.reshape(flattened_image, image_shape)",
                            "Call"
                        ],
                        [
                            "tf.slice(image, [0, 0, 0], [image_shape[0], image_shape[1], 3])",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(i, policy_to_select), lambda selected_policy=policy: selected_policy(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "select_and_apply_random_policy(tf_policies, image)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=input_image_type)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=input_image_type)",
                            "Call"
                        ],
                        [
                            "tf.switch_case(branch_index=op_to_select, branch_fns=branch_fns, default=lambda : tf.identity(image))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "255 - image",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "where_348": {
                "condition": {
                    "value": "image < threshold",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "added_image",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(image, tf.int64) + addition",
                            "BinOp"
                        ],
                        [
                            "tf.cast(tf.clip_by_value(added_image, 0, 255), tf.uint8)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "to_4d(image)",
                            "Call"
                        ],
                        [
                            "image_ops.transform(images=image, transforms=transforms, interpolation='nearest')",
                            "Call"
                        ],
                        [
                            "to_4d(image)",
                            "Call"
                        ],
                        [
                            "transform(image, transforms=transforms)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(mask, 0), tf.ones_like(image, dtype=image.dtype) * replace, image)",
                            "Call"
                        ],
                        [
                            "rotate(wrap(image), degrees=degrees)",
                            "Call"
                        ],
                        [
                            "translate(wrap(image), [-pixels, 0])",
                            "Call"
                        ],
                        [
                            "translate(wrap(image), [0, -pixels])",
                            "Call"
                        ],
                        [
                            "transform(image=wrap(image), transforms=[1.0, level, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "transform(image=wrap(image), transforms=[1.0, 0.0, 0.0, level, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(image)",
                            "Call"
                        ],
                        [
                            "tf.reshape(flattened_image, image_shape)",
                            "Call"
                        ],
                        [
                            "tf.slice(image, [0, 0, 0], [image_shape[0], image_shape[1], 3])",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(i, policy_to_select), lambda selected_policy=policy: selected_policy(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "select_and_apply_random_policy(tf_policies, image)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=input_image_type)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=input_image_type)",
                            "Call"
                        ],
                        [
                            "tf.switch_case(branch_index=op_to_select, branch_fns=branch_fns, default=lambda : tf.identity(image))",
                            "Call"
                        ]
                    ]
                }
            },
            "left_shift_383": {
                "x": {
                    "value": "tf.bitwise.right_shift(image, shift)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "shift",
                    "type": "Name",
                    "possible_values": [
                        [
                            "8 - bits",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cast_444": {
                "variable": {
                    "value": "lo",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_min(image)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_445": {
                "variable": {
                    "value": "hi",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_max(image)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cond_455": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "hi > lo",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : scale_values(image)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : image",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cast_505": {
                "variable": {
                    "value": "im",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "im[:, :, c]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "histogram_fixed_width_507": {
                "variable": {
                    "value": "histo",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "im",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.cast(im, tf.float32) * scale + offset",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(im, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(im[:, :, c], tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "value_range": {
                    "value": "[0, 255]",
                    "type": "List",
                    "possible_values": []
                },
                "nbins": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "where_510": {
                "variable": {
                    "value": "nonzero",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.not_equal(histo, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_511": {
                "variable": {
                    "value": "nonzero_histo",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.gather(histo, nonzero)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cond_526": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.equal(step, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : im",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : tf.gather(build_lut(histo, step), im)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cond_658": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.equal(i, policy_to_select)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda selected_policy=policy: selected_policy(image)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : image",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cast_856": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "to_4d(image)",
                            "Call"
                        ],
                        [
                            "image_ops.transform(images=image, transforms=transforms, interpolation='nearest')",
                            "Call"
                        ],
                        [
                            "to_4d(image)",
                            "Call"
                        ],
                        [
                            "transform(image, transforms=transforms)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(mask, 0), tf.ones_like(image, dtype=image.dtype) * replace, image)",
                            "Call"
                        ],
                        [
                            "rotate(wrap(image), degrees=degrees)",
                            "Call"
                        ],
                        [
                            "translate(wrap(image), [-pixels, 0])",
                            "Call"
                        ],
                        [
                            "translate(wrap(image), [0, -pixels])",
                            "Call"
                        ],
                        [
                            "transform(image=wrap(image), transforms=[1.0, level, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "transform(image=wrap(image), transforms=[1.0, 0.0, 0.0, level, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(image)",
                            "Call"
                        ],
                        [
                            "tf.reshape(flattened_image, image_shape)",
                            "Call"
                        ],
                        [
                            "tf.slice(image, [0, 0, 0], [image_shape[0], image_shape[1], 3])",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(i, policy_to_select), lambda selected_policy=policy: selected_policy(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "select_and_apply_random_policy(tf_policies, image)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=input_image_type)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=input_image_type)",
                            "Call"
                        ],
                        [
                            "tf.switch_case(branch_index=op_to_select, branch_fns=branch_fns, default=lambda : tf.identity(image))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "input_image_type",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "image.dtype",
                            "Attribute"
                        ],
                        [
                            "image.dtype",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cast_1038": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "to_4d(image)",
                            "Call"
                        ],
                        [
                            "image_ops.transform(images=image, transforms=transforms, interpolation='nearest')",
                            "Call"
                        ],
                        [
                            "to_4d(image)",
                            "Call"
                        ],
                        [
                            "transform(image, transforms=transforms)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(mask, 0), tf.ones_like(image, dtype=image.dtype) * replace, image)",
                            "Call"
                        ],
                        [
                            "rotate(wrap(image), degrees=degrees)",
                            "Call"
                        ],
                        [
                            "translate(wrap(image), [-pixels, 0])",
                            "Call"
                        ],
                        [
                            "translate(wrap(image), [0, -pixels])",
                            "Call"
                        ],
                        [
                            "transform(image=wrap(image), transforms=[1.0, level, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "transform(image=wrap(image), transforms=[1.0, 0.0, 0.0, level, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(image)",
                            "Call"
                        ],
                        [
                            "tf.reshape(flattened_image, image_shape)",
                            "Call"
                        ],
                        [
                            "tf.slice(image, [0, 0, 0], [image_shape[0], image_shape[1], 3])",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(i, policy_to_select), lambda selected_policy=policy: selected_policy(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "select_and_apply_random_policy(tf_policies, image)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=input_image_type)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=input_image_type)",
                            "Call"
                        ],
                        [
                            "tf.switch_case(branch_index=op_to_select, branch_fns=branch_fns, default=lambda : tf.identity(image))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "input_image_type",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "image.dtype",
                            "Attribute"
                        ],
                        [
                            "image.dtype",
                            "Attribute"
                        ]
                    ]
                }
            },
            "less_equal_63": {
                "x": {
                    "value": "original_rank",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.rank(image)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "equal_64": {
                "x": {
                    "value": "original_rank",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.rank(image)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "less_equal_79": {
                "x": {
                    "value": "ndims",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_80": {
                "x": {
                    "value": "tf.equal(ndims, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_113": {
                "input": {
                    "value": "translations",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(translations, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "translations[None]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "shape_165": {
                "input": {
                    "value": "angles",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(angles, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "angles[None]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "convert_to_tensor_257": {
                "value": {
                    "value": "image1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(image1, tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "convert_to_tensor_259": {
                "value": {
                    "value": "image2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(image2, tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_268": {
                "x": {
                    "value": "image1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(image1, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_273": {
                "x": {
                    "value": "temp",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(image1, tf.float32) + scaled",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_value_278": {
                "t": {
                    "value": "temp",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(image1, tf.float32) + scaled",
                            "BinOp"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "255.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "shape_299": {
                "input": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "to_4d(image)",
                            "Call"
                        ],
                        [
                            "image_ops.transform(images=image, transforms=transforms, interpolation='nearest')",
                            "Call"
                        ],
                        [
                            "to_4d(image)",
                            "Call"
                        ],
                        [
                            "transform(image, transforms=transforms)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(mask, 0), tf.ones_like(image, dtype=image.dtype) * replace, image)",
                            "Call"
                        ],
                        [
                            "rotate(wrap(image), degrees=degrees)",
                            "Call"
                        ],
                        [
                            "translate(wrap(image), [-pixels, 0])",
                            "Call"
                        ],
                        [
                            "translate(wrap(image), [0, -pixels])",
                            "Call"
                        ],
                        [
                            "transform(image=wrap(image), transforms=[1.0, level, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "transform(image=wrap(image), transforms=[1.0, 0.0, 0.0, level, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(image)",
                            "Call"
                        ],
                        [
                            "tf.reshape(flattened_image, image_shape)",
                            "Call"
                        ],
                        [
                            "tf.slice(image, [0, 0, 0], [image_shape[0], image_shape[1], 3])",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(i, policy_to_select), lambda selected_policy=policy: selected_policy(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "select_and_apply_random_policy(tf_policies, image)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=input_image_type)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=input_image_type)",
                            "Call"
                        ],
                        [
                            "tf.switch_case(branch_index=op_to_select, branch_fns=branch_fns, default=lambda : tf.identity(image))",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_300": {
                "input": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "to_4d(image)",
                            "Call"
                        ],
                        [
                            "image_ops.transform(images=image, transforms=transforms, interpolation='nearest')",
                            "Call"
                        ],
                        [
                            "to_4d(image)",
                            "Call"
                        ],
                        [
                            "transform(image, transforms=transforms)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(mask, 0), tf.ones_like(image, dtype=image.dtype) * replace, image)",
                            "Call"
                        ],
                        [
                            "rotate(wrap(image), degrees=degrees)",
                            "Call"
                        ],
                        [
                            "translate(wrap(image), [-pixels, 0])",
                            "Call"
                        ],
                        [
                            "translate(wrap(image), [0, -pixels])",
                            "Call"
                        ],
                        [
                            "transform(image=wrap(image), transforms=[1.0, level, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "transform(image=wrap(image), transforms=[1.0, 0.0, 0.0, level, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(image)",
                            "Call"
                        ],
                        [
                            "tf.reshape(flattened_image, image_shape)",
                            "Call"
                        ],
                        [
                            "tf.slice(image, [0, 0, 0], [image_shape[0], image_shape[1], 3])",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(i, policy_to_select), lambda selected_policy=policy: selected_policy(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "select_and_apply_random_policy(tf_policies, image)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=input_image_type)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=input_image_type)",
                            "Call"
                        ],
                        [
                            "tf.switch_case(branch_index=op_to_select, branch_fns=branch_fns, default=lambda : tf.identity(image))",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_322": {
                "shape": {
                    "value": "cutout_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[image_height - (lower_pad + upper_pad), image_width - (left_pad + right_pad)]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "image.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_327": {
                "x": {
                    "value": "mask",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.pad(tf.zeros(cutout_shape, dtype=image.dtype), padding_dims, constant_values=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(mask, -1)",
                            "Call"
                        ],
                        [
                            "tf.tile(mask, [1, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.ones_like(degenerate)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_346": {
                "x": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "to_4d(image)",
                            "Call"
                        ],
                        [
                            "image_ops.transform(images=image, transforms=transforms, interpolation='nearest')",
                            "Call"
                        ],
                        [
                            "to_4d(image)",
                            "Call"
                        ],
                        [
                            "transform(image, transforms=transforms)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(mask, 0), tf.ones_like(image, dtype=image.dtype) * replace, image)",
                            "Call"
                        ],
                        [
                            "rotate(wrap(image), degrees=degrees)",
                            "Call"
                        ],
                        [
                            "translate(wrap(image), [-pixels, 0])",
                            "Call"
                        ],
                        [
                            "translate(wrap(image), [0, -pixels])",
                            "Call"
                        ],
                        [
                            "transform(image=wrap(image), transforms=[1.0, level, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "transform(image=wrap(image), transforms=[1.0, 0.0, 0.0, level, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(image)",
                            "Call"
                        ],
                        [
                            "tf.reshape(flattened_image, image_shape)",
                            "Call"
                        ],
                        [
                            "tf.slice(image, [0, 0, 0], [image_shape[0], image_shape[1], 3])",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(i, policy_to_select), lambda selected_policy=policy: selected_policy(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "select_and_apply_random_policy(tf_policies, image)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=input_image_type)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=input_image_type)",
                            "Call"
                        ],
                        [
                            "tf.switch_case(branch_index=op_to_select, branch_fns=branch_fns, default=lambda : tf.identity(image))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_value_347": {
                "t": {
                    "value": "added_image",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(image, tf.int64) + addition",
                            "BinOp"
                        ],
                        [
                            "tf.cast(tf.clip_by_value(added_image, 0, 255), tf.uint8)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "255",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rgb_to_grayscale_353": {
                "images": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "to_4d(image)",
                            "Call"
                        ],
                        [
                            "image_ops.transform(images=image, transforms=transforms, interpolation='nearest')",
                            "Call"
                        ],
                        [
                            "to_4d(image)",
                            "Call"
                        ],
                        [
                            "transform(image, transforms=transforms)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(mask, 0), tf.ones_like(image, dtype=image.dtype) * replace, image)",
                            "Call"
                        ],
                        [
                            "rotate(wrap(image), degrees=degrees)",
                            "Call"
                        ],
                        [
                            "translate(wrap(image), [-pixels, 0])",
                            "Call"
                        ],
                        [
                            "translate(wrap(image), [0, -pixels])",
                            "Call"
                        ],
                        [
                            "transform(image=wrap(image), transforms=[1.0, level, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "transform(image=wrap(image), transforms=[1.0, 0.0, 0.0, level, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(image)",
                            "Call"
                        ],
                        [
                            "tf.reshape(flattened_image, image_shape)",
                            "Call"
                        ],
                        [
                            "tf.slice(image, [0, 0, 0], [image_shape[0], image_shape[1], 3])",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(i, policy_to_select), lambda selected_policy=policy: selected_policy(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "select_and_apply_random_policy(tf_policies, image)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=input_image_type)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=input_image_type)",
                            "Call"
                        ],
                        [
                            "tf.switch_case(branch_index=op_to_select, branch_fns=branch_fns, default=lambda : tf.identity(image))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_367": {
                "input_tensor": {
                    "value": "tf.cast(hist, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_like_368": {
                "input": {
                    "value": "degenerate",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.image.grayscale_to_rgb(tf.image.rgb_to_grayscale(image))",
                            "Call"
                        ],
                        [
                            "tf.image.rgb_to_grayscale(image)",
                            "Call"
                        ],
                        [
                            "tf.cast(degenerate, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.ones_like(degenerate, dtype=tf.float32) * mean",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(degenerate, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.grayscale_to_rgb(tf.cast(degenerate, tf.uint8))",
                            "Call"
                        ],
                        [
                            "tf.zeros_like(image)",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(image, kernel, strides, padding='VALID', dilations=[1, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(degenerate, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(tf.cast(degenerate, tf.uint8), [0])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_370": {
                "x": {
                    "value": "degenerate",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.image.grayscale_to_rgb(tf.image.rgb_to_grayscale(image))",
                            "Call"
                        ],
                        [
                            "tf.image.rgb_to_grayscale(image)",
                            "Call"
                        ],
                        [
                            "tf.cast(degenerate, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.ones_like(degenerate, dtype=tf.float32) * mean",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(degenerate, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.grayscale_to_rgb(tf.cast(degenerate, tf.uint8))",
                            "Call"
                        ],
                        [
                            "tf.zeros_like(image)",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(image, kernel, strides, padding='VALID', dilations=[1, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(degenerate, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(tf.cast(degenerate, tf.uint8), [0])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "right_shift_383": {
                "x": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "to_4d(image)",
                            "Call"
                        ],
                        [
                            "image_ops.transform(images=image, transforms=transforms, interpolation='nearest')",
                            "Call"
                        ],
                        [
                            "to_4d(image)",
                            "Call"
                        ],
                        [
                            "transform(image, transforms=transforms)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(mask, 0), tf.ones_like(image, dtype=image.dtype) * replace, image)",
                            "Call"
                        ],
                        [
                            "rotate(wrap(image), degrees=degrees)",
                            "Call"
                        ],
                        [
                            "translate(wrap(image), [-pixels, 0])",
                            "Call"
                        ],
                        [
                            "translate(wrap(image), [0, -pixels])",
                            "Call"
                        ],
                        [
                            "transform(image=wrap(image), transforms=[1.0, level, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "transform(image=wrap(image), transforms=[1.0, 0.0, 0.0, level, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(image)",
                            "Call"
                        ],
                        [
                            "tf.reshape(flattened_image, image_shape)",
                            "Call"
                        ],
                        [
                            "tf.slice(image, [0, 0, 0], [image_shape[0], image_shape[1], 3])",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(i, policy_to_select), lambda selected_policy=policy: selected_policy(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "select_and_apply_random_policy(tf_policies, image)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=input_image_type)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=input_image_type)",
                            "Call"
                        ],
                        [
                            "tf.switch_case(branch_index=op_to_select, branch_fns=branch_fns, default=lambda : tf.identity(image))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "shift",
                    "type": "Name",
                    "possible_values": [
                        [
                            "8 - bits",
                            "BinOp"
                        ]
                    ]
                }
            },
            "clip_by_value_452": {
                "variable": {
                    "value": "im",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "im",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.cast(im, tf.float32) * scale + offset",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(im, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(im[:, :, c], tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "255.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_475": {
                "value": {
                    "value": "[[1, 1, 1], [1, 5, 1], [1, 1, 1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[3, 3, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_487": {
                "x": {
                    "value": "degenerate",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.image.grayscale_to_rgb(tf.image.rgb_to_grayscale(image))",
                            "Call"
                        ],
                        [
                            "tf.image.rgb_to_grayscale(image)",
                            "Call"
                        ],
                        [
                            "tf.cast(degenerate, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.ones_like(degenerate, dtype=tf.float32) * mean",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(degenerate, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.grayscale_to_rgb(tf.cast(degenerate, tf.uint8))",
                            "Call"
                        ],
                        [
                            "tf.zeros_like(image)",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(image, kernel, strides, padding='VALID', dilations=[1, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(degenerate, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(tf.cast(degenerate, tf.uint8), [0])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_494": {
                "x": {
                    "value": "padded_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.pad(mask, [[1, 1], [1, 1], [0, 0]])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_519": {
                "variable": {
                    "value": "lut",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[[0], lut[:-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_530": {
                "x": {
                    "value": "result",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.cond(hi > lo, lambda : scale_values(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(padded_mask, 1), padded_degenerate, orig_image)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(step, 0), lambda : im, lambda : tf.gather(build_lut(histo, step), im))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_584": {
                "x": {
                    "value": "alpha_channel",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.expand_dims(flattened_image[:, 3], axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "floor_596": {
                "x": {
                    "value": "tf.random.uniform([]) + 0.5",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "floor_644": {
                "x": {
                    "value": "tf.random.uniform([], dtype=tf.float32) + prob",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clip_by_value_820": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "to_4d(image)",
                            "Call"
                        ],
                        [
                            "image_ops.transform(images=image, transforms=transforms, interpolation='nearest')",
                            "Call"
                        ],
                        [
                            "to_4d(image)",
                            "Call"
                        ],
                        [
                            "transform(image, transforms=transforms)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(mask, 0), tf.ones_like(image, dtype=image.dtype) * replace, image)",
                            "Call"
                        ],
                        [
                            "rotate(wrap(image), degrees=degrees)",
                            "Call"
                        ],
                        [
                            "translate(wrap(image), [-pixels, 0])",
                            "Call"
                        ],
                        [
                            "translate(wrap(image), [0, -pixels])",
                            "Call"
                        ],
                        [
                            "transform(image=wrap(image), transforms=[1.0, level, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "transform(image=wrap(image), transforms=[1.0, 0.0, 0.0, level, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(image)",
                            "Call"
                        ],
                        [
                            "tf.reshape(flattened_image, image_shape)",
                            "Call"
                        ],
                        [
                            "tf.slice(image, [0, 0, 0], [image_shape[0], image_shape[1], 3])",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(i, policy_to_select), lambda selected_policy=policy: selected_policy(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "select_and_apply_random_policy(tf_policies, image)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=input_image_type)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=input_image_type)",
                            "Call"
                        ],
                        [
                            "tf.switch_case(branch_index=op_to_select, branch_fns=branch_fns, default=lambda : tf.identity(image))",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "255.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_821": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "to_4d(image)",
                            "Call"
                        ],
                        [
                            "image_ops.transform(images=image, transforms=transforms, interpolation='nearest')",
                            "Call"
                        ],
                        [
                            "to_4d(image)",
                            "Call"
                        ],
                        [
                            "transform(image, transforms=transforms)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(mask, 0), tf.ones_like(image, dtype=image.dtype) * replace, image)",
                            "Call"
                        ],
                        [
                            "rotate(wrap(image), degrees=degrees)",
                            "Call"
                        ],
                        [
                            "translate(wrap(image), [-pixels, 0])",
                            "Call"
                        ],
                        [
                            "translate(wrap(image), [0, -pixels])",
                            "Call"
                        ],
                        [
                            "transform(image=wrap(image), transforms=[1.0, level, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "transform(image=wrap(image), transforms=[1.0, 0.0, 0.0, level, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(image)",
                            "Call"
                        ],
                        [
                            "tf.reshape(flattened_image, image_shape)",
                            "Call"
                        ],
                        [
                            "tf.slice(image, [0, 0, 0], [image_shape[0], image_shape[1], 3])",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(i, policy_to_select), lambda selected_policy=policy: selected_policy(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "select_and_apply_random_policy(tf_policies, image)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=input_image_type)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=input_image_type)",
                            "Call"
                        ],
                        [
                            "tf.switch_case(branch_index=op_to_select, branch_fns=branch_fns, default=lambda : tf.identity(image))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_value_997": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "to_4d(image)",
                            "Call"
                        ],
                        [
                            "image_ops.transform(images=image, transforms=transforms, interpolation='nearest')",
                            "Call"
                        ],
                        [
                            "to_4d(image)",
                            "Call"
                        ],
                        [
                            "transform(image, transforms=transforms)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(mask, 0), tf.ones_like(image, dtype=image.dtype) * replace, image)",
                            "Call"
                        ],
                        [
                            "rotate(wrap(image), degrees=degrees)",
                            "Call"
                        ],
                        [
                            "translate(wrap(image), [-pixels, 0])",
                            "Call"
                        ],
                        [
                            "translate(wrap(image), [0, -pixels])",
                            "Call"
                        ],
                        [
                            "transform(image=wrap(image), transforms=[1.0, level, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "transform(image=wrap(image), transforms=[1.0, 0.0, 0.0, level, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(image)",
                            "Call"
                        ],
                        [
                            "tf.reshape(flattened_image, image_shape)",
                            "Call"
                        ],
                        [
                            "tf.slice(image, [0, 0, 0], [image_shape[0], image_shape[1], 3])",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(i, policy_to_select), lambda selected_policy=policy: selected_policy(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "select_and_apply_random_policy(tf_policies, image)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=input_image_type)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=input_image_type)",
                            "Call"
                        ],
                        [
                            "tf.switch_case(branch_index=op_to_select, branch_fns=branch_fns, default=lambda : tf.identity(image))",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "255.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_998": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "to_4d(image)",
                            "Call"
                        ],
                        [
                            "image_ops.transform(images=image, transforms=transforms, interpolation='nearest')",
                            "Call"
                        ],
                        [
                            "to_4d(image)",
                            "Call"
                        ],
                        [
                            "transform(image, transforms=transforms)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(mask, 0), tf.ones_like(image, dtype=image.dtype) * replace, image)",
                            "Call"
                        ],
                        [
                            "rotate(wrap(image), degrees=degrees)",
                            "Call"
                        ],
                        [
                            "translate(wrap(image), [-pixels, 0])",
                            "Call"
                        ],
                        [
                            "translate(wrap(image), [0, -pixels])",
                            "Call"
                        ],
                        [
                            "transform(image=wrap(image), transforms=[1.0, level, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "transform(image=wrap(image), transforms=[1.0, 0.0, 0.0, level, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(image)",
                            "Call"
                        ],
                        [
                            "tf.reshape(flattened_image, image_shape)",
                            "Call"
                        ],
                        [
                            "tf.slice(image, [0, 0, 0], [image_shape[0], image_shape[1], 3])",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(i, policy_to_select), lambda selected_policy=policy: selected_policy(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "select_and_apply_random_policy(tf_policies, image)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=input_image_type)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=input_image_type)",
                            "Call"
                        ],
                        [
                            "tf.switch_case(branch_index=op_to_select, branch_fns=branch_fns, default=lambda : tf.identity(image))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "uniform_1004": {
                "variable": {
                    "value": "op_to_select",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "maxval": {
                    "value": "len(self.available_ops) + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "switch_case_1032": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "branch_index": {
                    "value": "op_to_select",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.random.uniform([], maxval=len(self.available_ops) + 1, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "branch_fns": {
                    "value": "branch_fns",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "default": {
                    "value": "lambda : tf.identity(image)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "ones_67": {
                "shape": {
                    "value": "left_pad",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.cast(tf.less_equal(original_rank, 3), dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.maximum(0, cutout_center_width - pad_size)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_69": {
                "shape": {
                    "value": "right_pad",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.cast(tf.equal(original_rank, 2), dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.maximum(0, image_width - cutout_center_width - pad_size)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_80": {
                "x": {
                    "value": "ndims",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "shape_226": {
                "input": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "to_4d(image)",
                            "Call"
                        ],
                        [
                            "image_ops.transform(images=image, transforms=transforms, interpolation='nearest')",
                            "Call"
                        ],
                        [
                            "to_4d(image)",
                            "Call"
                        ],
                        [
                            "transform(image, transforms=transforms)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(mask, 0), tf.ones_like(image, dtype=image.dtype) * replace, image)",
                            "Call"
                        ],
                        [
                            "rotate(wrap(image), degrees=degrees)",
                            "Call"
                        ],
                        [
                            "translate(wrap(image), [-pixels, 0])",
                            "Call"
                        ],
                        [
                            "translate(wrap(image), [0, -pixels])",
                            "Call"
                        ],
                        [
                            "transform(image=wrap(image), transforms=[1.0, level, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "transform(image=wrap(image), transforms=[1.0, 0.0, 0.0, level, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(image)",
                            "Call"
                        ],
                        [
                            "tf.reshape(flattened_image, image_shape)",
                            "Call"
                        ],
                        [
                            "tf.slice(image, [0, 0, 0], [image_shape[0], image_shape[1], 3])",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(i, policy_to_select), lambda selected_policy=policy: selected_policy(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "select_and_apply_random_policy(tf_policies, image)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=input_image_type)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=input_image_type)",
                            "Call"
                        ],
                        [
                            "tf.switch_case(branch_index=op_to_select, branch_fns=branch_fns, default=lambda : tf.identity(image))",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_227": {
                "input": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "to_4d(image)",
                            "Call"
                        ],
                        [
                            "image_ops.transform(images=image, transforms=transforms, interpolation='nearest')",
                            "Call"
                        ],
                        [
                            "to_4d(image)",
                            "Call"
                        ],
                        [
                            "transform(image, transforms=transforms)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(mask, 0), tf.ones_like(image, dtype=image.dtype) * replace, image)",
                            "Call"
                        ],
                        [
                            "rotate(wrap(image), degrees=degrees)",
                            "Call"
                        ],
                        [
                            "translate(wrap(image), [-pixels, 0])",
                            "Call"
                        ],
                        [
                            "translate(wrap(image), [0, -pixels])",
                            "Call"
                        ],
                        [
                            "transform(image=wrap(image), transforms=[1.0, level, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "transform(image=wrap(image), transforms=[1.0, 0.0, 0.0, level, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(image)",
                            "Call"
                        ],
                        [
                            "tf.reshape(flattened_image, image_shape)",
                            "Call"
                        ],
                        [
                            "tf.slice(image, [0, 0, 0], [image_shape[0], image_shape[1], 3])",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(i, policy_to_select), lambda selected_policy=policy: selected_policy(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "select_and_apply_random_policy(tf_policies, image)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=input_image_type)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=input_image_type)",
                            "Call"
                        ],
                        [
                            "tf.switch_case(branch_index=op_to_select, branch_fns=branch_fns, default=lambda : tf.identity(image))",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_327": {
                "input": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "to_4d(image)",
                            "Call"
                        ],
                        [
                            "image_ops.transform(images=image, transforms=transforms, interpolation='nearest')",
                            "Call"
                        ],
                        [
                            "to_4d(image)",
                            "Call"
                        ],
                        [
                            "transform(image, transforms=transforms)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(mask, 0), tf.ones_like(image, dtype=image.dtype) * replace, image)",
                            "Call"
                        ],
                        [
                            "rotate(wrap(image), degrees=degrees)",
                            "Call"
                        ],
                        [
                            "translate(wrap(image), [-pixels, 0])",
                            "Call"
                        ],
                        [
                            "translate(wrap(image), [0, -pixels])",
                            "Call"
                        ],
                        [
                            "transform(image=wrap(image), transforms=[1.0, level, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "transform(image=wrap(image), transforms=[1.0, 0.0, 0.0, level, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(image)",
                            "Call"
                        ],
                        [
                            "tf.reshape(flattened_image, image_shape)",
                            "Call"
                        ],
                        [
                            "tf.slice(image, [0, 0, 0], [image_shape[0], image_shape[1], 3])",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(i, policy_to_select), lambda selected_policy=policy: selected_policy(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "select_and_apply_random_policy(tf_policies, image)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=input_image_type)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=input_image_type)",
                            "Call"
                        ],
                        [
                            "tf.switch_case(branch_index=op_to_select, branch_fns=branch_fns, default=lambda : tf.identity(image))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "image.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_367": {
                "x": {
                    "value": "hist",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.histogram_fixed_width(degenerate, [0, 255], nbins=256)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_min_444": {
                "input_tensor": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "to_4d(image)",
                            "Call"
                        ],
                        [
                            "image_ops.transform(images=image, transforms=transforms, interpolation='nearest')",
                            "Call"
                        ],
                        [
                            "to_4d(image)",
                            "Call"
                        ],
                        [
                            "transform(image, transforms=transforms)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(mask, 0), tf.ones_like(image, dtype=image.dtype) * replace, image)",
                            "Call"
                        ],
                        [
                            "rotate(wrap(image), degrees=degrees)",
                            "Call"
                        ],
                        [
                            "translate(wrap(image), [-pixels, 0])",
                            "Call"
                        ],
                        [
                            "translate(wrap(image), [0, -pixels])",
                            "Call"
                        ],
                        [
                            "transform(image=wrap(image), transforms=[1.0, level, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "transform(image=wrap(image), transforms=[1.0, 0.0, 0.0, level, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(image)",
                            "Call"
                        ],
                        [
                            "tf.reshape(flattened_image, image_shape)",
                            "Call"
                        ],
                        [
                            "tf.slice(image, [0, 0, 0], [image_shape[0], image_shape[1], 3])",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(i, policy_to_select), lambda selected_policy=policy: selected_policy(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "select_and_apply_random_policy(tf_policies, image)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=input_image_type)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=input_image_type)",
                            "Call"
                        ],
                        [
                            "tf.switch_case(branch_index=op_to_select, branch_fns=branch_fns, default=lambda : tf.identity(image))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_max_445": {
                "input_tensor": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "to_4d(image)",
                            "Call"
                        ],
                        [
                            "image_ops.transform(images=image, transforms=transforms, interpolation='nearest')",
                            "Call"
                        ],
                        [
                            "to_4d(image)",
                            "Call"
                        ],
                        [
                            "transform(image, transforms=transforms)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(mask, 0), tf.ones_like(image, dtype=image.dtype) * replace, image)",
                            "Call"
                        ],
                        [
                            "rotate(wrap(image), degrees=degrees)",
                            "Call"
                        ],
                        [
                            "translate(wrap(image), [-pixels, 0])",
                            "Call"
                        ],
                        [
                            "translate(wrap(image), [0, -pixels])",
                            "Call"
                        ],
                        [
                            "transform(image=wrap(image), transforms=[1.0, level, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "transform(image=wrap(image), transforms=[1.0, 0.0, 0.0, level, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(image)",
                            "Call"
                        ],
                        [
                            "tf.reshape(flattened_image, image_shape)",
                            "Call"
                        ],
                        [
                            "tf.slice(image, [0, 0, 0], [image_shape[0], image_shape[1], 3])",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(i, policy_to_select), lambda selected_policy=policy: selected_policy(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "select_and_apply_random_policy(tf_policies, image)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=input_image_type)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=input_image_type)",
                            "Call"
                        ],
                        [
                            "tf.switch_case(branch_index=op_to_select, branch_fns=branch_fns, default=lambda : tf.identity(image))",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_453": {
                "x": {
                    "value": "im",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.cast(im, tf.float32) * scale + offset",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(im, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(im[:, :, c], tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "not_equal_510": {
                "x": {
                    "value": "histo",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.histogram_fixed_width(im, [0, 255], nbins=256)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gather_511": {
                "params": {
                    "value": "histo",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.histogram_fixed_width(im, [0, 255], nbins=256)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "nonzero",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.where(tf.not_equal(histo, 0))",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_value_522": {
                "t": {
                    "value": "lut",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(tf.cumsum(histo) + step // 2) // step",
                            "BinOp"
                        ],
                        [
                            "tf.concat([[0], lut[:-1]], 0)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "255",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "equal_527": {
                "x": {
                    "value": "step",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(tf.reduce_sum(nonzero_histo) - nonzero_histo[-1]) // 255",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_580": {
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "image.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_585": {
                "input": {
                    "value": "flattened_image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(image, [-1, image_shape[2]])",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(alpha_channel, 0), tf.ones_like(flattened_image, dtype=image.dtype) * replace, flattened_image)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "image.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_659": {
                "x": {
                    "value": "i",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "policy_to_select",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.random.uniform([], maxval=len(policies), dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "uniform_1010": {
                "variable": {
                    "value": "prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "minval": {
                    "value": "min_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "maxval": {
                    "value": "max_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_117": {
                "shape": {
                    "value": "(num_translations, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.dtypes.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_118": {
                "shape": {
                    "value": "(num_translations, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.dtypes.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_120": {
                "shape": {
                    "value": "(num_translations, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.dtypes.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_121": {
                "shape": {
                    "value": "(num_translations, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.dtypes.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_123": {
                "shape": {
                    "value": "(num_translations, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.dtypes.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_174": {
                "shape": {
                    "value": "(num_angles, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.dtypes.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_512": {
                "input_tensor": {
                    "value": "nonzero_histo",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(tf.gather(histo, nonzero), [-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_527": {
                "params": {
                    "value": "build_lut(histo, step)",
                    "type": "Call",
                    "possible_values": []
                },
                "indices": {
                    "value": "im",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.cast(im, tf.float32) * scale + offset",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(im, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(im[:, :, c], tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "uniform_596": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "uniform_644": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cos_154": {
                "x": {
                    "value": "angles",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(angles, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "angles[None]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sin_155": {
                "x": {
                    "value": "angles",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(angles, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "angles[None]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sin_161": {
                "x": {
                    "value": "angles",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(angles, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "angles[None]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cos_162": {
                "x": {
                    "value": "angles",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(angles, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "angles[None]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cos_168": {
                "x": {
                    "value": "angles",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(angles, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "angles[None]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sin_171": {
                "x": {
                    "value": "angles",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(angles, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "angles[None]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cos_172": {
                "x": {
                    "value": "angles",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(angles, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "angles[None]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cast_451": {
                "x": {
                    "value": "im",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.cast(im, tf.float32) * scale + offset",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(im, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(im[:, :, c], tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cumsum_517": {
                "x": {
                    "value": "histo",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.histogram_fixed_width(im, [0, 255], nbins=256)",
                            "Call"
                        ]
                    ]
                }
            },
            "sin_169": {
                "x": {
                    "value": "angles",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(angles, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "angles[None]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "identity_1035": {
                "input": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "to_4d(image)",
                            "Call"
                        ],
                        [
                            "image_ops.transform(images=image, transforms=transforms, interpolation='nearest')",
                            "Call"
                        ],
                        [
                            "to_4d(image)",
                            "Call"
                        ],
                        [
                            "transform(image, transforms=transforms)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(mask, 0), tf.ones_like(image, dtype=image.dtype) * replace, image)",
                            "Call"
                        ],
                        [
                            "rotate(wrap(image), degrees=degrees)",
                            "Call"
                        ],
                        [
                            "translate(wrap(image), [-pixels, 0])",
                            "Call"
                        ],
                        [
                            "translate(wrap(image), [0, -pixels])",
                            "Call"
                        ],
                        [
                            "transform(image=wrap(image), transforms=[1.0, level, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "transform(image=wrap(image), transforms=[1.0, 0.0, 0.0, level, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(image)",
                            "Call"
                        ],
                        [
                            "tf.reshape(flattened_image, image_shape)",
                            "Call"
                        ],
                        [
                            "tf.slice(image, [0, 0, 0], [image_shape[0], image_shape[1], 3])",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(i, policy_to_select), lambda selected_policy=policy: selected_policy(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "select_and_apply_random_policy(tf_policies, image)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=input_image_type)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=input_image_type)",
                            "Call"
                        ],
                        [
                            "tf.switch_case(branch_index=op_to_select, branch_fns=branch_fns, default=lambda : tf.identity(image))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/dataset.py": {
        "tensorflow": {
            "random_flip_left_right_103": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.image.random_flip_left_right(x)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, paddings=[[pad_size, pad_size], [pad_size, pad_size], [0, 0]], constant_values=replace_value)",
                            "Call"
                        ],
                        [
                            "tf.image.random_crop(x, [image_size, image_size, 3])",
                            "Call"
                        ]
                    ]
                }
            },
            "pad_106": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.image.random_flip_left_right(x)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, paddings=[[pad_size, pad_size], [pad_size, pad_size], [0, 0]], constant_values=replace_value)",
                            "Call"
                        ],
                        [
                            "tf.image.random_crop(x, [image_size, image_size, 3])",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[pad_size, pad_size], [pad_size, pad_size], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "constant_values": {
                    "value": "replace_value",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "random_crop_111": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.image.random_flip_left_right(x)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, paddings=[[pad_size, pad_size], [pad_size, pad_size], [0, 0]], constant_values=replace_value)",
                            "Call"
                        ],
                        [
                            "tf.image.random_crop(x, [image_size, image_size, 3])",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[image_size, image_size, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "convert_image_dtype_85": {
                "variable": {
                    "value": "image_uint",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": [
                        [
                            "_augment_flip_and_jitter(image, replace_value=0.5)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_image_dtype_91": {
                "variable": {
                    "value": "image_float",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image_uint",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.image.convert_image_dtype(image, tf.uint8)",
                            "Call"
                        ],
                        [
                            "_augment_flip_and_jitter(image_uint, replace_value=128)",
                            "Call"
                        ],
                        [
                            "rand_augment.distort(image_uint)",
                            "Call"
                        ],
                        [
                            "autoaugment.cutout(image_uint, pad_size=train_config.image_height // 4, replace=128)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/main.py": {
        "tensorflow": {
            "is_tensor_40": {
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "src/models/models.py": {
        "tensorflow": {
            "Input_10": {
                "variable": {
                    "value": "img_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(image_height, image_width, image_channels)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "RandomUniform_17": {
                "variable": {
                    "value": "kernel_initializer",
                    "type": "Variable",
                    "possible_values": []
                },
                "minval": {
                    "value": "-init_range",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "maxval": {
                    "value": "init_range",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1.0 / np.sqrt(len(labels))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "load_model_51": {
                "variable": {
                    "value": "loaded_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "filepath": {
                    "value": "exported_model_dir",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Model_24": {
                "*args": {
                    "value": "img_input",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.keras.layers.Input(shape=(image_height, image_width, image_channels))",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "wideresnet.Wrn28k()(img_input)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.Dropout(dropout_rate, name='top_dropout')(output)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.Dense(len(labels), kernel_initializer=kernel_initializer, name='predictions')(output)",
                            "Call"
                        ]
                    ]
                }
            },
            "Dense_20": {
                "units": {
                    "value": "len(labels)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "kernel_initializer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.keras.initializers.RandomUniform(minval=-init_range, maxval=init_range)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "predictions",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_14": {
                "rate": {
                    "value": "dropout_rate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "top_dropout",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "src/models/wideresnet.py": {
        "tensorflow": {
            "reduce_mean_56": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv1(inputs)",
                            "Call"
                        ],
                        [
                            "self.block1(output, **kwargs)",
                            "Call"
                        ],
                        [
                            "self.block2(output, **kwargs)",
                            "Call"
                        ],
                        [
                            "self.block3(output, **kwargs)",
                            "Call"
                        ],
                        [
                            "self.block4(output, **kwargs)",
                            "Call"
                        ],
                        [
                            "self.block5(output, **kwargs)",
                            "Call"
                        ],
                        [
                            "self.block6(output, **kwargs)",
                            "Call"
                        ],
                        [
                            "self.block7(output, **kwargs)",
                            "Call"
                        ],
                        [
                            "self.block8(output, **kwargs)",
                            "Call"
                        ],
                        [
                            "self.block9(output, **kwargs)",
                            "Call"
                        ],
                        [
                            "self.block10(output, **kwargs)",
                            "Call"
                        ],
                        [
                            "self.block11(output, **kwargs)",
                            "Call"
                        ],
                        [
                            "self.block12(output, **kwargs)",
                            "Call"
                        ],
                        [
                            "self.bn1(output, **kwargs)",
                            "Call"
                        ],
                        [
                            "relu(output)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(output, axis=[1, 2], name='global_avg_pool')",
                            "Call"
                        ],
                        [
                            "self.bn1(inputs, **kwargs)",
                            "Call"
                        ],
                        [
                            "relu(output)",
                            "Call"
                        ],
                        [
                            "self.conv1(output, **kwargs)",
                            "Call"
                        ],
                        [
                            "self.bn2(output, **kwargs)",
                            "Call"
                        ],
                        [
                            "relu(output)",
                            "Call"
                        ],
                        [
                            "self.conv2(output, **kwargs)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "global_avg_pool",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNormalization_62": {
                "momentum": {
                    "value": "momentum",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.01",
                            "MethodArgument"
                        ]
                    ]
                },
                "epsilon": {
                    "value": "epsilon",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.001",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2D_67": {
                "filters": {
                    "value": "filters",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "strides": {
                    "value": "(stride, stride)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'same'",
                            "MethodArgument"
                        ]
                    ]
                },
                "use_bias": {
                    "value": "use_bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "leaky_relu_78": {
                "features": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "alpha": {
                    "value": "leaky",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.2",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'relu'",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "src/train.py": {
        "tensorflow": {
            "MirroredStrategy_82": {
                "variable": {
                    "value": "strategy",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "create_file_writer_199": {
                "variable": {
                    "value": "file_writer",
                    "type": "Variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "tensorboard_dir",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(training_dir, 'log')",
                            "Call"
                        ]
                    ]
                }
            },
            "MirroredStrategy_257": {
                "variable": {
                    "value": "strategy",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_87": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "momentum": {
                    "value": "train_config.finetune_optimizer_momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "train_config.finetune_optimizer_nesterov",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CategoricalCrossentropy_96": {
                "variable": {
                    "value": "finetune_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "from_logits": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "reduction": {
                    "value": "tf.losses.Reduction.NONE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Mean_99": {
                "variable": {
                    "value": "train_loss_metric",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SparseCategoricalAccuracy_100": {
                "variable": {
                    "value": "train_acc_metric",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "train_acc",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Mean_101": {
                "variable": {
                    "value": "val_loss_metric",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SparseCategoricalAccuracy_102": {
                "variable": {
                    "value": "val_acc_metric",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "val_acc",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "SGD_263": {
                "variable": {
                    "value": "teacher_optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "momentum": {
                    "value": "train_config.mpl_optimizer_momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "train_config.mpl_optimizer_nesterov",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_267": {
                "variable": {
                    "value": "student_optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "momentum": {
                    "value": "train_config.mpl_optimizer_momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "train_config.mpl_optimizer_nesterov",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Checkpoint_272": {
                "variable": {
                    "value": "teacher_checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "teacher_optimizer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.keras.optimizers.SGD(momentum=train_config.mpl_optimizer_momentum, nesterov=train_config.mpl_optimizer_nesterov)",
                            "Call"
                        ]
                    ]
                },
                "model": {
                    "value": "teacher_model",
                    "type": "Name",
                    "possible_values": [
                        [
                            "get_teacher_model(train_config)",
                            "Call"
                        ]
                    ]
                }
            },
            "CheckpointManager_275": {
                "variable": {
                    "value": "teacher_checkpoint_manager",
                    "type": "Variable",
                    "possible_values": []
                },
                "checkpoint": {
                    "value": "teacher_checkpoint",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.train.Checkpoint(optimizer=teacher_optimizer, model=teacher_model)",
                            "Call"
                        ]
                    ]
                },
                "directory": {
                    "value": "teacher_checkpoint_dir",
                    "type": "Name",
                    "possible_values": [
                        [
                            "get_teacher_file(training_dir)",
                            "Call"
                        ]
                    ]
                },
                "max_to_keep": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Checkpoint_278": {
                "variable": {
                    "value": "student_checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "student_optimizer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.keras.optimizers.SGD(momentum=train_config.mpl_optimizer_momentum, nesterov=train_config.mpl_optimizer_nesterov)",
                            "Call"
                        ]
                    ]
                },
                "model": {
                    "value": "student_model",
                    "type": "Name",
                    "possible_values": [
                        [
                            "get_student_model(train_config)",
                            "Call"
                        ]
                    ]
                }
            },
            "CheckpointManager_281": {
                "variable": {
                    "value": "student_checkpoint_manager",
                    "type": "Variable",
                    "possible_values": []
                },
                "checkpoint": {
                    "value": "student_checkpoint",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.train.Checkpoint(optimizer=student_optimizer, model=student_model)",
                            "Call"
                        ]
                    ]
                },
                "directory": {
                    "value": "student_checkpoint_dir",
                    "type": "Name",
                    "possible_values": [
                        [
                            "get_student_file(training_dir)",
                            "Call"
                        ]
                    ]
                },
                "max_to_keep": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Checkpoint_284": {
                "variable": {
                    "value": "ema_checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "model": {
                    "value": "ema_model",
                    "type": "Name",
                    "possible_values": [
                        [
                            "get_student_model(train_config)",
                            "Call"
                        ]
                    ]
                }
            },
            "CheckpointManager_285": {
                "variable": {
                    "value": "ema_checkpoint_manager",
                    "type": "Variable",
                    "possible_values": []
                },
                "checkpoint": {
                    "value": "ema_checkpoint",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.train.Checkpoint(model=ema_model)",
                            "Call"
                        ]
                    ]
                },
                "directory": {
                    "value": "ema_checkpoint_dir",
                    "type": "Name",
                    "possible_values": [
                        [
                            "get_ema_file(training_dir)",
                            "Call"
                        ]
                    ]
                },
                "max_to_keep": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Variable_290": {
                "variable": {
                    "value": "step",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Mean_316": {
                "variable": {
                    "value": "val_student_loss_metric",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SparseCategoricalAccuracy_317": {
                "variable": {
                    "value": "val_student_acc_metric",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "val_acc_student",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Mean_320": {
                "variable": {
                    "value": "val_ema_loss_metric",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SparseCategoricalAccuracy_321": {
                "variable": {
                    "value": "val_ema_acc_metric",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "val_acc_ema",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "CategoricalCrossentropy_325": {
                "variable": {
                    "value": "mpl_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "from_logits": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "reduction": {
                    "value": "tf.losses.Reduction.NONE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CategoricalCrossentropy_328": {
                "variable": {
                    "value": "student_unlabeled_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "from_logits": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "reduction": {
                    "value": "tf.keras.losses.Reduction.NONE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "label_smoothing": {
                    "value": "train_config.mpl_label_smoothing",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CategoricalCrossentropy_333": {
                "variable": {
                    "value": "student_labeled_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "from_logits": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "reduction": {
                    "value": "tf.keras.losses.Reduction.NONE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_106": {
                "variable": {
                    "value": "predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "finetune_model(images, training=False)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "list_physical_devices_202": {
                "device_type": {
                    "value": "GPU",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_340": {
                "variable": {
                    "value": "ema_predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "ema_model(images, training=False)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_341": {
                "variable": {
                    "value": "student_predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "student_model(images, training=False)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_367": {
                "variable": {
                    "value": "all_images",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[labeled_images, org_images, aug_images]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clip_by_global_norm_406": {
                "variable": {
                    "value": "(student_grad_unlabeled, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "student_grad_unlabeled",
                    "type": "Name",
                    "possible_values": [
                        [
                            "stape.gradient(cross_entropy['s_on_u'], student_model.trainable_variables)",
                            "Call"
                        ]
                    ]
                },
                "clip_norm": {
                    "value": "train_config.mpl_optimizer_grad_bound",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_423": {
                "variable": {
                    "value": "moving_dot_product",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "moving_dot_product",
                    "type": "Constant",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "dot_product.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stop_gradient_433": {
                "variable": {
                    "value": "dot_product",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dot_product",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "cross_entropy['s_on_l_new'] - cross_entropy['s_on_l_old']",
                            "BinOp"
                        ],
                        [
                            "dot_product - moving_dot_product",
                            "BinOp"
                        ],
                        [
                            "tf.stop_gradient(dot_product)",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_global_norm_454": {
                "variable": {
                    "value": "(teacher_grad, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "teacher_grad",
                    "type": "Name",
                    "possible_values": [
                        [
                            "ttape.gradient(teacher_loss, teacher_model.trainable_variables)",
                            "Call"
                        ]
                    ]
                },
                "clip_norm": {
                    "value": "train_config.mpl_optimizer_grad_bound",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_117": {
                "variable": {
                    "value": "predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "finetune_model(images, training=True)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "scalar_150": {
                "name": {
                    "value": "finetune-train/acc",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "train_acc",
                    "type": "Name",
                    "possible_values": [
                        [
                            "train_acc_metric.result()",
                            "Call"
                        ]
                    ]
                },
                "step": {
                    "value": "step",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "step + 1",
                            "BinOp"
                        ],
                        [
                            "tf.Variable(0, dtype=tf.int64)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_151": {
                "name": {
                    "value": "finetune-train/loss",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "train_loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "train_loss_metric.result()",
                            "Call"
                        ]
                    ]
                },
                "step": {
                    "value": "step",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "step + 1",
                            "BinOp"
                        ],
                        [
                            "tf.Variable(0, dtype=tf.int64)",
                            "Call"
                        ]
                    ]
                }
            },
            "Mean_307": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Mean_308": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Mean_309": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Mean_310": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Mean_311": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Mean_312": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Mean_313": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Mean_314": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "concat_376": {
                "variable": {
                    "value": "u_aug_and_l_images",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[aug_images, labeled_images]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "split_380": {
                "variable": {
                    "value": "(logits[s_on_u], logits[s_on_l_old])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "logits['s_on_u_aug_and_l']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "[aug_images.shape[0], labeled_images.shape[0]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "GradientTape_116": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "scalar_171": {
                "name": {
                    "value": "finetune-val/loss",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "val_loss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "val_loss_metric.result()",
                            "Call"
                        ],
                        [
                            "val_loss_metric.result()",
                            "Call"
                        ]
                    ]
                },
                "step": {
                    "value": "step",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "step + 1",
                            "BinOp"
                        ],
                        [
                            "tf.Variable(0, dtype=tf.int64)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_172": {
                "name": {
                    "value": "finetune-val/acc",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "val_acc",
                    "type": "Call",
                    "possible_values": [
                        [
                            "val_acc_metric.result()",
                            "Call"
                        ],
                        [
                            "val_acc_metric.result()",
                            "Call"
                        ]
                    ]
                },
                "step": {
                    "value": "step",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "step + 1",
                            "BinOp"
                        ],
                        [
                            "tf.Variable(0, dtype=tf.int64)",
                            "Call"
                        ]
                    ]
                }
            },
            "flush_173": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GradientTape_369": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GradientTape_375": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_sum_417": {
                "input_tensor": {
                    "value": "cross_entropy['s_on_l_new']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_mean_462": {
                "input_tensor": {
                    "value": "masks['u']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_mean_463": {
                "input_tensor": {
                    "value": "masks['l']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "minimum_475": {
                "x": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "y": {
                    "value": "float(step_tensor) / float(train_config.uda_steps)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "scalar_590": {
                "name": {
                    "value": "mpl-val/ema-loss",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "val_ema_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "step": {
                    "value": "step + continue_step",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "scalar_593": {
                "name": {
                    "value": "mpl-val/ema-acc",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "val_ema_acc",
                    "type": "Variable",
                    "possible_values": []
                },
                "step": {
                    "value": "step + continue_step",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "scalar_596": {
                "name": {
                    "value": "mpl-val/student-loss",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "val_student_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "step": {
                    "value": "step + continue_step",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "scalar_599": {
                "name": {
                    "value": "mpl-val/student-acc",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "val_student_acc",
                    "type": "Variable",
                    "possible_values": []
                },
                "step": {
                    "value": "step + continue_step",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_111": {
                "input_tensor": {
                    "value": "loss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "finetune_loss(y_true=train_util.get_onehot(label_indices, train_config.labels), y_pred=predictions)",
                            "Call"
                        ],
                        [
                            "finetune_loss(y_true=train_util.get_onehot(label_indices, train_config.labels), y_pred=predictions)",
                            "Call"
                        ],
                        [
                            "student_labeled_loss(y_true=train_util.get_onehot(label_indices, train_config.labels), y_pred=predictions)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_124": {
                "input_tensor": {
                    "value": "loss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "finetune_loss(y_true=train_util.get_onehot(label_indices, train_config.labels), y_pred=predictions)",
                            "Call"
                        ],
                        [
                            "finetune_loss(y_true=train_util.get_onehot(label_indices, train_config.labels), y_pred=predictions)",
                            "Call"
                        ],
                        [
                            "student_labeled_loss(y_true=train_util.get_onehot(label_indices, train_config.labels), y_pred=predictions)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_144": {
                "name": {
                    "value": "finetune-lr",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "optimizer.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "step": {
                    "value": "step",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "step + 1",
                            "BinOp"
                        ],
                        [
                            "tf.Variable(0, dtype=tf.int64)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_model_184": {
                "model": {
                    "value": "finetune_model",
                    "type": "Name",
                    "possible_values": [
                        [
                            "get_finetune_model(train_config, mpl_model_dir)",
                            "Call"
                        ]
                    ]
                },
                "filepath": {
                    "value": "finetune_model_file",
                    "type": "Name",
                    "possible_values": [
                        [
                            "get_finetune_file(finetune_dir)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_391": {
                "input_tensor": {
                    "value": "cross_entropy['s_on_u']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_sum_399": {
                "input_tensor": {
                    "value": "cross_entropy['s_on_l_old']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_sum_440": {
                "input_tensor": {
                    "value": "cross_entropy['mpl']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "scalar_564": {
                "name": {
                    "value": "mpl-lr/student",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "student_optimizer.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "step": {
                    "value": "step + continue_step",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "scalar_569": {
                "name": {
                    "value": "mpl-lr/teacher",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "teacher_optimizer.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "step": {
                    "value": "step + continue_step",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "flush_574": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_model_620": {
                "model": {
                    "value": "student_model",
                    "type": "Name",
                    "possible_values": [
                        [
                            "get_student_model(train_config)",
                            "Call"
                        ]
                    ]
                },
                "filepath": {
                    "value": "exported_student_checkpoint_dir",
                    "type": "Name",
                    "possible_values": [
                        [
                            "get_exported_student_file(training_dir)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_model_623": {
                "model": {
                    "value": "ema_model",
                    "type": "Name",
                    "possible_values": [
                        [
                            "get_student_model(train_config)",
                            "Call"
                        ]
                    ]
                },
                "filepath": {
                    "value": "exported_ema_checkpoint_dir",
                    "type": "Name",
                    "possible_values": [
                        [
                            "get_exported_ema_file(training_dir)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_350": {
                "input_tensor": {
                    "value": "loss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "finetune_loss(y_true=train_util.get_onehot(label_indices, train_config.labels), y_pred=predictions)",
                            "Call"
                        ],
                        [
                            "finetune_loss(y_true=train_util.get_onehot(label_indices, train_config.labels), y_pred=predictions)",
                            "Call"
                        ],
                        [
                            "student_labeled_loss(y_true=train_util.get_onehot(label_indices, train_config.labels), y_pred=predictions)",
                            "Call"
                        ]
                    ]
                }
            },
            "stop_gradient_388": {
                "input": {
                    "value": "tf.nn.softmax(logits['u_aug'], -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stop_gradient_437": {
                "input": {
                    "value": "tf.nn.softmax(logits['u_aug'], -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_388": {
                "logits": {
                    "value": "logits['u_aug']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_437": {
                "logits": {
                    "value": "logits['u_aug']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "scalar_561": {
                "name": {
                    "value": "key",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "mean_value",
                    "type": "Name",
                    "possible_values": [
                        [
                            "mean_metric.result()",
                            "Call"
                        ],
                        [
                            "value",
                            "Name"
                        ]
                    ]
                },
                "step": {
                    "value": "step + continue_step",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "src/train_util.py": {
        "tensorflow": {
            "CategoricalCrossentropy_113": {
                "variable": {
                    "value": "uda_cross_entropy_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "from_logits": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "label_smoothing": {
                    "value": "train_config.mpl_label_smoothing",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "tf.losses.Reduction.NONE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "one_hot_104": {
                "indices": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "depth": {
                    "value": "len(labels)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "split_126": {
                "variable": {
                    "value": "(logits[l], logits[u_ori], logits[u_aug])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "all_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "[train_config.mpl_batch_size, uda_batch_size, uda_batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_132": {
                "variable": {
                    "value": "probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits['l']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_133": {
                "variable": {
                    "value": "correct_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "labels['l'] * probs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "less_equal_138": {
                "variable": {
                    "value": "masks[l]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x": {
                    "value": "correct_probs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_sum(labels['l'] * probs, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "labeled_threshold",
                    "type": "Name",
                    "possible_values": [
                        [
                            "steps_pct * (1.0 - 1.0 / len(train_config.labels)) + 1.0 / len(train_config.labels)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cast_139": {
                "variable": {
                    "value": "masks[l]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x": {
                    "value": "masks['l']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stop_gradient_140": {
                "variable": {
                    "value": "masks[l]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "masks['l']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "softmax_146": {
                "variable": {
                    "value": "labels[u_ori]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits['u_ori'] / train_config.uda_label_temperature",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stop_gradient_149": {
                "variable": {
                    "value": "labels[u_ori]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "labels['u_ori']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_max_154": {
                "variable": {
                    "value": "largest_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "labels['u_ori']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "greater_equal_155": {
                "variable": {
                    "value": "masks[u]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x": {
                    "value": "largest_probs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_max(labels['u_ori'], axis=-1, keepdims=True)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "train_config.uda_threshold",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_156": {
                "variable": {
                    "value": "masks[u]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x": {
                    "value": "masks['u']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stop_gradient_157": {
                "variable": {
                    "value": "masks[u]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "masks['u']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_sum_141": {
                "input_tensor": {
                    "value": "cross_entropy['l']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "log_softmax_151": {
                "logits": {
                    "value": "logits['u_aug']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_158": {
                "input_tensor": {
                    "value": "-cross_entropy['u'] * masks['u']",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "src/utils/data_util.py": {
        "tensorflow": {
            "FixedLengthRecordDataset_34": {
                "variable": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "filenames": {
                    "value": "filenames",
                    "type": "Call",
                    "possible_values": [
                        [
                            "_get_cifar10_files(data_dir)",
                            "Call"
                        ],
                        [
                            "_get_cifar10_files(data_dir)",
                            "Call"
                        ],
                        [
                            "[os.path.join(data_path, 'test_batch.bin')]",
                            "List"
                        ]
                    ]
                },
                "record_bytes": {
                    "value": "record_bytes",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "1 + 3 * 32 * 32",
                            "BinOp"
                        ],
                        [
                            "1 + 3 * 32 * 32",
                            "BinOp"
                        ],
                        [
                            "1 + 3 * 32 * 32",
                            "BinOp"
                        ]
                    ]
                }
            },
            "FixedLengthRecordDataset_44": {
                "variable": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "filenames": {
                    "value": "filenames",
                    "type": "Call",
                    "possible_values": [
                        [
                            "_get_cifar10_files(data_dir)",
                            "Call"
                        ],
                        [
                            "_get_cifar10_files(data_dir)",
                            "Call"
                        ],
                        [
                            "[os.path.join(data_path, 'test_batch.bin')]",
                            "List"
                        ]
                    ]
                },
                "record_bytes": {
                    "value": "record_bytes",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "1 + 3 * 32 * 32",
                            "BinOp"
                        ],
                        [
                            "1 + 3 * 32 * 32",
                            "BinOp"
                        ],
                        [
                            "1 + 3 * 32 * 32",
                            "BinOp"
                        ]
                    ]
                }
            },
            "FixedLengthRecordDataset_53": {
                "variable": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "filenames": {
                    "value": "filenames",
                    "type": "Call",
                    "possible_values": [
                        [
                            "_get_cifar10_files(data_dir)",
                            "Call"
                        ],
                        [
                            "_get_cifar10_files(data_dir)",
                            "Call"
                        ],
                        [
                            "[os.path.join(data_path, 'test_batch.bin')]",
                            "List"
                        ]
                    ]
                },
                "record_bytes": {
                    "value": "record_bytes",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "1 + 3 * 32 * 32",
                            "BinOp"
                        ],
                        [
                            "1 + 3 * 32 * 32",
                            "BinOp"
                        ],
                        [
                            "1 + 3 * 32 * 32",
                            "BinOp"
                        ]
                    ]
                }
            },
            "decode_raw_10": {
                "variable": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_bytes": {
                    "value": "value",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.io.decode_raw(value, tf.uint8)",
                            "Call"
                        ]
                    ]
                },
                "out_type": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_11": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "value[1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[3, 32, 32]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "convert_image_dtype_12": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(value[1:], [3, 32, 32])",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.transpose(image, [1, 2, 0])",
                            "Call"
                        ],
                        [
                            "tf.image.resize([image], [image_height, image_width])[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_13": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(value[1:], [3, 32, 32])",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.transpose(image, [1, 2, 0])",
                            "Call"
                        ],
                        [
                            "tf.image.resize([image], [image_height, image_width])[0]",
                            "Subscript"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 2, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "resize_15": {
                "images": {
                    "value": "[image]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[image_height, image_width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_18": {
                "x": {
                    "value": "value[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}