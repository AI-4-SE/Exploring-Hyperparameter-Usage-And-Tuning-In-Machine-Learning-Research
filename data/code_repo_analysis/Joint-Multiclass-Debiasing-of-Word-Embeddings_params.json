{
    "Classes/embedding.py": {
        "sklearn": {
            "PCA_153": {
                "variable": {
                    "value": "pca",
                    "type": "variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "PCA_348": {
                "variable": {
                    "value": "self.vectors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "n_components": {
                    "value": "dimension",
                    "type": "variable",
                    "possible_values": [
                        [
                            "300",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "Evaluation/code_evaluation.py": {
        "sklearn": {}
    },
    "Evaluation/sentiment_analysis.py": {
        "sklearn": {
            "confusion_matrix_67": {
                "y_true": {
                    "value": "correct_results",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_t",
                            "variable"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "prediction_results",
                    "type": "variable",
                    "possible_values": [
                        [
                            "keras_model.model.predict(x_t)",
                            "Call"
                        ],
                        [
                            "[1 if output_instance > 0.5 else 0 for output_instance in prediction_results]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "f1_score_71": {
                "y_true": {
                    "value": "correct_results",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_t",
                            "variable"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "prediction_results",
                    "type": "variable",
                    "possible_values": [
                        [
                            "keras_model.model.predict(x_t)",
                            "Call"
                        ],
                        [
                            "[1 if output_instance > 0.5 else 0 for output_instance in prediction_results]",
                            "ListComp"
                        ]
                    ]
                }
            }
        }
    },
    "Evaluation/weat_analysis.py": {
        "sklearn": {}
    },
    "Utils/methods.py": {
        "sklearn": {
            "train_test_split_186": {
                "variable": {
                    "value": "(X_train, X_test, y_train, y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "df.review",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "df.sentiment",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LabelEncoder_192": {
                "variable": {
                    "value": "le",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}