{
    "RAUNet.py": {
        "torch": {
            "AdaptiveAvgPool2d_9": {
                "variable": {
                    "value": "self.global_pooling",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_11": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_ch, out_ch, 1, padding=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_16": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_ch, out_ch, 1, padding=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_21": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(out_ch, out_ch, 1, padding=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_25": {
                "variable": {
                    "value": "self.conv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_ch, out_ch, 1, padding=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_73": {
                "variable": {
                    "value": "self.finaldeconv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "filters[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_74": {
                "variable": {
                    "value": "self.finalrelu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_75": {
                "variable": {
                    "value": "self.finalconv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_76": {
                "variable": {
                    "value": "self.finalrelu2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_77": {
                "variable": {
                    "value": "self.finalconv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_116": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_117": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_channels // 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_118": {
                "variable": {
                    "value": "self.norm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_channels // 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_121": {
                "variable": {
                    "value": "self.deconv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels // 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_channels // 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_123": {
                "variable": {
                    "value": "self.norm2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_channels // 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_126": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels // 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_filters",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_127": {
                "variable": {
                    "value": "self.norm3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "n_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_filters",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_softmax_107": {
                "variable": {
                    "value": "x_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.finalconv3(f4)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_12": {
                "in_channels": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_ch",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_ch",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_13": {
                "num_features": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_ch",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_14": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_17": {
                "in_channels": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_ch",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_ch",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_18": {
                "num_features": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_ch",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_19": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_22": {
                "in_channels": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_ch",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_ch",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Softmax_23": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_26": {
                "in_channels": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_ch",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_ch",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_27": {
                "num_features": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_ch",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_28": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "load_dataset.py": {
        "torch": {
            "max_pool2d_27": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_transforms(ori_image)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(image, kernel_size=(down_sample, down_sample), stride=down_sample, padding=0)",
                            "Call"
                        ],
                        [
                            "F.pad(image, (0, 0, 2, 2), 'constant', 0)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(down_sample, down_sample)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "down_sample",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_28": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_transforms(ori_image)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(image, kernel_size=(down_sample, down_sample), stride=down_sample, padding=0)",
                            "Call"
                        ],
                        [
                            "F.pad(image, (0, 0, 2, 2), 'constant', 0)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, 0, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_32": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cv2.imread(new_path, 0)",
                            "Call"
                        ],
                        [
                            "mask // 20",
                            "BinOp"
                        ],
                        [
                            "load_mask(img_file_name)",
                            "Call"
                        ],
                        [
                            "mask[np.newaxis, :, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "max_pool2d_33": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(mask).float()",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(labels, kernel_size=(down_sample, down_sample), stride=down_sample, padding=0)",
                            "Call"
                        ],
                        [
                            "F.pad(labels, (0, 0, 2, 2), 'constant', 0)",
                            "Call"
                        ],
                        [
                            "labels.squeeze()",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(down_sample, down_sample)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "down_sample",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_34": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(mask).float()",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(labels, kernel_size=(down_sample, down_sample), stride=down_sample, padding=0)",
                            "Call"
                        ],
                        [
                            "F.pad(labels, (0, 0, 2, 2), 'constant', 0)",
                            "Call"
                        ],
                        [
                            "labels.squeeze()",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, 0, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "loss.py": {
        "torch": {
            "NLLLoss_6": {
                "variable": {
                    "value": "self.nll_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_19": {
                "input": {
                    "value": "(2 * intersection + eps) / (union + eps)",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "test.py": {
        "torch": {
            "device_18": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DataLoader_27": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Load_Dataset(val_file_names)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_20": {
                "f": {
                    "value": "weight_load",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'Logs/T20200913_164608/weights_0.pth'",
                            "str"
                        ]
                    ]
                },
                "map_location": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cpu')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "DataParallel_39": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mod.cuda(device_ids[0])",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model, device_ids=device_ids)",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "device_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[0]",
                            "List"
                        ]
                    ]
                }
            },
            "Adam_43": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lra",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4e-05",
                            "float"
                        ]
                    ]
                }
            },
            "DataLoader_49": {
                "variable": {
                    "value": "dataloaders",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "liver_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Load_Dataset(train_file)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.batch_size",
                            "Attribute"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_50": {
                "variable": {
                    "value": "val_load",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Load_Dataset(val_file)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.batch_size",
                            "Attribute"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_90": {
                "obj": {
                    "value": "model.module.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "logs_dir + 'weights_{}.pth'.format(epoch)",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "validation.py": {
        "torch": {
            "no_grad_8": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}