{
    "sognet/dataset/ade20k.py": {
        "torch": {}
    },
    "sognet/dataset/base_dataset.py": {
        "torch": {
            "cat_944": {
                "tensors": {
                    "value": "[b.unsqueeze(0) for b in batch]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_950": {
                "ndarray": {
                    "value": "self.im_list_to_blob([b['data'] for b in batch])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_952": {
                "ndarray": {
                    "value": "self.im_list_to_blob([b['data'] for b in batch], scale=1 / 4.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_954": {
                "ndarray": {
                    "value": "self.gt_list_to_blob([b['seg_gt'][np.newaxis, ...] for b in batch])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_956": {
                "ndarray": {
                    "value": "self.gt_list_to_blob([b['seg_gt'][np.newaxis, ...] for b in batch], scale=1 / 4.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_959": {
                "ndarray": {
                    "value": "batch[0]['seg_roi_gt']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_961": {
                "ndarray": {
                    "value": "self.gt_list_to_blob([b['mask_gt'] for b in batch], scale=1.0 / 4)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_964": {
                "ndarray": {
                    "value": "self.gt_list_to_blob([b['matched_mask'] for b in batch], scale=1.0 / 4)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_975": {
                "tensors": {
                    "value": "[torch.from_numpy(np.array([b[key]])) for b in batch]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_979": {
                "tensors": {
                    "value": "[torch.from_numpy(b[key]) for b in batch]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_975": {
                "ndarray": {
                    "value": "np.array([b[key]])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_979": {
                "ndarray": {
                    "value": "b[key]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "sognet/dataset/cityscapes.py": {
        "torch": {}
    },
    "sognet/dataset/coco.py": {
        "torch": {}
    },
    "sognet/lib/nn/optimizer.py": {
        "torch": {}
    },
    "sognet/lib/utils/data_parallel.py": {
        "torch": {
            "get_device_properties_16": {
                "device": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "gather_114": {
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.parallel_apply(replicas, inputs, kwargs)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_69": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_75": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "sognet/lib/utils/metric.py": {
        "torch": {}
    },
    "sognet/models/fcn.py": {
        "torch": {
            "ModuleList_30": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_68": {
                "variable": {
                    "value": "self.score",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_79": {
                "variable": {
                    "value": "fpn_p3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fpn_p3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fcn_subnet(fpn_p3)",
                            "Call"
                        ],
                        [
                            "F.interpolate(fpn_p3, None, 2, mode='bilinear', align_corners=False)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_80": {
                "variable": {
                    "value": "fpn_p4",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fpn_p4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fcn_subnet(fpn_p4)",
                            "Call"
                        ],
                        [
                            "F.interpolate(fpn_p4, None, 4, mode='bilinear', align_corners=False)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_81": {
                "variable": {
                    "value": "fpn_p5",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fpn_p5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fcn_subnet(fpn_p5)",
                            "Call"
                        ],
                        [
                            "F.interpolate(fpn_p5, None, 8, mode='bilinear', align_corners=False)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_82": {
                "variable": {
                    "value": "feat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[fpn_p2, fpn_p3, fpn_p4, fpn_p5]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cross_entropy_124": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "predict",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "size_average": {
                    "value": "self.size_average",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "self.ignore_label",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "interpolate_86": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.score(feat)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "self.upsample_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_40": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_41": {
                "*args": {
                    "value": "*conv",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "GroupNorm_26": {
                "num_groups": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "sognet/models/fpn.py": {
        "torch": {
            "MaxPool2d_24": {
                "variable": {
                    "value": "self.fpn_p6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_26": {
                "variable": {
                    "value": "self.fpn_gap",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "feature_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_36": {
                "variable": {
                    "value": "self.fpn_p5_1x1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[nn.Conv2d(2048, feature_dim, 1, bias=False), norm(feature_dim)]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_37": {
                "variable": {
                    "value": "self.fpn_p4_1x1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[nn.Conv2d(1024, feature_dim, 1, bias=False), norm(feature_dim)]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_38": {
                "variable": {
                    "value": "self.fpn_p3_1x1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[nn.Conv2d(512, feature_dim, 1, bias=False), norm(feature_dim)]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_39": {
                "variable": {
                    "value": "self.fpn_p2_1x1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[nn.Conv2d(256, feature_dim, 1, bias=False), norm(feature_dim)]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_40": {
                "variable": {
                    "value": "self.fpn_p5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[nn.Conv2d(feature_dim, feature_dim, 3, padding=1, bias=False), norm(feature_dim)]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_41": {
                "variable": {
                    "value": "self.fpn_p4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[nn.Conv2d(feature_dim, feature_dim, 3, padding=1, bias=False), norm(feature_dim)]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_42": {
                "variable": {
                    "value": "self.fpn_p3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[nn.Conv2d(feature_dim, feature_dim, 3, padding=1, bias=False), norm(feature_dim)]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_43": {
                "variable": {
                    "value": "self.fpn_p2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[nn.Conv2d(feature_dim, feature_dim, 3, padding=1, bias=False), norm(feature_dim)]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_45": {
                "variable": {
                    "value": "self.fpn_p5_1x1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "feature_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_46": {
                "variable": {
                    "value": "self.fpn_p4_1x1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "feature_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_47": {
                "variable": {
                    "value": "self.fpn_p3_1x1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "feature_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_48": {
                "variable": {
                    "value": "self.fpn_p2_1x1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "feature_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_49": {
                "variable": {
                    "value": "self.fpn_p5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "feature_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "feature_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_50": {
                "variable": {
                    "value": "self.fpn_p4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "feature_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "feature_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_51": {
                "variable": {
                    "value": "self.fpn_p3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "feature_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "feature_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_52": {
                "variable": {
                    "value": "self.fpn_p2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "feature_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "feature_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_19": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "upsample_method",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'nearest'",
                            "MethodArgument"
                        ]
                    ]
                },
                "align_corners": {
                    "value": "False if upsample_method == 'bilinear' else None",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "GroupNorm_32": {
                "num_groups": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "num_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_36": {
                "in_channels": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "feature_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_37": {
                "in_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "feature_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_38": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "feature_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_39": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "feature_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_40": {
                "in_channels": {
                    "value": "feature_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "feature_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_41": {
                "in_channels": {
                    "value": "feature_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "feature_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_42": {
                "in_channels": {
                    "value": "feature_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "feature_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_43": {
                "in_channels": {
                    "value": "feature_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "feature_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_70": {
                "input": {
                    "value": "res5",
                    "type": "variable",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "squeeze_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "sognet/models/rcnn.py": {
        "torch": {
            "Conv2d_48": {
                "variable": {
                    "value": "self.mask_score",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "dim_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_97": {
                "variable": {
                    "value": "self.cls_score",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_98": {
                "variable": {
                    "value": "self.bbox_pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_reg_classes * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_135": {
                "variable": {
                    "value": "self.cls_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "SmoothL1Loss_136": {
                "variable": {
                    "value": "self.bbox_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_146": {
                "variable": {
                    "value": "self.cls_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "max_150": {
                "variable": {
                    "value": "(_, cls_pred)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "cls_score.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "abs_167": {
                "variable": {
                    "value": "abs_in_box_diff",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "in_box_diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bbox_inside_weights * box_diff",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Sequential_36": {
                "variable": {
                    "value": "self.mask_conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[conv(dim_in, dim_hidden, 3, 1, 1, bias=False), norm(dim_hidden), nn.ReLU(inplace=True)]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_37": {
                "variable": {
                    "value": "self.mask_conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[conv(dim_hidden, dim_hidden, 3, 1, 1, bias=False), norm(dim_hidden), nn.ReLU(inplace=True)]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_38": {
                "variable": {
                    "value": "self.mask_conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[conv(dim_hidden, dim_hidden, 3, 1, 1, bias=False), norm(dim_hidden), nn.ReLU(inplace=True)]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_39": {
                "variable": {
                    "value": "self.mask_conv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[conv(dim_hidden, dim_hidden, 3, 1, 1, bias=False), norm(dim_hidden), nn.ReLU(inplace=True)]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_40": {
                "variable": {
                    "value": "self.mask_deconv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[nn.ConvTranspose2d(dim_hidden, dim_hidden, 2, 2, 0), nn.ReLU(inplace=True)]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_42": {
                "variable": {
                    "value": "self.mask_conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[conv(dim_in, dim_hidden, 3, 1, 1), nn.ReLU(inplace=True)]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_43": {
                "variable": {
                    "value": "self.mask_conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[conv(dim_hidden, dim_hidden, 3, 1, 1), nn.ReLU(inplace=True)]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_44": {
                "variable": {
                    "value": "self.mask_conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[conv(dim_hidden, dim_hidden, 3, 1, 1), nn.ReLU(inplace=True)]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_45": {
                "variable": {
                    "value": "self.mask_conv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[conv(dim_hidden, dim_hidden, 3, 1, 1), nn.ReLU(inplace=True)]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_46": {
                "variable": {
                    "value": "self.mask_deconv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[nn.ConvTranspose2d(dim_hidden, dim_hidden, 2, 2, 0), nn.ReLU(inplace=True)]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_92": {
                "variable": {
                    "value": "self.fc6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[nn.Linear(pool_size ** 2 * dim_in, dim_hidden), View(-1, dim_hidden, 1, 1), norm(dim_hidden), View(-1, dim_hidden), nn.ReLU(inplace=True)]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_93": {
                "variable": {
                    "value": "self.fc7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[nn.Linear(dim_hidden, dim_hidden), nn.ReLU(inplace=True)]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_95": {
                "variable": {
                    "value": "self.fc6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[nn.Linear(pool_size ** 2 * dim_in, dim_hidden), nn.ReLU(inplace=True)]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_96": {
                "variable": {
                    "value": "self.fc7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[nn.Linear(dim_hidden, dim_hidden), nn.ReLU(inplace=True)]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "log_159": {
                "input": {
                    "value": "1 + torch.exp(input - 2 * input * binary_input)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "GroupNorm_32": {
                "num_groups": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "num_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "GroupNorm_88": {
                "num_groups": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "num_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "exp_159": {
                "input": {
                    "value": "input - 2 * input * binary_input",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_36": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_37": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_38": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_39": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_40": {
                "in_channels": {
                    "value": "dim_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "dim_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_40": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_42": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_43": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_44": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_45": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_46": {
                "in_channels": {
                    "value": "dim_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "dim_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_46": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_92": {
                "in_features": {
                    "value": "pool_size ** 2 * dim_in",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_92": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_93": {
                "in_features": {
                    "value": "dim_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_93": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_95": {
                "in_features": {
                    "value": "pool_size ** 2 * dim_in",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_95": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_96": {
                "in_features": {
                    "value": "dim_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_96": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pow_169": {
                "input": {
                    "value": "in_box_diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bbox_inside_weights * box_diff",
                            "BinOp"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "sognet/models/relation.py": {
        "torch": {
            "Sequential_23": {
                "variable": {
                    "value": "self.U",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(80, 256, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_27": {
                "variable": {
                    "value": "self.V",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(80, 256, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_31": {
                "variable": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(4, 128, 1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_35": {
                "variable": {
                    "value": "self.P",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(384, 1, 1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_57": {
                "variable": {
                    "value": "dw",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "w / w[:, None]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_58": {
                "variable": {
                    "value": "dh",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h / h[:, None]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "arange_66": {
                "variable": {
                    "value": "onehot",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "80",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_85": {
                "variable": {
                    "value": "feat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[cls_relation, bbox_feat]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_87": {
                "variable": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.P(feat.permute(2, 0, 1)[None, ...])",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_87": {
                "variable": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_89": {
                "variable": {
                    "value": "O",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "OO",
                    "type": "variable",
                    "possible_values": [
                        [
                            "R - R.transpose(0, 1)",
                            "BinOp"
                        ]
                    ]
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sigmoid_92": {
                "variable": {
                    "value": "trans_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "mse_loss_113": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "relation_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "relation_mat + relation_mat.transpose(0, 1)",
                            "BinOp"
                        ]
                    ]
                },
                "target": {
                    "value": "gt",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_60": {
                "tensors": {
                    "value": "[dx[..., None], dy[..., None], dw[..., None], dh[..., None]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_24": {
                "in_features": {
                    "value": "80",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_25": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_28": {
                "in_features": {
                    "value": "80",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_29": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_32": {
                "in_channels": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_33": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_36": {
                "in_channels": {
                    "value": "384",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_107": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_78": {
                "data": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "device_114": {
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "sognet/models/resnet.py": {
        "torch": {
            "Conv2d_43": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_44": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_46": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_48": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_49": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_50": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_51": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_92": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_93": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_95": {
                "variable": {
                    "value": "self.conv2_offset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "18 * deformable_group",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_100": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_101": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_102": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_103": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_145": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_147": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_148": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_149": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_188": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_168": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_232": {
                "variable": {
                    "value": "state_dict[weight_name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "weight_blobs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(np.random.randn(*[9] + list(state_dict[weight_name].shape[1:])) * std + mean).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "(np.random.randn(*[19] + list(state_dict[weight_name].shape[1:])) * std + mean).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "weight_blobs.reshape([-1] + list(state_dict[weight_name].shape[2:]))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_265": {
                "variable": {
                    "value": "state_dict[weight_name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "weight_blobs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(np.random.randn(*[9] + list(state_dict[weight_name].shape[1:])) * std + mean).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "(np.random.randn(*[19] + list(state_dict[weight_name].shape[1:])) * std + mean).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "weight_blobs.reshape([-1] + list(state_dict[weight_name].shape[2:]))",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_169": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_171": {
                "num_features": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "sognet/models/rpn.py": {
        "torch": {
            "Conv2d_26": {
                "variable": {
                    "value": "self.cls_score",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.num_anchors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_27": {
                "variable": {
                    "value": "self.bbox_pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.num_anchors * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_41": {
                "variable": {
                    "value": "cls_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cls_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.cls_score(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_58": {
                "variable": {
                    "value": "abs_in_box_diff",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "in_box_diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bbox_inside_weights * box_diff",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Sequential_23": {
                "variable": {
                    "value": "self.conv_proposal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[nn.Conv2d(input_dim, input_dim, 3, padding=1), norm(input_dim), nn.ReLU(inplace=True)]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_25": {
                "variable": {
                    "value": "self.conv_proposal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[nn.Conv2d(input_dim, input_dim, 3, padding=1), nn.ReLU(inplace=True)]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "GroupNorm_19": {
                "num_groups": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "num_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_23": {
                "in_channels": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_23": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_25": {
                "in_channels": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_25": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pow_60": {
                "input": {
                    "value": "in_box_diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bbox_inside_weights * box_diff",
                            "BinOp"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "sognet/models/sognet.py": {
        "torch": {
            "CrossEntropyLoss_68": {
                "variable": {
                    "value": "self.fcn_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "255",
                    "type": "int",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_69": {
                "variable": {
                    "value": "self.panoptic_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "255",
                    "type": "int",
                    "possible_values": []
                },
                "reduce": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_354": {
                "variable": {
                    "value": "(_, output_cls)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "panoptic_logits.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_398": {
                "variable": {
                    "value": "binary_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(logits.size(1), logits.size(2))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_405": {
                "variable": {
                    "value": "inter",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits.size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "min_412": {
                "variable": {
                    "value": "min_area",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "area[:, None]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_72": {
                "variable": {
                    "value": "self.fcn_roi_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "255",
                    "type": "int",
                    "possible_values": []
                },
                "reduce": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_244": {
                "variable": {
                    "value": "cls_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cls_score",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_248": {
                "variable": {
                    "value": "mask_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.mask_branch([fpn_p2, fpn_p3, fpn_p4, fpn_p5], mask_rois)",
                            "Call"
                        ],
                        [
                            "self.mask_branch([fpn_p2, fpn_p3, fpn_p4, fpn_p5], mask_rois)",
                            "Call"
                        ],
                        [
                            "mask_score.gather(1, cls_idx.view(-1, 1, 1, 1).expand(-1, -1, config.network.mask_size, config.network.mask_size))",
                            "Call"
                        ],
                        [
                            "self.mask_branch([fpn_p2, fpn_p3, fpn_p4, fpn_p5], mask_rois)",
                            "Call"
                        ],
                        [
                            "self.mask_branch([fpn_p2, fpn_p3, fpn_p4, fpn_p5], gt_rois)",
                            "Call"
                        ],
                        [
                            "mask_score.gather(1, cls_idx.view(-1, 1, 1, 1).expand(-1, -1, config.network.mask_size, config.network.mask_size))",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_206": {
                "variable": {
                    "value": "panoptic_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[seg_logits, inst_logits, void_logits]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_216": {
                "variable": {
                    "value": "relation_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_304": {
                "variable": {
                    "value": "new_index",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "new_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[x for x in range(num_ins)]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(new_index).to(mask_logits.device)",
                            "Call"
                        ],
                        [
                            "(-indicator).argsort()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_334": {
                "variable": {
                    "value": "panoptic_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[seg_logits, inst_logits, void_logits]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_344": {
                "variable": {
                    "value": "panoptic_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[seg_logits, inst_logits]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_413": {
                "n": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits.size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_424": {
                "ndarray": {
                    "value": "cls_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cls_idx[keep_inds]",
                            "Subscript"
                        ],
                        [
                            "cls_idx[new_index]",
                            "Subscript"
                        ],
                        [
                            "cls_idx[new_index]",
                            "Subscript"
                        ],
                        [
                            "cls_idx[keep_inds]",
                            "Subscript"
                        ],
                        [
                            "cls_idx[new_index]",
                            "Subscript"
                        ],
                        [
                            "roidb['gt_classes'][gt_inds]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "no_grad_156": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_191": {
                "variable": {
                    "value": "mask_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[relation_part, no_relation_part]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_209": {
                "variable": {
                    "value": "panoptic_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[seg_logits, mask_logits + 2 * torch.mul(seg_inst_logits, torch.sigmoid(mask_logits))]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_211": {
                "variable": {
                    "value": "panoptic_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[seg_logits, seg_inst_logits + mask_logits]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_299": {
                "variable": {
                    "value": "mask_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[relation_part, no_relation_part]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_315": {
                "variable": {
                    "value": "mask_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[relation_part, no_relation_part]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_255": {
                "input": {
                    "value": "fcn_output['fcn_output']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_337": {
                "input": {
                    "value": "panoptic_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([seg_logits, inst_logits, void_logits], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat([seg_logits, inst_logits], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat([seg_logits, mask_logits + 2 * torch.mul(seg_inst_logits, torch.sigmoid(mask_logits))], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat([seg_logits, seg_inst_logits + mask_logits], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat([seg_logits, inst_logits, void_logits], dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_346": {
                "input": {
                    "value": "F.softmax(panoptic_logits, dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_201": {
                "input": {
                    "value": "seg_inst_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_290": {
                "variable": {
                    "value": "selected",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.unsqueeze(relation_part[:, ins_id1], dim=1), torch.unsqueeze(relation_part[:, ins_id2], dim=1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_291": {
                "variable": {
                    "value": "mask_rois_selected",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.unsqueeze(mask_rois_relation[ins_id1, :], dim=0), torch.unsqueeze(mask_rois_relation[ins_id2, :], dim=0)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_292": {
                "variable": {
                    "value": "cls_idx_selected",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.unsqueeze(cls_idx_relation[ins_id1], dim=0), torch.unsqueeze(cls_idx_relation[ins_id2], dim=0)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_329": {
                "input": {
                    "value": "seg_inst_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_346": {
                "input": {
                    "value": "panoptic_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([seg_logits, inst_logits, void_logits], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat([seg_logits, inst_logits], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat([seg_logits, mask_logits + 2 * torch.mul(seg_inst_logits, torch.sigmoid(mask_logits))], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat([seg_logits, seg_inst_logits + mask_logits], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat([seg_logits, inst_logits, void_logits], dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mul_203": {
                "input": {
                    "value": "seg_inst_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.sigmoid(mask_logits)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mul_331": {
                "input": {
                    "value": "seg_inst_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.sigmoid(mask_logits)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mul_341": {
                "input": {
                    "value": "seg_inst_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.sigmoid(mask_logits)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_203": {
                "input": {
                    "value": "mask_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask_logits[:, new_index]",
                            "Subscript"
                        ],
                        [
                            "mask_logits[:, new_index]",
                            "Subscript"
                        ],
                        [
                            "torch.cat([relation_part, no_relation_part], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat([relation_part, no_relation_part], dim=1)",
                            "Call"
                        ],
                        [
                            "self.mask_term(mask_score, gt_rois, cls_idx, fcn_output['fcn_score'])",
                            "Call"
                        ],
                        [
                            "mask_logits[:, new_index, ...]",
                            "Subscript"
                        ],
                        [
                            "torch.cat([relation_part, no_relation_part], dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_331": {
                "input": {
                    "value": "mask_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask_logits[:, new_index]",
                            "Subscript"
                        ],
                        [
                            "mask_logits[:, new_index]",
                            "Subscript"
                        ],
                        [
                            "torch.cat([relation_part, no_relation_part], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat([relation_part, no_relation_part], dim=1)",
                            "Call"
                        ],
                        [
                            "self.mask_term(mask_score, gt_rois, cls_idx, fcn_output['fcn_score'])",
                            "Call"
                        ],
                        [
                            "mask_logits[:, new_index, ...]",
                            "Subscript"
                        ],
                        [
                            "torch.cat([relation_part, no_relation_part], dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_341": {
                "input": {
                    "value": "mask_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask_logits[:, new_index]",
                            "Subscript"
                        ],
                        [
                            "mask_logits[:, new_index]",
                            "Subscript"
                        ],
                        [
                            "torch.cat([relation_part, no_relation_part], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat([relation_part, no_relation_part], dim=1)",
                            "Call"
                        ],
                        [
                            "self.mask_term(mask_score, gt_rois, cls_idx, fcn_output['fcn_score'])",
                            "Call"
                        ],
                        [
                            "mask_logits[:, new_index, ...]",
                            "Subscript"
                        ],
                        [
                            "torch.cat([relation_part, no_relation_part], dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "mul_209": {
                "input": {
                    "value": "seg_inst_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.sigmoid(mask_logits)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_290": {
                "input": {
                    "value": "relation_part[:, ins_id2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_291": {
                "input": {
                    "value": "mask_rois_relation[ins_id2, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_292": {
                "input": {
                    "value": "cls_idx_relation[ins_id2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_209": {
                "input": {
                    "value": "mask_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask_logits[:, new_index]",
                            "Subscript"
                        ],
                        [
                            "mask_logits[:, new_index]",
                            "Subscript"
                        ],
                        [
                            "torch.cat([relation_part, no_relation_part], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat([relation_part, no_relation_part], dim=1)",
                            "Call"
                        ],
                        [
                            "self.mask_term(mask_score, gt_rois, cls_idx, fcn_output['fcn_score'])",
                            "Call"
                        ],
                        [
                            "mask_logits[:, new_index, ...]",
                            "Subscript"
                        ],
                        [
                            "torch.cat([relation_part, no_relation_part], dim=1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "sognet/operators/build_deform_conv.py": {
        "torch": {}
    },
    "sognet/operators/build_mod_deform_conv.py": {
        "torch": {}
    },
    "sognet/operators/build_roialign.py": {
        "torch": {}
    },
    "sognet/operators/functions/deform_conv.py": {
        "torch": {
            "mm_36": {
                "variable": {
                    "value": "output[i, :, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "weight.view(-1, int(ctx.in_channels * np.prod(ctx.kernel_size)))",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "col_buffer.view(int(ctx.in_channels * np.prod(ctx.kernel_size)), -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_54": {
                "variable": {
                    "value": "col_buffer",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight.view(-1, int(ctx.in_channels * np.prod(ctx.kernel_size))).t()",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "grad_output.data[i, :, :, :].view(ctx.out_channels, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_70": {
                "input": {
                    "value": "grad_output.data[i, :, :, :].view(grad_output.size(1), -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "col_buffer.view(col_buffer.size(0), -1).t()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "sognet/operators/functions/mod_deform_conv.py": {
        "torch": {
            "mm_39": {
                "variable": {
                    "value": "output[i, :, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "weight.view(-1, int(ctx.in_channels * np.prod(ctx.kernel_size)))",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "col_buffer.view(int(ctx.in_channels * np.prod(ctx.kernel_size)), -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_58": {
                "variable": {
                    "value": "col_buffer",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight.view(-1, int(ctx.in_channels * np.prod(ctx.kernel_size))).t()",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "grad_output.data[i, :, :, :].view(ctx.out_channels, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_74": {
                "input": {
                    "value": "grad_output.data[i, :, :, :].view(grad_output.size(1), -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "col_buffer.view(col_buffer.size(0), -1).t()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "sognet/operators/functions/proposal_mask_target.py": {
        "torch": {
            "device_20": {
                "variable": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "index": {
                    "value": "rois.get_device()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "sognet/operators/functions/proposal_target.py": {
        "torch": {}
    },
    "sognet/operators/functions/pyramid_proposal.py": {
        "torch": {
            "device_30": {
                "variable": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "index": {
                    "value": "device_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cls_prob_p2.get_device()",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_206": {
                "data": {
                    "value": "blob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.hstack((batch_inds, proposals.astype(np.float32, copy=False)))",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_207": {
                "data": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cls_probs[s].cpu().numpy()",
                            "Call"
                        ],
                        [
                            "scores.transpose((0, 2, 3, 1)).reshape((-1, 1))",
                            "Call"
                        ],
                        [
                            "np.vstack(score_list)",
                            "Call"
                        ],
                        [
                            "scores[keep]",
                            "Subscript"
                        ],
                        [
                            "scores.squeeze()",
                            "Call"
                        ],
                        [
                            "scores[keep]",
                            "Subscript"
                        ],
                        [
                            "scores[order]",
                            "Subscript"
                        ],
                        [
                            "scores[order]",
                            "Subscript"
                        ],
                        [
                            "det[:, 4]",
                            "Subscript"
                        ],
                        [
                            "det[:, 4]",
                            "Subscript"
                        ],
                        [
                            "scores[keep]",
                            "Subscript"
                        ],
                        [
                            "scores[keep]",
                            "Subscript"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "sognet/operators/functions/roialign.py": {
        "torch": {}
    },
    "sognet/operators/modules/deform_conv.py": {
        "torch": {
            "Parameter_27": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.out_channels, self.in_channels // self.groups, *self.kernel_size).cuda()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_55": {
                "variable": {
                    "value": "self.conv_offset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "kernel_size * kernel_size * 2 * deformable_groups",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_30": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.out_channels).cuda()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "sognet/operators/modules/fpn_roi_align.py": {
        "torch": {
            "device_18": {
                "variable": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "index": {
                    "value": "feat[0].get_device()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_35": {
                "variable": {
                    "value": "rois_index",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.argsort(np.hstack(feat_no))[-rois.shape[0]:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_44": {
                "variable": {
                    "value": "pool_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pool_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(pool_feat, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.index_select(pool_feat, 0, rois_index)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "index_select_45": {
                "variable": {
                    "value": "pool_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pool_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(pool_feat, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.index_select(pool_feat, 0, rois_index)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "rois_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(np.argsort(np.hstack(feat_no))[-rois.shape[0]:], dtype=torch.int64, requires_grad=False).to(context)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_40": {
                "variable": {
                    "value": "rois_fpn[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "rois_fpn[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "sognet/operators/modules/fpn_roi_pooling.py": {
        "torch": {
            "cat_44": {
                "variable": {
                    "value": "pool_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pool_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(pool_feat, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.index_select(pool_feat, 0, rois_index)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "index_select_45": {
                "variable": {
                    "value": "pool_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pool_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(pool_feat, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.index_select(pool_feat, 0, rois_index)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "rois_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(torch.LongTensor(np.argsort(np.hstack(feat_no))[-rois.shape[0]:]), requires_grad=False).cuda(feat[0].get_device())",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "sognet/operators/modules/mask_matching.py": {
        "torch": {
            "min_29": {
                "variable": {
                    "value": "min_area",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_num[:, None]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "where_46": {
                "variable": {
                    "value": "matched_gt",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "gt_segs <= config.dataset.num_seg_classes - config.dataset.num_classes",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "gt_segs",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "matched_gt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones_like(gt_segs) * -1",
                            "BinOp"
                        ],
                        [
                            "torch.where(gt_segs <= config.dataset.num_seg_classes - config.dataset.num_classes, gt_segs, matched_gt)",
                            "Call"
                        ],
                        [
                            "torch.where(gt_segs >= 255, gt_segs, matched_gt)",
                            "Call"
                        ],
                        [
                            "torch.ones_like(seg_gt) * -1",
                            "BinOp"
                        ],
                        [
                            "torch.where(seg_gt <= config.dataset.num_seg_classes - config.dataset.num_classes, seg_gt, matched_gt)",
                            "Call"
                        ],
                        [
                            "torch.where(seg_gt >= 255, seg_gt, matched_gt)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_47": {
                "variable": {
                    "value": "matched_gt",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "gt_segs >= 255",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "gt_segs",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "matched_gt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones_like(gt_segs) * -1",
                            "BinOp"
                        ],
                        [
                            "torch.where(gt_segs <= config.dataset.num_seg_classes - config.dataset.num_classes, gt_segs, matched_gt)",
                            "Call"
                        ],
                        [
                            "torch.where(gt_segs >= 255, gt_segs, matched_gt)",
                            "Call"
                        ],
                        [
                            "torch.ones_like(seg_gt) * -1",
                            "BinOp"
                        ],
                        [
                            "torch.where(seg_gt <= config.dataset.num_seg_classes - config.dataset.num_classes, seg_gt, matched_gt)",
                            "Call"
                        ],
                        [
                            "torch.where(seg_gt >= 255, seg_gt, matched_gt)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_103": {
                "variable": {
                    "value": "matched_gt",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "seg_gt <= config.dataset.num_seg_classes - config.dataset.num_classes",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "seg_gt",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "matched_gt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones_like(gt_segs) * -1",
                            "BinOp"
                        ],
                        [
                            "torch.where(gt_segs <= config.dataset.num_seg_classes - config.dataset.num_classes, gt_segs, matched_gt)",
                            "Call"
                        ],
                        [
                            "torch.where(gt_segs >= 255, gt_segs, matched_gt)",
                            "Call"
                        ],
                        [
                            "torch.ones_like(seg_gt) * -1",
                            "BinOp"
                        ],
                        [
                            "torch.where(seg_gt <= config.dataset.num_seg_classes - config.dataset.num_classes, seg_gt, matched_gt)",
                            "Call"
                        ],
                        [
                            "torch.where(seg_gt >= 255, seg_gt, matched_gt)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_104": {
                "variable": {
                    "value": "matched_gt",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "seg_gt >= 255",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "seg_gt",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "matched_gt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones_like(gt_segs) * -1",
                            "BinOp"
                        ],
                        [
                            "torch.where(gt_segs <= config.dataset.num_seg_classes - config.dataset.num_classes, gt_segs, matched_gt)",
                            "Call"
                        ],
                        [
                            "torch.where(gt_segs >= 255, gt_segs, matched_gt)",
                            "Call"
                        ],
                        [
                            "torch.ones_like(seg_gt) * -1",
                            "BinOp"
                        ],
                        [
                            "torch.where(seg_gt <= config.dataset.num_seg_classes - config.dataset.num_classes, seg_gt, matched_gt)",
                            "Call"
                        ],
                        [
                            "torch.where(seg_gt >= 255, seg_gt, matched_gt)",
                            "Call"
                        ]
                    ]
                }
            },
            "eye_31": {
                "n": {
                    "value": "num_ins",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gt_masks.size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_45": {
                "input": {
                    "value": "gt_segs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_like_102": {
                "input": {
                    "value": "seg_gt",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_142": {
                "ndarray": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label.data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "label[keep != 0]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "sognet/operators/modules/mask_removal.py": {
        "torch": {
            "from_numpy_54": {
                "variable": {
                    "value": "logit_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cv2.resize(mask_logit[i].squeeze(), (w, h))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_78": {
                "ndarray": {
                    "value": "np.array(keep_inds)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_42": {
                "ndarray": {
                    "value": "np.array([0], dtype=np.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_77": {
                "ndarray": {
                    "value": "np.array([0], dtype=np.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "sognet/operators/modules/mask_roi.py": {
        "torch": {
            "zeros_like_170": {
                "variable": {
                    "value": "transformed_bbox",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bbox_delta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bbox_delta.cpu().detach().numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_50": {
                "variable": {
                    "value": "cls_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.zeros_like(cls_prob), cls_prob]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_114": {
                "variable": {
                    "value": "scores_th",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "scores_th[1:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_128": {
                "variable": {
                    "value": "scores_th",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "scores_th[1:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_181": {
                "variable": {
                    "value": "im_wh",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "im_info[0, [1, 0]] - 1.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "min_184": {
                "variable": {
                    "value": "transformed_bbox",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "transformed_bbox",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(bbox_delta)",
                            "Call"
                        ],
                        [
                            "transformed_bbox.view((transformed_bbox.shape[0], -1, 4))",
                            "Call"
                        ],
                        [
                            "torch.min(transformed_bbox, im_wh)",
                            "Call"
                        ],
                        [
                            "torch.max(transformed_bbox, torch.zeros_like(transformed_bbox))",
                            "Call"
                        ]
                    ]
                }
            },
            "max_185": {
                "variable": {
                    "value": "transformed_bbox",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "transformed_bbox",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(bbox_delta)",
                            "Call"
                        ],
                        [
                            "transformed_bbox.view((transformed_bbox.shape[0], -1, 4))",
                            "Call"
                        ],
                        [
                            "torch.min(transformed_bbox, im_wh)",
                            "Call"
                        ],
                        [
                            "torch.max(transformed_bbox, torch.zeros_like(transformed_bbox))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_81": {
                "ndarray": {
                    "value": "inds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.where(cls_prob_np[:, j] > self.score_thresh)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_116": {
                "ndarray": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros(im_results.shape)",
                            "Call"
                        ],
                        [
                            "np.zeros((1, 5))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_117": {
                "ndarray": {
                    "value": "cls_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[[_ for __ in range(proposal.shape[0])] for _ in range(self.num_classes)]",
                            "ListComp"
                        ],
                        [
                            "np.array(cls_idx).T[:, 1:].reshape((1, -1))",
                            "Call"
                        ],
                        [
                            "np.vstack((np.zeros_like(cls_idx), cls_idx)).tolist()",
                            "Call"
                        ],
                        [
                            "np.hstack(cls_idx[1:])",
                            "Call"
                        ],
                        [
                            "np.zeros((1,))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_124": {
                "ndarray": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "im_results[:, -1]",
                            "Subscript"
                        ],
                        [
                            "np.ones((1,))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_125": {
                "ndarray": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros(im_results.shape)",
                            "Call"
                        ],
                        [
                            "np.zeros((1, 5))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_126": {
                "ndarray": {
                    "value": "cls_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[[_ for __ in range(proposal.shape[0])] for _ in range(self.num_classes)]",
                            "ListComp"
                        ],
                        [
                            "np.array(cls_idx).T[:, 1:].reshape((1, -1))",
                            "Call"
                        ],
                        [
                            "np.vstack((np.zeros_like(cls_idx), cls_idx)).tolist()",
                            "Call"
                        ],
                        [
                            "np.hstack(cls_idx[1:])",
                            "Call"
                        ],
                        [
                            "np.zeros((1,))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_130": {
                "ndarray": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros(im_results.shape)",
                            "Call"
                        ],
                        [
                            "np.zeros((1, 5))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_131": {
                "ndarray": {
                    "value": "cls_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[[_ for __ in range(proposal.shape[0])] for _ in range(self.num_classes)]",
                            "ListComp"
                        ],
                        [
                            "np.array(cls_idx).T[:, 1:].reshape((1, -1))",
                            "Call"
                        ],
                        [
                            "np.vstack((np.zeros_like(cls_idx), cls_idx)).tolist()",
                            "Call"
                        ],
                        [
                            "np.hstack(cls_idx[1:])",
                            "Call"
                        ],
                        [
                            "np.zeros((1,))",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_185": {
                "input": {
                    "value": "transformed_bbox",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(bbox_delta)",
                            "Call"
                        ],
                        [
                            "transformed_bbox.view((transformed_bbox.shape[0], -1, 4))",
                            "Call"
                        ],
                        [
                            "torch.min(transformed_bbox, im_wh)",
                            "Call"
                        ],
                        [
                            "torch.max(transformed_bbox, torch.zeros_like(transformed_bbox))",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_50": {
                "input": {
                    "value": "cls_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cls_prob.cpu()",
                            "Call"
                        ],
                        [
                            "cls_score.cpu()",
                            "Call"
                        ],
                        [
                            "cls_prob[:, 1:].contiguous().view(-1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([torch.zeros_like(cls_prob), cls_prob], dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_100": {
                "ndarray": {
                    "value": "np.array(keep)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_103": {
                "ndarray": {
                    "value": "np.array(keep)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "sognet/operators/modules/mod_deform_conv.py": {
        "torch": {
            "Parameter_27": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.out_channels, self.in_channels // self.groups, *self.kernel_size).cuda()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "chunk_46": {
                "variable": {
                    "value": "(offset_1, offset_2, mask)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "offset_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "chunks": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_47": {
                "variable": {
                    "value": "offset",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(offset_1, offset_2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_59": {
                "variable": {
                    "value": "self.conv_offset_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "kernel_size * kernel_size * 3 * deformable_groups",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_30": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.out_channels).cuda()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_48": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(mask) * 2",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "sognet/operators/modules/proposal_mask_target.py": {
        "torch": {
            "device_24": {
                "variable": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "index": {
                    "value": "rois.get_device()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_38": {
                "tensors": {
                    "value": "[torch.tensor(_, dtype=torch.float32, requires_grad=False).pin_memory().to(context, non_blocking=True) for _ in blobs['rois']]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_39": {
                "tensors": {
                    "value": "[torch.tensor(_, dtype=torch.int64, requires_grad=False).pin_memory().to(context, non_blocking=True) for _ in blobs['labels_int32']]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_40": {
                "tensors": {
                    "value": "[torch.tensor(_, dtype=torch.float32, requires_grad=False).pin_memory().to(context, non_blocking=True) for _ in blobs['bbox_targets']]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_41": {
                "tensors": {
                    "value": "[torch.tensor(_, dtype=torch.float32, requires_grad=False).pin_memory().to(context, non_blocking=True) for _ in blobs['bbox_inside_weights']]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_42": {
                "tensors": {
                    "value": "[torch.tensor(_, dtype=torch.float32, requires_grad=False).pin_memory().to(context, non_blocking=True) for _ in blobs['bbox_outside_weights']]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_43": {
                "tensors": {
                    "value": "[torch.tensor(_, dtype=torch.float32, requires_grad=False).pin_memory().to(context, non_blocking=True) for _ in blobs['mask_rois']]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_44": {
                "tensors": {
                    "value": "[torch.tensor(_, dtype=torch.float32, requires_grad=False).pin_memory().to(context, non_blocking=True) for _ in blobs['mask_int32']]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_45": {
                "tensors": {
                    "value": "[torch.tensor(_, dtype=torch.uint8, requires_grad=False).pin_memory().to(context, non_blocking=True) for _ in blobs['roi_has_mask_int32']]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_46": {
                "tensors": {
                    "value": "[torch.tensor(_, dtype=torch.int64, requires_grad=False).pin_memory().to(context, non_blocking=True) for _ in blobs['nongt_inds']]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_38": {
                "data": {
                    "value": "_",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_39": {
                "data": {
                    "value": "_",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_40": {
                "data": {
                    "value": "_",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_41": {
                "data": {
                    "value": "_",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_42": {
                "data": {
                    "value": "_",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_43": {
                "data": {
                    "value": "_",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_44": {
                "data": {
                    "value": "_",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_45": {
                "data": {
                    "value": "_",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_46": {
                "data": {
                    "value": "_",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "sognet/operators/modules/proposal_target.py": {
        "torch": {}
    },
    "sognet/operators/modules/pyramid_proposal.py": {
        "torch": {
            "sort_48": {
                "variable": {
                    "value": "(_, idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "-scores",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_46": {
                "tensors": {
                    "value": "rois",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(rois, 0).data",
                            "Attribute"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_47": {
                "tensors": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(scores, 0).data",
                            "Attribute"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_43": {
                "ndarray": {
                    "value": "im_info[i, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "sognet/operators/modules/roialign.py": {
        "torch": {}
    },
    "sognet/operators/modules/unary_logits.py": {
        "torch": {
            "zeros_36": {
                "variable": {
                    "value": "mask_energy",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(seg_score.shape[0], masks.shape[0], seg_score.shape[2], seg_score.shape[3])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "seg_score.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "upsample_44": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "masks[i, 0, :, :].view(1, 1, config.network.mask_size, config.network.mask_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_80": {
                "variable": {
                    "value": "seg_inst_energy",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(seg_score.shape[0], cls_indices.shape[0], seg_score.shape[2], seg_score.shape[3])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "seg_score.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_78": {
                "input": {
                    "value": "seg_energy[[0], [0], :, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "sognet/operators/modules/view.py": {
        "torch": {}
    },
    "tools/test_net.py": {
        "torch": {
            "DataLoader_155": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eval(config.dataset.dataset)(image_sets=config.dataset.test_image_set.split('+'), flip=False, result_path=final_output_path, phase='test')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "config.test.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "test_dataset.collate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_178": {
                "f": {
                    "value": "os.path.join(os.path.join(os.path.join(config.output_path, os.path.basename(args.cfg).split('.')[0]), '_'.join(config.dataset.image_set.split('+')), config.model_prefix + str(curr_iter) + '.pth'))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_181": {
                "f": {
                    "value": "args.weight_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_234": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_236": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_tensor_220": {
                "obj": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "is_tensor_224": {
                "obj": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "tools/train_net.py": {
        "torch": {
            "manual_seed_all_57": {
                "seed": {
                    "value": "235",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_58": {
                "seed": {
                    "value": "235",
                    "type": "int",
                    "possible_values": []
                }
            },
            "set_device_36": {
                "device": {
                    "value": "hvd.local_rank()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DistributedSampler_117": {
                "variable": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eval(config.dataset.dataset)(image_sets=config.dataset.image_set.split('+'), flip=config.train.flip, result_path=final_output_path)",
                            "Call"
                        ]
                    ]
                },
                "num_replicas": {
                    "value": "hvd.size()",
                    "type": "Call",
                    "possible_values": []
                },
                "rank": {
                    "value": "hvd.rank()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DistributedSampler_118": {
                "variable": {
                    "value": "val_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eval(config.dataset.dataset)(image_sets=config.dataset.test_image_set.split('+'), flip=False, result_path=final_output_path, phase='val')",
                            "Call"
                        ]
                    ]
                },
                "num_replicas": {
                    "value": "hvd.size()",
                    "type": "Call",
                    "possible_values": []
                },
                "rank": {
                    "value": "hvd.rank()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_119": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eval(config.dataset.dataset)(image_sets=config.dataset.image_set.split('+'), flip=config.train.flip, result_path=final_output_path)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "config.train.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "distributed.DistributedSampler(train_dataset, num_replicas=hvd.size(), rank=hvd.rank())",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "num_gpus * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "train_dataset.collate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_120": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eval(config.dataset.dataset)(image_sets=config.dataset.test_image_set.split('+'), flip=False, result_path=final_output_path, phase='val')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "config.train.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sampler": {
                    "value": "val_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "distributed.DistributedSampler(val_dataset, num_replicas=hvd.size(), rank=hvd.rank())",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "num_gpus * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "val_dataset.collate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_122": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eval(config.dataset.dataset)(image_sets=config.dataset.image_set.split('+'), flip=config.train.flip, result_path=final_output_path)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "config.train.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "config.train.shuffle",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_gpus * 4 if not config.debug_mode else num_gpus * 4",
                    "type": "IfExp",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "train_dataset.collate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_123": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eval(config.dataset.dataset)(image_sets=config.dataset.test_image_set.split('+'), flip=False, result_path=final_output_path, phase='val')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "config.train.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_gpus * 4 if not config.debug_mode else num_gpus * 4",
                    "type": "IfExp",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "val_dataset.collate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_98": {
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "index": {
                    "value": "int(_)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_391": {
                "obj": {
                    "value": "train_model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(final_output_path, config.model_prefix + str(curr_iter) + '.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_392": {
                "obj": {
                    "value": "optimizer.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(final_output_path, config.model_prefix + str(curr_iter) + '.state.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_155": {
                "f": {
                    "value": "os.path.join(final_output_path, config.model_prefix + str(curr_iter) + '.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_156": {
                "f": {
                    "value": "os.path.join(final_output_path, config.model_prefix + str(curr_iter) + '.state.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_395": {
                "obj": {
                    "value": "train_model.module.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(final_output_path, config.model_prefix + str(curr_iter) + '.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_396": {
                "obj": {
                    "value": "optimizer.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(final_output_path, config.model_prefix + str(curr_iter) + '.state.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_161": {
                "f": {
                    "value": "config.network.pretrained",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_243": {
                "obj": {
                    "value": "train_model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(final_output_path, config.model_prefix + str(curr_iter) + '.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_244": {
                "obj": {
                    "value": "optimizer.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(final_output_path, config.model_prefix + str(curr_iter) + '.state.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_312": {
                "obj": {
                    "value": "train_model.module.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(final_output_path, config.model_prefix + str(curr_iter) + '.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_313": {
                "obj": {
                    "value": "optimizer.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(final_output_path, config.model_prefix + str(curr_iter) + '.state.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_335": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_357": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_tensor_190": {
                "obj": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "is_tensor_192": {
                "obj": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "is_tensor_253": {
                "obj": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "is_tensor_255": {
                "obj": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "is_tensor_331": {
                "obj": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "is_tensor_333": {
                "obj": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "is_tensor_351": {
                "obj": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "is_tensor_353": {
                "obj": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    }
}