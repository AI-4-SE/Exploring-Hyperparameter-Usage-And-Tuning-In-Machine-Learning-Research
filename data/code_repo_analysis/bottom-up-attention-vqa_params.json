{
    "attention.py": {
        "torch": {
            "weight_norm_11": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Linear(num_hid, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "softmax_19": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits",
                            "Call"
                        ],
                        [
                            "self.logits(v, q)",
                            "Call"
                        ],
                        [
                            "self.linear(joint_repr)",
                            "Call"
                        ],
                        [
                            "logits",
                            "Call"
                        ],
                        [
                            "self.logits(v, q)",
                            "Call"
                        ],
                        [
                            "self.linear(joint_repr)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_25": {
                "variable": {
                    "value": "vq",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(v, q)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_37": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "weight_norm_38": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Linear(q_dim, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "softmax_46": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits",
                            "Call"
                        ],
                        [
                            "self.logits(v, q)",
                            "Call"
                        ],
                        [
                            "self.linear(joint_repr)",
                            "Call"
                        ],
                        [
                            "logits",
                            "Call"
                        ],
                        [
                            "self.logits(v, q)",
                            "Call"
                        ],
                        [
                            "self.linear(joint_repr)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_11": {
                "in_features": {
                    "value": "num_hid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_hid",
                            "Method Argument"
                        ],
                        [
                            "num_hid",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_38": {
                "in_features": {
                    "value": "q_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q_dim",
                            "Method Argument"
                        ],
                        [
                            "q_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "base_model.py": {
        "torch": {
            "Linear_21": {
                "variable": {
                    "value": "self.bias_lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "classifier.py": {
        "torch": {
            "Sequential_14": {
                "variable": {
                    "value": "self.main",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "weight_norm_9": {
                "module": {
                    "value": "nn.Linear(in_dim, hid_dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "ReLU_10": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_11": {
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout",
                            "Method Argument"
                        ]
                    ]
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "weight_norm_12": {
                "module": {
                    "value": "nn.Linear(hid_dim, out_dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "Linear_9": {
                "in_features": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hid_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hid_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_12": {
                "in_features": {
                    "value": "hid_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hid_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_dim",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "dataset.py": {
        "torch": {
            "zeros_220": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.num_ans_candidates",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_190": {
                "variable": {
                    "value": "question",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(entry['q_token'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_197": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(answer['labels'])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(labels)",
                            "Call"
                        ],
                        [
                            "answer['labels']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_198": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(answer['scores'], dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(scores)",
                            "Call"
                        ],
                        [
                            "answer['scores']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_211": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.image_to_fe[entry['image_id']]",
                            "Subscript"
                        ],
                        [
                            "np.array(self.features[entry['image_idx']])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(features).view(36, 2048)",
                            "Call"
                        ],
                        [
                            "np.fromfile('data/trainval_features/' + str(entry['image_id']) + '.data', np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(features).view(36, 2048)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_214": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.image_to_fe[entry['image_id']]",
                            "Subscript"
                        ],
                        [
                            "np.array(self.features[entry['image_idx']])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(features).view(36, 2048)",
                            "Call"
                        ],
                        [
                            "np.fromfile('data/trainval_features/' + str(entry['image_id']) + '.data', np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(features).view(36, 2048)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_160": {
                "variable": {
                    "value": "image_to_fe[img_id]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "fe",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(self.features[imgid2idx[img_id]])",
                            "Call"
                        ],
                        [
                            "np.fromfile('data/trainval_features/' + str(img_id) + '.bin', np.float32)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "fc.py": {
        "torch": {
            "Sequential_21": {
                "variable": {
                    "value": "self.main",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "weight_norm_18": {
                "module": {
                    "value": "nn.Linear(dims[-2], dims[-1])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "ReLU_19": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "weight_norm_16": {
                "module": {
                    "value": "nn.Linear(in_dim, out_dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "ReLU_17": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_18": {
                "in_features": {
                    "value": "dims[-2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dims[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_16": {
                "in_features": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dims[i]",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dims[i + 1]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "language_model.py": {
        "torch": {
            "Embedding_15": {
                "variable": {
                    "value": "self.emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "ntoken + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "emb_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "emb_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "padding_idx": {
                    "value": "ntoken",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ntoken",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_16": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_21": {
                "variable": {
                    "value": "weight_init",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.load(np_file)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_73": {
                "tensors": {
                    "value": "(forward_, backward)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "main.py": {
        "torch": {
            "DataLoader_128": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "VQAFeatureDataset('train', dictionary, cp=cp, cache_image_features=args.cache_features)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.batch_size",
                            "Attribute"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_129": {
                "variable": {
                    "value": "eval_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_dset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "VQAFeatureDataset('val', dictionary, cp=cp, cache_image_features=args.cache_features)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.batch_size",
                            "Attribute"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_123": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_124": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "save_predictions.py": {
        "torch": {
            "DataLoader_28": {
                "variable": {
                    "value": "eval_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_dset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "VQAFeatureDataset('val', dictionary, cp=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_35": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "join(path, 'model.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_57": {
                "input": {
                    "value": "factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(v, None, q, None, None, True)[0]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "zeros_17": {
                "variable": {
                    "value": "one_hots",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "*labels.size()",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Adamax_25": {
                "variable": {
                    "value": "optim",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_87": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(output, 'model.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "max_16": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(logits, 1)[1].data",
                            "Attribute"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "utils.py": {
        "torch": {
            "load_60": {
                "f": {
                    "value": "net_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net_file",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "vqa_debias_loss_functions.py": {
        "torch": {
            "binary_cross_entropy_with_logits_68": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bias + log_probs",
                            "BinOp"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_107": {
                "variable": {
                    "value": "bias_lp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bias + smooth",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log1p_108": {
                "variable": {
                    "value": "bias_l_inv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-bias + smooth",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_137": {
                "variable": {
                    "value": "self.bias_lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softplus_147": {
                "variable": {
                    "value": "factor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bias_lin.forward(hidden)",
                            "Call"
                        ],
                        [
                            "F.softplus(factor)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_149": {
                "variable": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[bias, 1 - bias]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_157": {
                "variable": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack([bias, 1 - bias], 2)",
                            "Call"
                        ],
                        [
                            "bias + self.constant_smooth",
                            "BinOp"
                        ],
                        [
                            "bias + soften_factor.unsqueeze(1)",
                            "BinOp"
                        ],
                        [
                            "torch.log(bias)",
                            "Call"
                        ],
                        [
                            "bias * factor.unsqueeze(1)",
                            "BinOp"
                        ],
                        [
                            "bias",
                            "Method Argument"
                        ],
                        [
                            "bias",
                            "Method Argument"
                        ],
                        [
                            "bias",
                            "Method Argument"
                        ],
                        [
                            "bias",
                            "Method Argument"
                        ],
                        [
                            "bias",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stack_164": {
                "variable": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[log_prob, log_one_minus_prob]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softplus_12": {
                "input": {
                    "value": "-logits",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "max_19": {
                "input": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log1p_19": {
                "input": {
                    "value": "torch.exp(-torch.abs(a - b))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_95": {
                "variable": {
                    "value": "self.smooth_param",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.from_numpy(np.full((1,), smooth_init, dtype=np.float32))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_140": {
                "variable": {
                    "value": "self.smooth_param",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.from_numpy(np.full((1,), smooth_init, dtype=np.float32))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_154": {
                "variable": {
                    "value": "soften_factor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.smooth_param",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_19": {
                "input": {
                    "value": "-torch.abs(a - b)",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sigmoid_103": {
                "input": {
                    "value": "self.smooth_param",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_96": {
                "ndarray": {
                    "value": "np.full((1,), smooth_init, dtype=np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_141": {
                "ndarray": {
                    "value": "np.full((1,), smooth_init, dtype=np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_19": {
                "input": {
                    "value": "a - b",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_180": {
                "input": {
                    "value": "bias_logprob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bias - bias_norm.unsqueeze(2)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    }
}