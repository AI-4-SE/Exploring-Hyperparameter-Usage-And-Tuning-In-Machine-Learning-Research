{
    "student_model/Main.py": {
        "tensorflow": {
            "ConfigProto_7": {
                "variable": {
                    "value": "gpuconfig",
                    "type": "variable",
                    "possible_values": []
                },
                "gpu_options": {
                    "value": "tf.GPUOptions(per_process_gpu_memory_fraction=per_process_gpu_memory_fraction)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Session_14": {
                "config": {
                    "value": "gpuconfig",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(gpu_options=tf.GPUOptions(per_process_gpu_memory_fraction=per_process_gpu_memory_fraction))",
                            "Call"
                        ]
                    ]
                }
            },
            "GPUOptions_7": {
                "per_process_gpu_memory_fraction": {
                    "value": "per_process_gpu_memory_fraction",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "student_model/ops.py": {
        "tensorflow": {
            "pad_7": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(input, [[0, 0], [pad[0], pad[1]], [pad[2], pad[3]], [0, 0]], 'CONSTANT')",
                            "Call"
                        ],
                        [
                            "tf.pad(input, [[0, 0], [pad[0], pad[1]], [pad[2], pad[3]], [0, 0]], 'CONSTANT')",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [pad[0], pad[1]], [pad[2], pad[3]], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "CONSTANT",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_8": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "'w' + str(i)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_9": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "'bias' + str(i)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_12": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(input, [[0, 0], [pad[0], pad[1]], [pad[2], pad[3]], [0, 0]], 'CONSTANT')",
                            "Call"
                        ],
                        [
                            "tf.pad(input, [[0, 0], [pad[0], pad[1]], [pad[2], pad[3]], [0, 0]], 'CONSTANT')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(weights, name='w' + str(i), dtype='float32')",
                            "Call"
                        ],
                        [
                            "tf.Variable(weights, name='w' + str(i), dtype='float32')",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, stride[0], stride[1], 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "'conv' + str(i)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Variable_17": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "'w' + str(i)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_18": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "'bias' + str(i)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_21": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(input, [[0, 0], [pad[0], pad[1]], [pad[2], pad[3]], [0, 0]], 'CONSTANT')",
                            "Call"
                        ],
                        [
                            "tf.pad(input, [[0, 0], [pad[0], pad[1]], [pad[2], pad[3]], [0, 0]], 'CONSTANT')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(weights, name='w' + str(i), dtype='float32')",
                            "Call"
                        ],
                        [
                            "tf.Variable(weights, name='w' + str(i), dtype='float32')",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "'fc' + str(i)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pad_29": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(input, [[0, 0], [pad[0], pad[1]], [pad[2], pad[3]], [0, 0]], 'CONSTANT')",
                            "Call"
                        ],
                        [
                            "tf.pad(input, [[0, 0], [pad[0], pad[1]], [pad[2], pad[3]], [0, 0]], 'CONSTANT')",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [pad[0], pad[1]], [pad[2], pad[3]], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "CONSTANT",
                    "type": "str",
                    "possible_values": []
                }
            },
            "avg_pool_81": {
                "variable": {
                    "value": "prev_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "text_input",
                    "type": "variable",
                    "possible_values": []
                },
                "ksize": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1, 1, 5 * level, 1]",
                            "List"
                        ]
                    ]
                },
                "strides": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride[0]",
                            "Subscript"
                        ],
                        [
                            "stride[0]",
                            "Subscript"
                        ],
                        [
                            "[1, 1, 5 * level, 1]",
                            "List"
                        ]
                    ]
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_83": {
                "variable": {
                    "value": "fc1W",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "W_fc1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_normal([1, 1, 1, 1], stddev=1.0) * 0.01",
                            "BinOp"
                        ]
                    ]
                }
            },
            "conv2d_84": {
                "variable": {
                    "value": "prev_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prev_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.avg_pool(text_input, ksize=shape, strides=stride, padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(prev_layer, fc1W, strides=[1, 1, 1, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(prev_layer)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(prev_layer, [1, dimTxt])",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "fc1W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(W_fc1)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_85": {
                "variable": {
                    "value": "prev_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "prev_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.avg_pool(text_input, ksize=shape, strides=stride, padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(prev_layer, fc1W, strides=[1, 1, 1, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(prev_layer)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(prev_layer, [1, dimTxt])",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_95": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[text_input, interp_block10, interp_block6, interp_block3, interp_block2, interp_block1]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "bias_add_13": {
                "value": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(input, w, strides=[1, stride[0], stride[1], 1], padding='VALID', name='conv' + str(i))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(input, w, strides=[1, 1, 1, 1], padding='VALID', name='fc' + str(i))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(input, W, strides=strides, padding=padding)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(bias, name='bias' + str(i), dtype='float32')",
                            "Call"
                        ],
                        [
                            "tf.Variable(bias, name='bias' + str(i), dtype='float32')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.random_normal([kernel[-1]], stddev=init_rate) * 0.01)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "'add' + str(i)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "bias_add_22": {
                "value": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(input, w, strides=[1, stride[0], stride[1], 1], padding='VALID', name='conv' + str(i))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(input, w, strides=[1, 1, 1, 1], padding='VALID', name='fc' + str(i))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(input, W, strides=strides, padding=padding)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(bias, name='bias' + str(i), dtype='float32')",
                            "Call"
                        ],
                        [
                            "tf.Variable(bias, name='bias' + str(i), dtype='float32')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.random_normal([kernel[-1]], stddev=init_rate) * 0.01)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "'add' + str(i)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_pool_30": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(input, [[0, 0], [pad[0], pad[1]], [pad[2], pad[3]], [0, 0]], 'CONSTANT')",
                            "Call"
                        ],
                        [
                            "tf.pad(input, [[0, 0], [pad[0], pad[1]], [pad[2], pad[3]], [0, 0]], 'CONSTANT')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, area[0], area[1], 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, stride[0], stride[1], 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_35": {
                "variable": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal(kernel, stddev=init_rate) * 0.01",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Variable_36": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([kernel[-1]], stddev=init_rate) * 0.01",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_37": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(input, [[0, 0], [pad[0], pad[1]], [pad[2], pad[3]], [0, 0]], 'CONSTANT')",
                            "Call"
                        ],
                        [
                            "tf.pad(input, [[0, 0], [pad[0], pad[1]], [pad[2], pad[3]], [0, 0]], 'CONSTANT')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.random_normal(kernel, stddev=init_rate) * 0.01)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "strides",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "bias_add_38": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(input, w, strides=[1, stride[0], stride[1], 1], padding='VALID', name='conv' + str(i))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(input, w, strides=[1, 1, 1, 1], padding='VALID', name='fc' + str(i))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(input, W, strides=strides, padding=padding)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(bias, name='bias' + str(i), dtype='float32')",
                            "Call"
                        ],
                        [
                            "tf.Variable(bias, name='bias' + str(i), dtype='float32')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.random_normal([kernel[-1]], stddev=init_rate) * 0.01)",
                            "Call"
                        ]
                    ]
                }
            },
            "maximum_43": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "leak * x",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_46": {
                "features": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sigmoid_49": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tanh_52": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_mean_56": {
                "input_tensor": {
                    "value": "tf.nn.l2_loss(in_ - target)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_59": {
                "input_tensor": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(logits=logits, labels=labels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_by_value_65": {
                "t": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "local_response_normalization_73": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "depth_radius": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                },
                "alpha": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "beta": {
                    "value": "0.75",
                    "type": "float",
                    "possible_values": []
                }
            },
            "variable_scope_34": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'batch_norm'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "l2_loss_56": {
                "t": {
                    "value": "in_ - target",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_59": {
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "student_model/read_data.py": {
        "tensorflow": {}
    },
    "student_model/student_train.py": {
        "tensorflow": {
            "Saver_48": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_54": {
                "variable": {
                    "value": "self.ph[image_input]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.image_size, self.image_size, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "image_input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_55": {
                "variable": {
                    "value": "self.ph[text_input]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 1, self.dimText, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "text_input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_56": {
                "variable": {
                    "value": "self.ph[lr_hash]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "lr_hash",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_58": {
                "variable": {
                    "value": "self.ph[lr_img]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "lr_img",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_59": {
                "variable": {
                    "value": "self.ph[lr_txt]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "lr_txt",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_61": {
                "variable": {
                    "value": "self.ph[keep_prob]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "keep_prob",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_62": {
                "variable": {
                    "value": "self.ph[Sim]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.num_train, self.batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "Sim",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_63": {
                "variable": {
                    "value": "self.ph[F]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.bit]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "F",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_64": {
                "variable": {
                    "value": "self.ph[G]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.bit]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "G",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_67": {
                "variable": {
                    "value": "self.ph[B_batch]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.bit]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "b_batch",
                    "type": "str",
                    "possible_values": []
                }
            },
            "AdamOptimizer_105": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.ph['lr_hash']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "global_variables_initializer_113": {
                "variable": {
                    "value": "init_op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_checkpoint_state_312": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "checkpoint_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(checkpoint_dir, model_dir)",
                            "Call"
                        ],
                        [
                            "os.path.join(checkpoint_dir, model_dir)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_84": {
                "a": {
                    "value": "self.ph['G']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.transpose(self.Hsh_I)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_85": {
                "x": {
                    "value": "self.ph['Sim']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "theta_I_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 / 2 * tf.matmul(self.ph['G'], tf.transpose(self.Hsh_I))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "log_85": {
                "x": {
                    "value": "1.0 + tf.exp(theta_I_2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_94": {
                "a": {
                    "value": "self.ph['F']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.transpose(self.Hsh_T)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_95": {
                "x": {
                    "value": "self.ph['Sim']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "theta_T_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 / 2 * tf.matmul(self.ph['F'], tf.transpose(self.Hsh_T))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "log_95": {
                "x": {
                    "value": "1.0 + tf.exp(theta_T_2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "transpose_84": {
                "a": {
                    "value": "self.Hsh_I",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_94": {
                "a": {
                    "value": "self.Hsh_T",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_85": {
                "x": {
                    "value": "theta_I_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 / 2 * tf.matmul(self.ph['G'], tf.transpose(self.Hsh_I))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "exp_95": {
                "x": {
                    "value": "theta_T_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 / 2 * tf.matmul(self.ph['F'], tf.transpose(self.Hsh_T))",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "student_model/vgg19.py": {
        "tensorflow": {
            "split_36": {
                "variable": {
                    "value": "(red, green, blue)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "value": {
                    "value": "rgb",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "concat_40": {
                "variable": {
                    "value": "bgr",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[blue - VGG_MEAN[0], green - VGG_MEAN[1], red - VGG_MEAN[2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_74": {
                "variable": {
                    "value": "self.relu6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "features": {
                    "value": "self.fc6",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_81": {
                "variable": {
                    "value": "self.relu7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "features": {
                    "value": "self.fc7",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tanh_88": {
                "variable": {
                    "value": "self.fc_hash",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "fc_hash",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fc_layer(self.relu7, 4096, self.bit, 'fc_hash')",
                            "Call"
                        ]
                    ]
                }
            },
            "truncated_normal_120": {
                "variable": {
                    "value": "initial_value",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[filter_size, filter_size, in_channels, out_channels]",
                    "type": "List",
                    "possible_values": []
                },
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "truncated_normal_123": {
                "variable": {
                    "value": "initial_value",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[out_channels]",
                    "type": "List",
                    "possible_values": []
                },
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "truncated_normal_129": {
                "variable": {
                    "value": "initial_value",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[in_size, out_size]",
                    "type": "List",
                    "possible_values": []
                },
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "truncated_normal_132": {
                "variable": {
                    "value": "initial_value",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[out_size]",
                    "type": "List",
                    "possible_values": []
                },
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cond_76": {
                "variable": {
                    "value": "self.relu6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pred": {
                    "value": "train_mode",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : tf.nn.dropout(self.relu6, self.dropout)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : self.relu6",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cond_83": {
                "variable": {
                    "value": "self.relu7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pred": {
                    "value": "train_mode",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : tf.nn.dropout(self.relu7, self.dropout)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : self.relu7",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "avg_pool_95": {
                "input": {
                    "value": "bottom",
                    "type": "variable",
                    "possible_values": []
                },
                "ksize": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "max_pool_98": {
                "input": {
                    "value": "bottom",
                    "type": "variable",
                    "possible_values": []
                },
                "ksize": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "conv2d_104": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bottom",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "filt",
                    "type": "variable",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "bias_add_105": {
                "variable": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(bottom, filt, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "conv_biases",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "relu_106": {
                "variable": {
                    "value": "relu",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.bias_add(conv, conv_biases)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_114": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "bottom",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, in_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "bias_add_115": {
                "variable": {
                    "value": "fc",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.matmul(x, weights)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_var(initial_value, name, 1, name + '_biases')",
                            "Call"
                        ],
                        [
                            "self.get_var(initial_value, name, 1, name + '_biases')",
                            "Call"
                        ]
                    ]
                }
            },
            "Variable_144": {
                "variable": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.data_dict[name][idx]",
                            "Subscript"
                        ],
                        [
                            "initial_value",
                            "variable"
                        ]
                    ]
                },
                "name": {
                    "value": "var_name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "constant_146": {
                "variable": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.data_dict[name][idx]",
                            "Subscript"
                        ],
                        [
                            "initial_value",
                            "variable"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "var_name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "dropout_78": {
                "variable": {
                    "value": "self.relu6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.relu6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_85": {
                "variable": {
                    "value": "self.relu7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.relu7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_101": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_111": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "matmul_115": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(bottom, [-1, in_size])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_var(initial_value, name, 0, name + '_weights')",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_76": {
                "x": {
                    "value": "self.relu6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_83": {
                "x": {
                    "value": "self.relu7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "teacher_model/KNN/read_data.py": {
        "tensorflow": {
            "placeholder_51": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 224, 224, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Session_55": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_56": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "teacher_model/KNN/read_feats_nus.py": {
        "tensorflow": {
            "placeholder_149": {
                "variable": {
                    "value": "ph[image_input]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 224, 224, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "image_input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "split_38": {
                "variable": {
                    "value": "(red, green, blue)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "value": {
                    "value": "rgb",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "concat_42": {
                "variable": {
                    "value": "bgr",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[blue - VGG_MEAN[0], green - VGG_MEAN[1], red - VGG_MEAN[2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_77": {
                "variable": {
                    "value": "self.relu6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "features": {
                    "value": "self.fc6",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_80": {
                "variable": {
                    "value": "self.relu7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "features": {
                    "value": "self.fc7",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_227": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "avg_pool_91": {
                "input": {
                    "value": "bottom",
                    "type": "variable",
                    "possible_values": []
                },
                "ksize": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "max_pool_94": {
                "input": {
                    "value": "bottom",
                    "type": "variable",
                    "possible_values": []
                },
                "ksize": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "conv2d_100": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bottom",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "filt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_conv_filter(name)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "bias_add_103": {
                "variable": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(bottom, filt, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "conv_biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_bias(name)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_105": {
                "variable": {
                    "value": "relu",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.bias_add(conv, conv_biases)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_114": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "bottom",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "bias_add_121": {
                "variable": {
                    "value": "fc",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.matmul(x, weights)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_bias(name)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_126": {
                "value": {
                    "value": "self.data_dict[name][0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "filter",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_129": {
                "value": {
                    "value": "self.data_dict[name][1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_132": {
                "value": {
                    "value": "self.data_dict[name][0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_97": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_109": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "matmul_121": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(bottom, [-1, dim])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_fc_weight(name)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "teacher_model/KNN/read_nuswide.py": {
        "tensorflow": {}
    },
    "teacher_model/KNN/vgg19.py": {
        "tensorflow": {
            "max_pool_15": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "ksize": {
                    "value": "[1, kHeight, kWidth, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, strideX, strideY, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "wDict",
                            "variable"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dropout_20": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "rate": {
                    "value": "keepPro",
                    "type": "variable",
                    "possible_values": []
                },
                "noise_shape": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "wDict",
                            "variable"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_25": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[inputD, outputD]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_26": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[outputD]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                }
            },
            "xw_plus_b_27": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "weights": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('w', shape=[inputD, outputD], dtype='float')",
                            "Call"
                        ],
                        [
                            "tf.get_variable('w', shape=[kHeight, kWidth, channel, featureNum])",
                            "Call"
                        ]
                    ]
                },
                "biases": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('b', [outputD], dtype='float')",
                            "Call"
                        ],
                        [
                            "tf.get_variable('b', shape=[featureNum])",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "scope.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_38": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[kHeight, kWidth, channel, featureNum]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_39": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[featureNum]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_40": {
                "variable": {
                    "value": "featureMap",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('w', shape=[inputD, outputD], dtype='float')",
                            "Call"
                        ],
                        [
                            "tf.get_variable('w', shape=[kHeight, kWidth, channel, featureNum])",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, strideY, strideX, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "bias_add_41": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "featureMap",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(x, w, strides=[1, strideY, strideX, 1], padding=padding)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('b', [outputD], dtype='float')",
                            "Call"
                        ],
                        [
                            "tf.get_variable('b', shape=[featureNum])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_84": {
                "variable": {
                    "value": "fcIn",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "pool5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "maxPoolLayer(conv5_4, 2, 2, 2, 2, 'pool5')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 7 * 7 * 512]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_24": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "wDict",
                            "variable"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_37": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "wDict",
                            "variable"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_43": {
                "features": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.xw_plus_b(x, w, b, name=scope.name)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(featureMap, b)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "scope.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_29": {
                "features": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.xw_plus_b(x, w, b, name=scope.name)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(featureMap, b)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_99": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "wDict",
                            "variable"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_variable_103": {
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "assign_103": {
                "ref": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "wDict[name]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "get_variable_106": {
                "name": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "assign_106": {
                "ref": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "wDict[name]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "teacher_model/calcu_sim.py": {
        "tensorflow": {
            "ConfigProto_96": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Session_98": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "initialize_all_variables_99": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "teacher_model/dis_model_nn.py": {
        "tensorflow": {
            "placeholder_21": {
                "variable": {
                    "value": "self.image_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.image_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "image_data",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_22": {
                "variable": {
                    "value": "self.text_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.text_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "text_data",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_23": {
                "variable": {
                    "value": "self.image_pos_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.image_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "image_pos_data",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_24": {
                "variable": {
                    "value": "self.text_pos_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.text_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "text_pos_data",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_25": {
                "variable": {
                    "value": "self.image_neg_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.image_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "image_neg_data",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_26": {
                "variable": {
                    "value": "self.text_neg_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.text_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "text_neg_data",
                    "type": "str",
                    "possible_values": []
                }
            },
            "xw_plus_b_67": {
                "variable": {
                    "value": "self.image_rep",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.tanh(tf.nn.xw_plus_b(self.image_data, self.Wq_1, self.Bq_1))",
                    "type": "Call",
                    "possible_values": []
                },
                "weights": {
                    "value": "self.Wq_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "biases": {
                    "value": "self.Bq_2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_69": {
                "variable": {
                    "value": "self.image_sig",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.image_rep",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_70": {
                "variable": {
                    "value": "self.image_hash",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.image_sig + 0.5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "xw_plus_b_73": {
                "variable": {
                    "value": "self.text_rep",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.tanh(tf.nn.xw_plus_b(self.text_data, self.Wc_1, self.Bc_1))",
                    "type": "Call",
                    "possible_values": []
                },
                "weights": {
                    "value": "self.Wc_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "biases": {
                    "value": "self.Bc_2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_75": {
                "variable": {
                    "value": "self.text_sig",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.text_rep",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_76": {
                "variable": {
                    "value": "self.text_hash",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.text_sig + 0.5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "xw_plus_b_79": {
                "variable": {
                    "value": "self.image_pos_rep",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.tanh(tf.nn.xw_plus_b(self.image_pos_data, self.Wq_1, self.Bq_1))",
                    "type": "Call",
                    "possible_values": []
                },
                "weights": {
                    "value": "self.Wq_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "biases": {
                    "value": "self.Bq_2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_81": {
                "variable": {
                    "value": "self.image_pos_sig",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.image_pos_rep",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "xw_plus_b_84": {
                "variable": {
                    "value": "self.text_pos_rep",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.tanh(tf.nn.xw_plus_b(self.text_pos_data, self.Wc_1, self.Bc_1))",
                    "type": "Call",
                    "possible_values": []
                },
                "weights": {
                    "value": "self.Wc_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "biases": {
                    "value": "self.Bc_2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_86": {
                "variable": {
                    "value": "self.text_pos_sig",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.text_pos_rep",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "xw_plus_b_89": {
                "variable": {
                    "value": "self.image_neg_rep",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.tanh(tf.nn.xw_plus_b(self.image_neg_data, self.Wq_1, self.Bq_1))",
                    "type": "Call",
                    "possible_values": []
                },
                "weights": {
                    "value": "self.Wq_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "biases": {
                    "value": "self.Bq_2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_91": {
                "variable": {
                    "value": "self.image_neg_sig",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.image_neg_rep",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "xw_plus_b_94": {
                "variable": {
                    "value": "self.text_neg_rep",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.tanh(tf.nn.xw_plus_b(self.text_neg_data, self.Wc_1, self.Bc_1))",
                    "type": "Call",
                    "possible_values": []
                },
                "weights": {
                    "value": "self.Wc_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "biases": {
                    "value": "self.Bc_2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_96": {
                "variable": {
                    "value": "self.text_neg_sig",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.text_neg_rep",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_99": {
                "variable": {
                    "value": "self.pred_distance",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(self.image_sig - self.text_sig)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_100": {
                "variable": {
                    "value": "self.pred_img_pos_distance",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(self.image_sig - self.image_pos_sig)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_101": {
                "variable": {
                    "value": "self.pred_txt_pos_distance",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(self.text_sig - self.text_pos_sig)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_103": {
                "variable": {
                    "value": "self.pred_i2t_neg_distance",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(self.image_sig - self.text_neg_sig)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_104": {
                "variable": {
                    "value": "self.pred_t2i_neg_distance",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(self.text_sig - self.image_neg_sig)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_105": {
                "variable": {
                    "value": "self.pred_i2i_neg_distance",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(self.image_sig - self.image_neg_sig)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_106": {
                "variable": {
                    "value": "self.pred_t2t_neg_distance",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(self.text_sig - self.text_neg_sig)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Variable_137": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "exponential_decay_138": {
                "variable": {
                    "value": "lr_step",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "global_step": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(0, trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "decay_steps": {
                    "value": "20000",
                    "type": "int",
                    "possible_values": []
                },
                "decay_rate": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "staircase": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_140": {
                "variable": {
                    "value": "self.i2t_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.exponential_decay(self.learning_rate, global_step, 20000, 0.9, staircase=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "GradientDescentOptimizer_143": {
                "variable": {
                    "value": "self.t2i_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.exponential_decay(self.learning_rate, global_step, 20000, 0.9, staircase=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "GradientDescentOptimizer_146": {
                "variable": {
                    "value": "self.i2i_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.exponential_decay(self.learning_rate, global_step, 20000, 0.9, staircase=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "GradientDescentOptimizer_149": {
                "variable": {
                    "value": "self.t2t_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.exponential_decay(self.learning_rate, global_step, 20000, 0.9, staircase=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_28": {
                "name_or_scope": {
                    "value": "discriminator",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_30": {
                "variable": {
                    "value": "self.Wq_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "Wq_1",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.image_dim, self.hidden_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.truncated_normal_initializer(mean=0.0, stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_32": {
                "variable": {
                    "value": "self.Wq_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "Wq_2",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.hidden_dim, output_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.truncated_normal_initializer(mean=0.0, stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_34": {
                "variable": {
                    "value": "self.Bq_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "Bq_1",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.hidden_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_36": {
                "variable": {
                    "value": "self.Bq_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "Bq_2",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[output_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_37": {
                "variable": {
                    "value": "self.Wc_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "Wc_1",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.text_dim, self.hidden_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.truncated_normal_initializer(mean=0.0, stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_39": {
                "variable": {
                    "value": "self.Wc_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "Wc_2",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.hidden_dim, output_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.truncated_normal_initializer(mean=0.0, stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_41": {
                "variable": {
                    "value": "self.Bc_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "Bc_1",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.hidden_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_42": {
                "variable": {
                    "value": "self.Bc_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "Bc_2",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[output_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_45": {
                "variable": {
                    "value": "self.Wq_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "param[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Variable_46": {
                "variable": {
                    "value": "self.Wq_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "param[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Variable_47": {
                "variable": {
                    "value": "self.Bq_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "param[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Variable_48": {
                "variable": {
                    "value": "self.Bq_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "param[3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Variable_50": {
                "variable": {
                    "value": "self.Wc_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "param[4]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Variable_51": {
                "variable": {
                    "value": "self.Wc_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "param[5]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Variable_52": {
                "variable": {
                    "value": "self.Bc_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "param[6]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Variable_53": {
                "variable": {
                    "value": "self.Bc_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "param[7]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tanh_68": {
                "x": {
                    "value": "tf.nn.xw_plus_b(self.image_data, self.Wq_1, self.Bq_1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_74": {
                "x": {
                    "value": "tf.nn.xw_plus_b(self.text_data, self.Wc_1, self.Bc_1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_80": {
                "x": {
                    "value": "tf.nn.xw_plus_b(self.image_pos_data, self.Wq_1, self.Bq_1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_85": {
                "x": {
                    "value": "tf.nn.xw_plus_b(self.text_pos_data, self.Wc_1, self.Bc_1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_90": {
                "x": {
                    "value": "tf.nn.xw_plus_b(self.image_neg_data, self.Wq_1, self.Bq_1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_95": {
                "x": {
                    "value": "tf.nn.xw_plus_b(self.text_neg_data, self.Wc_1, self.Bc_1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_99": {
                "x": {
                    "value": "self.image_sig - self.text_sig",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_100": {
                "x": {
                    "value": "self.image_sig - self.image_pos_sig",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_101": {
                "x": {
                    "value": "self.text_sig - self.text_pos_sig",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_103": {
                "x": {
                    "value": "self.image_sig - self.text_neg_sig",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_104": {
                "x": {
                    "value": "self.text_sig - self.image_neg_sig",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_105": {
                "x": {
                    "value": "self.image_sig - self.image_neg_sig",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_106": {
                "x": {
                    "value": "self.text_sig - self.text_neg_sig",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_117": {
                "variable": {
                    "value": "self.i2t_reward",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.maximum(0.0, beta + self.pred_distance - self.pred_i2t_neg_distance)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_125": {
                "variable": {
                    "value": "self.t2i_reward",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.maximum(0.0, beta + self.pred_distance - self.pred_t2i_neg_distance)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "xw_plus_b_68": {
                "x": {
                    "value": "self.image_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weights": {
                    "value": "self.Wq_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "biases": {
                    "value": "self.Bq_1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "xw_plus_b_74": {
                "x": {
                    "value": "self.text_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weights": {
                    "value": "self.Wc_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "biases": {
                    "value": "self.Bc_1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "xw_plus_b_80": {
                "x": {
                    "value": "self.image_pos_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weights": {
                    "value": "self.Wq_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "biases": {
                    "value": "self.Bq_1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "xw_plus_b_85": {
                "x": {
                    "value": "self.text_pos_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weights": {
                    "value": "self.Wc_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "biases": {
                    "value": "self.Bc_1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "xw_plus_b_90": {
                "x": {
                    "value": "self.image_neg_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weights": {
                    "value": "self.Wq_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "biases": {
                    "value": "self.Bq_1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "xw_plus_b_95": {
                "x": {
                    "value": "self.text_neg_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weights": {
                    "value": "self.Wc_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "biases": {
                    "value": "self.Bc_1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_109": {
                "name": {
                    "value": "svm_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_111": {
                "input_tensor": {
                    "value": "tf.maximum(0.0, beta + self.pred_distance - self.pred_i2t_neg_distance)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "maximum_117": {
                "x": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "beta + self.pred_distance - self.pred_i2t_neg_distance",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_119": {
                "input_tensor": {
                    "value": "tf.maximum(0.0, beta + self.pred_distance - self.pred_t2i_neg_distance)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "maximum_125": {
                "x": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "beta + self.pred_distance - self.pred_t2i_neg_distance",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_31": {
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_33": {
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_34": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_36": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_38": {
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_40": {
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_41": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_42": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "maximum_112": {
                "x": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "beta + self.pred_distance - self.pred_i2t_neg_distance",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_120": {
                "x": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "beta + self.pred_distance - self.pred_t2i_neg_distance",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_127": {
                "input_tensor": {
                    "value": "tf.maximum(0.0, beta + self.pred_img_pos_distance - self.pred_i2i_neg_distance)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_132": {
                "input_tensor": {
                    "value": "tf.maximum(0.0, beta + self.pred_txt_pos_distance - self.pred_t2t_neg_distance)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "l2_loss_116": {
                "t": {
                    "value": "self.Bc_1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "l2_loss_124": {
                "t": {
                    "value": "self.Bc_1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "maximum_128": {
                "x": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "beta + self.pred_img_pos_distance - self.pred_i2i_neg_distance",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "l2_loss_130": {
                "t": {
                    "value": "self.Bq_1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "maximum_133": {
                "x": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "beta + self.pred_txt_pos_distance - self.pred_t2t_neg_distance",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "l2_loss_135": {
                "t": {
                    "value": "self.Bc_1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "l2_loss_115": {
                "t": {
                    "value": "self.Wc_1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "l2_loss_123": {
                "t": {
                    "value": "self.Wc_1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "l2_loss_129": {
                "t": {
                    "value": "self.Wq_2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "l2_loss_134": {
                "t": {
                    "value": "self.Wc_2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "l2_loss_114": {
                "t": {
                    "value": "self.Bq_1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "l2_loss_122": {
                "t": {
                    "value": "self.Bq_1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "l2_loss_113": {
                "t": {
                    "value": "self.Wq_2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "l2_loss_121": {
                "t": {
                    "value": "self.Wq_2",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "teacher_model/gen_model_nn.py": {
        "tensorflow": {
            "placeholder_20": {
                "variable": {
                    "value": "self.reward",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "reward",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_21": {
                "variable": {
                    "value": "self.image_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.image_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "image_data",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_22": {
                "variable": {
                    "value": "self.text_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.text_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "text_data",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tanh_62": {
                "variable": {
                    "value": "self.image_rep1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.xw_plus_b(self.image_data, self.Wq_1, self.Bq_1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "xw_plus_b_63": {
                "variable": {
                    "value": "self.image_rep2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.image_rep1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weights": {
                    "value": "self.Wq_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "biases": {
                    "value": "self.Bq_2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_64": {
                "variable": {
                    "value": "self.image_sig",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.image_rep2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_65": {
                "variable": {
                    "value": "self.image_hash",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.image_sig + 0.5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tanh_67": {
                "variable": {
                    "value": "self.text_rep1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.xw_plus_b(self.text_data, self.Wc_1, self.Bc_1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "xw_plus_b_68": {
                "variable": {
                    "value": "self.text_rep2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.text_rep1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weights": {
                    "value": "self.Wc_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "biases": {
                    "value": "self.Bc_2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_69": {
                "variable": {
                    "value": "self.text_sig",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.text_rep2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_70": {
                "variable": {
                    "value": "self.text_hash",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.text_sig + 0.5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_73": {
                "variable": {
                    "value": "self.hash_score",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(tf.equal(self.image_hash, self.text_hash), tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Variable_84": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "exponential_decay_85": {
                "variable": {
                    "value": "lr_step",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "global_step": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(0, trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "decay_steps": {
                    "value": "20000",
                    "type": "int",
                    "possible_values": []
                },
                "decay_rate": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "staircase": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_87": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.exponential_decay(self.learning_rate, global_step, 20000, 0.9, staircase=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_24": {
                "name_or_scope": {
                    "value": "generator",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_26": {
                "variable": {
                    "value": "self.Wq_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "Wq_1",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.image_dim, self.hidden_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.truncated_normal_initializer(mean=0.0, stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_28": {
                "variable": {
                    "value": "self.Wq_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "Wq_2",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.hidden_dim, self.output_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.truncated_normal_initializer(mean=0.0, stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_30": {
                "variable": {
                    "value": "self.Bq_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "Bq_1",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.hidden_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_31": {
                "variable": {
                    "value": "self.Bq_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "Bq_2",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.output_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_33": {
                "variable": {
                    "value": "self.Wc_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "Wc_1",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.text_dim, self.hidden_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.truncated_normal_initializer(mean=0.0, stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_35": {
                "variable": {
                    "value": "self.Wc_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "Wc_2",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.hidden_dim, self.output_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.truncated_normal_initializer(mean=0.0, stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_37": {
                "variable": {
                    "value": "self.Bc_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "Bc_1",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.hidden_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_38": {
                "variable": {
                    "value": "self.Bc_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "Bc_2",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.output_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_40": {
                "variable": {
                    "value": "self.Wq_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "param[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Variable_41": {
                "variable": {
                    "value": "self.Wq_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "param[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Variable_42": {
                "variable": {
                    "value": "self.Bq_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "param[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Variable_43": {
                "variable": {
                    "value": "self.Bq_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "param[3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Variable_45": {
                "variable": {
                    "value": "self.Wc_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "param[4]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Variable_46": {
                "variable": {
                    "value": "self.Wc_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "param[5]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Variable_47": {
                "variable": {
                    "value": "self.Bc_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "param[6]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Variable_48": {
                "variable": {
                    "value": "self.Bc_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "param[7]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "xw_plus_b_62": {
                "x": {
                    "value": "self.image_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weights": {
                    "value": "self.Wq_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "biases": {
                    "value": "self.Bq_1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "xw_plus_b_67": {
                "x": {
                    "value": "self.text_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weights": {
                    "value": "self.Wc_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "biases": {
                    "value": "self.Bc_1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_72": {
                "input_tensor": {
                    "value": "tf.square(self.image_sig - self.text_sig)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_73": {
                "x": {
                    "value": "tf.equal(self.image_hash, self.text_hash)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_76": {
                "tensor": {
                    "value": "self.pred_score",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "square_72": {
                "x": {
                    "value": "self.image_sig - self.text_sig",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "equal_73": {
                "x": {
                    "value": "self.image_hash",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.text_hash",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_76": {
                "logits": {
                    "value": "tf.reshape(self.pred_score, [1, -1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_78": {
                "input_tensor": {
                    "value": "tf.log(self.gen_prob) * self.reward",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "l2_loss_82": {
                "t": {
                    "value": "self.Bc_1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_27": {
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_29": {
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_30": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_31": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_34": {
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_36": {
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_37": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_38": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "log_78": {
                "x": {
                    "value": "self.gen_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "l2_loss_81": {
                "t": {
                    "value": "self.Wc_1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "l2_loss_80": {
                "t": {
                    "value": "self.Bq_1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "l2_loss_79": {
                "t": {
                    "value": "self.Wq_2",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "teacher_model/pretrain/calcu_sim.py": {
        "tensorflow": {
            "ConfigProto_97": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Session_99": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "initialize_all_variables_100": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "teacher_model/pretrain/dis_model_nn.py": {
        "tensorflow": {
            "placeholder_14": {
                "variable": {
                    "value": "self.image_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.image_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "image_data",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_15": {
                "variable": {
                    "value": "self.text_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.text_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "text_data",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_16": {
                "variable": {
                    "value": "self.image_neg_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.image_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "image_neg_data",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_17": {
                "variable": {
                    "value": "self.text_neg_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.text_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "text_neg_data",
                    "type": "str",
                    "possible_values": []
                }
            },
            "xw_plus_b_56": {
                "variable": {
                    "value": "self.image_rep",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.tanh(tf.nn.xw_plus_b(self.image_data, self.Wq_1, self.Bq_1))",
                    "type": "Call",
                    "possible_values": []
                },
                "weights": {
                    "value": "self.Wq_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "biases": {
                    "value": "self.Bq_2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_58": {
                "variable": {
                    "value": "self.image_sig",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.image_rep",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_59": {
                "variable": {
                    "value": "self.image_hash",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.image_sig + 0.5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "xw_plus_b_61": {
                "variable": {
                    "value": "self.text_rep",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.tanh(tf.nn.xw_plus_b(self.text_data, self.Wc_1, self.Bc_1))",
                    "type": "Call",
                    "possible_values": []
                },
                "weights": {
                    "value": "self.Wc_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "biases": {
                    "value": "self.Bc_2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_63": {
                "variable": {
                    "value": "self.text_sig",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.text_rep",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_64": {
                "variable": {
                    "value": "self.text_hash",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.text_sig + 0.5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_67": {
                "variable": {
                    "value": "self.pred_distance",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(self.image_sig - self.text_sig)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_68": {
                "variable": {
                    "value": "self.hash_score",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(tf.equal(self.image_hash, self.text_hash), tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "xw_plus_b_71": {
                "variable": {
                    "value": "self.image_neg_rep",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.tanh(tf.nn.xw_plus_b(self.image_neg_data, self.Wq_1, self.Bq_1))",
                    "type": "Call",
                    "possible_values": []
                },
                "weights": {
                    "value": "self.Wq_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "biases": {
                    "value": "self.Bq_2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_73": {
                "variable": {
                    "value": "self.image_neg_sig",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.image_neg_rep",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "xw_plus_b_75": {
                "variable": {
                    "value": "self.text_neg_rep",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.tanh(tf.nn.xw_plus_b(self.text_neg_data, self.Wc_1, self.Bc_1))",
                    "type": "Call",
                    "possible_values": []
                },
                "weights": {
                    "value": "self.Wc_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "biases": {
                    "value": "self.Bc_2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_77": {
                "variable": {
                    "value": "self.text_neg_sig",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.text_neg_rep",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_79": {
                "variable": {
                    "value": "self.pred_i2t_neg_distance",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(self.image_sig - self.text_neg_sig)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_80": {
                "variable": {
                    "value": "self.pred_t2i_neg_distance",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(self.text_sig - self.image_neg_sig)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Variable_120": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "exponential_decay_121": {
                "variable": {
                    "value": "lr_step",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "global_step": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(0, trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "decay_steps": {
                    "value": "20000",
                    "type": "int",
                    "possible_values": []
                },
                "decay_rate": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "staircase": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_122": {
                "variable": {
                    "value": "self.i2t_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.exponential_decay(self.learning_rate, global_step, 20000, 0.9, staircase=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "GradientDescentOptimizer_125": {
                "variable": {
                    "value": "self.t2i_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.exponential_decay(self.learning_rate, global_step, 20000, 0.9, staircase=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_19": {
                "name_or_scope": {
                    "value": "discriminator",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_21": {
                "variable": {
                    "value": "self.Wq_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "Wq_1",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.image_dim, self.hidden_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.truncated_normal_initializer(mean=0.0, stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_23": {
                "variable": {
                    "value": "self.Wq_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "Wq_2",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.hidden_dim, output_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.truncated_normal_initializer(mean=0.0, stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_25": {
                "variable": {
                    "value": "self.Bq_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "Bq_1",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.hidden_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_26": {
                "variable": {
                    "value": "self.Bq_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "Bq_2",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[output_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_28": {
                "variable": {
                    "value": "self.Wc_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "Wc_1",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.text_dim, self.hidden_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.truncated_normal_initializer(mean=0.0, stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_30": {
                "variable": {
                    "value": "self.Wc_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "Wc_2",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.hidden_dim, output_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.truncated_normal_initializer(mean=0.0, stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_32": {
                "variable": {
                    "value": "self.Bc_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "Bc_1",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.hidden_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_33": {
                "variable": {
                    "value": "self.Bc_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "Bc_2",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[output_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_35": {
                "variable": {
                    "value": "self.Wq_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "param[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Variable_36": {
                "variable": {
                    "value": "self.Wq_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "param[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Variable_37": {
                "variable": {
                    "value": "self.Bq_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "param[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Variable_38": {
                "variable": {
                    "value": "self.Bq_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "param[3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Variable_40": {
                "variable": {
                    "value": "self.Wc_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "param[4]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Variable_41": {
                "variable": {
                    "value": "self.Wc_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "param[5]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Variable_42": {
                "variable": {
                    "value": "self.Bc_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "param[6]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Variable_43": {
                "variable": {
                    "value": "self.Bc_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "param[7]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tanh_57": {
                "x": {
                    "value": "tf.nn.xw_plus_b(self.image_data, self.Wq_1, self.Bq_1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_62": {
                "x": {
                    "value": "tf.nn.xw_plus_b(self.text_data, self.Wc_1, self.Bc_1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_67": {
                "x": {
                    "value": "self.image_sig - self.text_sig",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_68": {
                "x": {
                    "value": "tf.equal(self.image_hash, self.text_hash)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tanh_72": {
                "x": {
                    "value": "tf.nn.xw_plus_b(self.image_neg_data, self.Wq_1, self.Bq_1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_76": {
                "x": {
                    "value": "tf.nn.xw_plus_b(self.text_neg_data, self.Wc_1, self.Bc_1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_79": {
                "x": {
                    "value": "self.image_sig - self.text_neg_sig",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_80": {
                "x": {
                    "value": "self.text_sig - self.image_neg_sig",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_91": {
                "variable": {
                    "value": "self.i2t_reward",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.maximum(0.0, beta + self.pred_distance - self.pred_i2t_neg_distance)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_99": {
                "variable": {
                    "value": "self.t2i_reward",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.maximum(0.0, beta + self.pred_distance - self.pred_t2i_neg_distance)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "xw_plus_b_57": {
                "x": {
                    "value": "self.image_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weights": {
                    "value": "self.Wq_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "biases": {
                    "value": "self.Bq_1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "xw_plus_b_62": {
                "x": {
                    "value": "self.text_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weights": {
                    "value": "self.Wc_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "biases": {
                    "value": "self.Bc_1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_68": {
                "x": {
                    "value": "self.image_hash",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.text_hash",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "xw_plus_b_72": {
                "x": {
                    "value": "self.image_neg_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weights": {
                    "value": "self.Wq_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "biases": {
                    "value": "self.Bq_1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "xw_plus_b_76": {
                "x": {
                    "value": "self.text_neg_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weights": {
                    "value": "self.Wc_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "biases": {
                    "value": "self.Bc_1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_84": {
                "name": {
                    "value": "svm_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_110": {
                "variable": {
                    "value": "self.i2t_reward",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.log(tf.sigmoid(self.pred_i2t_neg_distance - self.pred_distance))",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_118": {
                "variable": {
                    "value": "self.t2i_reward",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.log(tf.sigmoid(self.pred_t2i_neg_distance - self.pred_distance))",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_86": {
                "input_tensor": {
                    "value": "tf.maximum(0.0, beta + self.pred_distance - self.pred_i2t_neg_distance)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "maximum_91": {
                "x": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "beta + self.pred_distance - self.pred_i2t_neg_distance",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_94": {
                "input_tensor": {
                    "value": "tf.maximum(0.0, beta + self.pred_distance - self.pred_t2i_neg_distance)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "maximum_99": {
                "x": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "beta + self.pred_distance - self.pred_t2i_neg_distance",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "name_scope_103": {
                "name": {
                    "value": "log_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_22": {
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_24": {
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_25": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_26": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_29": {
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_31": {
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_32": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_33": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "maximum_86": {
                "x": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "beta + self.pred_distance - self.pred_i2t_neg_distance",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_94": {
                "x": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "beta + self.pred_distance - self.pred_t2i_neg_distance",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_110": {
                "x": {
                    "value": "tf.sigmoid(self.pred_i2t_neg_distance - self.pred_distance)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_118": {
                "x": {
                    "value": "tf.sigmoid(self.pred_t2i_neg_distance - self.pred_distance)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "l2_loss_90": {
                "t": {
                    "value": "self.Bc_1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "l2_loss_98": {
                "t": {
                    "value": "self.Bc_1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_105": {
                "input_tensor": {
                    "value": "tf.log(tf.sigmoid(self.pred_i2t_neg_distance - self.pred_distance))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_110": {
                "x": {
                    "value": "self.pred_i2t_neg_distance - self.pred_distance",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_113": {
                "input_tensor": {
                    "value": "tf.log(tf.sigmoid(self.pred_t2i_neg_distance - self.pred_distance))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_118": {
                "x": {
                    "value": "self.pred_t2i_neg_distance - self.pred_distance",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_105": {
                "x": {
                    "value": "tf.sigmoid(self.pred_i2t_neg_distance - self.pred_distance)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "l2_loss_109": {
                "t": {
                    "value": "self.Bc_1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_113": {
                "x": {
                    "value": "tf.sigmoid(self.pred_t2i_neg_distance - self.pred_distance)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "l2_loss_117": {
                "t": {
                    "value": "self.Bc_1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "l2_loss_89": {
                "t": {
                    "value": "self.Wc_1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "l2_loss_97": {
                "t": {
                    "value": "self.Wc_1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_105": {
                "x": {
                    "value": "self.pred_i2t_neg_distance - self.pred_distance",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_113": {
                "x": {
                    "value": "self.pred_t2i_neg_distance - self.pred_distance",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "l2_loss_108": {
                "t": {
                    "value": "self.Wc_1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "l2_loss_116": {
                "t": {
                    "value": "self.Wc_1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "l2_loss_88": {
                "t": {
                    "value": "self.Bq_1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "l2_loss_96": {
                "t": {
                    "value": "self.Bq_1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "l2_loss_107": {
                "t": {
                    "value": "self.Bq_1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "l2_loss_115": {
                "t": {
                    "value": "self.Bq_1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "l2_loss_87": {
                "t": {
                    "value": "self.Wq_2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "l2_loss_95": {
                "t": {
                    "value": "self.Wq_2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "l2_loss_106": {
                "t": {
                    "value": "self.Wq_2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "l2_loss_114": {
                "t": {
                    "value": "self.Wq_2",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "teacher_model/pretrain/teacher_pretrain.py": {
        "tensorflow": {
            "ConfigProto_114": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Session_116": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_109": {
                "device_name": {
                    "value": "'/gpu:' + str(GPU_ID)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "initialize_all_variables_117": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "teacher_model/teacher_train.py": {
        "tensorflow": {
            "ConfigProto_247": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Session_249": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_241": {
                "device_name": {
                    "value": "'/gpu:' + str(GPU_ID)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "initialize_all_variables_250": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}