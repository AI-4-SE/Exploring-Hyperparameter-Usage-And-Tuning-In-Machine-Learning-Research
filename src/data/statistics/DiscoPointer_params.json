{
    "neuronlp2/io/OLDconllx_stacked_data.py": {
        "torch": {
            "from_numpy_213": {
                "variable": {
                    "value": "lengths_e",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "lengths_e",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.empty(bucket_size, dtype=np.int64)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(lengths_e)",
                            "Call"
                        ],
                        [
                            "lengths_e.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_219": {
                "variable": {
                    "value": "skip_connect",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "skip_connect_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.empty([bucket_size, 2 * bucket_length - 1], dtype=np.int64)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_221": {
                "variable": {
                    "value": "lengths_d",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "lengths_d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.empty(bucket_size, dtype=np.int64)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(lengths_d)",
                            "Call"
                        ],
                        [
                            "lengths_d.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "randperm_265": {
                "n": {
                    "value": "bucket_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bucket_sizes[bucket_id]",
                            "Subscript"
                        ],
                        [
                            "bucket_sizes[bucket_id]",
                            "Subscript"
                        ],
                        [
                            "bucket_sizes[bucket_id]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "randperm_301": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "bucket_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bucket_sizes[bucket_id]",
                            "Subscript"
                        ],
                        [
                            "bucket_sizes[bucket_id]",
                            "Subscript"
                        ],
                        [
                            "bucket_sizes[bucket_id]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_206": {
                "ndarray": {
                    "value": "wid_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.empty([bucket_size, bucket_length], dtype=np.int64)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_207": {
                "ndarray": {
                    "value": "cid_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.empty([bucket_size, bucket_length, char_length], dtype=np.int64)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_208": {
                "ndarray": {
                    "value": "pid_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.empty([bucket_size, bucket_length], dtype=np.int64)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_209": {
                "ndarray": {
                    "value": "hid_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.empty([bucket_size, bucket_length], dtype=np.int64)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_210": {
                "ndarray": {
                    "value": "tid_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.empty([bucket_size, bucket_length], dtype=np.int64)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_211": {
                "ndarray": {
                    "value": "masks_e",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros([bucket_size, bucket_length], dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "Variable(torch.from_numpy(masks_e), volatile=volatile)",
                            "Call"
                        ],
                        [
                            "masks_e.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_212": {
                "ndarray": {
                    "value": "single",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros([bucket_size, bucket_length], dtype=np.int64)",
                            "Call"
                        ],
                        [
                            "Variable(torch.from_numpy(single), volatile=volatile)",
                            "Call"
                        ],
                        [
                            "single.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_215": {
                "ndarray": {
                    "value": "stack_hid_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.empty([bucket_size, 2 * bucket_length - 1], dtype=np.int64)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_216": {
                "ndarray": {
                    "value": "chid_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.empty([bucket_size, 2 * bucket_length - 1], dtype=np.int64)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_217": {
                "ndarray": {
                    "value": "ssid_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.empty([bucket_size, 2 * bucket_length - 1], dtype=np.int64)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_218": {
                "ndarray": {
                    "value": "stack_tid_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.empty([bucket_size, 2 * bucket_length - 1], dtype=np.int64)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_220": {
                "ndarray": {
                    "value": "masks_d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros([bucket_size, 2 * bucket_length - 1], dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "Variable(torch.from_numpy(masks_d), volatile=volatile)",
                            "Call"
                        ],
                        [
                            "masks_d.cuda()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "neuronlp2/io/conll03_data.py": {
        "torch": {
            "from_numpy_370": {
                "variable": {
                    "value": "lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.empty(bucket_size, dtype=np.int64)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(lengths)",
                            "Call"
                        ],
                        [
                            "lengths.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "randperm_403": {
                "n": {
                    "value": "bucket_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bucket_sizes[bucket_id]",
                            "Subscript"
                        ],
                        [
                            "bucket_sizes[bucket_id]",
                            "Subscript"
                        ],
                        [
                            "bucket_sizes[bucket_id]",
                            "Subscript"
                        ],
                        [
                            "bucket_sizes[bucket_id]",
                            "Subscript"
                        ],
                        [
                            "bucket_sizes[bucket_id]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "randperm_437": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "bucket_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bucket_sizes[bucket_id]",
                            "Subscript"
                        ],
                        [
                            "bucket_sizes[bucket_id]",
                            "Subscript"
                        ],
                        [
                            "bucket_sizes[bucket_id]",
                            "Subscript"
                        ],
                        [
                            "bucket_sizes[bucket_id]",
                            "Subscript"
                        ],
                        [
                            "bucket_sizes[bucket_id]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_363": {
                "ndarray": {
                    "value": "wid_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.empty([batch_size, bucket_length], dtype=np.int64)",
                            "Call"
                        ],
                        [
                            "wid_inputs * (1 - noise * single)",
                            "BinOp"
                        ],
                        [
                            "np.empty([bucket_size, bucket_length], dtype=np.int64)",
                            "Call"
                        ],
                        [
                            "wid_inputs * (1 - noise * single)",
                            "BinOp"
                        ],
                        [
                            "np.empty([bucket_size, bucket_length], dtype=np.int64)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_364": {
                "ndarray": {
                    "value": "cid_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.empty([batch_size, bucket_length, char_length], dtype=np.int64)",
                            "Call"
                        ],
                        [
                            "np.empty([bucket_size, bucket_length, char_length], dtype=np.int64)",
                            "Call"
                        ],
                        [
                            "np.empty([bucket_size, bucket_length, char_length], dtype=np.int64)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_365": {
                "ndarray": {
                    "value": "pid_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.empty([batch_size, bucket_length], dtype=np.int64)",
                            "Call"
                        ],
                        [
                            "np.empty([bucket_size, bucket_length], dtype=np.int64)",
                            "Call"
                        ],
                        [
                            "np.empty([bucket_size, bucket_length], dtype=np.int64)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_366": {
                "ndarray": {
                    "value": "chid_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.empty([batch_size, bucket_length], dtype=np.int64)",
                            "Call"
                        ],
                        [
                            "np.empty([bucket_size, bucket_length], dtype=np.int64)",
                            "Call"
                        ],
                        [
                            "np.empty([bucket_size, bucket_length], dtype=np.int64)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_367": {
                "ndarray": {
                    "value": "nid_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.empty([batch_size, bucket_length], dtype=np.int64)",
                            "Call"
                        ],
                        [
                            "np.empty([bucket_size, bucket_length], dtype=np.int64)",
                            "Call"
                        ],
                        [
                            "np.empty([bucket_size, bucket_length], dtype=np.int64)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_368": {
                "ndarray": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros([batch_size, bucket_length], dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.zeros([bucket_size, bucket_length], dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.zeros([bucket_size, bucket_length], dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "Variable(torch.from_numpy(masks), volatile=volatile)",
                            "Call"
                        ],
                        [
                            "masks.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_369": {
                "ndarray": {
                    "value": "single",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros([batch_size, bucket_length], dtype=np.int64)",
                            "Call"
                        ],
                        [
                            "np.zeros([bucket_size, bucket_length], dtype=np.int64)",
                            "Call"
                        ],
                        [
                            "np.zeros([bucket_size, bucket_length], dtype=np.int64)",
                            "Call"
                        ],
                        [
                            "Variable(torch.from_numpy(single), volatile=volatile)",
                            "Call"
                        ],
                        [
                            "single.cuda()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "neuronlp2/io/conllx_data.py": {
        "torch": {
            "from_numpy_378": {
                "variable": {
                    "value": "lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.empty(bucket_size, dtype=np.int64)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(lengths)",
                            "Call"
                        ],
                        [
                            "lengths.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "randperm_411": {
                "n": {
                    "value": "bucket_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bucket_sizes[bucket_id]",
                            "Subscript"
                        ],
                        [
                            "bucket_sizes[bucket_id]",
                            "Subscript"
                        ],
                        [
                            "bucket_sizes[bucket_id]",
                            "Subscript"
                        ],
                        [
                            "bucket_sizes[bucket_id]",
                            "Subscript"
                        ],
                        [
                            "bucket_sizes[bucket_id]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "randperm_445": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "bucket_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bucket_sizes[bucket_id]",
                            "Subscript"
                        ],
                        [
                            "bucket_sizes[bucket_id]",
                            "Subscript"
                        ],
                        [
                            "bucket_sizes[bucket_id]",
                            "Subscript"
                        ],
                        [
                            "bucket_sizes[bucket_id]",
                            "Subscript"
                        ],
                        [
                            "bucket_sizes[bucket_id]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_371": {
                "ndarray": {
                    "value": "wid_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.empty([batch_size, bucket_length], dtype=np.int64)",
                            "Call"
                        ],
                        [
                            "wid_inputs * (1 - noise * single)",
                            "BinOp"
                        ],
                        [
                            "np.empty([bucket_size, bucket_length], dtype=np.int64)",
                            "Call"
                        ],
                        [
                            "wid_inputs * (1 - noise * single)",
                            "BinOp"
                        ],
                        [
                            "np.empty([bucket_size, bucket_length], dtype=np.int64)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_372": {
                "ndarray": {
                    "value": "cid_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.empty([batch_size, bucket_length, char_length], dtype=np.int64)",
                            "Call"
                        ],
                        [
                            "np.empty([bucket_size, bucket_length, char_length], dtype=np.int64)",
                            "Call"
                        ],
                        [
                            "np.empty([bucket_size, bucket_length, char_length], dtype=np.int64)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_373": {
                "ndarray": {
                    "value": "pid_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.empty([batch_size, bucket_length], dtype=np.int64)",
                            "Call"
                        ],
                        [
                            "np.empty([bucket_size, bucket_length], dtype=np.int64)",
                            "Call"
                        ],
                        [
                            "np.empty([bucket_size, bucket_length], dtype=np.int64)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_374": {
                "ndarray": {
                    "value": "hid_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.empty([batch_size, bucket_length], dtype=np.int64)",
                            "Call"
                        ],
                        [
                            "np.empty([bucket_size, bucket_length], dtype=np.int64)",
                            "Call"
                        ],
                        [
                            "np.empty([bucket_size, bucket_length], dtype=np.int64)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_375": {
                "ndarray": {
                    "value": "tid_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.empty([batch_size, bucket_length], dtype=np.int64)",
                            "Call"
                        ],
                        [
                            "np.empty([bucket_size, bucket_length], dtype=np.int64)",
                            "Call"
                        ],
                        [
                            "np.empty([bucket_size, bucket_length], dtype=np.int64)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_376": {
                "ndarray": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros([batch_size, bucket_length], dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.zeros([bucket_size, bucket_length], dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.zeros([bucket_size, bucket_length], dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "Variable(torch.from_numpy(masks), volatile=volatile)",
                            "Call"
                        ],
                        [
                            "masks.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_377": {
                "ndarray": {
                    "value": "single",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros([batch_size, bucket_length], dtype=np.int64)",
                            "Call"
                        ],
                        [
                            "np.zeros([bucket_size, bucket_length], dtype=np.int64)",
                            "Call"
                        ],
                        [
                            "np.zeros([bucket_size, bucket_length], dtype=np.int64)",
                            "Call"
                        ],
                        [
                            "Variable(torch.from_numpy(single), volatile=volatile)",
                            "Call"
                        ],
                        [
                            "single.cuda()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "neuronlp2/io/conllx_stacked_data.py": {
        "torch": {}
    },
    "neuronlp2/models/sequence_labeling.py": {
        "torch": {
            "Conv1d_18": {
                "variable": {
                    "value": "self.conv1d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "char_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_filters",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "kernel_size - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Dropout2d_20": {
                "variable": {
                    "value": "self.dropout_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "p_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.33",
                            "MethodArgument"
                        ],
                        [
                            "0.33",
                            "MethodArgument"
                        ],
                        [
                            "0.33",
                            "MethodArgument"
                        ],
                        [
                            "0.33",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_22": {
                "variable": {
                    "value": "self.dropout_rnn_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "p_rnn[0]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "(0.5",
                            "MethodArgument"
                        ],
                        [
                            "(0.33",
                            "MethodArgument"
                        ],
                        [
                            "(0.5",
                            "MethodArgument"
                        ],
                        [
                            "(0.33",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_23": {
                "variable": {
                    "value": "self.dropout_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "p_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.33",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.33",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_41": {
                "variable": {
                    "value": "self.dense_softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size * 2",
                            "BinOp"
                        ],
                        [
                            "tag_space",
                            "Name"
                        ],
                        [
                            "tag_space if tag_space else hidden_size * 2",
                            "IfExp"
                        ],
                        [
                            "tag_space if tag_space else hidden_size * 2",
                            "IfExp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_labels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LogSoftmax_42": {
                "variable": {
                    "value": "self.logsoftmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "NLLLoss_43": {
                "variable": {
                    "value": "self.nll_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size_average": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "reduce": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tanh_79": {
                "variable": {
                    "value": "char",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "char",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.char_embedd(input_char)",
                            "Call"
                        ],
                        [
                            "char.view(char_size[0] * char_size[1], char_size[2], char_size[3]).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "torch.tanh(char).view(char_size[0], char_size[1], -1)",
                            "Call"
                        ],
                        [
                            "self.dropout_in(char)",
                            "Call"
                        ],
                        [
                            "self.char_embedd(input_char)",
                            "Call"
                        ],
                        [
                            "char.view(char_size[0] * char_size[1], char_size[2], char_size[3]).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "torch.tanh(char).view(char_size[0], char_size[1], -1)",
                            "Call"
                        ],
                        [
                            "self.dropout_in(char)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_86": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[word, char]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_118": {
                "variable": {
                    "value": "(_, preds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "output[:, :, leading_symbolic:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout2d_147": {
                "variable": {
                    "value": "self.dropout_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "p_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.33",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.33",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tanh_174": {
                "variable": {
                    "value": "char",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "char",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.char_embedd(input_char)",
                            "Call"
                        ],
                        [
                            "char.view(char_size[0] * char_size[1], char_size[2], char_size[3]).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "torch.tanh(char).view(char_size[0], char_size[1], -1)",
                            "Call"
                        ],
                        [
                            "self.dropout_in(char)",
                            "Call"
                        ],
                        [
                            "self.char_embedd(input_char)",
                            "Call"
                        ],
                        [
                            "char.view(char_size[0] * char_size[1], char_size[2], char_size[3]).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "torch.tanh(char).view(char_size[0], char_size[1], -1)",
                            "Call"
                        ],
                        [
                            "self.dropout_in(char)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_181": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[word, char]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_39": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size * 2",
                            "BinOp"
                        ],
                        [
                            "tag_space",
                            "Name"
                        ],
                        [
                            "tag_space if tag_space else hidden_size * 2",
                            "IfExp"
                        ],
                        [
                            "tag_space if tag_space else hidden_size * 2",
                            "IfExp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "tag_space",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "elu_103": {
                "input": {
                    "value": "self.dense(output)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eq_136": {
                "input": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preds + leading_symbolic",
                            "BinOp"
                        ],
                        [
                            "self.crf.decode(output, mask=mask, leading_symbolic=leading_symbolic)",
                            "Call"
                        ],
                        [
                            "self.crf.decode(output, mask=mask, leading_symbolic=leading_symbolic)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target[:, :max_len].contiguous()",
                            "Call"
                        ],
                        [
                            "target[:, :max_len]",
                            "Subscript"
                        ],
                        [
                            "target[:, :max_len]",
                            "Subscript"
                        ],
                        [
                            "target[:, :max_len]",
                            "Subscript"
                        ],
                        [
                            "target[:, :max_len]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sum_136": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "eq_239": {
                "input": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preds + leading_symbolic",
                            "BinOp"
                        ],
                        [
                            "self.crf.decode(output, mask=mask, leading_symbolic=leading_symbolic)",
                            "Call"
                        ],
                        [
                            "self.crf.decode(output, mask=mask, leading_symbolic=leading_symbolic)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "target.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_239": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "eq_287": {
                "input": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preds + leading_symbolic",
                            "BinOp"
                        ],
                        [
                            "self.crf.decode(output, mask=mask, leading_symbolic=leading_symbolic)",
                            "Call"
                        ],
                        [
                            "self.crf.decode(output, mask=mask, leading_symbolic=leading_symbolic)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "target.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_287": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "elu_191": {
                "input": {
                    "value": "self.dense(output)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_191": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eq_132": {
                "input": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preds + leading_symbolic",
                            "BinOp"
                        ],
                        [
                            "self.crf.decode(output, mask=mask, leading_symbolic=leading_symbolic)",
                            "Call"
                        ],
                        [
                            "self.crf.decode(output, mask=mask, leading_symbolic=leading_symbolic)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target[:, :max_len].contiguous()",
                            "Call"
                        ],
                        [
                            "target[:, :max_len]",
                            "Subscript"
                        ],
                        [
                            "target[:, :max_len]",
                            "Subscript"
                        ],
                        [
                            "target[:, :max_len]",
                            "Subscript"
                        ],
                        [
                            "target[:, :max_len]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "eq_241": {
                "input": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preds + leading_symbolic",
                            "BinOp"
                        ],
                        [
                            "self.crf.decode(output, mask=mask, leading_symbolic=leading_symbolic)",
                            "Call"
                        ],
                        [
                            "self.crf.decode(output, mask=mask, leading_symbolic=leading_symbolic)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "target.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eq_289": {
                "input": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preds + leading_symbolic",
                            "BinOp"
                        ],
                        [
                            "self.crf.decode(output, mask=mask, leading_symbolic=leading_symbolic)",
                            "Call"
                        ],
                        [
                            "self.crf.decode(output, mask=mask, leading_symbolic=leading_symbolic)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "target.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "neuronlp2/nlinalg/nlinalg.py": {
        "torch": {
            "log_18": {
                "input": {
                    "value": "torch.eig(x.data)[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_21": {
                "input": {
                    "value": "torch.log(u_chol.diag())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_21": {
                "input": {
                    "value": "u_chol.diag()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_38": {
                "input": {
                    "value": "torch.exp(x - xmax).sum()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_42": {
                "input": {
                    "value": "torch.exp(x - xmax).sum(dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eig_18": {
                "input": {
                    "value": "x.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_38": {
                "input": {
                    "value": "x - xmax",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "exp_42": {
                "input": {
                    "value": "x - xmax",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_42": {
                "input": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "neuronlp2/nn/_functions/masked_rnn.py": {
        "torch": {
            "cat_28": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(output, 0).view(input.size(0), *output[0].size())",
                            "Call"
                        ],
                        [
                            "output.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "hidden[0] if isinstance(hidden, tuple) else hidden",
                            "IfExp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_54": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "input.dim() - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_66": {
                "variable": {
                    "value": "next_hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "next_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "(torch.cat(next_h, 0).view(total_layers, *next_h[0].size()), torch.cat(next_c, 0).view(total_layers, *next_c[0].size()))",
                            "Tuple"
                        ],
                        [
                            "torch.cat(next_hidden, 0).view(total_layers, *next_hidden[0].size())",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "(torch.cat(next_h, 0).view(num_layers, *next_h[0].size()), torch.cat(next_c, 0).view(num_layers, *next_c[0].size()))",
                            "Tuple"
                        ],
                        [
                            "torch.cat(next_hidden, 0).view(num_layers, *next_hidden[0].size())",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_147": {
                "variable": {
                    "value": "next_hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "next_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "(torch.cat(next_h, 0).view(total_layers, *next_h[0].size()), torch.cat(next_c, 0).view(total_layers, *next_c[0].size()))",
                            "Tuple"
                        ],
                        [
                            "torch.cat(next_hidden, 0).view(total_layers, *next_hidden[0].size())",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "(torch.cat(next_h, 0).view(num_layers, *next_h[0].size()), torch.cat(next_c, 0).view(num_layers, *next_c[0].size()))",
                            "Tuple"
                        ],
                        [
                            "torch.cat(next_hidden, 0).view(num_layers, *next_hidden[0].size())",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_57": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(all_output, input.dim() - 1)",
                            "Call"
                        ],
                        [
                            "F.dropout(input, p=dropout, training=train, inplace=False)",
                            "Call"
                        ],
                        [
                            "input.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "output",
                            "Name"
                        ],
                        [
                            "F.dropout(input, p=dropout, training=train, inplace=False)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "training": {
                    "value": "train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "dropout_138": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(all_output, input.dim() - 1)",
                            "Call"
                        ],
                        [
                            "F.dropout(input, p=dropout, training=train, inplace=False)",
                            "Call"
                        ],
                        [
                            "input.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "output",
                            "Name"
                        ],
                        [
                            "F.dropout(input, p=dropout, training=train, inplace=False)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "training": {
                    "value": "train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_62": {
                "tensors": {
                    "value": "next_h",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_63": {
                "tensors": {
                    "value": "next_c",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_143": {
                "tensors": {
                    "value": "next_h",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_144": {
                "tensors": {
                    "value": "next_c",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "neuronlp2/nn/_functions/skipconnect_rnn.py": {
        "torch": {
            "cat_13": {
                "variable": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[hidden, hidden_skip]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_17": {
                "variable": {
                    "value": "hy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.linear(input, w_ih, b_ih) + F.linear(hidden, w_hh, b_hh)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_25": {
                "variable": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[hidden, hidden_skip]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_29": {
                "variable": {
                    "value": "hy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.linear(input, w_ih, b_ih) + F.linear(hidden, w_hh, b_hh)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_37": {
                "variable": {
                    "value": "hx",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[hx, hidden_skip]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_44": {
                "variable": {
                    "value": "ingate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ingate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.sigmoid(ingate)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(ingate)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_45": {
                "variable": {
                    "value": "forgetgate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "forgetgate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.sigmoid(forgetgate)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(forgetgate)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_46": {
                "variable": {
                    "value": "cellgate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cellgate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.tanh(cellgate)",
                            "Call"
                        ],
                        [
                            "F.tanh(cellgate)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_47": {
                "variable": {
                    "value": "outgate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outgate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.sigmoid(outgate)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(outgate)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_60": {
                "variable": {
                    "value": "hx",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[hx, hidden_skip]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_74": {
                "variable": {
                    "value": "ingate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ingate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.sigmoid(ingate)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(ingate)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_75": {
                "variable": {
                    "value": "forgetgate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "forgetgate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.sigmoid(forgetgate)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(forgetgate)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_76": {
                "variable": {
                    "value": "cellgate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cellgate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.tanh(cellgate)",
                            "Call"
                        ],
                        [
                            "F.tanh(cellgate)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_77": {
                "variable": {
                    "value": "outgate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outgate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.sigmoid(outgate)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(outgate)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_87": {
                "variable": {
                    "value": "hx",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[hidden, hidden_skip]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "baddbmm_90": {
                "variable": {
                    "value": "gi",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "b_ih.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch1": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input * noise_in",
                            "BinOp"
                        ],
                        [
                            "input * noise_in",
                            "BinOp"
                        ],
                        [
                            "input.expand(4, *input.size()) if noise_in is None else input.unsqueeze(0) * noise_in",
                            "IfExp"
                        ],
                        [
                            "input * noise_in",
                            "BinOp"
                        ],
                        [
                            "input.expand(3, *input.size()) if noise_in is None else input.unsqueeze(0) * noise_in",
                            "IfExp"
                        ],
                        [
                            "input * noise_in",
                            "BinOp"
                        ],
                        [
                            "torch.cat(all_output, input.dim() - 1)",
                            "Call"
                        ],
                        [
                            "input.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "output",
                            "Name"
                        ]
                    ]
                },
                "batch2": {
                    "value": "w_ih",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "baddbmm_91": {
                "variable": {
                    "value": "gh",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "b_hh.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch1": {
                    "value": "hx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([hx, hidden_skip], dim=1)",
                            "Call"
                        ],
                        [
                            "hx.expand(4, *hx.size()) if noise_hidden is None else hx.unsqueeze(0) * noise_hidden",
                            "IfExp"
                        ],
                        [
                            "torch.cat([hx, hidden_skip], dim=1)",
                            "Call"
                        ],
                        [
                            "hx * noise_hidden",
                            "BinOp"
                        ],
                        [
                            "torch.cat([hidden, hidden_skip], dim=1)",
                            "Call"
                        ],
                        [
                            "hx.expand(3, *hx.size()) if noise_hidden is None else hx.unsqueeze(0) * noise_hidden",
                            "IfExp"
                        ],
                        [
                            "torch.cat([hidden, hidden_skip], dim=1)",
                            "Call"
                        ],
                        [
                            "hx * noise_hidden",
                            "BinOp"
                        ]
                    ]
                },
                "batch2": {
                    "value": "w_hh",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sigmoid_95": {
                "variable": {
                    "value": "resetgate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "i_r + h_r",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_96": {
                "variable": {
                    "value": "inputgate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "i_i + h_i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_97": {
                "variable": {
                    "value": "newgate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "i_n + resetgate * h_n",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_107": {
                "variable": {
                    "value": "hx",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[hidden, hidden_skip]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "linear_117": {
                "variable": {
                    "value": "gi",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input * noise_in",
                            "BinOp"
                        ],
                        [
                            "input * noise_in",
                            "BinOp"
                        ],
                        [
                            "input.expand(4, *input.size()) if noise_in is None else input.unsqueeze(0) * noise_in",
                            "IfExp"
                        ],
                        [
                            "input * noise_in",
                            "BinOp"
                        ],
                        [
                            "input.expand(3, *input.size()) if noise_in is None else input.unsqueeze(0) * noise_in",
                            "IfExp"
                        ],
                        [
                            "input * noise_in",
                            "BinOp"
                        ],
                        [
                            "torch.cat(all_output, input.dim() - 1)",
                            "Call"
                        ],
                        [
                            "input.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "output",
                            "Name"
                        ]
                    ]
                },
                "weight": {
                    "value": "w_ih",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "b_ih",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "linear_118": {
                "variable": {
                    "value": "gh",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([hx, hidden_skip], dim=1)",
                            "Call"
                        ],
                        [
                            "hx.expand(4, *hx.size()) if noise_hidden is None else hx.unsqueeze(0) * noise_hidden",
                            "IfExp"
                        ],
                        [
                            "torch.cat([hx, hidden_skip], dim=1)",
                            "Call"
                        ],
                        [
                            "hx * noise_hidden",
                            "BinOp"
                        ],
                        [
                            "torch.cat([hidden, hidden_skip], dim=1)",
                            "Call"
                        ],
                        [
                            "hx.expand(3, *hx.size()) if noise_hidden is None else hx.unsqueeze(0) * noise_hidden",
                            "IfExp"
                        ],
                        [
                            "torch.cat([hidden, hidden_skip], dim=1)",
                            "Call"
                        ],
                        [
                            "hx * noise_hidden",
                            "BinOp"
                        ]
                    ]
                },
                "weight": {
                    "value": "w_hh",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "b_hh",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sigmoid_122": {
                "variable": {
                    "value": "resetgate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "i_r + h_r",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_123": {
                "variable": {
                    "value": "inputgate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "i_i + h_i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_124": {
                "variable": {
                    "value": "newgate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "i_n + resetgate * h_n",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "linear_65": {
                "variable": {
                    "value": "igates",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input * noise_in",
                            "BinOp"
                        ],
                        [
                            "input * noise_in",
                            "BinOp"
                        ],
                        [
                            "input.expand(4, *input.size()) if noise_in is None else input.unsqueeze(0) * noise_in",
                            "IfExp"
                        ],
                        [
                            "input * noise_in",
                            "BinOp"
                        ],
                        [
                            "input.expand(3, *input.size()) if noise_in is None else input.unsqueeze(0) * noise_in",
                            "IfExp"
                        ],
                        [
                            "input * noise_in",
                            "BinOp"
                        ],
                        [
                            "torch.cat(all_output, input.dim() - 1)",
                            "Call"
                        ],
                        [
                            "input.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "output",
                            "Name"
                        ]
                    ]
                },
                "weight": {
                    "value": "w_ih",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "linear_66": {
                "variable": {
                    "value": "hgates",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([hx, hidden_skip], dim=1)",
                            "Call"
                        ],
                        [
                            "hx.expand(4, *hx.size()) if noise_hidden is None else hx.unsqueeze(0) * noise_hidden",
                            "IfExp"
                        ],
                        [
                            "torch.cat([hx, hidden_skip], dim=1)",
                            "Call"
                        ],
                        [
                            "hx * noise_hidden",
                            "BinOp"
                        ],
                        [
                            "torch.cat([hidden, hidden_skip], dim=1)",
                            "Call"
                        ],
                        [
                            "hx.expand(3, *hx.size()) if noise_hidden is None else hx.unsqueeze(0) * noise_hidden",
                            "IfExp"
                        ],
                        [
                            "torch.cat([hidden, hidden_skip], dim=1)",
                            "Call"
                        ],
                        [
                            "hx * noise_hidden",
                            "BinOp"
                        ]
                    ]
                },
                "weight": {
                    "value": "w_hh",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "linear_112": {
                "variable": {
                    "value": "gi",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input * noise_in",
                            "BinOp"
                        ],
                        [
                            "input * noise_in",
                            "BinOp"
                        ],
                        [
                            "input.expand(4, *input.size()) if noise_in is None else input.unsqueeze(0) * noise_in",
                            "IfExp"
                        ],
                        [
                            "input * noise_in",
                            "BinOp"
                        ],
                        [
                            "input.expand(3, *input.size()) if noise_in is None else input.unsqueeze(0) * noise_in",
                            "IfExp"
                        ],
                        [
                            "input * noise_in",
                            "BinOp"
                        ],
                        [
                            "torch.cat(all_output, input.dim() - 1)",
                            "Call"
                        ],
                        [
                            "input.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "output",
                            "Name"
                        ]
                    ]
                },
                "weight": {
                    "value": "w_ih",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "linear_113": {
                "variable": {
                    "value": "gh",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([hx, hidden_skip], dim=1)",
                            "Call"
                        ],
                        [
                            "hx.expand(4, *hx.size()) if noise_hidden is None else hx.unsqueeze(0) * noise_hidden",
                            "IfExp"
                        ],
                        [
                            "torch.cat([hx, hidden_skip], dim=1)",
                            "Call"
                        ],
                        [
                            "hx * noise_hidden",
                            "BinOp"
                        ],
                        [
                            "torch.cat([hidden, hidden_skip], dim=1)",
                            "Call"
                        ],
                        [
                            "hx.expand(3, *hx.size()) if noise_hidden is None else hx.unsqueeze(0) * noise_hidden",
                            "IfExp"
                        ],
                        [
                            "torch.cat([hidden, hidden_skip], dim=1)",
                            "Call"
                        ],
                        [
                            "hx * noise_hidden",
                            "BinOp"
                        ]
                    ]
                },
                "weight": {
                    "value": "w_hh",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "arange_138": {
                "variable": {
                    "value": "batch_index",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "h0.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "baddbmm_40": {
                "input": {
                    "value": "b_hh.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch1": {
                    "value": "hx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([hx, hidden_skip], dim=1)",
                            "Call"
                        ],
                        [
                            "hx.expand(4, *hx.size()) if noise_hidden is None else hx.unsqueeze(0) * noise_hidden",
                            "IfExp"
                        ],
                        [
                            "torch.cat([hx, hidden_skip], dim=1)",
                            "Call"
                        ],
                        [
                            "hx * noise_hidden",
                            "BinOp"
                        ],
                        [
                            "torch.cat([hidden, hidden_skip], dim=1)",
                            "Call"
                        ],
                        [
                            "hx.expand(3, *hx.size()) if noise_hidden is None else hx.unsqueeze(0) * noise_hidden",
                            "IfExp"
                        ],
                        [
                            "torch.cat([hidden, hidden_skip], dim=1)",
                            "Call"
                        ],
                        [
                            "hx * noise_hidden",
                            "BinOp"
                        ]
                    ]
                },
                "batch2": {
                    "value": "w_hh",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tanh_50": {
                "input": {
                    "value": "cy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "forgetgate * cx + ingate * cellgate",
                            "BinOp"
                        ],
                        [
                            "forgetgate * cx + ingate * cellgate",
                            "BinOp"
                        ]
                    ]
                }
            },
            "linear_70": {
                "input": {
                    "value": "hx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([hx, hidden_skip], dim=1)",
                            "Call"
                        ],
                        [
                            "hx.expand(4, *hx.size()) if noise_hidden is None else hx.unsqueeze(0) * noise_hidden",
                            "IfExp"
                        ],
                        [
                            "torch.cat([hx, hidden_skip], dim=1)",
                            "Call"
                        ],
                        [
                            "hx * noise_hidden",
                            "BinOp"
                        ],
                        [
                            "torch.cat([hidden, hidden_skip], dim=1)",
                            "Call"
                        ],
                        [
                            "hx.expand(3, *hx.size()) if noise_hidden is None else hx.unsqueeze(0) * noise_hidden",
                            "IfExp"
                        ],
                        [
                            "torch.cat([hidden, hidden_skip], dim=1)",
                            "Call"
                        ],
                        [
                            "hx * noise_hidden",
                            "BinOp"
                        ]
                    ]
                },
                "weight": {
                    "value": "w_hh",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "b_hh",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tanh_80": {
                "input": {
                    "value": "cy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "forgetgate * cx + ingate * cellgate",
                            "BinOp"
                        ],
                        [
                            "forgetgate * cx + ingate * cellgate",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_198": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "input.dim() - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_207": {
                "variable": {
                    "value": "next_hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "next_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "(torch.cat(next_h, 0).view(total_layers, *next_h[0].size()), torch.cat(next_c, 0).view(total_layers, *next_c[0].size()))",
                            "Tuple"
                        ],
                        [
                            "torch.cat(next_hidden, 0).view(total_layers, *next_hidden[0].size())",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "(torch.cat(next_h, 0).view(num_layers, *next_h[0].size()), torch.cat(next_c, 0).view(num_layers, *next_c[0].size()))",
                            "Tuple"
                        ],
                        [
                            "torch.cat(next_hidden, 0).view(num_layers, *next_hidden[0].size())",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_284": {
                "variable": {
                    "value": "next_hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "next_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "(torch.cat(next_h, 0).view(total_layers, *next_h[0].size()), torch.cat(next_c, 0).view(total_layers, *next_c[0].size()))",
                            "Tuple"
                        ],
                        [
                            "torch.cat(next_hidden, 0).view(total_layers, *next_hidden[0].size())",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "(torch.cat(next_h, 0).view(num_layers, *next_h[0].size()), torch.cat(next_c, 0).view(num_layers, *next_c[0].size()))",
                            "Tuple"
                        ],
                        [
                            "torch.cat(next_hidden, 0).view(num_layers, *next_hidden[0].size())",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "linear_17": {
                "input": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([hidden, hidden_skip], dim=1)",
                            "Call"
                        ],
                        [
                            "hidden * noise_hidden",
                            "BinOp"
                        ],
                        [
                            "torch.cat([hidden, hidden_skip], dim=1)",
                            "Call"
                        ],
                        [
                            "hidden * noise_hidden",
                            "BinOp"
                        ],
                        [
                            "cell(input[i], hidden, hidden_skip)",
                            "Call"
                        ],
                        [
                            "(hx + (hp1 - hx) * mask[i], cx + (cp1 - cx) * mask[i])",
                            "Tuple"
                        ],
                        [
                            "hidden + (hidden_next - hidden) * mask[i]",
                            "BinOp"
                        ],
                        [
                            "list(zip(*hidden))",
                            "Call"
                        ],
                        [
                            "cell(input, hidden, hidden_skip)",
                            "Call"
                        ],
                        [
                            "(hx + (hp1 - hx) * mask, cx + (cp1 - cx) * mask)",
                            "Tuple"
                        ],
                        [
                            "hidden + (hidden_next - hidden) * mask",
                            "BinOp"
                        ],
                        [
                            "list(zip(*hidden))",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "w_hh",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "b_hh",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "linear_29": {
                "input": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([hidden, hidden_skip], dim=1)",
                            "Call"
                        ],
                        [
                            "hidden * noise_hidden",
                            "BinOp"
                        ],
                        [
                            "torch.cat([hidden, hidden_skip], dim=1)",
                            "Call"
                        ],
                        [
                            "hidden * noise_hidden",
                            "BinOp"
                        ],
                        [
                            "cell(input[i], hidden, hidden_skip)",
                            "Call"
                        ],
                        [
                            "(hx + (hp1 - hx) * mask[i], cx + (cp1 - cx) * mask[i])",
                            "Tuple"
                        ],
                        [
                            "hidden + (hidden_next - hidden) * mask[i]",
                            "BinOp"
                        ],
                        [
                            "list(zip(*hidden))",
                            "Call"
                        ],
                        [
                            "cell(input, hidden, hidden_skip)",
                            "Call"
                        ],
                        [
                            "(hx + (hp1 - hx) * mask, cx + (cp1 - cx) * mask)",
                            "Tuple"
                        ],
                        [
                            "hidden + (hidden_next - hidden) * mask",
                            "BinOp"
                        ],
                        [
                            "list(zip(*hidden))",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "w_hh",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "b_hh",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_203": {
                "tensors": {
                    "value": "next_h",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_204": {
                "tensors": {
                    "value": "next_c",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_280": {
                "tensors": {
                    "value": "next_h",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_281": {
                "tensors": {
                    "value": "next_c",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "neuronlp2/nn/_functions/variational_rnn.py": {
        "torch": {
            "relu_13": {
                "variable": {
                    "value": "hy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.linear(input, w_ih, b_ih) + F.linear(hidden, w_hh, b_hh)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_22": {
                "variable": {
                    "value": "hy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.linear(input, w_ih, b_ih) + F.linear(hidden, w_hh, b_hh)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_36": {
                "variable": {
                    "value": "ingate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ingate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.sigmoid(ingate)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(ingate)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_37": {
                "variable": {
                    "value": "forgetgate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "forgetgate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.sigmoid(forgetgate)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(forgetgate)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_38": {
                "variable": {
                    "value": "cellgate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cellgate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.tanh(cellgate)",
                            "Call"
                        ],
                        [
                            "F.tanh(cellgate)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_39": {
                "variable": {
                    "value": "outgate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outgate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.sigmoid(outgate)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(outgate)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_64": {
                "variable": {
                    "value": "ingate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ingate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.sigmoid(ingate)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(ingate)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_65": {
                "variable": {
                    "value": "forgetgate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "forgetgate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.sigmoid(forgetgate)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(forgetgate)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_66": {
                "variable": {
                    "value": "cellgate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cellgate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.tanh(cellgate)",
                            "Call"
                        ],
                        [
                            "F.tanh(cellgate)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_67": {
                "variable": {
                    "value": "outgate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outgate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.sigmoid(outgate)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(outgate)",
                            "Call"
                        ]
                    ]
                }
            },
            "baddbmm_79": {
                "variable": {
                    "value": "gi",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "b_ih.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch1": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input * noise_in",
                            "BinOp"
                        ],
                        [
                            "input * noise_in",
                            "BinOp"
                        ],
                        [
                            "input.expand(4, *input.size()) if noise_in is None else input.unsqueeze(0) * noise_in",
                            "IfExp"
                        ],
                        [
                            "input * noise_in",
                            "BinOp"
                        ],
                        [
                            "input.expand(3, *input.size()) if noise_in is None else input.unsqueeze(0) * noise_in",
                            "IfExp"
                        ],
                        [
                            "input * noise_in",
                            "BinOp"
                        ],
                        [
                            "torch.cat(all_output, input.dim() - 1)",
                            "Call"
                        ],
                        [
                            "input.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "output",
                            "Name"
                        ]
                    ]
                },
                "batch2": {
                    "value": "w_ih",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "baddbmm_80": {
                "variable": {
                    "value": "gh",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "b_hh.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch1": {
                    "value": "hx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hx.expand(4, *hx.size()) if noise_hidden is None else hx.unsqueeze(0) * noise_hidden",
                            "IfExp"
                        ],
                        [
                            "hx * noise_hidden",
                            "BinOp"
                        ],
                        [
                            "hidden.expand(3, *hidden.size()) if noise_hidden is None else hidden.unsqueeze(0) * noise_hidden",
                            "IfExp"
                        ],
                        [
                            "hidden if noise_hidden is None else hidden * noise_hidden",
                            "IfExp"
                        ]
                    ]
                },
                "batch2": {
                    "value": "w_hh",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sigmoid_84": {
                "variable": {
                    "value": "resetgate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "i_r + h_r",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_85": {
                "variable": {
                    "value": "inputgate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "i_i + h_i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_86": {
                "variable": {
                    "value": "newgate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "i_n + resetgate * h_n",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "linear_103": {
                "variable": {
                    "value": "gi",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input * noise_in",
                            "BinOp"
                        ],
                        [
                            "input * noise_in",
                            "BinOp"
                        ],
                        [
                            "input.expand(4, *input.size()) if noise_in is None else input.unsqueeze(0) * noise_in",
                            "IfExp"
                        ],
                        [
                            "input * noise_in",
                            "BinOp"
                        ],
                        [
                            "input.expand(3, *input.size()) if noise_in is None else input.unsqueeze(0) * noise_in",
                            "IfExp"
                        ],
                        [
                            "input * noise_in",
                            "BinOp"
                        ],
                        [
                            "torch.cat(all_output, input.dim() - 1)",
                            "Call"
                        ],
                        [
                            "input.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "output",
                            "Name"
                        ]
                    ]
                },
                "weight": {
                    "value": "w_ih",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "b_ih",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "linear_104": {
                "variable": {
                    "value": "gh",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hx.expand(4, *hx.size()) if noise_hidden is None else hx.unsqueeze(0) * noise_hidden",
                            "IfExp"
                        ],
                        [
                            "hx * noise_hidden",
                            "BinOp"
                        ],
                        [
                            "hidden.expand(3, *hidden.size()) if noise_hidden is None else hidden.unsqueeze(0) * noise_hidden",
                            "IfExp"
                        ],
                        [
                            "hidden if noise_hidden is None else hidden * noise_hidden",
                            "IfExp"
                        ]
                    ]
                },
                "weight": {
                    "value": "w_hh",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "b_hh",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sigmoid_108": {
                "variable": {
                    "value": "resetgate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "i_r + h_r",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_109": {
                "variable": {
                    "value": "inputgate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "i_i + h_i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_110": {
                "variable": {
                    "value": "newgate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "i_n + resetgate * h_n",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "linear_52": {
                "variable": {
                    "value": "igates",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input * noise_in",
                            "BinOp"
                        ],
                        [
                            "input * noise_in",
                            "BinOp"
                        ],
                        [
                            "input.expand(4, *input.size()) if noise_in is None else input.unsqueeze(0) * noise_in",
                            "IfExp"
                        ],
                        [
                            "input * noise_in",
                            "BinOp"
                        ],
                        [
                            "input.expand(3, *input.size()) if noise_in is None else input.unsqueeze(0) * noise_in",
                            "IfExp"
                        ],
                        [
                            "input * noise_in",
                            "BinOp"
                        ],
                        [
                            "torch.cat(all_output, input.dim() - 1)",
                            "Call"
                        ],
                        [
                            "input.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "output",
                            "Name"
                        ]
                    ]
                },
                "weight": {
                    "value": "w_ih",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "linear_98": {
                "variable": {
                    "value": "gi",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input * noise_in",
                            "BinOp"
                        ],
                        [
                            "input * noise_in",
                            "BinOp"
                        ],
                        [
                            "input.expand(4, *input.size()) if noise_in is None else input.unsqueeze(0) * noise_in",
                            "IfExp"
                        ],
                        [
                            "input * noise_in",
                            "BinOp"
                        ],
                        [
                            "input.expand(3, *input.size()) if noise_in is None else input.unsqueeze(0) * noise_in",
                            "IfExp"
                        ],
                        [
                            "input * noise_in",
                            "BinOp"
                        ],
                        [
                            "torch.cat(all_output, input.dim() - 1)",
                            "Call"
                        ],
                        [
                            "input.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "output",
                            "Name"
                        ]
                    ]
                },
                "weight": {
                    "value": "w_ih",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "linear_99": {
                "variable": {
                    "value": "gh",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hx.expand(4, *hx.size()) if noise_hidden is None else hx.unsqueeze(0) * noise_hidden",
                            "IfExp"
                        ],
                        [
                            "hx * noise_hidden",
                            "BinOp"
                        ],
                        [
                            "hidden.expand(3, *hidden.size()) if noise_hidden is None else hidden.unsqueeze(0) * noise_hidden",
                            "IfExp"
                        ],
                        [
                            "hidden if noise_hidden is None else hidden * noise_hidden",
                            "IfExp"
                        ]
                    ]
                },
                "weight": {
                    "value": "w_hh",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_137": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(output, 0).view(input.size(0), *output[0].size())",
                            "Call"
                        ],
                        [
                            "output.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "hidden[0] if isinstance(hidden, tuple) else hidden",
                            "IfExp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "baddbmm_32": {
                "input": {
                    "value": "b_hh.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch1": {
                    "value": "hx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hx.expand(4, *hx.size()) if noise_hidden is None else hx.unsqueeze(0) * noise_hidden",
                            "IfExp"
                        ],
                        [
                            "hx * noise_hidden",
                            "BinOp"
                        ],
                        [
                            "hidden.expand(3, *hidden.size()) if noise_hidden is None else hidden.unsqueeze(0) * noise_hidden",
                            "IfExp"
                        ],
                        [
                            "hidden if noise_hidden is None else hidden * noise_hidden",
                            "IfExp"
                        ]
                    ]
                },
                "batch2": {
                    "value": "w_hh",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tanh_42": {
                "input": {
                    "value": "cy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "forgetgate * cx + ingate * cellgate",
                            "BinOp"
                        ],
                        [
                            "forgetgate * cx + ingate * cellgate",
                            "BinOp"
                        ]
                    ]
                }
            },
            "linear_60": {
                "input": {
                    "value": "hx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hx.expand(4, *hx.size()) if noise_hidden is None else hx.unsqueeze(0) * noise_hidden",
                            "IfExp"
                        ],
                        [
                            "hx * noise_hidden",
                            "BinOp"
                        ],
                        [
                            "hidden.expand(3, *hidden.size()) if noise_hidden is None else hidden.unsqueeze(0) * noise_hidden",
                            "IfExp"
                        ],
                        [
                            "hidden if noise_hidden is None else hidden * noise_hidden",
                            "IfExp"
                        ]
                    ]
                },
                "weight": {
                    "value": "w_hh",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "b_hh",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tanh_70": {
                "input": {
                    "value": "cy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "forgetgate * cx + ingate * cellgate",
                            "BinOp"
                        ],
                        [
                            "forgetgate * cx + ingate * cellgate",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_163": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "input.dim() - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_172": {
                "variable": {
                    "value": "next_hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "next_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "(torch.cat(next_h, 0).view(total_layers, *next_h[0].size()), torch.cat(next_c, 0).view(total_layers, *next_c[0].size()))",
                            "Tuple"
                        ],
                        [
                            "torch.cat(next_hidden, 0).view(total_layers, *next_hidden[0].size())",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "(torch.cat(next_h, 0).view(num_layers, *next_h[0].size()), torch.cat(next_c, 0).view(num_layers, *next_c[0].size()))",
                            "Tuple"
                        ],
                        [
                            "torch.cat(next_hidden, 0).view(num_layers, *next_hidden[0].size())",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_248": {
                "variable": {
                    "value": "next_hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "next_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "(torch.cat(next_h, 0).view(total_layers, *next_h[0].size()), torch.cat(next_c, 0).view(total_layers, *next_c[0].size()))",
                            "Tuple"
                        ],
                        [
                            "torch.cat(next_hidden, 0).view(total_layers, *next_hidden[0].size())",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "(torch.cat(next_h, 0).view(num_layers, *next_h[0].size()), torch.cat(next_c, 0).view(num_layers, *next_c[0].size()))",
                            "Tuple"
                        ],
                        [
                            "torch.cat(next_hidden, 0).view(num_layers, *next_hidden[0].size())",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "linear_13": {
                "input": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden * noise_hidden",
                            "BinOp"
                        ],
                        [
                            "hidden * noise_hidden",
                            "BinOp"
                        ],
                        [
                            "cell(input[i], hidden)",
                            "Call"
                        ],
                        [
                            "(hx + (hp1 - hx) * mask[i], cx + (cp1 - cx) * mask[i])",
                            "Tuple"
                        ],
                        [
                            "hidden + (hidden_next - hidden) * mask[i]",
                            "BinOp"
                        ],
                        [
                            "list(zip(*hidden))",
                            "Call"
                        ],
                        [
                            "cell(input, hidden)",
                            "Call"
                        ],
                        [
                            "(hx + (hp1 - hx) * mask, cx + (cp1 - cx) * mask)",
                            "Tuple"
                        ],
                        [
                            "hidden + (hidden_next - hidden) * mask",
                            "BinOp"
                        ],
                        [
                            "list(zip(*hidden))",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "w_hh",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "b_hh",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "linear_22": {
                "input": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden * noise_hidden",
                            "BinOp"
                        ],
                        [
                            "hidden * noise_hidden",
                            "BinOp"
                        ],
                        [
                            "cell(input[i], hidden)",
                            "Call"
                        ],
                        [
                            "(hx + (hp1 - hx) * mask[i], cx + (cp1 - cx) * mask[i])",
                            "Tuple"
                        ],
                        [
                            "hidden + (hidden_next - hidden) * mask[i]",
                            "BinOp"
                        ],
                        [
                            "list(zip(*hidden))",
                            "Call"
                        ],
                        [
                            "cell(input, hidden)",
                            "Call"
                        ],
                        [
                            "(hx + (hp1 - hx) * mask, cx + (cp1 - cx) * mask)",
                            "Tuple"
                        ],
                        [
                            "hidden + (hidden_next - hidden) * mask",
                            "BinOp"
                        ],
                        [
                            "list(zip(*hidden))",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "w_hh",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "b_hh",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "linear_53": {
                "input": {
                    "value": "hidden[0] * noise_hidden",
                    "type": "BinOp",
                    "possible_values": []
                },
                "weight": {
                    "value": "w_hh",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_168": {
                "tensors": {
                    "value": "next_h",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_169": {
                "tensors": {
                    "value": "next_c",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_244": {
                "tensors": {
                    "value": "next_h",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_245": {
                "tensors": {
                    "value": "next_c",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "neuronlp2/nn/init.py": {
        "torch": {}
    },
    "neuronlp2/nn/modules/attention.py": {
        "torch": {
            "Parameter_34": {
                "variable": {
                    "value": "self.W_d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.num_labels, self.input_size_decoder)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_35": {
                "variable": {
                    "value": "self.W_e",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.num_labels, self.input_size_encoder)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_36": {
                "variable": {
                    "value": "self.b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.num_labels, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_74": {
                "variable": {
                    "value": "out_d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.W_d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "input_d.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_74": {
                "variable": {
                    "value": "out_d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_77": {
                "variable": {
                    "value": "out_e",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.W_e",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "input_e.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_77": {
                "variable": {
                    "value": "out_e",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_127": {
                "variable": {
                    "value": "self.W_d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.input_size_decoder, self.hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_128": {
                "variable": {
                    "value": "self.W_e",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.input_size_encoder, self.hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_129": {
                "variable": {
                    "value": "self.b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_130": {
                "variable": {
                    "value": "self.v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.hidden_size, self.num_labels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_164": {
                "variable": {
                    "value": "out_d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_d",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "self.W_d",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_164": {
                "variable": {
                    "value": "out_d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_168": {
                "variable": {
                    "value": "out_e",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_e",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "self.W_e",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_168": {
                "variable": {
                    "value": "out_e",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_171": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_d + out_e + self.b",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_38": {
                "variable": {
                    "value": "self.U",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.num_labels, self.input_size_decoder, self.input_size_encoder)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_84": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_d.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "self.U",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_87": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(input_d.unsqueeze(1), self.U)",
                            "Call"
                        ],
                        [
                            "torch.matmul(output, input_e.unsqueeze(1).transpose(2, 3))",
                            "Call"
                        ],
                        [
                            "output + out_d + out_e + self.b",
                            "BinOp"
                        ],
                        [
                            "out_d + out_d + self.b",
                            "BinOp"
                        ],
                        [
                            "output * mask_d.unsqueeze(1).unsqueeze(3) * mask_e.unsqueeze(1).unsqueeze(2)",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "input_e.unsqueeze(1).transpose(2, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_177": {
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.tanh(out_d + out_e + self.b)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.v",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_177": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "neuronlp2/nn/modules/crf.py": {
        "torch": {
            "Linear_35": {
                "variable": {
                    "value": "self.state_nn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_193": {
                "variable": {
                    "value": "(_, back_pointer[-1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "pi[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_267": {
                "variable": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "energy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.forward(input, mask=mask)",
                            "Call"
                        ],
                        [
                            "self.forward(input, mask=mask).data",
                            "Attribute"
                        ],
                        [
                            "self.forward(input_h, input_c, mask=mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_307": {
                "variable": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "length",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "arange_309": {
                "variable": {
                    "value": "batch_index",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_38": {
                "variable": {
                    "value": "self.trans_nn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_labels * self.num_labels",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_42": {
                "variable": {
                    "value": "self.trans_matrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.num_labels, self.num_labels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_120": {
                "variable": {
                    "value": "batch_index",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "arange_125": {
                "variable": {
                    "value": "batch_index",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "arange_177": {
                "variable": {
                    "value": "batch_index",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_178": {
                "variable": {
                    "value": "pi",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[length, batch_size, num_label, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "arange_182": {
                "variable": {
                    "value": "batch_index",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_183": {
                "variable": {
                    "value": "pi",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[length, batch_size, num_label, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "max_191": {
                "variable": {
                    "value": "(pi[t], pointer[t])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "energy_transpose[t] + pi_prev",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normal_52": {
                "mean": {
                    "value": "self.trans_matrix",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_127": {
                "*size": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "diag_243": {
                "input": {
                    "value": "output.data.new(length).fill_(-np.inf)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_122": {
                "*size": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "eye_285": {
                "n": {
                    "value": "length",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "neuronlp2/nn/modules/linear.py": {
        "torch": {
            "Parameter_30": {
                "variable": {
                    "value": "self.U",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.out_features, self.left_features, self.right_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_31": {
                "variable": {
                    "value": "self.W_l",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.out_features, self.left_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_32": {
                "variable": {
                    "value": "self.W_r",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.out_features, self.left_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bilinear_71": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input1": {
                    "value": "input_left",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_left.view(batch, self.left_features)",
                            "Call"
                        ]
                    ]
                },
                "input2": {
                    "value": "input_right",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_right.view(batch, self.right_features)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.U",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_35": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linear_72": {
                "input": {
                    "value": "input_left",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_left.view(batch, self.left_features)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.W_l",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            }
        }
    },
    "neuronlp2/nn/modules/masked_rnn.py": {
        "torch": {}
    },
    "neuronlp2/nn/modules/skipconnect_rnn.py": {
        "torch": {
            "Parameter_424": {
                "variable": {
                    "value": "self.weight_ih",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(hidden_size, input_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_425": {
                "variable": {
                    "value": "self.weight_hh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(hidden_size, hidden_size * 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_539": {
                "variable": {
                    "value": "self.weight_ih",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(4 * hidden_size, input_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_540": {
                "variable": {
                    "value": "self.weight_hh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(4 * hidden_size, 2 * hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_646": {
                "variable": {
                    "value": "self.weight_ih",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(4, input_size, hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_647": {
                "variable": {
                    "value": "self.weight_hh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(4, 2 * hidden_size, hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_746": {
                "variable": {
                    "value": "self.weight_ih",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(3 * hidden_size, input_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_747": {
                "variable": {
                    "value": "self.weight_hh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(3 * hidden_size, hidden_size * 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_846": {
                "variable": {
                    "value": "self.weight_ih",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(3, input_size, hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_847": {
                "variable": {
                    "value": "self.weight_hh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(3, hidden_size * 2, hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_427": {
                "variable": {
                    "value": "self.bias_ih",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_428": {
                "variable": {
                    "value": "self.bias_hh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_542": {
                "variable": {
                    "value": "self.bias_ih",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(4 * hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_543": {
                "variable": {
                    "value": "self.bias_hh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(4 * hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_649": {
                "variable": {
                    "value": "self.bias_ih",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(4, hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_650": {
                "variable": {
                    "value": "self.bias_hh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(4, hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_749": {
                "variable": {
                    "value": "self.bias_ih",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(3 * hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_750": {
                "variable": {
                    "value": "self.bias_hh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(3 * hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_849": {
                "variable": {
                    "value": "self.bias_ih",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(3, hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_850": {
                "variable": {
                    "value": "self.bias_hh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(3, hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "neuronlp2/nn/modules/sparse.py": {
        "torch": {
            "Parameter_49": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(num_embeddings, embedding_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "neuronlp2/nn/modules/variational_rnn.py": {
        "torch": {
            "Parameter_442": {
                "variable": {
                    "value": "self.weight_ih",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(hidden_size, input_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_443": {
                "variable": {
                    "value": "self.weight_hh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(hidden_size, hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_555": {
                "variable": {
                    "value": "self.weight_ih",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(4, input_size, hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_556": {
                "variable": {
                    "value": "self.weight_hh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(4, hidden_size, hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_653": {
                "variable": {
                    "value": "self.weight_ih",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(3, input_size, hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_654": {
                "variable": {
                    "value": "self.weight_hh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(3, hidden_size, hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_758": {
                "variable": {
                    "value": "self.weight_ih",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(4 * hidden_size, input_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_759": {
                "variable": {
                    "value": "self.weight_hh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(4 * hidden_size, hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_856": {
                "variable": {
                    "value": "self.weight_ih",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(3 * hidden_size, input_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_857": {
                "variable": {
                    "value": "self.weight_hh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(3 * hidden_size, hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_445": {
                "variable": {
                    "value": "self.bias_ih",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_446": {
                "variable": {
                    "value": "self.bias_hh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_558": {
                "variable": {
                    "value": "self.bias_ih",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(4, hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_559": {
                "variable": {
                    "value": "self.bias_hh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(4, hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_656": {
                "variable": {
                    "value": "self.bias_ih",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(3, hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_657": {
                "variable": {
                    "value": "self.bias_hh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(3, hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_761": {
                "variable": {
                    "value": "self.bias_ih",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(4 * hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_762": {
                "variable": {
                    "value": "self.bias_hh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(4 * hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_859": {
                "variable": {
                    "value": "self.bias_ih",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(3 * hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_860": {
                "variable": {
                    "value": "self.bias_hh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(3 * hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "neuronlp2/nn/utils.py": {
        "torch": {
            "pack_padded_sequence_62": {
                "variable": {
                    "value": "seq",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rnn_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rnn_input.index_select(batch_dim, order)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "lens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lengths",
                            "Name"
                        ],
                        [
                            "lens.tolist()",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "batch_first",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "pad_packed_sequence_72": {
                "variable": {
                    "value": "(output, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rnn_utils.pack_padded_sequence(rnn_input, lens, batch_first=batch_first)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "batch_first",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sort_35": {
                "variable": {
                    "value": "(lens, order)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sort_39": {
                "variable": {
                    "value": "(_, rev_order)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "order",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ne_36": {
                "input": {
                    "value": "lens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lengths",
                            "Name"
                        ],
                        [
                            "lens.tolist()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "lengths",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_36": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}