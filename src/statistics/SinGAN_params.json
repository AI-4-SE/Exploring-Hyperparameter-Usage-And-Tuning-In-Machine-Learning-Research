{
    "code/datasets/cars.py": {
        "torch": {}
    },
    "code/datasets/cub200.py": {
        "torch": {}
    },
    "code/datasets/dogs.py": {
        "torch": {}
    },
    "code/datasets/photoimage.py": {
        "torch": {}
    },
    "code/datasets/testfolder.py": {
        "torch": {}
    },
    "code/laboratory.py": {
        "torch": {
            "rand_102": {
                "variable": {
                    "value": "x1",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "code/main.py": {
        "torch": {
            "device_count_70": {
                "variable": {
                    "value": "ngpus_per_node",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_231": {
                "variable": {
                    "value": "train_loader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Name",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "train_sampler is None",
                    "type": "Compare",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.utils.data.distributed.DistributedSampler(train_dataset)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                }
            },
            "Adam_165": {
                "variable": {
                    "value": "d_opt",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "discriminator.module.sub_discriminators[0].parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0005",
                    "type": "Constant",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.5, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_166": {
                "variable": {
                    "value": "g_opt",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "generator.module.sub_generators[0].parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0005",
                    "type": "Constant",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.5, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_168": {
                "variable": {
                    "value": "d_opt",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "discriminator.sub_discriminators[0].parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0005",
                    "type": "Constant",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.5, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_169": {
                "variable": {
                    "value": "g_opt",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "generator.sub_generators[0].parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0005",
                    "type": "Constant",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.5, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "DistributedSampler_227": {
                "variable": {
                    "value": "train_sampler",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "load_181": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "load_file",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(args.log_dir, to_restore)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pad_238": {
                "input": {
                    "value": "torch.randn(args.batch_size, 3, args.size_list[0], args.size_list[0])",
                    "type": "Call",
                    "possible_values": []
                },
                "pad": {
                    "value": "[5, 5, 5, 5]",
                    "type": "List",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pad_239": {
                "input": {
                    "value": "torch.zeros(args.batch_size, 3, args.size_list[zeros_idx], args.size_list[zeros_idx])",
                    "type": "Call",
                    "possible_values": []
                },
                "pad": {
                    "value": "[5, 5, 5, 5]",
                    "type": "List",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Adam_304": {
                "variable": {
                    "value": "d_opt",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "discriminator.module.sub_discriminators[discriminator.current_scale].parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0005",
                    "type": "Constant",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.5, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_306": {
                "variable": {
                    "value": "g_opt",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "generator.module.sub_generators[generator.current_scale].parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0005",
                    "type": "Constant",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.5, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_315": {
                "variable": {
                    "value": "d_opt",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "discriminator.sub_discriminators[discriminator.current_scale].parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0005",
                    "type": "Constant",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.5, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_317": {
                "variable": {
                    "value": "g_opt",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "generator.sub_generators[generator.current_scale].parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0005",
                    "type": "Constant",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.5, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "set_device_144": {
                "device": {
                    "value": "args.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_154": {
                "device": {
                    "value": "args.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_238": {
                "*size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "args.size_list[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "layout": {
                    "value": "args.size_list[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_239": {
                "*size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "args.size_list[zeros_idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "layout": {
                    "value": "args.size_list[zeros_idx]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_148": {
                "module": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "[args.gpu]",
                    "type": "List",
                    "possible_values": []
                },
                "output_device": {
                    "value": "args.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_151": {
                "module": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "DataParallel_157": {
                "module": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "set_device_278": {
                "device": {
                    "value": "args.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_289": {
                "device": {
                    "value": "args.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_189": {
                "device": {
                    "value": "args.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_201": {
                "device": {
                    "value": "args.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_282": {
                "module": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "[args.gpu]",
                    "type": "List",
                    "possible_values": []
                },
                "output_device": {
                    "value": "args.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_286": {
                "module": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "DataParallel_292": {
                "module": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_194": {
                "module": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "[args.gpu]",
                    "type": "List",
                    "possible_values": []
                },
                "output_device": {
                    "value": "args.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_198": {
                "module": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "DataParallel_204": {
                "module": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                }
            }
        }
    },
    "code/models/discriminator.py": {
        "torch": {
            "ModuleList_10": {
                "variable": {
                    "value": "self.sub_discriminators",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_12": {
                "variable": {
                    "value": "first_discriminator",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_23": {
                "variable": {
                    "value": "first_discriminator",
                    "type": "Name",
                    "possible_values": []
                },
                "*args": {
                    "value": "*first_discriminator",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_37": {
                "variable": {
                    "value": "tmp_discriminator",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_48": {
                "variable": {
                    "value": "tmp_discriminator",
                    "type": "Name",
                    "possible_values": []
                },
                "*args": {
                    "value": "*tmp_discriminator",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_14": {
                "*args": {
                    "value": "nn.Conv2d(3, self.nf, 3, 1, 1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_21": {
                "*args": {
                    "value": "nn.Conv2d(self.nf, 1, 3, 1, 1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_38": {
                "*args": {
                    "value": "nn.Conv2d(3, self.nf, 3, 1, 1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_46": {
                "*args": {
                    "value": "nn.Conv2d(self.nf, 1, 3, 1, 1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_14": {
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.nf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_15": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_17": {
                "*args": {
                    "value": "nn.Conv2d(self.nf, self.nf, 3, 1, 1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_21": {
                "in_channels": {
                    "value": "self.nf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_38": {
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.nf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_39": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_42": {
                "*args": {
                    "value": "nn.Conv2d(self.nf, self.nf, 3, 1, 1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_46": {
                "in_channels": {
                    "value": "self.nf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_17": {
                "in_channels": {
                    "value": "self.nf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.nf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_18": {
                "num_features": {
                    "value": "self.nf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LeakyReLU_19": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_42": {
                "in_channels": {
                    "value": "self.nf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.nf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_43": {
                "num_features": {
                    "value": "self.nf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LeakyReLU_44": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "code/models/generator.py": {
        "torch": {
            "ModuleList_18": {
                "variable": {
                    "value": "self.sub_generators",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_20": {
                "variable": {
                    "value": "first_generator",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_33": {
                "variable": {
                    "value": "first_generator",
                    "type": "Name",
                    "possible_values": []
                },
                "*args": {
                    "value": "*first_generator",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_63": {
                "variable": {
                    "value": "tmp_generator",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_76": {
                "variable": {
                    "value": "tmp_generator",
                    "type": "Name",
                    "possible_values": []
                },
                "*args": {
                    "value": "*tmp_generator",
                    "type": null,
                    "possible_values": []
                }
            },
            "interpolate_48": {
                "variable": {
                    "value": "x_inter",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x_inter",
                    "type": "Name",
                    "possible_values": [
                        [
                            "img",
                            "Name"
                        ],
                        [
                            "x_first",
                            "Name"
                        ],
                        [
                            "F.interpolate(x_inter, (self.size_list[i], self.size_list[i]), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "F.pad(x_inter, [5, 5, 5, 5], value=0)",
                            "Call"
                        ],
                        [
                            "x_inter + z[i]",
                            "BinOp"
                        ],
                        [
                            "self.sub_generators[i](x_inter) + x_prev",
                            "BinOp"
                        ]
                    ]
                },
                "size": {
                    "value": "(self.size_list[i], self.size_list[i])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pad_50": {
                "variable": {
                    "value": "x_inter",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x_inter",
                    "type": "Name",
                    "possible_values": [
                        [
                            "img",
                            "Name"
                        ],
                        [
                            "x_first",
                            "Name"
                        ],
                        [
                            "F.interpolate(x_inter, (self.size_list[i], self.size_list[i]), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "F.pad(x_inter, [5, 5, 5, 5], value=0)",
                            "Call"
                        ],
                        [
                            "x_inter + z[i]",
                            "BinOp"
                        ],
                        [
                            "self.sub_generators[i](x_inter) + x_prev",
                            "BinOp"
                        ]
                    ]
                },
                "pad": {
                    "value": "[5, 5, 5, 5]",
                    "type": "List",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_22": {
                "*args": {
                    "value": "nn.Conv2d(3, self.nf, 3, 1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_30": {
                "*args": {
                    "value": "nn.Conv2d(self.nf, 3, 3, 1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_64": {
                "*args": {
                    "value": "nn.Conv2d(3, self.nf, 3, 1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_73": {
                "*args": {
                    "value": "nn.Conv2d(self.nf, 3, 3, 1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_22": {
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.nf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_23": {
                "num_features": {
                    "value": "self.nf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LeakyReLU_24": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_26": {
                "*args": {
                    "value": "nn.Conv2d(self.nf, self.nf, 3, 1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_30": {
                "in_channels": {
                    "value": "self.nf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Tanh_31": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_64": {
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.nf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_65": {
                "num_features": {
                    "value": "self.nf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LeakyReLU_66": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_69": {
                "*args": {
                    "value": "nn.Conv2d(self.nf, self.nf, 3, 1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_73": {
                "in_channels": {
                    "value": "self.nf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Tanh_74": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_26": {
                "in_channels": {
                    "value": "self.nf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.nf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_27": {
                "num_features": {
                    "value": "self.nf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LeakyReLU_28": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_69": {
                "in_channels": {
                    "value": "self.nf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.nf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_70": {
                "num_features": {
                    "value": "self.nf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LeakyReLU_71": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "code/ops.py": {
        "torch": {
            "rand_36": {
                "variable": {
                    "value": "alpha",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "x_real.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_337": {
                "variable": {
                    "value": "sigma",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mm(u, w_mat) * v",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Embedding_91": {
                "variable": {
                    "value": "self.alpha_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "nlabels",
                    "type": "Name",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "nfilter",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Embedding_92": {
                "variable": {
                    "value": "self.beta_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "nlabels",
                    "type": "Name",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "nfilter",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_93": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "nfilter",
                    "type": "Name",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_138": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "num_features",
                    "type": "Name",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "momentum": {
                    "value": "momentum",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Embedding_139": {
                "variable": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "num_features * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm2d_154": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "num_features",
                    "type": "Name",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "momentum": {
                    "value": "momentum",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_155": {
                "variable": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_features",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Linear_156": {
                "variable": {
                    "value": "self.beta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_features",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Sequential_178": {
                "variable": {
                    "value": "self.hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(3, hid_features, 3, 1, 1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_181": {
                "variable": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "hid_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_features",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_182": {
                "variable": {
                    "value": "self.beta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "hid_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_features",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_187": {
                "variable": {
                    "value": "rimg",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "type": "Name",
                    "possible_values": []
                },
                "size": {
                    "value": "feat.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Sequential_210": {
                "variable": {
                    "value": "self.hidden_img",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(3 + 16, hid_features, 3, 1, 1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_216": {
                "variable": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "hid_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_features",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_217": {
                "variable": {
                    "value": "self.beta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "hid_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_features",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_222": {
                "variable": {
                    "value": "rimg",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "type": "Name",
                    "possible_values": []
                },
                "size": {
                    "value": "feat.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "interpolate_223": {
                "variable": {
                    "value": "rz",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tmp_z",
                            "Name"
                        ],
                        [
                            "self.fc_z(z)",
                            "Call"
                        ],
                        [
                            "z + self.fc_y1(y) + z * self.fc_y2(y)",
                            "BinOp"
                        ],
                        [
                            "z.repeat(1, 1, hx.size(2), hx.size(3))",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "feat.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_225": {
                "variable": {
                    "value": "rin",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(rimg, rz)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_283": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "num_features",
                    "type": "Name",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "momentum": {
                    "value": "momentum",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_287": {
                "variable": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_latent",
                    "type": "Name",
                    "possible_values": [
                        [
                            "num_hidden",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_features",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Linear_288": {
                "variable": {
                    "value": "self.beta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_latent",
                    "type": "Name",
                    "possible_values": [
                        [
                            "num_hidden",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_features",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "cat_423": {
                "variable": {
                    "value": "h_out",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(h_cat, z_cat)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_502": {
                "variable": {
                    "value": "h_out",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, hx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "grad_26": {
                "outputs": {
                    "value": "d_out.sum()",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x_in",
                    "type": "Name",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "only_inputs": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "grad_41": {
                "outputs": {
                    "value": "d_inter_logit",
                    "type": "Name",
                    "possible_values": [
                        [
                            "D(x_interpolate)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "x_interpolate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "((1 - alpha) * x_real + alpha * x_fake).detach()",
                            "Call"
                        ]
                    ]
                },
                "grad_outputs": {
                    "value": "torch.ones_like(d_inter_logit)",
                    "type": "Call",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_51": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_52": {
                "tensors": {
                    "value": "(x, y * torch.ones(x.shape[0], y.shape[1], x.shape[2], x.shape[3]))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_54": {
                "tensors": {
                    "value": "(x, y * torch.ones(x.shape[0], y.shape[1], x.shape[2], x.shape[3]).cuda(y.device, non_blocking=True))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_175": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "num_features",
                    "type": "Name",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "momentum": {
                    "value": "momentum",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_208": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "num_features",
                    "type": "Name",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "momentum": {
                    "value": "momentum",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_285": {
                "variable": {
                    "value": "self.fc_z",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(num_latent, num_hidden)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_290": {
                "variable": {
                    "value": "self.fc_y1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_latent",
                    "type": "Name",
                    "possible_values": [
                        [
                            "num_hidden",
                            "Name"
                        ]
                    ]
                }
            },
            "Linear_291": {
                "variable": {
                    "value": "self.fc_y2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_latent",
                    "type": "Name",
                    "possible_values": [
                        [
                            "num_hidden",
                            "Name"
                        ]
                    ]
                }
            },
            "div_319": {
                "variable": {
                    "value": "w_bar",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "sigma",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.sum(torch.mm(u, w_mat) * v)",
                            "Call"
                        ],
                        [
                            "size * filter_sigma / filter_size if filter_size else 0",
                            "IfExp"
                        ]
                    ]
                }
            },
            "embedding_325": {
                "input": {
                    "value": "input",
                    "type": "Name",
                    "possible_values": []
                },
                "weight": {
                    "value": "w_bar",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.div(self.weight, sigma)",
                            "Call"
                        ],
                        [
                            "self.weight",
                            "Attribute"
                        ]
                    ]
                },
                "padding_idx": {
                    "value": "self.padding_idx",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.max_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "norm_type": {
                    "value": "self.norm_type",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_grad_by_freq": {
                    "value": "self.scale_grad_by_freq",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sparse": {
                    "value": "self.sparse",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "spectral_norm_356": {
                "variable": {
                    "value": "self.layer_zh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "torch.nn.Conv2d(latent_size, self.concat_size, 3, 1, 1, bias=bias)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_358": {
                "variable": {
                    "value": "self.layer_hh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[torch.nn.utils.spectral_norm(torch.nn.Conv2d(ch, self.concat_size, 3, 1, 1, bias=bias))]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Conv2d_372": {
                "variable": {
                    "value": "self.layer_zh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "latent_size",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.concat_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ModuleList_374": {
                "variable": {
                    "value": "self.layer_hh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[torch.nn.Conv2d(ch, self.concat_size, 3, 1, 1, bias=bias)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_411": {
                "variable": {
                    "value": "hx",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "z.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.base",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.base",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_429": {
                "variable": {
                    "value": "h_out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "h_out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat((h_cat, z_cat), 1)",
                            "Call"
                        ],
                        [
                            "block(h_out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(h_out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.layer_hh[-1](h_out)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, hx), 1)",
                            "Call"
                        ],
                        [
                            "block(h_out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(h_out, scale_factor=0.5)",
                            "Call"
                        ],
                        [
                            "self.layer_xhh[-1](h_out)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ModuleList_444": {
                "variable": {
                    "value": "self.layer_xhh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[torch.nn.Sequential(torch.nn.utils.spectral_norm(torch.nn.Conv2d(ch + self.nf, self.nf, 3, 1, 1, bias=bias)), torch.nn.LeakyReLU(inplace=True))]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_460": {
                "variable": {
                    "value": "self.layer_xhh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[torch.nn.Sequential(torch.nn.Conv2d(ch + self.nf, self.nf, 3, 1, 1, bias=bias), torch.nn.LeakyReLU(inplace=True))]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_498": {
                "variable": {
                    "value": "hx",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "self.nf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.size(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "layout": {
                    "value": "x.size(3)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_508": {
                "variable": {
                    "value": "h_out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "h_out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat((h_cat, z_cat), 1)",
                            "Call"
                        ],
                        [
                            "block(h_out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(h_out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.layer_hh[-1](h_out)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, hx), 1)",
                            "Call"
                        ],
                        [
                            "block(h_out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(h_out, scale_factor=0.5)",
                            "Call"
                        ],
                        [
                            "self.layer_xhh[-1](h_out)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_178": {
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "hid_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_179": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_210": {
                "in_channels": {
                    "value": "3 + 16",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "hid_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_211": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mm_333": {
                "input": {
                    "value": "u",
                    "type": "Name",
                    "possible_values": [
                        [
                            "l2normalize(torch.mm(v, torch.t(w_mat.data)))",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "w_mat.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mm_335": {
                "input": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": [
                        [
                            "l2normalize(torch.mm(u, w_mat.data))",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "torch.t(w_mat.data)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_337": {
                "input": {
                    "value": "u",
                    "type": "Name",
                    "possible_values": [
                        [
                            "l2normalize(torch.mm(v, torch.t(w_mat.data)))",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "w_mat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.weight.view(self.num_embeddings, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_42": {
                "input": {
                    "value": "d_inter_logit",
                    "type": "Name",
                    "possible_values": [
                        [
                            "D(x_interpolate)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_285": {
                "in_features": {
                    "value": "num_latent",
                    "type": "Name",
                    "possible_values": [
                        [
                            "num_hidden",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_hidden",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_285": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_311": {
                "*size": {
                    "value": "(1, self.num_embeddings)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "t_335": {
                "input": {
                    "value": "w_mat.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_356": {
                "in_channels": {
                    "value": "latent_size",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.concat_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_368": {
                "*args": {
                    "value": "torch.nn.utils.spectral_norm(torch.nn.Conv2d(nf, 3, 3, 1, 1, bias=bias))",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_384": {
                "*args": {
                    "value": "torch.nn.Conv2d(nf, 3, 3, 1, 1, bias=bias)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_456": {
                "*args": {
                    "value": "torch.nn.utils.spectral_norm(torch.nn.Conv2d(nf_, self.nf, 3, 1, 1, bias=bias))",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_471": {
                "*args": {
                    "value": "torch.nn.Conv2d(nf_, self.nf, 3, 1, 1, bias=bias)",
                    "type": null,
                    "possible_values": []
                }
            },
            "l1_loss_517": {
                "input": {
                    "value": "x_recon",
                    "type": "Name",
                    "possible_values": []
                },
                "target": {
                    "value": "x_flip",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "mse_loss_519": {
                "input": {
                    "value": "x_recon",
                    "type": "Name",
                    "possible_values": []
                },
                "target": {
                    "value": "x_flip",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "ones_52": {
                "*size": {
                    "value": "x.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "y.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.shape[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "layout": {
                    "value": "x.shape[3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_54": {
                "*size": {
                    "value": "x.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "y.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.shape[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "layout": {
                    "value": "x.shape[3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "spectral_norm_358": {
                "module": {
                    "value": "torch.nn.Conv2d(ch, self.concat_size, 3, 1, 1, bias=bias)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_363": {
                "*args": {
                    "value": "torch.nn.utils.spectral_norm(torch.nn.Conv2d(nf, 2 * nf, 3, 1, 1, bias=bias))",
                    "type": null,
                    "possible_values": []
                }
            },
            "spectral_norm_368": {
                "module": {
                    "value": "torch.nn.Conv2d(nf, 3, 3, 1, 1, bias=bias)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Tanh_369": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_374": {
                "in_channels": {
                    "value": "ch",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.concat_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_379": {
                "*args": {
                    "value": "torch.nn.Conv2d(nf, 2 * nf, 3, 1, 1, bias=bias)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_384": {
                "in_channels": {
                    "value": "nf",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2 * self.concat_size",
                            "BinOp"
                        ],
                        [
                            "2 * self.concat_size",
                            "BinOp"
                        ],
                        [
                            "nf * 2",
                            "BinOp"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Tanh_385": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_445": {
                "*args": {
                    "value": "torch.nn.utils.spectral_norm(torch.nn.Conv2d(ch + self.nf, self.nf, 3, 1, 1, bias=bias))",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_451": {
                "*args": {
                    "value": "torch.nn.utils.spectral_norm(torch.nn.Conv2d(nf_, 2 * nf_, 3, 1, 1, bias=bias))",
                    "type": null,
                    "possible_values": []
                }
            },
            "spectral_norm_456": {
                "module": {
                    "value": "torch.nn.Conv2d(nf_, self.nf, 3, 1, 1, bias=bias)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm2d_457": {
                "num_features": {
                    "value": "self.nf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LeakyReLU_458": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_460": {
                "*args": {
                    "value": "torch.nn.Conv2d(ch + self.nf, self.nf, 3, 1, 1, bias=bias)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_466": {
                "*args": {
                    "value": "torch.nn.Conv2d(nf_, 2 * nf_, 3, 1, 1, bias=bias)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_471": {
                "in_channels": {
                    "value": "nf_",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.nf",
                            "Attribute"
                        ],
                        [
                            "self.nf",
                            "Attribute"
                        ],
                        [
                            "nf_ * 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.nf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_472": {
                "num_features": {
                    "value": "self.nf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LeakyReLU_473": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_358": {
                "in_channels": {
                    "value": "ch",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.concat_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "spectral_norm_363": {
                "module": {
                    "value": "torch.nn.Conv2d(nf, 2 * nf, 3, 1, 1, bias=bias)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm2d_364": {
                "num_features": {
                    "value": "2 * nf",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_365": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_368": {
                "in_channels": {
                    "value": "nf",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2 * self.concat_size",
                            "BinOp"
                        ],
                        [
                            "2 * self.concat_size",
                            "BinOp"
                        ],
                        [
                            "nf * 2",
                            "BinOp"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_379": {
                "in_channels": {
                    "value": "nf",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2 * self.concat_size",
                            "BinOp"
                        ],
                        [
                            "2 * self.concat_size",
                            "BinOp"
                        ],
                        [
                            "nf * 2",
                            "BinOp"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "2 * nf",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_380": {
                "num_features": {
                    "value": "2 * nf",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_381": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "spectral_norm_445": {
                "module": {
                    "value": "torch.nn.Conv2d(ch + self.nf, self.nf, 3, 1, 1, bias=bias)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LeakyReLU_446": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "spectral_norm_451": {
                "module": {
                    "value": "torch.nn.Conv2d(nf_, 2 * nf_, 3, 1, 1, bias=bias)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm2d_452": {
                "num_features": {
                    "value": "2 * nf_",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "LeakyReLU_453": {
                "negative_slope": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_456": {
                "in_channels": {
                    "value": "nf_",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.nf",
                            "Attribute"
                        ],
                        [
                            "self.nf",
                            "Attribute"
                        ],
                        [
                            "nf_ * 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.nf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_460": {
                "in_channels": {
                    "value": "ch + self.nf",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.nf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LeakyReLU_461": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_466": {
                "in_channels": {
                    "value": "nf_",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.nf",
                            "Attribute"
                        ],
                        [
                            "self.nf",
                            "Attribute"
                        ],
                        [
                            "nf_ * 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "2 * nf_",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_467": {
                "num_features": {
                    "value": "2 * nf_",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "LeakyReLU_468": {
                "negative_slope": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_363": {
                "in_channels": {
                    "value": "nf",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2 * self.concat_size",
                            "BinOp"
                        ],
                        [
                            "2 * self.concat_size",
                            "BinOp"
                        ],
                        [
                            "nf * 2",
                            "BinOp"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "2 * nf",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_445": {
                "in_channels": {
                    "value": "ch + self.nf",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.nf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_451": {
                "in_channels": {
                    "value": "nf_",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.nf",
                            "Attribute"
                        ],
                        [
                            "self.nf",
                            "Attribute"
                        ],
                        [
                            "nf_ * 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "2 * nf_",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "code/train.py": {
        "torch": {
            "interpolate_49": {
                "variable": {
                    "value": "x_in",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x_in",
                    "type": "Name",
                    "possible_values": [
                        [
                            "next(train_it)",
                            "Call"
                        ],
                        [
                            "x_in.cuda(args.gpu, non_blocking=True)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x_in, (args.size_list[stage], args.size_list[stage]), mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(args.size_list[stage], args.size_list[stage])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_55": {
                "variable": {
                    "value": "x_tmp",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x_org",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x_in",
                            "Name"
                        ]
                    ]
                },
                "size": {
                    "value": "(args.size_list[xidx], args.size_list[xidx])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mse_loss_72": {
                "variable": {
                    "value": "g_rec",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x_rec_list[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "x_in",
                    "type": "Name",
                    "possible_values": [
                        [
                            "next(train_it)",
                            "Call"
                        ],
                        [
                            "x_in.cuda(args.gpu, non_blocking=True)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x_in, (args.size_list[stage], args.size_list[stage]), mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "pad_79": {
                "input": {
                    "value": "rmse_list[z_idx] * torch.randn(args.batch_size, 3, args.size_list[z_idx], args.size_list[z_idx]).cuda(args.gpu, non_blocking=True)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "pad": {
                    "value": "[5, 5, 5, 5]",
                    "type": "List",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_95": {
                "variable": {
                    "value": "g_fake",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "g_fake_logit",
                    "type": "Name",
                    "possible_values": [
                        [
                            "D(x_fake_list[-1])",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "ones",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.ones_like(d_real_logit).cuda(args.gpu)",
                            "Call"
                        ],
                        [
                            "torch.ones_like(g_fake_logit).cuda(args.gpu)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_95": {
                "variable": {
                    "value": "g_fake",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_130": {
                "variable": {
                    "value": "d_fake",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "d_fake_logit",
                    "type": "Name",
                    "possible_values": [
                        [
                            "D(x_fake_list[-1].detach())",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "zeros",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.zeros_like(d_fake_logit).cuda(args.gpu)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_130": {
                "variable": {
                    "value": "d_fake",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_132": {
                "variable": {
                    "value": "d_real",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "d_real_logit",
                    "type": "Name",
                    "possible_values": [
                        [
                            "D(x_in)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "ones",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.ones_like(d_real_logit).cuda(args.gpu)",
                            "Call"
                        ],
                        [
                            "torch.ones_like(g_fake_logit).cuda(args.gpu)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_132": {
                "variable": {
                    "value": "d_real",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mse_loss_76": {
                "input": {
                    "value": "x_rec_list[rmseidx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "x_in_list[rmseidx]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mse_loss_100": {
                "variable": {
                    "value": "g_fake",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mean(g_fake_logit, (2, 3))",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "0.9 * ones",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mse_loss_138": {
                "variable": {
                    "value": "d_fake",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mean(d_fake_logit, (2, 3))",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "zeros",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.zeros_like(d_fake_logit).cuda(args.gpu)",
                            "Call"
                        ]
                    ]
                }
            },
            "mse_loss_139": {
                "variable": {
                    "value": "d_real",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mean(d_real_logit, (2, 3))",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "0.9 * ones",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "code/utils.py": {
        "torch": {
            "save_21": {
                "obj": {
                    "value": "state",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "check_file",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(log_dir, 'model_{}.ckpt'.format(epoch))",
                            "Call"
                        ]
                    ]
                }
            },
            "randperm_76": {
                "variable": {
                    "value": "index",
                    "type": "Name",
                    "possible_values": []
                },
                "n": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "target.size(0)",
                            "Call"
                        ],
                        [
                            "x.size()[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "randperm_78": {
                "variable": {
                    "value": "index",
                    "type": "Name",
                    "possible_values": []
                },
                "n": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "target.size(0)",
                            "Call"
                        ],
                        [
                            "x.size()[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "softmax_319": {
                "variable": {
                    "value": "probs_u",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs_u",
                    "type": "Name",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_322": {
                "variable": {
                    "value": "Lu",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "(probs_u - targets_u) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_52": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_99": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "squeeze_104": {
                "variable": {
                    "value": "att_map[idx, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "feats[idx, y_.data[idx], :, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mean_314": {
                "input": {
                    "value": "torch.sum(target * F.log_softmax(input), dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_344": {
                "tensors": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cross_entropy_86": {
                "input": {
                    "value": "pred",
                    "type": "Name",
                    "possible_values": [
                        [
                            "pred.t()",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "y_b",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "zeros_101": {
                "*size": {
                    "value": "[feats.shape[0], feats.shape[2], feats.shape[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sum_314": {
                "input": {
                    "value": "target * F.log_softmax(input)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_321": {
                "input": {
                    "value": "torch.sum(F.log_softmax(outputs_x, dim=1) * targets_x, dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_321": {
                "input": {
                    "value": "F.log_softmax(outputs_x, dim=1) * targets_x",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_softmax_314": {
                "input": {
                    "value": "input",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "log_softmax_321": {
                "input": {
                    "value": "outputs_x",
                    "type": "Name",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "code/validation.py": {
        "torch": {
            "interpolate_31": {
                "variable": {
                    "value": "x_in",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x_in",
                    "type": "Name",
                    "possible_values": [
                        [
                            "next(val_it)",
                            "Call"
                        ],
                        [
                            "x_in.cuda(args.gpu, non_blocking=True)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x_in, (args.size_list[stage], args.size_list[stage]), mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(args.size_list[stage], args.size_list[stage])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_36": {
                "variable": {
                    "value": "x_tmp",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x_org",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x_in",
                            "Name"
                        ]
                    ]
                },
                "size": {
                    "value": "(args.size_list[xidx], args.size_list[xidx])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mse_loss_48": {
                "input": {
                    "value": "x_rec_list[rmseidx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "x_in_list[rmseidx]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "pad_59": {
                "input": {
                    "value": "rmse_list[z_idx] * torch.randn(args.batch_size, 3, args.size_list[z_idx], args.size_list[z_idx]).cuda(args.gpu, non_blocking=True)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "pad": {
                    "value": "[5, 5, 5, 5]",
                    "type": "List",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    }
}