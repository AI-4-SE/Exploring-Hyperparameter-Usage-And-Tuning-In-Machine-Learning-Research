{
    "src/run_imdb.py": {
        "sklearn": {
            "accuracy_score_162": {
                "variable": {
                    "value": "acc",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "p.label_ids",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "preds",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "p.predictions[0] if isinstance(p.predictions, tuple) else p.predictions",
                            "IfExp"
                        ],
                        [
                            "softmax(preds, axis=1)[:, 1]",
                            "Subscript"
                        ],
                        [
                            "(preds >= 0.5).astype(int)",
                            "Call"
                        ]
                    ]
                }
            },
            "f1_score_163": {
                "variable": {
                    "value": "f1",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "p.label_ids",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "preds",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "p.predictions[0] if isinstance(p.predictions, tuple) else p.predictions",
                            "IfExp"
                        ],
                        [
                            "softmax(preds, axis=1)[:, 1]",
                            "Subscript"
                        ],
                        [
                            "(preds >= 0.5).astype(int)",
                            "Call"
                        ]
                    ]
                }
            },
            "precision_score_164": {
                "variable": {
                    "value": "prec",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "p.label_ids",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "preds",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "p.predictions[0] if isinstance(p.predictions, tuple) else p.predictions",
                            "IfExp"
                        ],
                        [
                            "softmax(preds, axis=1)[:, 1]",
                            "Subscript"
                        ],
                        [
                            "(preds >= 0.5).astype(int)",
                            "Call"
                        ]
                    ]
                }
            },
            "recall_score_165": {
                "variable": {
                    "value": "rec",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "p.label_ids",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "preds",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "p.predictions[0] if isinstance(p.predictions, tuple) else p.predictions",
                            "IfExp"
                        ],
                        [
                            "softmax(preds, axis=1)[:, 1]",
                            "Subscript"
                        ],
                        [
                            "(preds >= 0.5).astype(int)",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "SummaryWriter_173": {
                "variable": {
                    "value": "tb_writer",
                    "type": "Variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "training_args.logging_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/model/data_collator.py": {
        "torch": {
            "tensor_70": {
                "variable": {
                    "value": "special_tokens_indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "special_tokens_indices",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[self.tokenizer.get_special_tokens_mask(val, already_has_special_tokens=True) for val in shuffled_words.tolist()]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(special_tokens_indices, dtype=torch.bool)",
                            "Call"
                        ],
                        [
                            "[self.tokenizer.get_special_tokens_mask(val, already_has_special_tokens=True) for val in shuffled_words.tolist()]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(special_tokens_indices, dtype=torch.bool)",
                            "Call"
                        ],
                        [
                            "[self.tokenizer.get_special_tokens_mask(val, already_has_special_tokens=True) for val in replaced_words.tolist()]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(special_tokens_indices, dtype=torch.bool)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "full_75": {
                "variable": {
                    "value": "probability_matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "labels.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "self.shuffle_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_79": {
                "variable": {
                    "value": "special_tokens_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "special_tokens_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[self.tokenizer.get_special_tokens_mask(val, already_has_special_tokens=True) for val in labels.tolist()]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(special_tokens_mask, dtype=torch.bool)",
                            "Call"
                        ],
                        [
                            "[self.tokenizer.get_special_tokens_mask(val, already_has_special_tokens=True) for val in manipulated_input_ids.tolist()]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(special_tokens_mask, dtype=torch.bool)",
                            "Call"
                        ],
                        [
                            "[self.tokenizer.get_special_tokens_mask(val, already_has_special_tokens=True) for val in manipulated_input_ids.tolist()]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(special_tokens_mask, dtype=torch.bool)",
                            "Call"
                        ],
                        [
                            "[self.tokenizer.get_special_tokens_mask(val, already_has_special_tokens=True) for val in labels.tolist()]",
                            "ListComp"
                        ],
                        [
                            "[self.tokenizer.get_special_tokens_mask(val, already_has_special_tokens=True) for val in input_ids.tolist()]",
                            "ListComp"
                        ],
                        [
                            "[self.tokenizer.get_special_tokens_mask(val, already_has_special_tokens=True) for val in input_ids.tolist()]",
                            "ListComp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bernoulli_81": {
                "variable": {
                    "value": "shuffled_indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probability_matrix",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.full(labels.shape, self.shuffle_prob)",
                            "Call"
                        ],
                        [
                            "torch.full(manipulated_input_ids.shape, self.manipulate_prob)",
                            "Call"
                        ],
                        [
                            "torch.full(manipulated_input_ids.shape, self.random_prob)",
                            "Call"
                        ],
                        [
                            "torch.full(labels.shape, self.mlm_prob)",
                            "Call"
                        ],
                        [
                            "torch.full(masked_word_labels.shape, self.mask_prob)",
                            "Call"
                        ],
                        [
                            "torch.full(masked_word_labels.shape, self.mask_prob)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_133": {
                "variable": {
                    "value": "shuffle_random_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "manipulated_input_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_ids.clone()",
                            "Call"
                        ],
                        [
                            "input_ids.clone()",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_144": {
                "variable": {
                    "value": "special_tokens_indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "special_tokens_indices",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[self.tokenizer.get_special_tokens_mask(val, already_has_special_tokens=True) for val in shuffled_words.tolist()]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(special_tokens_indices, dtype=torch.bool)",
                            "Call"
                        ],
                        [
                            "[self.tokenizer.get_special_tokens_mask(val, already_has_special_tokens=True) for val in shuffled_words.tolist()]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(special_tokens_indices, dtype=torch.bool)",
                            "Call"
                        ],
                        [
                            "[self.tokenizer.get_special_tokens_mask(val, already_has_special_tokens=True) for val in replaced_words.tolist()]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(special_tokens_indices, dtype=torch.bool)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "full_149": {
                "variable": {
                    "value": "probability_matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "manipulated_input_ids.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "self.manipulate_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_153": {
                "variable": {
                    "value": "special_tokens_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "special_tokens_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[self.tokenizer.get_special_tokens_mask(val, already_has_special_tokens=True) for val in labels.tolist()]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(special_tokens_mask, dtype=torch.bool)",
                            "Call"
                        ],
                        [
                            "[self.tokenizer.get_special_tokens_mask(val, already_has_special_tokens=True) for val in manipulated_input_ids.tolist()]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(special_tokens_mask, dtype=torch.bool)",
                            "Call"
                        ],
                        [
                            "[self.tokenizer.get_special_tokens_mask(val, already_has_special_tokens=True) for val in manipulated_input_ids.tolist()]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(special_tokens_mask, dtype=torch.bool)",
                            "Call"
                        ],
                        [
                            "[self.tokenizer.get_special_tokens_mask(val, already_has_special_tokens=True) for val in labels.tolist()]",
                            "ListComp"
                        ],
                        [
                            "[self.tokenizer.get_special_tokens_mask(val, already_has_special_tokens=True) for val in input_ids.tolist()]",
                            "ListComp"
                        ],
                        [
                            "[self.tokenizer.get_special_tokens_mask(val, already_has_special_tokens=True) for val in input_ids.tolist()]",
                            "ListComp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bernoulli_155": {
                "variable": {
                    "value": "shuffled_indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probability_matrix",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.full(labels.shape, self.shuffle_prob)",
                            "Call"
                        ],
                        [
                            "torch.full(manipulated_input_ids.shape, self.manipulate_prob)",
                            "Call"
                        ],
                        [
                            "torch.full(manipulated_input_ids.shape, self.random_prob)",
                            "Call"
                        ],
                        [
                            "torch.full(labels.shape, self.mlm_prob)",
                            "Call"
                        ],
                        [
                            "torch.full(masked_word_labels.shape, self.mask_prob)",
                            "Call"
                        ],
                        [
                            "torch.full(masked_word_labels.shape, self.mask_prob)",
                            "Call"
                        ]
                    ]
                }
            },
            "randint_162": {
                "variable": {
                    "value": "random_words",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "len(self.tokenizer)",
                    "type": "Call",
                    "possible_values": []
                },
                "high": {
                    "value": "manipulated_input_ids.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_216": {
                "variable": {
                    "value": "random_word_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "manipulated_input_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_ids.clone()",
                            "Call"
                        ],
                        [
                            "input_ids.clone()",
                            "Call"
                        ]
                    ]
                }
            },
            "randint_219": {
                "variable": {
                    "value": "replaced_words",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "len(self.tokenizer)",
                    "type": "Call",
                    "possible_values": []
                },
                "high": {
                    "value": "manipulated_input_ids.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_227": {
                "variable": {
                    "value": "special_tokens_indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "special_tokens_indices",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[self.tokenizer.get_special_tokens_mask(val, already_has_special_tokens=True) for val in shuffled_words.tolist()]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(special_tokens_indices, dtype=torch.bool)",
                            "Call"
                        ],
                        [
                            "[self.tokenizer.get_special_tokens_mask(val, already_has_special_tokens=True) for val in shuffled_words.tolist()]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(special_tokens_indices, dtype=torch.bool)",
                            "Call"
                        ],
                        [
                            "[self.tokenizer.get_special_tokens_mask(val, already_has_special_tokens=True) for val in replaced_words.tolist()]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(special_tokens_indices, dtype=torch.bool)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "full_232": {
                "variable": {
                    "value": "probability_matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "manipulated_input_ids.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "self.random_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_236": {
                "variable": {
                    "value": "special_tokens_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "special_tokens_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[self.tokenizer.get_special_tokens_mask(val, already_has_special_tokens=True) for val in labels.tolist()]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(special_tokens_mask, dtype=torch.bool)",
                            "Call"
                        ],
                        [
                            "[self.tokenizer.get_special_tokens_mask(val, already_has_special_tokens=True) for val in manipulated_input_ids.tolist()]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(special_tokens_mask, dtype=torch.bool)",
                            "Call"
                        ],
                        [
                            "[self.tokenizer.get_special_tokens_mask(val, already_has_special_tokens=True) for val in manipulated_input_ids.tolist()]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(special_tokens_mask, dtype=torch.bool)",
                            "Call"
                        ],
                        [
                            "[self.tokenizer.get_special_tokens_mask(val, already_has_special_tokens=True) for val in labels.tolist()]",
                            "ListComp"
                        ],
                        [
                            "[self.tokenizer.get_special_tokens_mask(val, already_has_special_tokens=True) for val in input_ids.tolist()]",
                            "ListComp"
                        ],
                        [
                            "[self.tokenizer.get_special_tokens_mask(val, already_has_special_tokens=True) for val in input_ids.tolist()]",
                            "ListComp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bernoulli_238": {
                "variable": {
                    "value": "replaced_indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probability_matrix",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.full(labels.shape, self.shuffle_prob)",
                            "Call"
                        ],
                        [
                            "torch.full(manipulated_input_ids.shape, self.manipulate_prob)",
                            "Call"
                        ],
                        [
                            "torch.full(manipulated_input_ids.shape, self.random_prob)",
                            "Call"
                        ],
                        [
                            "torch.full(labels.shape, self.mlm_prob)",
                            "Call"
                        ],
                        [
                            "torch.full(masked_word_labels.shape, self.mask_prob)",
                            "Call"
                        ],
                        [
                            "torch.full(masked_word_labels.shape, self.mask_prob)",
                            "Call"
                        ]
                    ]
                }
            },
            "full_296": {
                "variable": {
                    "value": "probability_matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "labels.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "self.mlm_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bernoulli_304": {
                "variable": {
                    "value": "masked_indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probability_matrix",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.full(labels.shape, self.shuffle_prob)",
                            "Call"
                        ],
                        [
                            "torch.full(manipulated_input_ids.shape, self.manipulate_prob)",
                            "Call"
                        ],
                        [
                            "torch.full(manipulated_input_ids.shape, self.random_prob)",
                            "Call"
                        ],
                        [
                            "torch.full(labels.shape, self.mlm_prob)",
                            "Call"
                        ],
                        [
                            "torch.full(masked_word_labels.shape, self.mask_prob)",
                            "Call"
                        ],
                        [
                            "torch.full(masked_word_labels.shape, self.mask_prob)",
                            "Call"
                        ]
                    ]
                }
            },
            "randint_315": {
                "variable": {
                    "value": "random_words",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "len(self.tokenizer)",
                    "type": "Call",
                    "possible_values": []
                },
                "high": {
                    "value": "labels.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_716": {
                "variable": {
                    "value": "masked_word_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_722": {
                "variable": {
                    "value": "stop_word_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "stop_word_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[get_stop_word_mask(val) for val in input_ids.tolist()]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(stop_word_mask, dtype=torch.bool)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_729": {
                "variable": {
                    "value": "digit_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "digit_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[get_digit_mask(val) for val in input_ids.tolist()]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(digit_mask, dtype=torch.bool)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_736": {
                "variable": {
                    "value": "punctuation_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "punctuation_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[get_punctuation_mask(val) for val in input_ids.tolist()]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(punctuation_mask, dtype=torch.bool)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "full_740": {
                "variable": {
                    "value": "probability_matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "masked_word_labels.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "self.mask_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bernoulli_745": {
                "variable": {
                    "value": "masked_indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probability_matrix",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.full(labels.shape, self.shuffle_prob)",
                            "Call"
                        ],
                        [
                            "torch.full(manipulated_input_ids.shape, self.manipulate_prob)",
                            "Call"
                        ],
                        [
                            "torch.full(manipulated_input_ids.shape, self.random_prob)",
                            "Call"
                        ],
                        [
                            "torch.full(labels.shape, self.mlm_prob)",
                            "Call"
                        ],
                        [
                            "torch.full(masked_word_labels.shape, self.mask_prob)",
                            "Call"
                        ],
                        [
                            "torch.full(masked_word_labels.shape, self.mask_prob)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_826": {
                "variable": {
                    "value": "masked_word_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "full_834": {
                "variable": {
                    "value": "probability_matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "masked_word_labels.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "self.mask_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bernoulli_839": {
                "variable": {
                    "value": "masked_indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probability_matrix",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.full(labels.shape, self.shuffle_prob)",
                            "Call"
                        ],
                        [
                            "torch.full(manipulated_input_ids.shape, self.manipulate_prob)",
                            "Call"
                        ],
                        [
                            "torch.full(manipulated_input_ids.shape, self.random_prob)",
                            "Call"
                        ],
                        [
                            "torch.full(labels.shape, self.mlm_prob)",
                            "Call"
                        ],
                        [
                            "torch.full(masked_word_labels.shape, self.mask_prob)",
                            "Call"
                        ],
                        [
                            "torch.full(masked_word_labels.shape, self.mask_prob)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_300": {
                "data": {
                    "value": "special_tokens_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[self.tokenizer.get_special_tokens_mask(val, already_has_special_tokens=True) for val in labels.tolist()]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(special_tokens_mask, dtype=torch.bool)",
                            "Call"
                        ],
                        [
                            "[self.tokenizer.get_special_tokens_mask(val, already_has_special_tokens=True) for val in manipulated_input_ids.tolist()]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(special_tokens_mask, dtype=torch.bool)",
                            "Call"
                        ],
                        [
                            "[self.tokenizer.get_special_tokens_mask(val, already_has_special_tokens=True) for val in manipulated_input_ids.tolist()]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(special_tokens_mask, dtype=torch.bool)",
                            "Call"
                        ],
                        [
                            "[self.tokenizer.get_special_tokens_mask(val, already_has_special_tokens=True) for val in labels.tolist()]",
                            "ListComp"
                        ],
                        [
                            "[self.tokenizer.get_special_tokens_mask(val, already_has_special_tokens=True) for val in input_ids.tolist()]",
                            "ListComp"
                        ],
                        [
                            "[self.tokenizer.get_special_tokens_mask(val, already_has_special_tokens=True) for val in input_ids.tolist()]",
                            "ListComp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bernoulli_310": {
                "input": {
                    "value": "torch.full(labels.shape, 0.8)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_744": {
                "data": {
                    "value": "special_tokens_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[self.tokenizer.get_special_tokens_mask(val, already_has_special_tokens=True) for val in labels.tolist()]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(special_tokens_mask, dtype=torch.bool)",
                            "Call"
                        ],
                        [
                            "[self.tokenizer.get_special_tokens_mask(val, already_has_special_tokens=True) for val in manipulated_input_ids.tolist()]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(special_tokens_mask, dtype=torch.bool)",
                            "Call"
                        ],
                        [
                            "[self.tokenizer.get_special_tokens_mask(val, already_has_special_tokens=True) for val in manipulated_input_ids.tolist()]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(special_tokens_mask, dtype=torch.bool)",
                            "Call"
                        ],
                        [
                            "[self.tokenizer.get_special_tokens_mask(val, already_has_special_tokens=True) for val in labels.tolist()]",
                            "ListComp"
                        ],
                        [
                            "[self.tokenizer.get_special_tokens_mask(val, already_has_special_tokens=True) for val in input_ids.tolist()]",
                            "ListComp"
                        ],
                        [
                            "[self.tokenizer.get_special_tokens_mask(val, already_has_special_tokens=True) for val in input_ids.tolist()]",
                            "ListComp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_838": {
                "data": {
                    "value": "special_tokens_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[self.tokenizer.get_special_tokens_mask(val, already_has_special_tokens=True) for val in labels.tolist()]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(special_tokens_mask, dtype=torch.bool)",
                            "Call"
                        ],
                        [
                            "[self.tokenizer.get_special_tokens_mask(val, already_has_special_tokens=True) for val in manipulated_input_ids.tolist()]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(special_tokens_mask, dtype=torch.bool)",
                            "Call"
                        ],
                        [
                            "[self.tokenizer.get_special_tokens_mask(val, already_has_special_tokens=True) for val in manipulated_input_ids.tolist()]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(special_tokens_mask, dtype=torch.bool)",
                            "Call"
                        ],
                        [
                            "[self.tokenizer.get_special_tokens_mask(val, already_has_special_tokens=True) for val in labels.tolist()]",
                            "ListComp"
                        ],
                        [
                            "[self.tokenizer.get_special_tokens_mask(val, already_has_special_tokens=True) for val in input_ids.tolist()]",
                            "ListComp"
                        ],
                        [
                            "[self.tokenizer.get_special_tokens_mask(val, already_has_special_tokens=True) for val in input_ids.tolist()]",
                            "ListComp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_44": {
                "variable": {
                    "value": "batch[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[f[k] for f in examples]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "tensor_46": {
                "variable": {
                    "value": "batch[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "[f[k] for f in examples]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "randperm_62": {
                "n": {
                    "value": "labels.size()[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "stack_118": {
                "variable": {
                    "value": "batch[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[f[k] for f in examples]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "tensor_120": {
                "variable": {
                    "value": "batch[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "[f[k] for f in examples]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "randperm_136": {
                "n": {
                    "value": "manipulated_input_ids.size()[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "bernoulli_161": {
                "input": {
                    "value": "torch.full(manipulated_input_ids.shape, self.manipulate_prob)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_201": {
                "variable": {
                    "value": "batch[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[f[k] for f in examples]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "tensor_203": {
                "variable": {
                    "value": "batch[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "[f[k] for f in examples]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_274": {
                "variable": {
                    "value": "batch[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[f[k] for f in examples]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "tensor_276": {
                "variable": {
                    "value": "batch[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "[f[k] for f in examples]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "bernoulli_314": {
                "input": {
                    "value": "torch.full(labels.shape, 0.5)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_697": {
                "variable": {
                    "value": "batch[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[f[k] for f in examples]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "tensor_699": {
                "variable": {
                    "value": "batch[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "[f[k] for f in examples]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_807": {
                "variable": {
                    "value": "batch[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[f[k] for f in examples]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "tensor_809": {
                "variable": {
                    "value": "batch[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "[f[k] for f in examples]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "full_310": {
                "size": {
                    "value": "labels.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "0.8",
                    "type": "float",
                    "possible_values": []
                }
            },
            "full_161": {
                "size": {
                    "value": "manipulated_input_ids.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "self.manipulate_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "full_314": {
                "size": {
                    "value": "labels.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "src/model/model.py": {
        "torch": {
            "Dropout_54": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_55": {
                "variable": {
                    "value": "self.cls_shuffle",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_100": {
                "variable": {
                    "value": "loss_cls_fct",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "masked_select_106": {
                "variable": {
                    "value": "cls_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cls_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "loss_cls_fct(logits.view(-1), shuffled_word_mask.view(-1).to(torch.float))",
                            "Call"
                        ],
                        [
                            "torch.masked_select(cls_loss, active_indices)",
                            "Call"
                        ],
                        [
                            "torch.mean(cls_loss)",
                            "Call"
                        ],
                        [
                            "loss_cls_fct(logits.view(-1), random_word_mask.view(-1).to(torch.float))",
                            "Call"
                        ],
                        [
                            "torch.masked_select(cls_loss, active_indices)",
                            "Call"
                        ],
                        [
                            "torch.mean(cls_loss)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "active_indices",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "attention_mask.view(-1) == 1",
                            "Compare"
                        ],
                        [
                            "attention_mask.view(-1) == 1",
                            "Compare"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "mean_107": {
                "variable": {
                    "value": "cls_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cls_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "loss_cls_fct(logits.view(-1), shuffled_word_mask.view(-1).to(torch.float))",
                            "Call"
                        ],
                        [
                            "torch.masked_select(cls_loss, active_indices)",
                            "Call"
                        ],
                        [
                            "torch.mean(cls_loss)",
                            "Call"
                        ],
                        [
                            "loss_cls_fct(logits.view(-1), random_word_mask.view(-1).to(torch.float))",
                            "Call"
                        ],
                        [
                            "torch.masked_select(cls_loss, active_indices)",
                            "Call"
                        ],
                        [
                            "torch.mean(cls_loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "Dropout_128": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_129": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_167": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_184": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_185": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_224": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_241": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_242": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "29",
                    "type": "int",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_281": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_298": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_299": {
                "variable": {
                    "value": "self.cls_random",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_339": {
                "variable": {
                    "value": "loss_cls_fct",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "masked_select_345": {
                "variable": {
                    "value": "cls_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cls_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "loss_cls_fct(logits.view(-1), shuffled_word_mask.view(-1).to(torch.float))",
                            "Call"
                        ],
                        [
                            "torch.masked_select(cls_loss, active_indices)",
                            "Call"
                        ],
                        [
                            "torch.mean(cls_loss)",
                            "Call"
                        ],
                        [
                            "loss_cls_fct(logits.view(-1), random_word_mask.view(-1).to(torch.float))",
                            "Call"
                        ],
                        [
                            "torch.masked_select(cls_loss, active_indices)",
                            "Call"
                        ],
                        [
                            "torch.mean(cls_loss)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "active_indices",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "attention_mask.view(-1) == 1",
                            "Compare"
                        ],
                        [
                            "attention_mask.view(-1) == 1",
                            "Compare"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "mean_346": {
                "variable": {
                    "value": "cls_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cls_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "loss_cls_fct(logits.view(-1), shuffled_word_mask.view(-1).to(torch.float))",
                            "Call"
                        ],
                        [
                            "torch.masked_select(cls_loss, active_indices)",
                            "Call"
                        ],
                        [
                            "torch.mean(cls_loss)",
                            "Call"
                        ],
                        [
                            "loss_cls_fct(logits.view(-1), random_word_mask.view(-1).to(torch.float))",
                            "Call"
                        ],
                        [
                            "torch.masked_select(cls_loss, active_indices)",
                            "Call"
                        ],
                        [
                            "torch.mean(cls_loss)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/pretrainer.py": {
        "torch": {}
    },
    "src/run_glue.py": {
        "torch": {
            "SummaryWriter_208": {
                "variable": {
                    "value": "tb_writer",
                    "type": "Variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "training_args.logging_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/run_squad.py": {
        "torch": {
            "DataLoader_82": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, tokenizer, evaluate=False, output_examples=False)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "RandomSampler(train_dataset) if args.local_rank == -1 else DistributedSampler(train_dataset)",
                            "IfExp"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SequentialSampler_287": {
                "variable": {
                    "value": "eval_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "DataLoader_288": {
                "variable": {
                    "value": "eval_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "sampler": {
                    "value": "eval_sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_66": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SummaryWriter_78": {
                "variable": {
                    "value": "tb_writer",
                    "type": "Variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "args.logging_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_122": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "AutoModelForQuestionAnswering.from_pretrained(args.model_name_or_path, from_tf=bool('.ckpt' in args.model_name_or_path), config=config, cache_dir=args.cache_dir if args.cache_dir else None)",
                            "Call"
                        ],
                        [
                            "AutoModelForQuestionAnswering.from_pretrained(output_dir)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedDataParallel_126": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "AutoModelForQuestionAnswering.from_pretrained(args.model_name_or_path, from_tf=bool('.ckpt' in args.model_name_or_path), config=config, cache_dir=args.cache_dir if args.cache_dir else None)",
                            "Call"
                        ],
                        [
                            "AutoModelForQuestionAnswering.from_pretrained(output_dir)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.local_rank]",
                    "type": "List",
                    "possible_values": []
                },
                "output_device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                },
                "find_unused_parameters": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataParallel_292": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "AutoModelForQuestionAnswering.from_pretrained(args.model_name_or_path, from_tf=bool('.ckpt' in args.model_name_or_path), config=config, cache_dir=args.cache_dir if args.cache_dir else None)",
                            "Call"
                        ],
                        [
                            "AutoModelForQuestionAnswering.from_pretrained(output_dir)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_434": {
                "variable": {
                    "value": "features_and_dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "cached_features_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(input_dir, 'cached_{}_{}_{}'.format('dev' if evaluate else 'train', args.tokenizer_name, str(args.max_seq_length)))",
                            "Call"
                        ]
                    ]
                }
            },
            "device_720": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and (not args.no_cuda) else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_724": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "index": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_68": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RandomSampler_81": {
                "data_source": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, tokenizer, evaluate=False, output_examples=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_81": {
                "dataset": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, tokenizer, evaluate=False, output_examples=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "set_device_723": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_818": {
                "obj": {
                    "value": "args",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "parser.parse_args()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(args.output_dir, 'training_args.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_109": {
                "f": {
                    "value": "os.path.join(args.model_name_or_path, 'optimizer.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_110": {
                "f": {
                    "value": "os.path.join(args.model_name_or_path, 'scheduler.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_308": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_474": {
                "obj": {
                    "value": "{'features': features, 'dataset': dataset, 'examples': examples}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "cached_features_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(input_dir, 'cached_{}_{}_{}'.format('dev' if evaluate else 'train', args.tokenizer_name, str(args.max_seq_length)))",
                            "Call"
                        ]
                    ]
                }
            },
            "device_count_721": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__214": {
                "parameters": {
                    "value": "amp.master_params(optimizer)",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__216": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_246": {
                "obj": {
                    "value": "args",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "parser.parse_args()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(output_dir, 'training_args.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_247": {
                "obj": {
                    "value": "optimizer.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(output_dir, 'optimizer.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_248": {
                "obj": {
                    "value": "scheduler.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(output_dir, 'scheduler.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_258": {
                "obj": {
                    "value": "args",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "parser.parse_args()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(output_dir, 'training_args.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_259": {
                "obj": {
                    "value": "optimizer.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(output_dir, 'optimizer.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_260": {
                "obj": {
                    "value": "scheduler.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(output_dir, 'scheduler.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_720": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_193": {
                "*size": {
                    "value": "batch[0].shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_326": {
                "*size": {
                    "value": "batch[0].shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/utils/preprocess_roberta.py": {
        "torch": {
            "from_numpy_350": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "example['input_ids'].copy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "full_351": {
                "variable": {
                    "value": "probability_matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "labels.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "mask_prob",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.15",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "bernoulli_360": {
                "variable": {
                    "value": "masked_indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probability_matrix",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.full(labels.shape, mask_prob)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_357": {
                "data": {
                    "value": "special_tokens_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[tokenizer.get_special_tokens_mask(val, already_has_special_tokens=True) for val in labels.tolist()]",
                            "ListComp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}