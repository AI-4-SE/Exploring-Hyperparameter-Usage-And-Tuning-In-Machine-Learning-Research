{
    "GenerateData/generate_data.py": {
        "sklearn": {}
    },
    "demo.py": {
        "sklearn": {}
    },
    "eval_testset.py": {
        "sklearn": {}
    },
    "external/tf_approxmatch.py": {
        "sklearn": {}
    },
    "external/tf_nndistance.py": {
        "sklearn": {}
    },
    "p2m/inits.py": {
        "tensorflow": {
            "zeros_36": {
                "variable": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_42": {
                "variable": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_24": {
                "initial_value": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform(shape, minval=-scale, maxval=scale, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.random_uniform(shape, minval=-init_range, maxval=init_range, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.zeros(shape, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.ones(shape, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Variable_31": {
                "initial_value": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform(shape, minval=-scale, maxval=scale, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.random_uniform(shape, minval=-init_range, maxval=init_range, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.zeros(shape, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.ones(shape, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Variable_37": {
                "initial_value": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform(shape, minval=-scale, maxval=scale, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.random_uniform(shape, minval=-init_range, maxval=init_range, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.zeros(shape, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.ones(shape, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Variable_43": {
                "initial_value": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform(shape, minval=-scale, maxval=scale, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.random_uniform(shape, minval=-init_range, maxval=init_range, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.zeros(shape, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.ones(shape, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "p2m/layers.py": {
        "tensorflow": {}
    },
    "p2m/losses.py": {
        "tensorflow": {
            "concat_21": {
                "variable": {
                    "value": "vertex",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[pred, tf.zeros([1, 3])]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_23": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "placeholders['lape_idx'][block_id - 1][:, -1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tile_25": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reshape(tf.reciprocal(weights), [-1, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_26": {
                "variable": {
                    "value": "laplace",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.gather(vertex, indices)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "subtract_27": {
                "variable": {
                    "value": "laplace",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred",
                            "Method Argument"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.multiply(laplace, weights)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cond_37": {
                "variable": {
                    "value": "move_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.equal(block_id, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : 0.0",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : move_loss",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "gather_48": {
                "variable": {
                    "value": "nod1",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred",
                            "Method Argument"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ]
                    ]
                },
                "indices": {
                    "value": "placeholders['edges'][block_id - 1][:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "gather_49": {
                "variable": {
                    "value": "nod2",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred",
                            "Method Argument"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ]
                    ]
                },
                "indices": {
                    "value": "placeholders['edges'][block_id - 1][:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "subtract_50": {
                "variable": {
                    "value": "edge",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "nod1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(pred, placeholders['edges'][block_id - 1][:, 0])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "nod2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(pred, placeholders['edges'][block_id - 1][:, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_53": {
                "variable": {
                    "value": "edge_length",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(edge)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_61": {
                "variable": {
                    "value": "normal",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "gt_nm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "placeholders['labels'][:, 3:]",
                            "Subscript"
                        ]
                    ]
                },
                "indices": {
                    "value": "tf.squeeze(idx2, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_62": {
                "variable": {
                    "value": "normal",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "normal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(gt_nm, tf.squeeze(idx2, 0))",
                            "Call"
                        ],
                        [
                            "tf.gather(normal, placeholders['edges'][block_id - 1][:, 0])",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "placeholders['edges'][block_id - 1][:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "abs_63": {
                "variable": {
                    "value": "cosine",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(tf.multiply(unit(normal), unit(edge)), 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "l2_normalize_41": {
                "x": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_25": {
                "tensor": {
                    "value": "tf.reciprocal(weights)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_26": {
                "params": {
                    "value": "vertex",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([pred, tf.zeros([1, 3])], 0)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "placeholders['lape_idx'][block_id - 1][:, :8]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "multiply_27": {
                "x": {
                    "value": "laplace",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.gather(vertex, indices), 1)",
                            "Call"
                        ],
                        [
                            "tf.subtract(pred, tf.multiply(laplace, weights))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(placeholders['lape_idx'][block_id - 1][:, -1], tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.reshape(tf.reciprocal(weights), [-1, 1]), [1, 3])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_34": {
                "input_tensor": {
                    "value": "tf.reduce_sum(tf.square(tf.subtract(lap1, lap2)), 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_36": {
                "input_tensor": {
                    "value": "tf.reduce_sum(tf.square(tf.subtract(pred1, pred2)), 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_37": {
                "x": {
                    "value": "block_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "block_id",
                            "Method Argument"
                        ],
                        [
                            "block_id",
                            "Method Argument"
                        ],
                        [
                            "block_id",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "square_53": {
                "x": {
                    "value": "edge",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.subtract(nod1, nod2)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_54": {
                "input_tensor": {
                    "value": "edge_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.square(edge), 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_61": {
                "input": {
                    "value": "idx2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn_distance(gt_pt, pred)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_63": {
                "input_tensor": {
                    "value": "tf.multiply(unit(normal), unit(edge))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_65": {
                "input_tensor": {
                    "value": "cosine",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.abs(tf.reduce_sum(tf.multiply(unit(normal), unit(edge)), 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_21": {
                "shape": {
                    "value": "[1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reciprocal_25": {
                "x": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(placeholders['lape_idx'][block_id - 1][:, -1], tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.reshape(tf.reciprocal(weights), [-1, 1]), [1, 3])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_34": {
                "input_tensor": {
                    "value": "tf.square(tf.subtract(lap1, lap2))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_36": {
                "input_tensor": {
                    "value": "tf.square(tf.subtract(pred1, pred2))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_58": {
                "input_tensor": {
                    "value": "dist2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn_distance(gt_pt, pred)",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_63": {
                "x": {
                    "value": "unit(normal)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "unit(edge)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_34": {
                "x": {
                    "value": "tf.subtract(lap1, lap2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_36": {
                "x": {
                    "value": "tf.subtract(pred1, pred2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "subtract_34": {
                "x": {
                    "value": "lap1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "laplace_coord(pred1, placeholders, block_id)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "lap2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "laplace_coord(pred2, placeholders, block_id)",
                            "Call"
                        ]
                    ]
                }
            },
            "subtract_36": {
                "x": {
                    "value": "pred1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred1",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "pred2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred2",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "p2m/models.py": {
        "tensorflow": {}
    }
}