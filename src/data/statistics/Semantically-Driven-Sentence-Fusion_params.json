{
    "texar_repo/examples/hierarchical_dialog/sw_loader.py": {
        "sklearn": {
            "TfidfVectorizer_144": {
                "variable": {
                    "value": "vectorizer",
                    "type": "variable",
                    "possible_values": []
                },
                "tokenizer": {
                    "value": "WordPunctTokenizer().tokenize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "vocabulary": {
                    "value": "vocab",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                }
            },
            "normalize_172": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "result[len(dts_test):]",
                            "Subscript"
                        ],
                        [
                            "normalize(y)",
                            "Call"
                        ]
                    ]
                }
            },
            "normalize_173": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "result[:len(dts_test)]",
                            "Subscript"
                        ],
                        [
                            "normalize(x)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "main_aug_data.py": {
        "tensorflow": {
            "FileWriter_185": {
                "variable": {
                    "value": "smry_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "model_dir",
                    "type": "variable",
                    "possible_values": []
                },
                "graph": {
                    "value": "sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_180": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_181": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_182": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tables_initializer_183": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "latest_checkpoint_190": {
                "checkpoint_dir": {
                    "value": "restore_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_dir",
                            "variable"
                        ]
                    ]
                }
            },
            "latest_checkpoint_192": {
                "checkpoint_dir": {
                    "value": "restore_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_dir",
                            "variable"
                        ]
                    ]
                }
            }
        }
    },
    "main_with_auxiliary_tasks.py": {
        "tensorflow": {
            "FileWriter_183": {
                "variable": {
                    "value": "smry_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "model_dir",
                    "type": "variable",
                    "possible_values": []
                },
                "graph": {
                    "value": "sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_178": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_179": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_180": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tables_initializer_181": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "latest_checkpoint_188": {
                "checkpoint_dir": {
                    "value": "restore_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_dir",
                            "variable"
                        ]
                    ]
                }
            },
            "latest_checkpoint_190": {
                "checkpoint_dir": {
                    "value": "restore_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_dir",
                            "variable"
                        ]
                    ]
                }
            }
        }
    },
    "modeling/model_aug_data.py": {
        "tensorflow": {
            "placeholder_62": {
                "variable": {
                    "value": "src_input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, None)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_63": {
                "variable": {
                    "value": "src_segment_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, None)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_64": {
                "variable": {
                    "value": "tgt_input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, None)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_65": {
                "variable": {
                    "value": "tgt_segment_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, None)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reduce_sum_70": {
                "variable": {
                    "value": "src_input_length",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "1 - tf.to_int32(tf.equal(src_input_ids, 0))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_72": {
                "variable": {
                    "value": "tgt_input_length",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "1 - tf.to_int32(tf.equal(tgt_input_ids, 0))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "placeholder_75": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, None)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_76": {
                "variable": {
                    "value": "type_label",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "placeholder_77": {
                "variable": {
                    "value": "conn_label",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "to_float_78": {
                "variable": {
                    "value": "is_target",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.not_equal(labels, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_80": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "placeholder_82": {
                "variable": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "lr",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_129": {
                "variable": {
                    "value": "tgt_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.zeros(shape=[1, embedder.dim]), embedder.embedding[1:, :]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_145": {
                "variable": {
                    "value": "type_probabilities",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "type_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.keras.layers.Dense(13)(dense)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_softmax_146": {
                "variable": {
                    "value": "type_log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "type_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.keras.layers.Dense(13)(dense)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "one_hot_147": {
                "variable": {
                    "value": "type_one_hot_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "type_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int64, shape=None)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "13",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_149": {
                "variable": {
                    "value": "type_cls_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "type_per_example_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-tf.reduce_sum(type_one_hot_labels * type_log_probs, axis=-1)",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "softmax_152": {
                "variable": {
                    "value": "conn_probabilities",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "conn_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.keras.layers.Dense(71)(dense)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_softmax_153": {
                "variable": {
                    "value": "conn_log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "conn_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.keras.layers.Dense(71)(dense)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "one_hot_154": {
                "variable": {
                    "value": "conn_one_hot_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "conn_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int64, shape=None)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "71",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_156": {
                "variable": {
                    "value": "conn_cls_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "conn_per_example_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-tf.reduce_sum(conn_one_hot_labels * conn_log_probs, axis=-1)",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "trainable_variables_169": {
                "variable": {
                    "value": "tvars",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "merge_all_196": {
                "variable": {
                    "value": "summary_merged",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_198": {
                "variable": {
                    "value": "saver_load",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "[v for v in tf.all_variables() if 'OptimizeLoss' not in v.name]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Saver_199": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "fill_202": {
                "variable": {
                    "value": "start_tokens",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "[tx.utils.get_batch_size(src_input_ids)]",
                    "type": "List",
                    "possible_values": []
                },
                "value": {
                    "value": "bos_token_id",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "scalar_191": {
                "name": {
                    "value": "lr",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float64, shape=(), name='lr')",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_192": {
                "name": {
                    "value": "mle_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "mle_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "transformer_utils.smoothing_cross_entropy(outputs.logits, labels, vocab_size, loss_label_confidence)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(mle_loss * is_target) / tf.reduce_sum(is_target)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "scalar_193": {
                "name": {
                    "value": "type_cls_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "type_cls_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(type_per_example_loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_194": {
                "name": {
                    "value": "conn_cls_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "conn_cls_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(conn_per_example_loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_195": {
                "name": {
                    "value": "total_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "total_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mle_loss + type_const_cls * type_cls_loss + conn_const_cls * conn_cls_loss",
                            "BinOp"
                        ]
                    ]
                }
            },
            "shape_68": {
                "input": {
                    "value": "src_input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int64, shape=(None, None))",
                            "Call"
                        ]
                    ]
                }
            },
            "not_equal_78": {
                "x": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int64, shape=(None, None))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_90": {
                "name_or_scope": {
                    "value": "bert",
                    "type": "str",
                    "possible_values": []
                }
            },
            "squeeze_113": {
                "variable": {
                    "value": "bert_sent_hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "encoder_output[:, 0:1, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dense_114": {
                "variable": {
                    "value": "bert_sent_output",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "bert_sent_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(encoder_output[:, 0:1, :], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "config_downstream.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.tanh",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_118": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "bert_sent_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(bert_sent_hidden, config_downstream.hidden_dim, activation=tf.tanh)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "training": {
                    "value": "tx.global_mode_train()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_148": {
                "input_tensor": {
                    "value": "type_one_hot_labels * type_log_probs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_155": {
                "input_tensor": {
                    "value": "conn_one_hot_labels * conn_log_probs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_161": {
                "input_tensor": {
                    "value": "is_target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(tf.not_equal(labels, 0))",
                            "Call"
                        ]
                    ]
                }
            },
            "to_int32_70": {
                "x": {
                    "value": "tf.equal(src_input_ids, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "to_int32_72": {
                "x": {
                    "value": "tf.equal(tgt_input_ids, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_110": {
                "name_or_scope": {
                    "value": "pooler",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_130": {
                "shape": {
                    "value": "[1, embedder.dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "equal_70": {
                "x": {
                    "value": "src_input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int64, shape=(None, None))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "equal_72": {
                "x": {
                    "value": "tgt_input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int64, shape=(None, None))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dense_119": {
                "units": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_120": {
                "units": {
                    "value": "13",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dense_121": {
                "units": {
                    "value": "71",
                    "type": "int",
                    "possible_values": []
                }
            },
            "all_variables_198": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "modeling/model_with_auxiliary_tasks.py": {
        "tensorflow": {
            "placeholder_62": {
                "variable": {
                    "value": "src_input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, None)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_63": {
                "variable": {
                    "value": "src_segment_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, None)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_64": {
                "variable": {
                    "value": "tgt_input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, None)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_65": {
                "variable": {
                    "value": "tgt_segment_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, None)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reduce_sum_70": {
                "variable": {
                    "value": "src_input_length",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "1 - tf.to_int32(tf.equal(src_input_ids, 0))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_72": {
                "variable": {
                    "value": "tgt_input_length",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "1 - tf.to_int32(tf.equal(tgt_input_ids, 0))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "placeholder_75": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, None)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_76": {
                "variable": {
                    "value": "type_label",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "placeholder_77": {
                "variable": {
                    "value": "conn_label",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "to_float_78": {
                "variable": {
                    "value": "is_target",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.not_equal(labels, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_80": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "placeholder_82": {
                "variable": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "lr",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_129": {
                "variable": {
                    "value": "tgt_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.zeros(shape=[1, embedder.dim]), embedder.embedding[1:, :]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_145": {
                "variable": {
                    "value": "type_probabilities",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "type_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.keras.layers.Dense(13)(dense)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_softmax_146": {
                "variable": {
                    "value": "type_log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "type_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.keras.layers.Dense(13)(dense)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "one_hot_147": {
                "variable": {
                    "value": "type_one_hot_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "type_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int64, shape=None)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "13",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_149": {
                "variable": {
                    "value": "type_cls_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "type_per_example_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-tf.reduce_sum(type_one_hot_labels * type_log_probs, axis=-1)",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "softmax_152": {
                "variable": {
                    "value": "conn_probabilities",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "conn_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.keras.layers.Dense(71)(dense)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_softmax_153": {
                "variable": {
                    "value": "conn_log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "conn_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.keras.layers.Dense(71)(dense)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "one_hot_154": {
                "variable": {
                    "value": "conn_one_hot_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "conn_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int64, shape=None)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "71",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_156": {
                "variable": {
                    "value": "conn_cls_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "conn_per_example_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-tf.reduce_sum(conn_one_hot_labels * conn_log_probs, axis=-1)",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "trainable_variables_169": {
                "variable": {
                    "value": "tvars",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "merge_all_196": {
                "variable": {
                    "value": "summary_merged",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_198": {
                "variable": {
                    "value": "saver_load",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "[v for v in tf.all_variables() if 'OptimizeLoss' not in v.name]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Saver_199": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "fill_202": {
                "variable": {
                    "value": "start_tokens",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "[tx.utils.get_batch_size(src_input_ids)]",
                    "type": "List",
                    "possible_values": []
                },
                "value": {
                    "value": "bos_token_id",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "scalar_191": {
                "name": {
                    "value": "lr",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float64, shape=(), name='lr')",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_192": {
                "name": {
                    "value": "mle_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "mle_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "transformer_utils.smoothing_cross_entropy(outputs.logits, labels, vocab_size, loss_label_confidence)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(mle_loss * is_target) / tf.reduce_sum(is_target)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "scalar_193": {
                "name": {
                    "value": "type_cls_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "type_cls_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(type_per_example_loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_194": {
                "name": {
                    "value": "conn_cls_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "conn_cls_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(conn_per_example_loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_195": {
                "name": {
                    "value": "total_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "total_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mle_loss + type_const_cls * type_cls_loss + conn_const_cls * conn_cls_loss",
                            "BinOp"
                        ]
                    ]
                }
            },
            "shape_68": {
                "input": {
                    "value": "src_input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int64, shape=(None, None))",
                            "Call"
                        ]
                    ]
                }
            },
            "not_equal_78": {
                "x": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int64, shape=(None, None))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_90": {
                "name_or_scope": {
                    "value": "bert",
                    "type": "str",
                    "possible_values": []
                }
            },
            "squeeze_113": {
                "variable": {
                    "value": "bert_sent_hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "encoder_output[:, 0:1, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dense_114": {
                "variable": {
                    "value": "bert_sent_output",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "bert_sent_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(encoder_output[:, 0:1, :], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "config_downstream.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.tanh",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_118": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "bert_sent_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(bert_sent_hidden, config_downstream.hidden_dim, activation=tf.tanh)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "training": {
                    "value": "tx.global_mode_train()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_148": {
                "input_tensor": {
                    "value": "type_one_hot_labels * type_log_probs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_155": {
                "input_tensor": {
                    "value": "conn_one_hot_labels * conn_log_probs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_161": {
                "input_tensor": {
                    "value": "is_target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(tf.not_equal(labels, 0))",
                            "Call"
                        ]
                    ]
                }
            },
            "to_int32_70": {
                "x": {
                    "value": "tf.equal(src_input_ids, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "to_int32_72": {
                "x": {
                    "value": "tf.equal(tgt_input_ids, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_110": {
                "name_or_scope": {
                    "value": "pooler",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_130": {
                "shape": {
                    "value": "[1, embedder.dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "equal_70": {
                "x": {
                    "value": "src_input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int64, shape=(None, None))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "equal_72": {
                "x": {
                    "value": "tgt_input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int64, shape=(None, None))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dense_119": {
                "units": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_120": {
                "units": {
                    "value": "13",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dense_121": {
                "units": {
                    "value": "71",
                    "type": "int",
                    "possible_values": []
                }
            },
            "all_variables_198": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "preprocesses/preprocess_aug_data.py": {
        "tensorflow": {
            "TFRecordWriter_197": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "path": {
                    "value": "output_file",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Example_219": {
                "variable": {
                    "value": "tf_example",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.train.Features(feature=features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "parse_single_example_307": {
                "variable": {
                    "value": "example",
                    "type": "variable",
                    "possible_values": []
                },
                "serialized": {
                    "value": "record",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "name_to_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'src_input_ids': tf.FixedLenFeature([max_seq_length_src], tf.int64), 'src_input_mask': tf.FixedLenFeature([max_seq_length_src], tf.int64), 'src_segment_ids': tf.FixedLenFeature([max_seq_length_src], tf.int64), 'tgt_input_ids': tf.FixedLenFeature([max_seq_length_tgt], tf.int64), 'tgt_input_mask': tf.FixedLenFeature([max_seq_length_tgt], tf.int64), 'tgt_labels': tf.FixedLenFeature([max_seq_length_tgt], tf.int64), 'type_label': tf.FixedLenFeature([], tf.int64), 'conn_label': tf.FixedLenFeature([], tf.int64)}",
                            "Dict"
                        ]
                    ]
                }
            },
            "TFRecordDataset_327": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "filenames": {
                    "value": "input_file",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "FixedLenFeature_295": {
                "shape": {
                    "value": "[max_seq_length_src]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_296": {
                "shape": {
                    "value": "[max_seq_length_src]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_297": {
                "shape": {
                    "value": "[max_seq_length_src]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_298": {
                "shape": {
                    "value": "[max_seq_length_tgt]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_299": {
                "shape": {
                    "value": "[max_seq_length_tgt]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_300": {
                "shape": {
                    "value": "[max_seq_length_tgt]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_301": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_302": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Feature_206": {
                "int64_list": {
                    "value": "tf.train.Int64List(value=list(values))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "to_int32_316": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "example[name]",
                            "Subscript"
                        ],
                        [
                            "tf.to_int32(t)",
                            "Call"
                        ]
                    ]
                }
            },
            "Features_219": {
                "feature": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "collections.OrderedDict()",
                            "Call"
                        ]
                    ]
                }
            },
            "info_332": {
                "msg": {
                    "value": "'distributed mode is enabled.size:{} rank:{}'.format(hvd.size(), hvd.rank())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_345": {
                "msg": {
                    "value": "distributed mode is not enabled.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "map_and_batch_356": {
                "map_func": {
                    "value": "lambda record: _decode_record(record, name_to_features)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params['batch_size']",
                            "Subscript"
                        ]
                    ]
                },
                "drop_remainder": {
                    "value": "drop_remainder",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Int64List_206": {
                "value": {
                    "value": "list(values)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "map_and_batch_340": {
                "map_func": {
                    "value": "lambda record: _decode_record(record, name_to_features)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size // hvd.size()",
                    "type": "BinOp",
                    "possible_values": []
                },
                "drop_remainder": {
                    "value": "drop_remainder",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "map_and_batch_349": {
                "map_func": {
                    "value": "lambda record: _decode_record(record, name_to_features)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params['batch_size']",
                            "Subscript"
                        ]
                    ]
                },
                "drop_remainder": {
                    "value": "drop_remainder",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "preprocesses/preprocess_with_auxiliary_tasks.py": {
        "tensorflow": {
            "TFRecordWriter_200": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "path": {
                    "value": "output_file",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Example_222": {
                "variable": {
                    "value": "tf_example",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.train.Features(feature=features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "parse_single_example_310": {
                "variable": {
                    "value": "example",
                    "type": "variable",
                    "possible_values": []
                },
                "serialized": {
                    "value": "record",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "name_to_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'src_input_ids': tf.FixedLenFeature([max_seq_length_src], tf.int64), 'src_input_mask': tf.FixedLenFeature([max_seq_length_src], tf.int64), 'src_segment_ids': tf.FixedLenFeature([max_seq_length_src], tf.int64), 'tgt_input_ids': tf.FixedLenFeature([max_seq_length_tgt], tf.int64), 'tgt_input_mask': tf.FixedLenFeature([max_seq_length_tgt], tf.int64), 'tgt_labels': tf.FixedLenFeature([max_seq_length_tgt], tf.int64), 'type_label': tf.FixedLenFeature([], tf.int64), 'conn_label': tf.FixedLenFeature([], tf.int64)}",
                            "Dict"
                        ]
                    ]
                }
            },
            "TFRecordDataset_330": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "filenames": {
                    "value": "input_file",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "FixedLenFeature_298": {
                "shape": {
                    "value": "[max_seq_length_src]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_299": {
                "shape": {
                    "value": "[max_seq_length_src]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_300": {
                "shape": {
                    "value": "[max_seq_length_src]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_301": {
                "shape": {
                    "value": "[max_seq_length_tgt]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_302": {
                "shape": {
                    "value": "[max_seq_length_tgt]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_303": {
                "shape": {
                    "value": "[max_seq_length_tgt]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_304": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_305": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Feature_209": {
                "int64_list": {
                    "value": "tf.train.Int64List(value=list(values))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "to_int32_319": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "example[name]",
                            "Subscript"
                        ],
                        [
                            "tf.to_int32(t)",
                            "Call"
                        ]
                    ]
                }
            },
            "Features_222": {
                "feature": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "collections.OrderedDict()",
                            "Call"
                        ]
                    ]
                }
            },
            "info_335": {
                "msg": {
                    "value": "'distributed mode is enabled.size:{} rank:{}'.format(hvd.size(), hvd.rank())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_348": {
                "msg": {
                    "value": "distributed mode is not enabled.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "map_and_batch_359": {
                "map_func": {
                    "value": "lambda record: _decode_record(record, name_to_features)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params['batch_size']",
                            "Subscript"
                        ]
                    ]
                },
                "drop_remainder": {
                    "value": "drop_remainder",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Int64List_209": {
                "value": {
                    "value": "list(values)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "map_and_batch_343": {
                "map_func": {
                    "value": "lambda record: _decode_record(record, name_to_features)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size // hvd.size()",
                    "type": "BinOp",
                    "possible_values": []
                },
                "drop_remainder": {
                    "value": "drop_remainder",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "map_and_batch_352": {
                "map_func": {
                    "value": "lambda record: _decode_record(record, name_to_features)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params['batch_size']",
                            "Subscript"
                        ]
                    ]
                },
                "drop_remainder": {
                    "value": "drop_remainder",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "sari/sari_utils.py": {
        "tensorflow": {
            "py_func_205": {
                "variable": {
                    "value": "(sari, keep, add, deletion)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "func": {
                    "value": "get_sari_numpy",
                    "type": "variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[source_ids, prediction_ids, target_ids]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "[tf.float64, tf.float64, tf.float64, tf.float64]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_228": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "features['inputs']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "[-1, -2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_int32_229": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(predictions, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_230": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_int32(tf.argmax(predictions, axis=-1))",
                            "Call"
                        ],
                        [
                            "tf.squeeze(outputs, axis=[-1, -2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[-1, -2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_233": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(labels, axis=[-1, -2])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(labels, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[-1, -2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_234": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(labels, axis=[-1, -2])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(labels, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_229": {
                "input": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "constant_237": {
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "test/test_aug_data.py": {
        "tensorflow": {
            "Session_129": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_130": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_131": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tables_initializer_132": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "latest_checkpoint_135": {
                "checkpoint_dir": {
                    "value": "model_dir",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "latest_checkpoint_138": {
                "checkpoint_dir": {
                    "value": "model_dir",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "test/test_with_auxiliary_tasks.py": {
        "tensorflow": {
            "Session_129": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_130": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_131": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tables_initializer_132": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "latest_checkpoint_135": {
                "checkpoint_dir": {
                    "value": "model_dir",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "latest_checkpoint_138": {
                "checkpoint_dir": {
                    "value": "model_dir",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "texar_repo/bin/average_checkpoints.py": {
        "tensorflow": {
            "list_variables_52": {
                "variable": {
                    "value": "var_list",
                    "type": "variable",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "checkpoints_path[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "get_variable_72": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant(latest_step, dtype=tf.int64)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Saver_76": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "tf.global_variables()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_verbosity_30": {
                "level": {
                    "value": "tf.logging.INFO",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_49": {
                "msg": {
                    "value": "'Averaging %d checkpoints...' % num_checkpoints",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_50": {
                "msg": {
                    "value": "Listing variables...",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_checkpoint_60": {
                "variable": {
                    "value": "reader",
                    "type": "variable",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "checkpoints_path",
                            "variable"
                        ]
                    ]
                }
            },
            "get_checkpoint_state_44": {
                "checkpoint_dir": {
                    "value": "args.model_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_59": {
                "msg": {
                    "value": "'Loading checkpoint %s' % checkpoint_path",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_67": {
                "dtype": {
                    "value": "v.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "v.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "assign_68": {
                "ref": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "global_variables_76": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_78": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "info_82": {
                "msg": {
                    "value": "'Saving averaged checkpoint to %s-%d' % (out_base_file, latest_step)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_variable_66": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "avg_values",
                            "variable"
                        ]
                    ]
                },
                "shape": {
                    "value": "value.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_74": {
                "value": {
                    "value": "latest_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(checkpoints_path[-1].split('-')[-1])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_79": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "texar_repo/bin/train.py": {
        "tensorflow": {
            "DEFINE_string_30": {
                "name": {
                    "value": "config_paths",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Paths to configuration files. This can be a path to a directory in which all files are loaded, or paths to multiple files separated by commas. Setting a key in these files is equivalent to setting the FLAG value with the same name. If a key is set in both config files and FLAG, the value in config files is used.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_38": {
                "name": {
                    "value": "model",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Name of the model class.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_40": {
                "name": {
                    "value": "model_hparams",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "{}",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "YAML configuration string for the model hyper-parameters.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_44": {
                "name": {
                    "value": "data_hparams_train",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "{}",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "YAML configuration string for the training data hyper-parameters.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_47": {
                "name": {
                    "value": "data_hparams_eval",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "{}",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "YAML configuration string for the evaluation data hyper-parameters.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_51": {
                "name": {
                    "value": "max_train_steps",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "Maximum number of training steps to run. If None, train forever or until the train data generates the OutOfRange exception. If OutOfRange occurs in the middle, training stops before max_train_steps steps.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_57": {
                "name": {
                    "value": "eval_steps",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "Maximum number of evaluation steps to run. If None, evaluate until the eval data raises an OutOfRange exception.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_63": {
                "name": {
                    "value": "model_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "The directory where model parameters, graph, summeries, etc are saved. If None, a local temporary directory is created.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_67": {
                "name": {
                    "value": "tf_random_seed",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "Random seed for TensorFlow initializers. Setting this value allows consistency between reruns.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_70": {
                "name": {
                    "value": "save_summary_steps",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Save summaries every this many steps.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_72": {
                "name": {
                    "value": "save_checkpoints_steps",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "Save checkpoints every this many steps. Can not be specified with save_checkpoints_secs.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_75": {
                "name": {
                    "value": "save_checkpoints_secs",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "Save checkpoints every this many seconds. Can not be specified with save_checkpoints_steps. Defaults to 600 seconds if both save_checkpoints_steps and save_checkpoints_secs are not set. If both are set to -1, then checkpoints are disabled.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_82": {
                "name": {
                    "value": "keep_checkpoint_max",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Maximum number of recent checkpoint files to keep. As new files are created, older files are deleted. If None or 0, all checkpoint files are kept.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_86": {
                "name": {
                    "value": "keep_checkpoint_every_n_hours",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "10000",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of hours between each checkpoint to be saved. The default value of 10,000 hours effectively disables the feature.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_90": {
                "name": {
                    "value": "log_step_count_steps",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "The frequency, in number of global steps, that the global step/sec and the loss will be logged during training.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_95": {
                "name": {
                    "value": "per_process_gpu_memory_fraction",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "Fraction of the available GPU memory to allocate for each process.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GPUOptions_147": {
                "variable": {
                    "value": "gpu_options",
                    "type": "variable",
                    "possible_values": []
                },
                "per_process_gpu_memory_fraction": {
                    "value": "config['per_process_gpu_memory_fraction']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "utils.load_config(FLAGS.config_paths)",
                            "Call"
                        ],
                        [
                            "_process_config()",
                            "Call"
                        ]
                    ]
                },
                "allow_growth": {
                    "value": "config['gpu_allow_growth']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "utils.load_config(FLAGS.config_paths)",
                            "Call"
                        ],
                        [
                            "_process_config()",
                            "Call"
                        ]
                    ]
                }
            },
            "ConfigProto_151": {
                "variable": {
                    "value": "sess_config",
                    "type": "variable",
                    "possible_values": []
                },
                "gpu_options": {
                    "value": "gpu_options",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.GPUOptions(per_process_gpu_memory_fraction=config['per_process_gpu_memory_fraction'], allow_growth=config['gpu_allow_growth'])",
                            "Call"
                        ]
                    ]
                },
                "log_device_placement": {
                    "value": "config['log_device_placement']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "utils.load_config(FLAGS.config_paths)",
                            "Call"
                        ],
                        [
                            "_process_config()",
                            "Call"
                        ]
                    ]
                }
            },
            "RunConfig_155": {
                "variable": {
                    "value": "run_config",
                    "type": "variable",
                    "possible_values": []
                },
                "model_dir": {
                    "value": "config['model_dir']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "utils.load_config(FLAGS.config_paths)",
                            "Call"
                        ],
                        [
                            "_process_config()",
                            "Call"
                        ]
                    ]
                },
                "tf_random_seed": {
                    "value": "config['tf_random_seed']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "utils.load_config(FLAGS.config_paths)",
                            "Call"
                        ],
                        [
                            "_process_config()",
                            "Call"
                        ]
                    ]
                },
                "save_summary_steps": {
                    "value": "config['save_summary_steps']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "utils.load_config(FLAGS.config_paths)",
                            "Call"
                        ],
                        [
                            "_process_config()",
                            "Call"
                        ]
                    ]
                },
                "save_checkpoints_steps": {
                    "value": "config['save_checkpoints_steps']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "utils.load_config(FLAGS.config_paths)",
                            "Call"
                        ],
                        [
                            "_process_config()",
                            "Call"
                        ]
                    ]
                },
                "save_checkpoints_secs": {
                    "value": "config['save_checkpoints_secs']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "utils.load_config(FLAGS.config_paths)",
                            "Call"
                        ],
                        [
                            "_process_config()",
                            "Call"
                        ]
                    ]
                },
                "keep_checkpoint_max": {
                    "value": "config['keep_checkpoint_max']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "utils.load_config(FLAGS.config_paths)",
                            "Call"
                        ],
                        [
                            "_process_config()",
                            "Call"
                        ]
                    ]
                },
                "keep_checkpoint_every_n_hours": {
                    "value": "config['keep_checkpoint_every_n_hours']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "utils.load_config(FLAGS.config_paths)",
                            "Call"
                        ],
                        [
                            "_process_config()",
                            "Call"
                        ]
                    ]
                },
                "log_step_count_steps": {
                    "value": "config['log_step_count_steps']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "utils.load_config(FLAGS.config_paths)",
                            "Call"
                        ],
                        [
                            "_process_config()",
                            "Call"
                        ]
                    ]
                },
                "session_config": {
                    "value": "sess_config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(gpu_options=gpu_options, log_device_placement=config['log_device_placement'])",
                            "Call"
                        ]
                    ]
                }
            },
            "info_142": {
                "msg": {
                    "value": "Final Config:\\n%s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "yaml.dump(final_config)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_verbosity_198": {
                "level": {
                    "value": "tf.logging.INFO",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "run_199": {
                "main": {
                    "value": "main",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "texar_repo/bin/utils/make_vocab.py": {
        "tensorflow": {
            "run_90": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "texar_repo/examples/bert/bert_classifier_main.py": {
        "tensorflow": {
            "reduce_sum_129": {
                "variable": {
                    "value": "input_length",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "1 - tf.to_int32(tf.equal(input_ids, 0))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dense_164": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "encoder(input_embeds, input_length)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(bert_sent_output, rate=0.1, training=tx.global_mode_train())",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(processor.get_labels())",
                            "Call"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "tf.truncated_normal_initializer(stddev=0.02)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "argmax_167": {
                "variable": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(output, num_classes, kernel_initializer=tf.truncated_normal_initializer(stddev=0.02))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "output_type": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_172": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "batch['label_ids']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "iterator.get_next()",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(output, num_classes, kernel_initializer=tf.truncated_normal_initializer(stddev=0.02))",
                            "Call"
                        ]
                    ]
                }
            },
            "Variable_174": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "set_verbosity_79": {
                "level": {
                    "value": "tf.logging.INFO",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_280": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_300": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "shape_128": {
                "input": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch['input_ids']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "variable_scope_133": {
                "name_or_scope": {
                    "value": "bert",
                    "type": "str",
                    "possible_values": []
                }
            },
            "squeeze_156": {
                "variable": {
                    "value": "bert_sent_hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output[:, 0:1, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dense_157": {
                "variable": {
                    "value": "bert_sent_output",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "bert_sent_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(output[:, 0:1, :], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "config_downstream.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.tanh",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_160": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "bert_sent_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(bert_sent_hidden, config_downstream.hidden_dim, activation=tf.tanh)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "training": {
                    "value": "tx.global_mode_train()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Session_270": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "to_int32_129": {
                "x": {
                    "value": "tf.equal(input_ids, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_153": {
                "name_or_scope": {
                    "value": "pooler",
                    "type": "str",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_166": {
                "stddev": {
                    "value": "0.02",
                    "type": "float",
                    "possible_values": []
                }
            },
            "info_243": {
                "msg": {
                    "value": "'dev accu: {} nsamples: {}'.format(cum_acc / nsamples, nsamples)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "global_variables_initializer_272": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_273": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tables_initializer_274": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "equal_129": {
                "x": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch['input_ids']",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "GFile_259": {
                "name": {
                    "value": "output_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(FLAGS.output_dir, 'test_results.tsv')",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                }
            },
            "info_220": {
                "msg": {
                    "value": "'step:%d loss:%f' % (rets['step'], rets['loss'])",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "texar_repo/examples/bert/utils/data_utils.py": {
        "tensorflow": {
            "TFRecordWriter_412": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "path": {
                    "value": "output_file",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Example_429": {
                "variable": {
                    "value": "tf_example",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.train.Features(feature=features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "parse_single_example_446": {
                "variable": {
                    "value": "example",
                    "type": "variable",
                    "possible_values": []
                },
                "serialized": {
                    "value": "record",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "name_to_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'input_ids': tf.FixedLenFeature([seq_length], tf.int64), 'input_mask': tf.FixedLenFeature([seq_length], tf.int64), 'segment_ids': tf.FixedLenFeature([seq_length], tf.int64), 'label_ids': tf.FixedLenFeature([], tf.int64)}",
                            "Dict"
                        ]
                    ]
                }
            },
            "TFRecordDataset_464": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "filenames": {
                    "value": "input_file",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "info_389": {
                "msg": {
                    "value": "*** Example ***",
                    "type": "str",
                    "possible_values": []
                }
            },
            "info_390": {
                "msg": {
                    "value": "'guid: %s' % example.guid",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_391": {
                "msg": {
                    "value": "'tokens: %s' % ' '.join([tokenization.printable_text(x) for x in tokens])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_393": {
                "msg": {
                    "value": "'input_ids: %s' % ' '.join([str(x) for x in input_ids])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_394": {
                "msg": {
                    "value": "'input_ids length: %d' % len(input_ids)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_395": {
                "msg": {
                    "value": "'input_mask: %s' % ' '.join([str(x) for x in input_mask])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_397": {
                "msg": {
                    "value": "'segment_ids: %s' % ' '.join([str(x) for x in segment_ids])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_399": {
                "msg": {
                    "value": "'label: %s (id = %d)' % (example.label, label_id)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "FixedLenFeature_438": {
                "shape": {
                    "value": "[seq_length]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_439": {
                "shape": {
                    "value": "[seq_length]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_440": {
                "shape": {
                    "value": "[seq_length]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_441": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Feature_420": {
                "int64_list": {
                    "value": "tf.train.Int64List(value=list(values))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "to_int32_453": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "example[name]",
                            "Subscript"
                        ],
                        [
                            "tf.to_int32(t)",
                            "Call"
                        ]
                    ]
                }
            },
            "Features_430": {
                "feature": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "collections.OrderedDict()",
                            "Call"
                        ]
                    ]
                }
            },
            "info_469": {
                "msg": {
                    "value": "'distributed mode is enabled.size:{} rank:{}'.format(hvd.size(), hvd.rank())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_482": {
                "msg": {
                    "value": "distributed mode is not enabled.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "map_and_batch_493": {
                "map_func": {
                    "value": "lambda record: _decode_record(record, name_to_features)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params['batch_size']",
                            "Subscript"
                        ]
                    ]
                },
                "drop_remainder": {
                    "value": "drop_remainder",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Int64List_421": {
                "value": {
                    "value": "list(values)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "map_and_batch_477": {
                "map_func": {
                    "value": "lambda record: _decode_record(record, name_to_features)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size // hvd.size()",
                    "type": "BinOp",
                    "possible_values": []
                },
                "drop_remainder": {
                    "value": "drop_remainder",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "map_and_batch_486": {
                "map_func": {
                    "value": "lambda record: _decode_record(record, name_to_features)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params['batch_size']",
                            "Subscript"
                        ]
                    ]
                },
                "drop_remainder": {
                    "value": "drop_remainder",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "texar_repo/examples/bert/utils/model_utils.py": {
        "tensorflow": {
            "constant_81": {
                "variable": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "static_lr",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "polynomial_decay_84": {
                "variable": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(value=static_lr, shape=[], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.train.polynomial_decay(learning_rate, global_step, num_train_steps, end_learning_rate=0.0, power=1.0, cycle=False)",
                            "Call"
                        ],
                        [
                            "(1.0 - is_warmup) * learning_rate + is_warmup * warmup_learning_rate",
                            "BinOp"
                        ]
                    ]
                },
                "global_step": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "decay_steps": {
                    "value": "num_train_steps",
                    "type": "variable",
                    "possible_values": []
                },
                "end_learning_rate": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "power": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "cycle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "list_variables_124": {
                "variable": {
                    "value": "init_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "init_checkpoint",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "trainable_variables_174": {
                "variable": {
                    "value": "tvars",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cast_93": {
                "variable": {
                    "value": "global_steps_int",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_94": {
                "variable": {
                    "value": "warmup_steps_int",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "num_warmup_steps",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_96": {
                "variable": {
                    "value": "global_steps_float",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "global_steps_int",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(global_step, tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_97": {
                "variable": {
                    "value": "warmup_steps_float",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "warmup_steps_int",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(num_warmup_steps, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_102": {
                "variable": {
                    "value": "is_warmup",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "global_steps_int < warmup_steps_int",
                    "type": "Compare",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_random_seed_182": {
                "seed": {
                    "value": "myseed",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "init_from_checkpoint_179": {
                "ckpt_dir_or_file": {
                    "value": "init_checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "assignment_map": {
                    "value": "assignment_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "{'bert/embeddings/word_embeddings': 'bert/word_embeddings/w', 'bert/embeddings/token_type_embeddings': 'bert/token_type_embeddings/w', 'bert/embeddings/position_embeddings': 'bert/encoder/position_embedder/w', 'bert/embeddings/LayerNorm/beta': 'bert/encoder/LayerNorm/beta', 'bert/embeddings/LayerNorm/gamma': 'bert/encoder/LayerNorm/gamma'}",
                            "Dict"
                        ]
                    ]
                }
            }
        }
    },
    "texar_repo/examples/bert/utils/tokenization.py": {
        "tensorflow": {
            "as_text_31": {
                "bytes_or_text": {
                    "value": "text",
                    "type": "variable",
                    "possible_values": [
                        [
                            "text.strip()",
                            "Call"
                        ],
                        [
                            "tf.compat.as_text(text)",
                            "Call"
                        ],
                        [
                            "self._clean_text(text)",
                            "Call"
                        ],
                        [
                            "self._tokenize_chinese_chars(text)",
                            "Call"
                        ],
                        [
                            "unicodedata.normalize('NFD', text)",
                            "Call"
                        ],
                        [
                            "tf.compat.as_text(text)",
                            "Call"
                        ]
                    ]
                }
            },
            "as_str_any_35": {
                "value": {
                    "value": "text",
                    "type": "variable",
                    "possible_values": [
                        [
                            "text.strip()",
                            "Call"
                        ],
                        [
                            "tf.compat.as_text(text)",
                            "Call"
                        ],
                        [
                            "self._clean_text(text)",
                            "Call"
                        ],
                        [
                            "self._tokenize_chinese_chars(text)",
                            "Call"
                        ],
                        [
                            "unicodedata.normalize('NFD', text)",
                            "Call"
                        ],
                        [
                            "tf.compat.as_text(text)",
                            "Call"
                        ]
                    ]
                }
            },
            "as_text_114": {
                "variable": {
                    "value": "text",
                    "type": "variable",
                    "possible_values": []
                },
                "bytes_or_text": {
                    "value": "text",
                    "type": "variable",
                    "possible_values": [
                        [
                            "text.strip()",
                            "Call"
                        ],
                        [
                            "tf.compat.as_text(text)",
                            "Call"
                        ],
                        [
                            "self._clean_text(text)",
                            "Call"
                        ],
                        [
                            "self._tokenize_chinese_chars(text)",
                            "Call"
                        ],
                        [
                            "unicodedata.normalize('NFD', text)",
                            "Call"
                        ],
                        [
                            "tf.compat.as_text(text)",
                            "Call"
                        ]
                    ]
                }
            },
            "as_text_243": {
                "variable": {
                    "value": "text",
                    "type": "variable",
                    "possible_values": []
                },
                "bytes_or_text": {
                    "value": "text",
                    "type": "variable",
                    "possible_values": [
                        [
                            "text.strip()",
                            "Call"
                        ],
                        [
                            "tf.compat.as_text(text)",
                            "Call"
                        ],
                        [
                            "self._clean_text(text)",
                            "Call"
                        ],
                        [
                            "self._tokenize_chinese_chars(text)",
                            "Call"
                        ],
                        [
                            "unicodedata.normalize('NFD', text)",
                            "Call"
                        ],
                        [
                            "tf.compat.as_text(text)",
                            "Call"
                        ]
                    ]
                }
            },
            "GFile_41": {
                "name": {
                    "value": "vocab_file",
                    "type": "variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "r",
                    "type": "str",
                    "possible_values": []
                }
            },
            "as_text_43": {
                "variable": {
                    "value": "token",
                    "type": "variable",
                    "possible_values": []
                },
                "bytes_or_text": {
                    "value": "reader.readline()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "texar_repo/examples/distributed_gpu/lm_ptb_distributed.py": {
        "tensorflow": {
            "placeholder_84": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, num_steps]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "inputs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_86": {
                "variable": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, num_steps]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "targets",
                    "type": "str",
                    "possible_values": []
                }
            },
            "random_uniform_initializer_90": {
                "variable": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": []
                },
                "minval": {
                    "value": "-config.init_scale",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "maxval": {
                    "value": "config.init_scale",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_124": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ConfigProto_195": {
                "variable": {
                    "value": "session_config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_verbosity_74": {
                "level": {
                    "value": "tf.logging.INFO",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "broadcast_to_110": {
                "variable": {
                    "value": "seq_length",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "[num_steps]",
                    "type": "List",
                    "possible_values": []
                },
                "shape": {
                    "value": "(_batch_size,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "run_235": {
                "main": {
                    "value": "_main",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_92": {
                "name_or_scope": {
                    "value": "model",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform_initializer(-config.init_scale, config.init_scale)",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_97": {
                "variable": {
                    "value": "emb_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "emb_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedder(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(emb_inputs, tx.utils.switch_dropout(config.keep_prob))",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "tx.utils.switch_dropout(config.keep_prob)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_187": {
                "msg": {
                    "value": "'epoch time elapsed: %f' % _elapsed_time",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Session_198": {
                "config": {
                    "value": "session_config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "info_224": {
                "msg": {
                    "value": "'train times: %s' % _times",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_225": {
                "msg": {
                    "value": "'average train time/epoch %f' % np.mean(np.array(_times))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_107": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int32, [None, num_steps], name='inputs')",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_199": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_200": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tables_initializer_201": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "info_215": {
                "msg": {
                    "value": "'Epoch: %d Train Perplexity: %.3f' % (epoch, train_ppl)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_232": {
                "msg": {
                    "value": "'Test Perplexity: %.3f' % test_ppl",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_183": {
                "msg": {
                    "value": "'%.3f perplexity: %.3f speed: %.0f wps' % ((step + 1) * 1.0 / epoch_size, ppl, iters * batch_size / (time.time() - start_time))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_221": {
                "msg": {
                    "value": "'Epoch: %d Valid Perplexity: %.3f' % (epoch, valid_ppl)",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "texar_repo/examples/distributed_gpu/ptb_reader.py": {
        "tensorflow": {
            "Exists_65": {
                "filename": {
                    "value": "train_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(data_path, 'ptb.train.txt')",
                            "Call"
                        ],
                        [
                            "os.path.join(data_path, 'ptb.train.txt')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "texar_repo/examples/hierarchical_dialog/config_model_biminor.py": {
        "tensorflow": {}
    },
    "texar_repo/examples/hierarchical_dialog/config_model_uniminor.py": {
        "tensorflow": {}
    },
    "texar_repo/examples/hierarchical_dialog/hred.py": {
        "tensorflow": {
            "stack_58": {
                "variable": {
                    "value": "spk_src",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[data_batch['spk_{}'.format(i)] for i in range(config_data.max_utterance_cnt)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_107": {
                "variable": {
                    "value": "perplexity",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "avg_mle_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tx.losses.sequence_sparse_softmax_cross_entropy(labels=data_batch['target_text_ids'][:, 1:], logits=outputs.logits, sequence_length=lengths, sum_over_timesteps=False, average_across_timesteps=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "Variable_109": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "concat_138": {
                "variable": {
                    "value": "rand_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_62": {
                "values": {
                    "value": "[x, tf.reshape(spk_src, (-1, 1))]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_like_118": {
                "input": {
                    "value": "data_batch['target_length']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Session_257": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "expand_dims_132": {
                "input": {
                    "value": "infer_outputs_i.sample_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_133": {
                "input": {
                    "value": "lengths_i",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "global_variables_initializer_258": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_259": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tables_initializer_260": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reshape_62": {
                "tensor": {
                    "value": "spk_src",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([data_batch['spk_{}'.format(i)] for i in range(config_data.max_utterance_cnt)], 1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_64": {
                "tensor": {
                    "value": "spk_tgt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_batch['spk_tgt']",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "texar_repo/examples/language_model_ptb/lm_ptb.py": {
        "tensorflow": {
            "placeholder_78": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, num_steps]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_79": {
                "variable": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, num_steps]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "random_uniform_initializer_82": {
                "variable": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": []
                },
                "minval": {
                    "value": "-config.init_scale",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "maxval": {
                    "value": "config.init_scale",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_109": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "run_180": {
                "main": {
                    "value": "_main",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_84": {
                "name_or_scope": {
                    "value": "model",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform_initializer(-config.init_scale, config.init_scale)",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_89": {
                "variable": {
                    "value": "emb_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "emb_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedder(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(emb_inputs, tx.utils.switch_dropout(config.keep_prob))",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "tx.utils.switch_dropout(config.keep_prob)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Session_156": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_157": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_158": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tables_initializer_159": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "texar_repo/examples/language_model_ptb/ptb_reader.py": {
        "tensorflow": {
            "Exists_51": {
                "filename": {
                    "value": "train_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(data_path, 'ptb.train.txt')",
                            "Call"
                        ],
                        [
                            "os.path.join(data_path, 'ptb.train.txt')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "texar_repo/examples/memory_network_lm/lm_ptb_memnet.py": {
        "tensorflow": {
            "placeholder_71": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, memory_size]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "inputs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_72": {
                "variable": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "targets",
                    "type": "str",
                    "possible_values": []
                }
            },
            "random_normal_initializer_75": {
                "variable": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": []
                },
                "stddev": {
                    "value": "config.initialize_stddev",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_with_logits_85": {
                "variable": {
                    "value": "mle_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int32, [None], name='targets')",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "memnet(inputs, queries)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_87": {
                "variable": {
                    "value": "mle_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "mle_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sparse_softmax_cross_entropy_with_logits(labels=targets, logits=logits)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(mle_loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_91": {
                "variable": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "learning_rate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_92": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "type": "str",
                    "possible_values": []
                }
            },
            "assign_add_93": {
                "variable": {
                    "value": "increment_global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(0, dtype=tf.int32, name='global_step')",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Saver_129": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "fill_80": {
                "variable": {
                    "value": "queries",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "[tf.shape(inputs)[0], config.dim]",
                    "type": "List",
                    "possible_values": []
                },
                "value": {
                    "value": "config.query_constant",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "run_205": {
                "main": {
                    "value": "_main",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_77": {
                "name_or_scope": {
                    "value": "model",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_normal_initializer(stddev=config.initialize_stddev)",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_131": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_132": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_133": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tables_initializer_134": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "shape_80": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int32, [None, memory_size], name='inputs')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "texar_repo/examples/memory_network_lm/ptb_reader.py": {
        "tensorflow": {
            "Exists_70": {
                "filename": {
                    "value": "train_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(data_path, 'ptb.train.txt')",
                            "Call"
                        ],
                        [
                            "os.path.join(data_path, 'ptb.train.txt')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "texar_repo/examples/rl_gym/ac_cartpole.py": {
        "tensorflow": {
            "Session_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_46": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_47": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tables_initializer_48": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "texar_repo/examples/rl_gym/dqn_cartpole.py": {
        "tensorflow": {
            "Session_45": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_48": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_49": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tables_initializer_50": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "texar_repo/examples/rl_gym/pg_cartpole.py": {
        "tensorflow": {
            "Session_48": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_79": {
                "main": {
                    "value": "_main",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "global_variables_initializer_50": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_51": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tables_initializer_52": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "texar_repo/examples/sentence_classifier/clas_main.py": {
        "tensorflow": {
            "sparse_softmax_cross_entropy_55": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "batch['y']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "iterator.get_next()",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "set_verbosity_116": {
                "level": {
                    "value": "tf.logging.INFO",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "run_117": {
                "main": {
                    "value": "_main",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Session_92": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_93": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_94": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tables_initializer_95": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "info_105": {
                "msg": {
                    "value": "'epoch: {0:2} train accu: {1:.4f} val accu: {2:.4f}'.format(epoch + 1, train_accu, val_accu)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_113": {
                "msg": {
                    "value": "'test accu: {0:.4f}'.format(test_accu)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_85": {
                "msg": {
                    "value": "'epoch: {0:2} step: {1:4} accu: {2:.4f}'.format(epoch, step, accu_)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "texar_repo/examples/sentence_classifier/sst_data_preprocessor.py": {
        "tensorflow": {
            "info_89": {
                "msg": {
                    "value": "'Preprocessing done: {}'.format(data_path)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_verbosity_95": {
                "level": {
                    "value": "tf.logging.INFO",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "run_96": {
                "main": {
                    "value": "_main",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Exists_70": {
                "filename": {
                    "value": "train_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(data_path, 'sst.train.sentences.txt')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "texar_repo/examples/seq2seq_attn/prepare_data.py": {
        "tensorflow": {}
    },
    "texar_repo/examples/seq2seq_attn/seq2seq_attn.py": {
        "tensorflow": {
            "ones_like_69": {
                "input": {
                    "value": "batch['target_length']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Session_142": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "concat_52": {
                "values": {
                    "value": "enc_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "global_variables_initializer_143": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_144": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tables_initializer_145": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "texar_repo/examples/seq2seq_exposure_bias/baseline_seq2seq_attn_main.py": {
        "tensorflow": {
            "ones_like_82": {
                "input": {
                    "value": "batch['target_length']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Session_189": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "concat_65": {
                "values": {
                    "value": "enc_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "global_variables_initializer_190": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_191": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tables_initializer_192": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "texar_repo/examples/seq2seq_exposure_bias/interpolation_decoder.py": {
        "tensorflow": {
            "ones_90": {
                "variable": {
                    "value": "initial_decoded_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, 60)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_86": {
                "input": {
                    "value": "init[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "texar_repo/examples/seq2seq_exposure_bias/interpolation_helper.py": {
        "tensorflow": {
            "Categorical_98": {
                "variable": {
                    "value": "sample_method_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "probs": {
                    "value": "self._lambdas",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cond_112": {
                "variable": {
                    "value": "sample_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.logical_or(tf.equal(time, 0), tf.equal(sample_method_id, 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "truth_feeding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lambda : tf.cond(tf.less(time, tf.shape(self._ground_truth)[1]), lambda : tf.to_int32(self._ground_truth[:, time]), lambda : tf.ones_like(self._ground_truth[:, 0], dtype=tf.int32) * self._vocab.eos_token_id)",
                            "Lambda"
                        ]
                    ]
                },
                "false_fn": {
                    "value": "lambda : tf.cond(tf.equal(sample_method_id, 2), reward_feeding, self_feeding)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "reshape_131": {
                "variable": {
                    "value": "next_state[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensor": {
                    "value": "next_state[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "(tf.shape(sample_ids)[0], 60)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Categorical_210": {
                "variable": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "tf.py_func(_get_rewards, [time, state[0], self._ground_truth, self._ground_truth_length], tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_214": {
                "tensor": {
                    "value": "sampler.sample()",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(tf.shape(self._ground_truth)[0],)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cond_101": {
                "pred": {
                    "value": "tf.less(time, tf.shape(self._ground_truth)[1])",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : tf.to_int32(self._ground_truth[:, time])",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : tf.ones_like(self._ground_truth[:, 0], dtype=tf.int32) * self._vocab.eos_token_id",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "logical_or_113": {
                "x": {
                    "value": "tf.equal(time, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.equal(sample_method_id, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_128": {
                "values": {
                    "value": "[state[0][:, :time], tf.expand_dims(sample_ids, 1), state[0][:, time + 1:]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "less_102": {
                "x": {
                    "value": "time",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.shape(self._ground_truth)[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "equal_113": {
                "x": {
                    "value": "sample_method_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sample_method_sampler.sample()",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cond_115": {
                "pred": {
                    "value": "tf.equal(sample_method_id, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "reward_feeding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lambda : self._sample_by_reward(time, state)",
                            "Lambda"
                        ]
                    ]
                },
                "false_fn": {
                    "value": "self_feeding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lambda : SampleEmbeddingHelper.sample(self, time, outputs, state, name)",
                            "Lambda"
                        ]
                    ]
                }
            },
            "py_func_211": {
                "func": {
                    "value": "_get_rewards",
                    "type": "variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[time, state[0], self._ground_truth, self._ground_truth_length]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "to_int32_103": {
                "x": {
                    "value": "self._ground_truth[:, time]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "equal_116": {
                "x": {
                    "value": "sample_method_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sample_method_sampler.sample()",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_129": {
                "input": {
                    "value": "sample_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cond(tf.logical_or(tf.equal(time, 0), tf.equal(sample_method_id, 1)), truth_feeding, lambda : tf.cond(tf.equal(sample_method_id, 2), reward_feeding, self_feeding))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_131": {
                "input": {
                    "value": "sample_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cond(tf.logical_or(tf.equal(time, 0), tf.equal(sample_method_id, 1)), truth_feeding, lambda : tf.cond(tf.equal(sample_method_id, 2), reward_feeding, self_feeding))",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_215": {
                "input": {
                    "value": "self._ground_truth",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_102": {
                "input": {
                    "value": "self._ground_truth",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_104": {
                "input": {
                    "value": "self._ground_truth[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "texar_repo/examples/seq2seq_exposure_bias/interpolation_main.py": {
        "tensorflow": {
            "placeholder_148": {
                "variable": {
                    "value": "lambdas_ts",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[3]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_259": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_77": {
                "input": {
                    "value": "batch['target_length']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_like_96": {
                "input": {
                    "value": "batch['target_length']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Session_260": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "concat_91": {
                "values": {
                    "value": "enc_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "global_variables_initializer_261": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_262": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tables_initializer_263": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "texar_repo/examples/seq2seq_exposure_bias/raml_main.py": {
        "tensorflow": {
            "placeholder_161": {
                "variable": {
                    "value": "rewards_ts",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "training_rewards",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_92": {
                "input_tensor": {
                    "value": "mle_loss * training_rewards",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_93": {
                "input_tensor": {
                    "value": "training_rewards",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_like_128": {
                "input": {
                    "value": "batch['target_length']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Session_302": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "concat_114": {
                "values": {
                    "value": "enc_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "global_variables_initializer_303": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_304": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tables_initializer_305": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "texar_repo/examples/seq2seq_exposure_bias/scheduled_sampling_main.py": {
        "tensorflow": {
            "placeholder_136": {
                "variable": {
                    "value": "self_sampling_proba",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_106": {
                "input": {
                    "value": "batch['target_length']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Session_221": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "concat_83": {
                "values": {
                    "value": "enc_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "global_variables_initializer_222": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_223": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tables_initializer_224": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "shape_97": {
                "input": {
                    "value": "batch['target_length']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "texar_repo/examples/seq2seq_exposure_bias/utils/prepare_data.py": {
        "tensorflow": {}
    },
    "texar_repo/examples/seq2seq_rl/prepare_data.py": {
        "tensorflow": {}
    },
    "texar_repo/examples/seq2seq_rl/seq2seq_attn_pg.py": {
        "tensorflow": {
            "ones_like_69": {
                "input": {
                    "value": "batch['target_length']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Session_194": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "concat_64": {
                "values": {
                    "value": "enc_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "global_variables_initializer_195": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_196": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tables_initializer_197": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "texar_repo/examples/seqgan/data_utils.py": {
        "tensorflow": {
            "Exists_47": {
                "filename": {
                    "value": "train_path",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "texar_repo/examples/seqgan/seqgan_train.py": {
        "tensorflow": {
            "Variable_86": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cast_94": {
                "variable": {
                    "value": "start_tokens",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.fill([batch_size], train_data.vocab.bos_token_id)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_value_137": {
                "variable": {
                    "value": "infer_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "tf.nn.softmax(infer_logits) * tf.one_hot(infer_sample_ids, vocab_size)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "1e-20",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Variable_141": {
                "variable": {
                    "value": "expected_reward",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros((config.max_num_steps,))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_144": {
                "variable": {
                    "value": "mean_reward",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "reward",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(f_logits, shape=(batch_size, -1)) - expected_reward[:tf.shape(f_logits)[1]]",
                            "BinOp"
                        ],
                        [
                            "tx.losses.discount_reward(reward, sequence_length=tf.squeeze(sequence_length), tensor_rank=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "group_162": {
                "variable": {
                    "value": "update_op",
                    "type": "variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "gen_op",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tx.core.get_train_op(update_loss, variables=g_variables, global_step=global_step, increment_global_step=True, hparams=config.update_opt_hparams)",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "exp_op",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tx.core.get_train_op(exp_reward_loss, variables=[expected_reward], global_step=global_step, increment_global_step=False, hparams=config.update_opt_hparams)",
                            "Call"
                        ]
                    ]
                }
            },
            "ConfigProto_308": {
                "variable": {
                    "value": "tf_config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "dropout_63": {
                "variable": {
                    "value": "input_embed",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "input_embed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "g_embedder(data_batch['text_ids'][:, :-1])",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(input_embed, tx.utils.switch_dropout(config.enc_keep_prob_in))",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "tx.utils.switch_dropout(config.enc_keep_prob_in)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "run_341": {
                "main": {
                    "value": "_main",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_53": {
                "input": {
                    "value": "data_batch['text_ids']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "shape_54": {
                "input": {
                    "value": "data_batch['text_ids']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "fill_94": {
                "dims": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "value": {
                    "value": "train_data.vocab.bos_token_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_141": {
                "shape": {
                    "value": "(config.max_num_steps,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_142": {
                "tensor": {
                    "value": "f_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reduce_mean_145": {
                "input_tensor": {
                    "value": "tf.abs(reward)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_154": {
                "input_tensor": {
                    "value": "tf.log(infer_logits) * tf.expand_dims(reward, -1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Session_310": {
                "config": {
                    "value": "tf_config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_120": {
                "input": {
                    "value": "data_batch['text_ids'][:, 1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_121": {
                "input": {
                    "value": "r_logits",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_like_124": {
                "input": {
                    "value": "infer_sample_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "infer_outputs.sample_id",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_125": {
                "input": {
                    "value": "f_logits",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "softmax_138": {
                "logits": {
                    "value": "infer_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "infer_outputs.logits",
                            "Attribute"
                        ],
                        [
                            "tf.clip_by_value(tf.nn.softmax(infer_logits) * tf.one_hot(infer_sample_ids, vocab_size), 1e-20, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "one_hot_139": {
                "indices": {
                    "value": "infer_sample_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "infer_outputs.sample_id",
                            "Attribute"
                        ]
                    ]
                },
                "depth": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_data.vocab.size",
                            "Attribute"
                        ]
                    ]
                }
            },
            "abs_145": {
                "x": {
                    "value": "reward",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(f_logits, shape=(batch_size, -1)) - expected_reward[:tf.shape(f_logits)[1]]",
                            "BinOp"
                        ],
                        [
                            "tx.losses.discount_reward(reward, sequence_length=tf.squeeze(sequence_length), tensor_rank=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_153": {
                "input": {
                    "value": "sequence_length",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "global_variables_initializer_311": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_312": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tables_initializer_313": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_154": {
                "x": {
                    "value": "infer_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "infer_outputs.logits",
                            "Attribute"
                        ],
                        [
                            "tf.clip_by_value(tf.nn.softmax(infer_logits) * tf.one_hot(infer_sample_ids, vocab_size), 1e-20, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_155": {
                "input": {
                    "value": "reward",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(f_logits, shape=(batch_size, -1)) - expected_reward[:tf.shape(f_logits)[1]]",
                            "BinOp"
                        ],
                        [
                            "tx.losses.discount_reward(reward, sequence_length=tf.squeeze(sequence_length), tensor_rank=2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "shape_143": {
                "input": {
                    "value": "f_logits",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "texar_repo/examples/sequence_tagging/conll_reader.py": {
        "tensorflow": {
            "as_text_166": {
                "variable": {
                    "value": "word",
                    "type": "variable",
                    "possible_values": []
                },
                "bytes_or_text": {
                    "value": "word",
                    "type": "variable",
                    "possible_values": [
                        [
                            "word_count",
                            "variable"
                        ],
                        [
                            "DIGIT_RE.sub('0', tokens[1]) if normalize_digits else tokens[1]",
                            "IfExp"
                        ],
                        [
                            "tf.compat.as_text(word)",
                            "Call"
                        ],
                        [
                            "DIGIT_RE.sub('0', word) if normalize_digits else word",
                            "IfExp"
                        ],
                        [
                            "DIGIT_RE.sub('0', tokens[1]) if normalize_digits else tokens[1]",
                            "IfExp"
                        ]
                    ]
                }
            }
        }
    },
    "texar_repo/examples/sequence_tagging/ner.py": {
        "tensorflow": {
            "placeholder_78": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_79": {
                "variable": {
                    "value": "chars",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None, None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_80": {
                "variable": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_81": {
                "variable": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_82": {
                "variable": {
                    "value": "seq_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_91": {
                "variable": {
                    "value": "char_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "emb_chars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "char_embedder(chars)",
                            "Call"
                        ],
                        [
                            "tf.reshape(emb_chars, (-1, char_shape[2], CHAR_DIM))",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_92": {
                "variable": {
                    "value": "emb_chars",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "emb_chars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "char_embedder(chars)",
                            "Call"
                        ],
                        [
                            "tf.reshape(emb_chars, (-1, char_shape[2], CHAR_DIM))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, char_shape[2], CHAR_DIM)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_95": {
                "variable": {
                    "value": "char_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "char_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "char_encoder(emb_chars)",
                            "Call"
                        ],
                        [
                            "tf.reshape(char_outputs, (char_shape[0], char_shape[1], config.conv['filters']))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(char_shape[0], char_shape[1], config.conv['filters'])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "concat_97": {
                "variable": {
                    "value": "emb_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[emb_inputs, char_outputs]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_98": {
                "variable": {
                    "value": "emb_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "emb_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedder(inputs)",
                            "Call"
                        ],
                        [
                            "tf.concat([emb_inputs, char_outputs], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(emb_inputs, keep_prob=0.67)",
                            "Call"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "0.67",
                    "type": "float",
                    "possible_values": []
                }
            },
            "concat_102": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(outputs, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(outputs, (-1, 2 * config.hidden_size))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(outputs, config.tag_space, activation=tf.nn.elu)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(outputs, keep_prob=config.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_104": {
                "variable": {
                    "value": "rnn_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(outputs, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(outputs, (-1, 2 * config.hidden_size))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(outputs, config.tag_space, activation=tf.nn.elu)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(outputs, keep_prob=config.keep_prob)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_105": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(outputs, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(outputs, (-1, 2 * config.hidden_size))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(outputs, config.tag_space, activation=tf.nn.elu)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(outputs, keep_prob=config.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, 2 * config.hidden_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "dense_107": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(outputs, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(outputs, (-1, 2 * config.hidden_size))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(outputs, config.tag_space, activation=tf.nn.elu)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(outputs, keep_prob=config.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "config.tag_space",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.elu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_108": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(outputs, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(outputs, (-1, 2 * config.hidden_size))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(outputs, config.tag_space, activation=tf.nn.elu)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(outputs, keep_prob=config.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "config.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_110": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(outputs, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(outputs, (-1, 2 * config.hidden_size))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(outputs, config.tag_space, activation=tf.nn.elu)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(outputs, keep_prob=config.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "len(ner_vocab)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_112": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(outputs, len(ner_vocab))",
                            "Call"
                        ],
                        [
                            "tf.reshape(logits, tf.concat([rnn_shape[0:2], [len(ner_vocab)]], axis=0))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.concat([rnn_shape[0:2], [len(ner_vocab)]], axis=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "argmax_122": {
                "variable": {
                    "value": "predicts",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(outputs, len(ner_vocab))",
                            "Call"
                        ],
                        [
                            "tf.reshape(logits, tf.concat([rnn_shape[0:2], [len(ner_vocab)]], axis=0))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_123": {
                "variable": {
                    "value": "corrects",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(tf.equal(targets, predicts), tf.float32) * masks",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_125": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_112": {
                "values": {
                    "value": "[rnn_shape[0:2], [len(ner_vocab)]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Session_188": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cast_123": {
                "x": {
                    "value": "tf.equal(targets, predicts)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_189": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_190": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tables_initializer_191": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "equal_123": {
                "x": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int64, [None, None])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "predicts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(logits, axis=2)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "texar_repo/examples/text_style_transfer/ctrl_gen_model.py": {
        "tensorflow": {
            "to_float_58": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reshape(inputs['labels'], [-1, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_61": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[c, z]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_62": {
                "variable": {
                    "value": "h_",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[c_, z]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_108": {
                "variable": {
                    "value": "loss_d_clas",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "tf.to_float(inputs['labels'])",
                    "type": "Call",
                    "possible_values": []
                },
                "logits": {
                    "value": "clas_logits",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_mean_110": {
                "variable": {
                    "value": "loss_d_clas",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loss_d_clas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid_cross_entropy_with_logits(labels=tf.to_float(inputs['labels']), logits=clas_logits)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(loss_d_clas)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_cross_entropy_with_logits_117": {
                "variable": {
                    "value": "loss_g_clas",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "tf.to_float(1 - inputs['labels'])",
                    "type": "Call",
                    "possible_values": []
                },
                "logits": {
                    "value": "soft_logits",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_mean_119": {
                "variable": {
                    "value": "loss_g_clas",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loss_g_clas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid_cross_entropy_with_logits(labels=tf.to_float(1 - inputs['labels']), logits=soft_logits)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(loss_g_clas)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_58": {
                "tensor": {
                    "value": "inputs['labels']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_like_86": {
                "input": {
                    "value": "inputs['labels']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "to_float_109": {
                "x": {
                    "value": "inputs['labels']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "to_float_118": {
                "x": {
                    "value": "1 - inputs['labels']",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "texar_repo/examples/text_style_transfer/main.py": {
        "tensorflow": {
            "placeholder_67": {
                "variable": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "gamma",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_68": {
                "variable": {
                    "value": "lambda_g",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "lambda_g",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MakeDirs_150": {
                "dirname": {
                    "value": "config.sample_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MakeDirs_151": {
                "dirname": {
                    "value": "config.checkpoint_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_159": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "run_191": {
                "main": {
                    "value": "_main",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Session_154": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_155": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_156": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tables_initializer_157": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "texar_repo/examples/torchtext/lm_torchtext.py": {
        "tensorflow": {
            "placeholder_67": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, num_steps]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_68": {
                "variable": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, num_steps]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "random_uniform_initializer_71": {
                "variable": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": []
                },
                "minval": {
                    "value": "-config.init_scale",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "maxval": {
                    "value": "config.init_scale",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_98": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "run_164": {
                "main": {
                    "value": "_main",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_73": {
                "name_or_scope": {
                    "value": "model",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform_initializer(-config.init_scale, config.init_scale)",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_78": {
                "variable": {
                    "value": "emb_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "emb_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedder(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(emb_inputs, tx.utils.switch_dropout(config.keep_prob))",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "tx.utils.switch_dropout(config.keep_prob)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Session_145": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_146": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_147": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tables_initializer_148": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "texar_repo/examples/transformer/transformer_main.py": {
        "tensorflow": {
            "placeholder_71": {
                "variable": {
                    "value": "encoder_input",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, None)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_72": {
                "variable": {
                    "value": "decoder_input",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, None)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reduce_sum_74": {
                "variable": {
                    "value": "encoder_input_length",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "1 - tf.to_int32(tf.equal(encoder_input, 0))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_76": {
                "variable": {
                    "value": "decoder_input_length",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "1 - tf.to_int32(tf.equal(decoder_input, 0))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "placeholder_79": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, None)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "to_float_80": {
                "variable": {
                    "value": "is_target",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.not_equal(labels, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_82": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "placeholder_83": {
                "variable": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "lr",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_96": {
                "variable": {
                    "value": "tgt_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.zeros(shape=[1, embedder.dim]), embedder.embedding[1:, :]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "merge_all_122": {
                "variable": {
                    "value": "summary_merged",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "fill_125": {
                "variable": {
                    "value": "start_tokens",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "[tx.utils.get_batch_size(encoder_input)]",
                    "type": "List",
                    "possible_values": []
                },
                "value": {
                    "value": "bos_token_id",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Saver_145": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "scalar_120": {
                "name": {
                    "value": "lr",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float64, shape=(), name='lr')",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_121": {
                "name": {
                    "value": "mle_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "mle_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "transformer_utils.smoothing_cross_entropy(outputs.logits, labels, vocab_size, config_model.loss_label_confidence)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(mle_loss * is_target) / tf.reduce_sum(is_target)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "FileWriter_257": {
                "variable": {
                    "value": "smry_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "FLAGS.model_dir",
                    "type": "Attribute",
                    "possible_values": []
                },
                "graph": {
                    "value": "sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "not_equal_80": {
                "x": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int64, shape=(None, None))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_112": {
                "input_tensor": {
                    "value": "is_target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(tf.not_equal(labels, 0))",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_252": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "to_int32_75": {
                "x": {
                    "value": "tf.equal(encoder_input, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "to_int32_77": {
                "x": {
                    "value": "tf.equal(decoder_input, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_97": {
                "shape": {
                    "value": "[1, embedder.dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "global_variables_initializer_253": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_254": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tables_initializer_255": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "equal_75": {
                "x": {
                    "value": "encoder_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int64, shape=(None, None))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "equal_77": {
                "x": {
                    "value": "decoder_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int64, shape=(None, None))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "latest_checkpoint_262": {
                "checkpoint_dir": {
                    "value": "FLAGS.model_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "latest_checkpoint_264": {
                "checkpoint_dir": {
                    "value": "FLAGS.model_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "latest_checkpoint_274": {
                "checkpoint_dir": {
                    "value": "FLAGS.model_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "texar_repo/examples/transformer/utils/utils.py": {
        "tensorflow": {
            "set_random_seed_29": {
                "seed": {
                    "value": "myseed",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "texar_repo/examples/vae_text/prepare_data.py": {
        "tensorflow": {
            "Exists_32": {
                "filename": {
                    "value": "train_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(data_path, 'ptb.train.txt')",
                            "Call"
                        ],
                        [
                            "os.path.join(data_path, 'ptb.train.txt')",
                            "Call"
                        ],
                        [
                            "os.path.join(data_path, 'yahoo.train.txt')",
                            "Call"
                        ]
                    ]
                }
            },
            "Exists_48": {
                "filename": {
                    "value": "train_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(data_path, 'ptb.train.txt')",
                            "Call"
                        ],
                        [
                            "os.path.join(data_path, 'ptb.train.txt')",
                            "Call"
                        ],
                        [
                            "os.path.join(data_path, 'yahoo.train.txt')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "texar_repo/examples/vae_text/vae_train.py": {
        "tensorflow": {
            "reduce_mean_63": {
                "variable": {
                    "value": "kl_cost",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "kl_cost",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-0.5 * (logvars - tf.square(means) - tf.exp(logvars) + 1.0)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(kl_cost, 0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_143": {
                "variable": {
                    "value": "(mean, logvar)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "mean_logvar",
                    "type": "variable",
                    "possible_values": [
                        [
                            "connector_mlp(ecdr_states)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "placeholder_180": {
                "variable": {
                    "value": "kl_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_184": {
                "variable": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "learning_rate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Saver_317": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_sum_65": {
                "input_tensor": {
                    "value": "kl_cost",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-0.5 * (logvars - tf.square(means) - tf.exp(logvars) + 1.0)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(kl_cost, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_155": {
                "variable": {
                    "value": "latent_z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "latent_z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(latent_z, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.tile(latent_z, [1, tf.shape(output_embed)[1], 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_156": {
                "variable": {
                    "value": "latent_z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "latent_z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(latent_z, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.tile(latent_z, [1, tf.shape(output_embed)[1], 1])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, tf.shape(output_embed)[1], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_157": {
                "variable": {
                    "value": "output_embed",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[output_embed, latent_z]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "run_373": {
                "main": {
                    "value": "_main",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "TensorShape_126": {
                "variable": {
                    "value": "decoder_initial_state_size",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "[1, config.dec_emb_hparams['dim']]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "checkpoint_exists_260": {
                "checkpoint_prefix": {
                    "value": "FLAGS.model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_318": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_330": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "exp_148": {
                "x": {
                    "value": "0.5 * logvar",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "concat_276": {
                "values": {
                    "value": "[embedding, latent_z]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_279": {
                "shape": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(fetches_['lengths'])",
                            "Call"
                        ],
                        [
                            "train_data.batch_size",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tables_initializer_300": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_324": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_325": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tables_initializer_326": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "exp_62": {
                "x": {
                    "value": "logvars",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_168": {
                "shape": {
                    "value": "tf.shape(dcdr_states)[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_268": {
                "shape": {
                    "value": "[batch_size, config.latent_dims]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_269": {
                "shape": {
                    "value": "[batch_size, config.latent_dims]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "square_61": {
                "x": {
                    "value": "means",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_156": {
                "input": {
                    "value": "output_embed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "decoder_embedder(data_batch['text_ids'][:, :-1])",
                            "Call"
                        ],
                        [
                            "tf.concat([output_embed, latent_z], axis=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_294": {
                "shape": {
                    "value": "tf.shape(dcdr_states)[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "shape_168": {
                "input": {
                    "value": "dcdr_states",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_294": {
                "input": {
                    "value": "dcdr_states",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "texar_repo/texar/agents/ac_agent.py": {
        "tensorflow": {
            "variable_scope_91": {
                "name_or_scope": {
                    "value": "self.variable_scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "texar_repo/texar/agents/agent_utils_test.py": {
        "tensorflow": {
            "main_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "texar_repo/texar/agents/dqn_agent.py": {
        "tensorflow": {
            "placeholder_262": {
                "variable": {
                    "value": "self._observ_inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self._env_config.observ_dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None] + list(self._env_config.observ_shape)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "observ_inputs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_266": {
                "variable": {
                    "value": "self._action_inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self._env_config.action_dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self._num_actions]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "action_inputs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_270": {
                "variable": {
                    "value": "self._y_inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "y_inputs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_110": {
                "name_or_scope": {
                    "value": "self.variable_scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_261": {
                "name_or_scope": {
                    "value": "self.variable_scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_295": {
                "input_tensor": {
                    "value": "qnet_qvalues * tf.to_float(actions)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_299": {
                "input_tensor": {
                    "value": "self._td_error ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "assign_307": {
                "ref": {
                    "value": "self._target.trainable_variables[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "self._qnet.trainable_variables[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "assign_317": {
                "ref": {
                    "value": "self._target.trainable_variables[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "value_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1.0 - tau) * self._target.trainable_variables[i] + tau * self._qnet.trainable_variables[i]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "to_float_295": {
                "x": {
                    "value": "actions",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "texar_repo/texar/agents/episodic_agent_base.py": {
        "tensorflow": {
            "make_template_71": {
                "variable": {
                    "value": "self._reset_tmplt_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name_": {
                    "value": "'{}_reset'.format(self.name)",
                    "type": "Call",
                    "possible_values": []
                },
                "func_": {
                    "value": "self._reset",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "make_template_73": {
                "variable": {
                    "value": "self._observe_tmplt_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name_": {
                    "value": "'{}_observe'.format(self.name)",
                    "type": "Call",
                    "possible_values": []
                },
                "func_": {
                    "value": "self._observe",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "make_template_75": {
                "variable": {
                    "value": "self._get_action_tmplt_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name_": {
                    "value": "'{}_get_action'.format(self.name)",
                    "type": "Call",
                    "possible_values": []
                },
                "func_": {
                    "value": "self._get_action",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "texar_repo/texar/agents/pg_agent.py": {
        "tensorflow": {
            "placeholder_115": {
                "variable": {
                    "value": "self._observ_inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self._env_config.observ_dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None] + list(self._env_config.observ_shape)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "observ_inputs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_119": {
                "variable": {
                    "value": "self._action_inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self._env_config.action_dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None] + list(self._env_config.action_shape)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "action_inputs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_123": {
                "variable": {
                    "value": "self._advantage_inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "advantages_inputs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_94": {
                "name_or_scope": {
                    "value": "self.variable_scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_114": {
                "name_or_scope": {
                    "value": "self.variable_scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "texar_repo/texar/agents/seq_pg_agent.py": {
        "tensorflow": {
            "placeholder_119": {
                "variable": {
                    "value": "self._qvalue_inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "qvalue_inputs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_118": {
                "name_or_scope": {
                    "value": "self.variable_scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "texar_repo/texar/agents/seq_pg_agent_test.py": {
        "tensorflow": {
            "main_77": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_61": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "texar_repo/texar/context.py": {
        "tensorflow": {
            "get_collection_ref_52": {
                "variable": {
                    "value": "mode",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "_GLOBAL_MODE_KEY",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'GLOBAL_MODE'",
                            "str"
                        ]
                    ]
                }
            },
            "placeholder_with_default_55": {
                "variable": {
                    "value": "mode_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.estimator.ModeKeys.TRAIN",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "global_mode",
                    "type": "str",
                    "possible_values": []
                }
            },
            "equal_82": {
                "x": {
                    "value": "mode",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_collection_ref(_GLOBAL_MODE_KEY)",
                            "Call"
                        ],
                        [
                            "global_mode()",
                            "Call"
                        ],
                        [
                            "global_mode()",
                            "Call"
                        ],
                        [
                            "global_mode()",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.estimator.ModeKeys.TRAIN",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_88": {
                "x": {
                    "value": "mode",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_collection_ref(_GLOBAL_MODE_KEY)",
                            "Call"
                        ],
                        [
                            "global_mode()",
                            "Call"
                        ],
                        [
                            "global_mode()",
                            "Call"
                        ],
                        [
                            "global_mode()",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.estimator.ModeKeys.EVAL",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_94": {
                "x": {
                    "value": "mode",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_collection_ref(_GLOBAL_MODE_KEY)",
                            "Call"
                        ],
                        [
                            "global_mode()",
                            "Call"
                        ],
                        [
                            "global_mode()",
                            "Call"
                        ],
                        [
                            "global_mode()",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.estimator.ModeKeys.PREDICT",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "texar_repo/texar/context_test.py": {
        "tensorflow": {
            "get_collection_ref_64": {
                "variable": {
                    "value": "global_mode_values",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "context._GLOBAL_MODE_KEY",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "main_68": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "as_str_36": {
                "bytes_or_text": {
                    "value": "global_mode_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sess.run(global_mode)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "texar_repo/texar/core/layers.py": {
        "tensorflow": {
            "MultiRNNCell_273": {
                "variable": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": []
                },
                "cells": {
                    "value": "cells",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "TensorShape_646": {
                "variable": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tf.TensorShape(s).as_list() for s in input_shape]",
                            "ListComp"
                        ],
                        [
                            "tf.TensorShape(input_shape).as_list()",
                            "Call"
                        ],
                        [
                            "tf.TensorShape(input_shape)",
                            "Call"
                        ],
                        [
                            "output_shape",
                            "variable"
                        ]
                    ]
                }
            },
            "TensorShape_922": {
                "variable": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tf.TensorShape(s).as_list() for s in input_shape]",
                            "ListComp"
                        ],
                        [
                            "tf.TensorShape(input_shape).as_list()",
                            "Call"
                        ],
                        [
                            "tf.TensorShape(input_shape)",
                            "Call"
                        ],
                        [
                            "output_shape",
                            "variable"
                        ]
                    ]
                }
            },
            "DropoutWrapper_256": {
                "variable": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": []
                },
                "cell": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.check_or_get_instance(cell_type, cell_kwargs, cell_modules, rnn.RNNCell)",
                            "Call"
                        ],
                        [
                            "rnn.MultiRNNCell(cells)",
                            "Call"
                        ],
                        [
                            "cells[0]",
                            "Subscript"
                        ],
                        [
                            "rnn.DropoutWrapper(cell=cell, input_keep_prob=input_keep_prob, output_keep_prob=output_keep_prob, state_keep_prob=state_keep_prob, **vr_kwargs)",
                            "Call"
                        ],
                        [
                            "rnn.ResidualWrapper(cell)",
                            "Call"
                        ],
                        [
                            "rnn.HighwayWrapper(cell)",
                            "Call"
                        ]
                    ]
                },
                "input_keep_prob": {
                    "value": "input_keep_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "switch_dropout(d_hp['input_keep_prob'], mode)",
                            "Call"
                        ]
                    ]
                },
                "output_keep_prob": {
                    "value": "output_keep_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "switch_dropout(d_hp['output_keep_prob'], mode)",
                            "Call"
                        ]
                    ]
                },
                "state_keep_prob": {
                    "value": "state_keep_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "switch_dropout(d_hp['state_keep_prob'], mode)",
                            "Call"
                        ]
                    ]
                }
            },
            "TensorShape_619": {
                "dims": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "TensorShape_812": {
                "dims": {
                    "value": "output_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[next((s for s in sizes if s is not None), None) for sizes in zip(*input_shape)]",
                            "ListComp"
                        ],
                        [
                            "_compute_concat_output_shape(_shapes, self._axis)",
                            "Call"
                        ],
                        [
                            "_compute_concat_output_shape(_shapes, self._axis)",
                            "Call"
                        ],
                        [
                            "[next((s for s in sizes if s is not None), None) for sizes in zip(*max_ranked_shapes)]",
                            "ListComp"
                        ],
                        [
                            "layer.compute_output_shape(input_shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_841": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "layer_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[layer_outputs]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "self._axis",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ResidualWrapper_266": {
                "variable": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": []
                },
                "cell": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.check_or_get_instance(cell_type, cell_kwargs, cell_modules, rnn.RNNCell)",
                            "Call"
                        ],
                        [
                            "rnn.MultiRNNCell(cells)",
                            "Call"
                        ],
                        [
                            "cells[0]",
                            "Subscript"
                        ],
                        [
                            "rnn.DropoutWrapper(cell=cell, input_keep_prob=input_keep_prob, output_keep_prob=output_keep_prob, state_keep_prob=state_keep_prob, **vr_kwargs)",
                            "Call"
                        ],
                        [
                            "rnn.ResidualWrapper(cell)",
                            "Call"
                        ],
                        [
                            "rnn.HighwayWrapper(cell)",
                            "Call"
                        ]
                    ]
                }
            },
            "TensorShape_648": {
                "dims": {
                    "value": "[input_shape[0], input_shape[2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_650": {
                "dims": {
                    "value": "[input_shape[0], input_shape[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_790": {
                "dims": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "erf_1201": {
                "x": {
                    "value": "input_tensor / tf.sqrt(2.0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "add_845": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(values=layer_outputs, axis=self._axis)",
                            "Call"
                        ],
                        [
                            "layer_outputs[0]",
                            "Subscript"
                        ],
                        [
                            "layer_outputs[0]",
                            "Subscript"
                        ],
                        [
                            "tf.add(outputs, layer_outputs[i])",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(_concat, axis=self._axis)",
                            "Call"
                        ],
                        [
                            "tf.multiply(outputs, layer_outputs[i])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(_concat, axis=self._axis)",
                            "Call"
                        ],
                        [
                            "tf.reduce_prod(_concat, axis=self._axis)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(_concat, axis=self._axis)",
                            "Call"
                        ],
                        [
                            "tf.reduce_min(_concat, axis=self._axis)",
                            "Call"
                        ],
                        [
                            "tf.reduce_all(_concat, axis=self._axis)",
                            "Call"
                        ],
                        [
                            "tf.reduce_any(_concat, axis=self._axis)",
                            "Call"
                        ],
                        [
                            "tf.reduce_logsumexp(_concat, axis=self._axis)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "layer(outputs, training=training)",
                            "Call"
                        ],
                        [
                            "layer(inputs)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "layer_outputs[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "multiply_849": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(values=layer_outputs, axis=self._axis)",
                            "Call"
                        ],
                        [
                            "layer_outputs[0]",
                            "Subscript"
                        ],
                        [
                            "layer_outputs[0]",
                            "Subscript"
                        ],
                        [
                            "tf.add(outputs, layer_outputs[i])",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(_concat, axis=self._axis)",
                            "Call"
                        ],
                        [
                            "tf.multiply(outputs, layer_outputs[i])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(_concat, axis=self._axis)",
                            "Call"
                        ],
                        [
                            "tf.reduce_prod(_concat, axis=self._axis)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(_concat, axis=self._axis)",
                            "Call"
                        ],
                        [
                            "tf.reduce_min(_concat, axis=self._axis)",
                            "Call"
                        ],
                        [
                            "tf.reduce_all(_concat, axis=self._axis)",
                            "Call"
                        ],
                        [
                            "tf.reduce_any(_concat, axis=self._axis)",
                            "Call"
                        ],
                        [
                            "tf.reduce_logsumexp(_concat, axis=self._axis)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "layer(outputs, training=training)",
                            "Call"
                        ],
                        [
                            "layer(inputs)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "layer_outputs[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "concat_851": {
                "variable": {
                    "value": "_concat",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "layer_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[layer_outputs]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "self._axis",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_852": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "_concat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(values=layer_outputs, axis=self._axis)",
                            "Call"
                        ],
                        [
                            "tf.concat(values=layer_outputs, axis=self._axis)",
                            "Call"
                        ],
                        [
                            "tf.concat(values=layer_outputs, axis=self._axis)",
                            "Call"
                        ],
                        [
                            "tf.concat(values=layer_outputs, axis=self._axis)",
                            "Call"
                        ],
                        [
                            "tf.concat(values=layer_outputs, axis=self._axis)",
                            "Call"
                        ],
                        [
                            "tf.concat(values=layer_outputs, axis=self._axis)",
                            "Call"
                        ],
                        [
                            "tf.concat(values=layer_outputs, axis=self._axis)",
                            "Call"
                        ],
                        [
                            "tf.concat(values=layer_outputs, axis=self._axis)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "self._axis",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_1201": {
                "x": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "concat_854": {
                "variable": {
                    "value": "_concat",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "layer_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[layer_outputs]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "self._axis",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_855": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "_concat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(values=layer_outputs, axis=self._axis)",
                            "Call"
                        ],
                        [
                            "tf.concat(values=layer_outputs, axis=self._axis)",
                            "Call"
                        ],
                        [
                            "tf.concat(values=layer_outputs, axis=self._axis)",
                            "Call"
                        ],
                        [
                            "tf.concat(values=layer_outputs, axis=self._axis)",
                            "Call"
                        ],
                        [
                            "tf.concat(values=layer_outputs, axis=self._axis)",
                            "Call"
                        ],
                        [
                            "tf.concat(values=layer_outputs, axis=self._axis)",
                            "Call"
                        ],
                        [
                            "tf.concat(values=layer_outputs, axis=self._axis)",
                            "Call"
                        ],
                        [
                            "tf.concat(values=layer_outputs, axis=self._axis)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "self._axis",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_857": {
                "variable": {
                    "value": "_concat",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "layer_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[layer_outputs]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "self._axis",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_prod_858": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "_concat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(values=layer_outputs, axis=self._axis)",
                            "Call"
                        ],
                        [
                            "tf.concat(values=layer_outputs, axis=self._axis)",
                            "Call"
                        ],
                        [
                            "tf.concat(values=layer_outputs, axis=self._axis)",
                            "Call"
                        ],
                        [
                            "tf.concat(values=layer_outputs, axis=self._axis)",
                            "Call"
                        ],
                        [
                            "tf.concat(values=layer_outputs, axis=self._axis)",
                            "Call"
                        ],
                        [
                            "tf.concat(values=layer_outputs, axis=self._axis)",
                            "Call"
                        ],
                        [
                            "tf.concat(values=layer_outputs, axis=self._axis)",
                            "Call"
                        ],
                        [
                            "tf.concat(values=layer_outputs, axis=self._axis)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "self._axis",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_860": {
                "variable": {
                    "value": "_concat",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "layer_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[layer_outputs]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "self._axis",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_max_861": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "_concat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(values=layer_outputs, axis=self._axis)",
                            "Call"
                        ],
                        [
                            "tf.concat(values=layer_outputs, axis=self._axis)",
                            "Call"
                        ],
                        [
                            "tf.concat(values=layer_outputs, axis=self._axis)",
                            "Call"
                        ],
                        [
                            "tf.concat(values=layer_outputs, axis=self._axis)",
                            "Call"
                        ],
                        [
                            "tf.concat(values=layer_outputs, axis=self._axis)",
                            "Call"
                        ],
                        [
                            "tf.concat(values=layer_outputs, axis=self._axis)",
                            "Call"
                        ],
                        [
                            "tf.concat(values=layer_outputs, axis=self._axis)",
                            "Call"
                        ],
                        [
                            "tf.concat(values=layer_outputs, axis=self._axis)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "self._axis",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_863": {
                "variable": {
                    "value": "_concat",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "layer_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[layer_outputs]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "self._axis",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_min_864": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "_concat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(values=layer_outputs, axis=self._axis)",
                            "Call"
                        ],
                        [
                            "tf.concat(values=layer_outputs, axis=self._axis)",
                            "Call"
                        ],
                        [
                            "tf.concat(values=layer_outputs, axis=self._axis)",
                            "Call"
                        ],
                        [
                            "tf.concat(values=layer_outputs, axis=self._axis)",
                            "Call"
                        ],
                        [
                            "tf.concat(values=layer_outputs, axis=self._axis)",
                            "Call"
                        ],
                        [
                            "tf.concat(values=layer_outputs, axis=self._axis)",
                            "Call"
                        ],
                        [
                            "tf.concat(values=layer_outputs, axis=self._axis)",
                            "Call"
                        ],
                        [
                            "tf.concat(values=layer_outputs, axis=self._axis)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "self._axis",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_866": {
                "variable": {
                    "value": "_concat",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "layer_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[layer_outputs]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "self._axis",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_all_867": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "_concat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(values=layer_outputs, axis=self._axis)",
                            "Call"
                        ],
                        [
                            "tf.concat(values=layer_outputs, axis=self._axis)",
                            "Call"
                        ],
                        [
                            "tf.concat(values=layer_outputs, axis=self._axis)",
                            "Call"
                        ],
                        [
                            "tf.concat(values=layer_outputs, axis=self._axis)",
                            "Call"
                        ],
                        [
                            "tf.concat(values=layer_outputs, axis=self._axis)",
                            "Call"
                        ],
                        [
                            "tf.concat(values=layer_outputs, axis=self._axis)",
                            "Call"
                        ],
                        [
                            "tf.concat(values=layer_outputs, axis=self._axis)",
                            "Call"
                        ],
                        [
                            "tf.concat(values=layer_outputs, axis=self._axis)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "self._axis",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_869": {
                "variable": {
                    "value": "_concat",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "layer_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[layer_outputs]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "self._axis",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_any_870": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "_concat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(values=layer_outputs, axis=self._axis)",
                            "Call"
                        ],
                        [
                            "tf.concat(values=layer_outputs, axis=self._axis)",
                            "Call"
                        ],
                        [
                            "tf.concat(values=layer_outputs, axis=self._axis)",
                            "Call"
                        ],
                        [
                            "tf.concat(values=layer_outputs, axis=self._axis)",
                            "Call"
                        ],
                        [
                            "tf.concat(values=layer_outputs, axis=self._axis)",
                            "Call"
                        ],
                        [
                            "tf.concat(values=layer_outputs, axis=self._axis)",
                            "Call"
                        ],
                        [
                            "tf.concat(values=layer_outputs, axis=self._axis)",
                            "Call"
                        ],
                        [
                            "tf.concat(values=layer_outputs, axis=self._axis)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "self._axis",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_872": {
                "variable": {
                    "value": "_concat",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "layer_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[layer_outputs]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "self._axis",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_logsumexp_873": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "_concat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(values=layer_outputs, axis=self._axis)",
                            "Call"
                        ],
                        [
                            "tf.concat(values=layer_outputs, axis=self._axis)",
                            "Call"
                        ],
                        [
                            "tf.concat(values=layer_outputs, axis=self._axis)",
                            "Call"
                        ],
                        [
                            "tf.concat(values=layer_outputs, axis=self._axis)",
                            "Call"
                        ],
                        [
                            "tf.concat(values=layer_outputs, axis=self._axis)",
                            "Call"
                        ],
                        [
                            "tf.concat(values=layer_outputs, axis=self._axis)",
                            "Call"
                        ],
                        [
                            "tf.concat(values=layer_outputs, axis=self._axis)",
                            "Call"
                        ],
                        [
                            "tf.concat(values=layer_outputs, axis=self._axis)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "self._axis",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "texar_repo/texar/core/layers_test.py": {
        "tensorflow": {
            "placeholder_50": {
                "variable": {
                    "value": "keep_prob_x",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "keep_prob",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_72": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, emb_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_109": {
                "variable": {
                    "value": "mode",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_114": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, emb_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "leaky_relu_145": {
                "variable": {
                    "value": "ref_output",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros([batch_size, emb_dim], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.zeros([batch_size, emb_dim], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.random_uniform([64, 100], -5, 20, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.random_uniform([self._batch_size, self._seq_length, self._emb_dim])",
                            "Call"
                        ],
                        [
                            "tf.random_uniform([self._batch_size, self._seq_length, self._emb_dim])",
                            "Call"
                        ],
                        [
                            "tf.zeros([64, 16, 1024], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.zeros([64, 16, 1024], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.zeros([10, 20], dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "leaky_relu_153": {
                "variable": {
                    "value": "ref_output",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros([batch_size, emb_dim], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.zeros([batch_size, emb_dim], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.random_uniform([64, 100], -5, 20, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.random_uniform([self._batch_size, self._seq_length, self._emb_dim])",
                            "Call"
                        ],
                        [
                            "tf.random_uniform([self._batch_size, self._seq_length, self._emb_dim])",
                            "Call"
                        ],
                        [
                            "tf.zeros([64, 16, 1024], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.zeros([64, 16, 1024], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.zeros([10, 20], dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "alpha": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reduce_max_216": {
                "variable": {
                    "value": "output_reduce",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros([batch_size, emb_dim], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.zeros([batch_size, emb_dim], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.random_uniform([64, 100], -5, 20, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.random_uniform([self._batch_size, self._seq_length, self._emb_dim])",
                            "Call"
                        ],
                        [
                            "tf.random_uniform([self._batch_size, self._seq_length, self._emb_dim])",
                            "Call"
                        ],
                        [
                            "tf.zeros([64, 16, 1024], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.zeros([64, 16, 1024], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.zeros([10, 20], dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_234": {
                "variable": {
                    "value": "output_reduce",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros([batch_size, emb_dim], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.zeros([batch_size, emb_dim], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.random_uniform([64, 100], -5, 20, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.random_uniform([self._batch_size, self._seq_length, self._emb_dim])",
                            "Call"
                        ],
                        [
                            "tf.random_uniform([self._batch_size, self._seq_length, self._emb_dim])",
                            "Call"
                        ],
                        [
                            "tf.zeros([64, 16, 1024], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.zeros([64, 16, 1024], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.zeros([10, 20], dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_276": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[64, 16, 1024]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_298": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[64, 16, 1024]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_319": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[10, 20]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "main_333": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LSTMCell_36": {
                "units": {
                    "value": "num_units",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ]
                    ]
                }
            },
            "Conv1D_191": {
                "filters": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1D_269": {
                "filters": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1D_270": {
                "filters": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1D_271": {
                "filters": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dense_272": {
                "units": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dense_273": {
                "units": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1D_291": {
                "filters": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1D_292": {
                "filters": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1D_293": {
                "filters": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dense_294": {
                "units": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dense_295": {
                "units": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dense_312": {
                "units": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dense_313": {
                "units": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                }
            },
            "global_variables_initializer_76": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_118": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_147": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_155": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_221": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_239": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_279": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_326": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "texar_repo/texar/core/optimization.py": {
        "tensorflow": {
            "to_int32_262": {
                "variable": {
                    "value": "start_step",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "hparams['start_decay_step']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "to_int32_263": {
                "variable": {
                    "value": "end_step",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "hparams['end_decay_step']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "maximum_275": {
                "variable": {
                    "value": "offset_global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.minimum(tf.to_int32(global_step), end_step) - start_step",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "scalar_404": {
                "name": {
                    "value": "learning_rate",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt_hparams['kwargs'].get('learning_rate', None)",
                            "Call"
                        ],
                        [
                            "opt_argspec.get('learning_rate', None)",
                            "Call"
                        ],
                        [
                            "lr_decay_fn(learning_rate=static_lr, global_step=global_step)",
                            "Call"
                        ],
                        [
                            "static_lr",
                            "variable"
                        ],
                        [
                            "_get_static_lr(learning_rate, optimizer_class, hparams)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "maximum_287": {
                "variable": {
                    "value": "decayed_lr",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "decayed_lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "decay_fn(x=offset_global_step, **fn_kwargs)",
                            "Call"
                        ],
                        [
                            "utils.call_function_with_redundant_kwargs(decay_fn, fn_kwargs_)",
                            "Call"
                        ],
                        [
                            "tf.maximum(decayed_lr, hparams['min_learning_rate'])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "hparams['min_learning_rate']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "name_scope_513": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'AdamWeightDecayOptimizer'",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_521": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "param_name + '/adam_m'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "param.shape.as_list()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_527": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "param_name + '/adam_v'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "param.shape.as_list()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "minimum_276": {
                "x": {
                    "value": "tf.to_int32(global_step)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "end_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_int32(hparams['end_decay_step'])",
                            "Call"
                        ]
                    ]
                }
            },
            "to_int32_276": {
                "x": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "multiply_535": {
                "x": {
                    "value": "self.beta_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name=param_name + '/adam_m', shape=param.shape.as_list(), dtype=tf.float32, trainable=False, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "re.match('^(.*):\\\\d+$', param_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_536": {
                "x": {
                    "value": "1.0 - self.beta_1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "multiply_538": {
                "x": {
                    "value": "self.beta_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name=param_name + '/adam_v', shape=param.shape.as_list(), dtype=tf.float32, trainable=False, initializer=tf.zeros_initializer())",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_539": {
                "x": {
                    "value": "1.0 - self.beta_2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.square(grad)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "control_dependencies_568": {
                "control_inputs": {
                    "value": "[self._finish(update_ops, 'update')]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "assign_add_571": {
                "variable": {
                    "value": "apply_updates",
                    "type": "variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'AdamWeightDecayOptimizer'",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_initializer_526": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_532": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "square_540": {
                "x": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sqrt_542": {
                "x": {
                    "value": "next_v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(self.beta_2, v) + tf.multiply(1.0 - self.beta_2, tf.square(grad))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "colocate_with_570": {
                "op": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "texar_repo/texar/core/optimization_test.py": {
        "tensorflow": {
            "piecewise_constant_85": {
                "variable": {
                    "value": "pc_lr_true",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "global_step - hparams['start_decay_step']",
                    "type": "BinOp",
                    "possible_values": []
                },
                "boundaries": {
                    "value": "boundaries",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[2, 4]",
                            "List"
                        ]
                    ]
                },
                "values": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[0.1, 0.01, 0.001]",
                            "List"
                        ]
                    ]
                }
            },
            "natural_exp_decay_95": {
                "variable": {
                    "value": "ned_lr_true",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "global_step": {
                    "value": "global_step - hparams['start_decay_step']",
                    "type": "BinOp",
                    "possible_values": []
                },
                "decay_steps": {
                    "value": "hparams['kwargs']['decay_steps']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "decay_rate": {
                    "value": "hparams['kwargs']['decay_rate']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "clip_by_global_norm_125": {
                "variable": {
                    "value": "(gn_grads_true, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tf.random_uniform([10, 10], -1.0, 1.0) for _ in range(5)]",
                            "ListComp"
                        ]
                    ]
                },
                "clip_norm": {
                    "value": "hparams['kwargs']['clip_norm']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "clip_by_value_138": {
                "variable": {
                    "value": "v_grads_true",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tf.random_uniform([10, 10], -1.0, 1.0) for _ in range(5)]",
                            "ListComp"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "hparams['kwargs']['clip_value_min']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "hparams['kwargs']['clip_value_max']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Variable_152": {
                "variable": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "l2_loss_153": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(0.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "main_158": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MomentumOptimizer_56": {
                "learning_rate": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "is_tensor_155": {
                "x": {
                    "value": "train_op",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt.get_train_op(loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_100": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_143": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "texar_repo/texar/data/data/data_base.py": {
        "tensorflow": {}
    },
    "texar_repo/texar/data/data/data_iterators.py": {
        "tensorflow": {
            "placeholder_326": {
                "variable": {
                    "value": "self._handle",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "handle",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_137": {
                "name_or_scope": {
                    "value": "self._variable_scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_325": {
                "name_or_scope": {
                    "value": "self._variable_scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "texar_repo/texar/data/data/data_iterators_test.py": {
        "tensorflow": {
            "main_298": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_86": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_87": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tables_initializer_88": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_116": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_117": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tables_initializer_118": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_162": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_163": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tables_initializer_164": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_206": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_207": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tables_initializer_208": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_258": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_259": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tables_initializer_260": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "as_text_97": {
                "bytes_or_text": {
                    "value": "data_batch_['text'][0][0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "as_text_128": {
                "bytes_or_text": {
                    "value": "data_batch_['text'][0][0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "as_text_143": {
                "bytes_or_text": {
                    "value": "data_batch_['text'][0][0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "as_text_173": {
                "bytes_or_text": {
                    "value": "data_batch_['text'][0][0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "as_text_187": {
                "bytes_or_text": {
                    "value": "data_batch_['text'][0][0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "as_text_222": {
                "bytes_or_text": {
                    "value": "data_batch_['text'][0][0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "as_text_239": {
                "bytes_or_text": {
                    "value": "data_batch_['text'][0][0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "as_text_272": {
                "bytes_or_text": {
                    "value": "data_batch_['text'][0][0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "as_text_289": {
                "bytes_or_text": {
                    "value": "data_batch_['text'][0][0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "texar_repo/texar/data/data/dataset_utils.py": {
        "tensorflow": {
            "shuffle_260": {
                "variable": {
                    "value": "sharded_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "num_shards",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.ceildiv(dataset_size, shard_size)",
                            "Call"
                        ]
                    ]
                },
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_all_138": {
                "input_tensor": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "equal_114": {
                "x": {
                    "value": "tf.shape(data)[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_any_140": {
                "input_tensor": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "shape_114": {
                "input": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tuple(data)",
                            "Call"
                        ],
                        [
                            "data if len(data) > 1 else data[0]",
                            "IfExp"
                        ],
                        [
                            "tran_fns_i(data, *args, **kwargs)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "texar_repo/texar/data/data/dataset_utils_test.py": {
        "tensorflow": {
            "main_56": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "texar_repo/texar/data/data/mono_text_data.py": {
        "tensorflow": {
            "TextLineDataset_343": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "filenames": {
                    "value": "dataset_hparams['files']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "compression_type": {
                    "value": "dataset_hparams['compression_type']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "self._hparams.dataset",
                            "Attribute"
                        ]
                    ]
                }
            },
            "name_scope_146": {
                "name": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorShape_471": {
                "dims": {
                    "value": "max_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset_hparams['max_seq_length']",
                            "Subscript"
                        ],
                        [
                            "max_length + decoder.added_length",
                            "BinOp"
                        ],
                        [
                            "dataset_hparams['max_seq_length']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "TensorShape_477": {
                "dims": {
                    "value": "[padded_shapes[name][0], max_length]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "texar_repo/texar/data/data/mono_text_data_test.py": {
        "tensorflow": {
            "main_353": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_66": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_67": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tables_initializer_68": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_153": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_154": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tables_initializer_155": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_304": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_305": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tables_initializer_306": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "texar_repo/texar/data/data/multi_aligned_data.py": {
        "tensorflow": {
            "name_scope_132": {
                "name": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TextLineDataset_328": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "filenames": {
                    "value": "hparams_i.files",
                    "type": "Attribute",
                    "possible_values": []
                },
                "compression_type": {
                    "value": "hparams_i.compression_type",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "texar_repo/texar/data/data/multi_aligned_data_test.py": {
        "tensorflow": {
            "main_179": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_106": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_107": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tables_initializer_108": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "texar_repo/texar/data/data/paired_text_data.py": {
        "tensorflow": {
            "TextLineDataset_300": {
                "variable": {
                    "value": "src_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "filenames": {
                    "value": "self._hparams.source_dataset.files",
                    "type": "Attribute",
                    "possible_values": []
                },
                "compression_type": {
                    "value": "self._hparams.source_dataset.compression_type",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TextLineDataset_303": {
                "variable": {
                    "value": "tgt_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "filenames": {
                    "value": "self._hparams.target_dataset.files",
                    "type": "Attribute",
                    "possible_values": []
                },
                "compression_type": {
                    "value": "self._hparams.target_dataset.compression_type",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_140": {
                "name": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "maximum_394": {
                "x": {
                    "value": "x[self.source_length_name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "x[self.target_length_name]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "texar_repo/texar/data/data/paired_text_data_test.py": {
        "tensorflow": {
            "main_211": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_77": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_78": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tables_initializer_79": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "texar_repo/texar/data/data/scalar_data.py": {
        "tensorflow": {
            "name_scope_91": {
                "name": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "texar_repo/texar/data/data/scalar_data_test.py": {
        "tensorflow": {
            "main_138": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_71": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tables_initializer_72": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_116": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_117": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tables_initializer_118": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "texar_repo/texar/data/data/text_data_base.py": {
        "tensorflow": {
            "bucket_by_sequence_length_77": {
                "element_length_func": {
                    "value": "element_length_func",
                    "type": "variable",
                    "possible_values": []
                },
                "bucket_boundaries": {
                    "value": "bucket_boundaries",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hparams['bucket_boundaries']",
                            "Subscript"
                        ]
                    ]
                },
                "bucket_batch_sizes": {
                    "value": "bucket_batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hparams['bucket_batch_sizes']",
                            "Subscript"
                        ],
                        [
                            "[batch_size] * (len(bucket_boundaries) + 1)",
                            "BinOp"
                        ]
                    ]
                },
                "padded_shapes": {
                    "value": "padded_shapes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset.output_shapes",
                            "Attribute"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "padding_values": {
                    "value": "padding_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "texar_repo/texar/data/data_decoders.py": {
        "tensorflow": {
            "reshape_77": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(data, shape=[])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "map_fn_355": {
                "variable": {
                    "value": "raw_sent_length",
                    "type": "variable",
                    "possible_values": []
                },
                "fn": {
                    "value": "_get_sent_length",
                    "type": "variable",
                    "possible_values": []
                },
                "elems": {
                    "value": "sentences",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.string_split([data], delimiter=self._sentence_delimiter).values",
                            "Attribute"
                        ],
                        [
                            "sentences[:self._max_utterance_cnt]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "map_fn_381": {
                "variable": {
                    "value": "split_sentences",
                    "type": "variable",
                    "possible_values": []
                },
                "fn": {
                    "value": "lambda s: tf.py_func(_trunc_and_pad, [tf.string_split([s], delimiter=self._delimiter).values, SpecialTokens.PAD, sent_length], tf.string)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "elems": {
                    "value": "sentences",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.string_split([data], delimiter=self._sentence_delimiter).values",
                            "Attribute"
                        ],
                        [
                            "sentences[:self._max_utterance_cnt]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_393": {
                "variable": {
                    "value": "split_sentences",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "split_sentences",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.map_fn(lambda s: tf.py_func(_trunc_and_pad, [tf.string_split([s], delimiter=self._delimiter).values, SpecialTokens.PAD, sent_length], tf.string), sentences, dtype=tf.string)",
                            "Call"
                        ],
                        [
                            "tf.reshape(split_sentences, [utterance_cnt, sent_length])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[utterance_cnt, sent_length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "string_to_number_79": {
                "variable": {
                    "value": "decoded_data",
                    "type": "variable",
                    "possible_values": []
                },
                "string_tensor": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(data, shape=[])",
                            "Call"
                        ]
                    ]
                },
                "out_type": {
                    "value": "self._dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_187": {
                "variable": {
                    "value": "tokens",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[[self._bos_token], tokens]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_190": {
                "variable": {
                    "value": "tokens",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tokens, [self._eos_token]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "size_348": {
                "variable": {
                    "value": "raw_length",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.string_split([s], delimiter=self._delimiter).values",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_max_359": {
                "variable": {
                    "value": "sent_length",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "raw_sent_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.map_fn(_get_sent_length, sentences, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "raw_sent_length + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "size_200": {
                "input": {
                    "value": "tokens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.string_split([data], delimiter=self._delimiter).values",
                            "Attribute"
                        ],
                        [
                            "tokens[:self._max_seq_length]",
                            "Subscript"
                        ],
                        [
                            "tf.concat([[self._bos_token], tokens], axis=0)",
                            "Call"
                        ],
                        [
                            "tf.concat([tokens, [self._eos_token]], axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "string_split_338": {
                "source": {
                    "value": "[data]",
                    "type": "List",
                    "possible_values": []
                },
                "delimiter": {
                    "value": "self._sentence_delimiter",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_344": {
                "input": {
                    "value": "sentences",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.string_split([data], delimiter=self._sentence_delimiter).values",
                            "Attribute"
                        ],
                        [
                            "sentences[:self._max_utterance_cnt]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cast_81": {
                "x": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(data, shape=[])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self._dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "string_split_175": {
                "source": {
                    "value": "[data]",
                    "type": "List",
                    "possible_values": []
                },
                "delimiter": {
                    "value": "self._delimiter",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "minimum_351": {
                "x": {
                    "value": "raw_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.size(tf.string_split([s], delimiter=self._delimiter).values)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "self._max_seq_length",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "py_func_382": {
                "func": {
                    "value": "_trunc_and_pad",
                    "type": "variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[tf.string_split([s], delimiter=self._delimiter).values, SpecialTokens.PAD, sent_length]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_404": {
                "input": {
                    "value": "sentences",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.string_split([data], delimiter=self._sentence_delimiter).values",
                            "Attribute"
                        ],
                        [
                            "sentences[:self._max_utterance_cnt]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "string_split_349": {
                "source": {
                    "value": "[s]",
                    "type": "List",
                    "possible_values": []
                },
                "delimiter": {
                    "value": "self._delimiter",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "string_split_385": {
                "source": {
                    "value": "[s]",
                    "type": "List",
                    "possible_values": []
                },
                "delimiter": {
                    "value": "self._delimiter",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "texar_repo/texar/data/data_utils.py": {
        "tensorflow": {
            "GFile_152": {
                "name": {
                    "value": "filepath",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(path, filename)",
                            "Call"
                        ],
                        [
                            "_download_from_google_drive(url, filename, path)",
                            "Call"
                        ],
                        [
                            "_download(url, filename, path)",
                            "Call"
                        ],
                        [
                            "os.path.join(path, filename)",
                            "Call"
                        ],
                        [
                            "os.path.join(path, filename)",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "wb",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GFile_174": {
                "name": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filenames[i]",
                            "Subscript"
                        ],
                        [
                            "_extract_google_drive_file_id(url)",
                            "Call"
                        ],
                        [
                            "url.split('/')[-1]",
                            "Subscript"
                        ],
                        [
                            "filename[:-9]",
                            "Subscript"
                        ]
                    ]
                },
                "mode": {
                    "value": "r",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Exists_88": {
                "filename": {
                    "value": "filepath",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(path, filename)",
                            "Call"
                        ],
                        [
                            "_download_from_google_drive(url, filename, path)",
                            "Call"
                        ],
                        [
                            "_download(url, filename, path)",
                            "Call"
                        ],
                        [
                            "os.path.join(path, filename)",
                            "Call"
                        ],
                        [
                            "os.path.join(path, filename)",
                            "Call"
                        ]
                    ]
                }
            },
            "info_95": {
                "msg": {
                    "value": "Extract %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "filepath",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(path, filename)",
                            "Call"
                        ],
                        [
                            "_download_from_google_drive(url, filename, path)",
                            "Call"
                        ],
                        [
                            "_download(url, filename, path)",
                            "Call"
                        ],
                        [
                            "os.path.join(path, filename)",
                            "Call"
                        ],
                        [
                            "os.path.join(path, filename)",
                            "Call"
                        ]
                    ]
                }
            },
            "info_102": {
                "msg": {
                    "value": "Unknown compression type. Only .tar.gz, .tar.bz2, .tar, and .zip are supported",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "texar_repo/texar/data/data_utils_test.py": {
        "tensorflow": {
            "main_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "texar_repo/texar/data/embedding.py": {
        "tensorflow": {
            "GFile_52": {
                "name": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "rb",
                    "type": "str",
                    "possible_values": []
                }
            },
            "as_text_68": {
                "variable": {
                    "value": "word",
                    "type": "variable",
                    "possible_values": []
                },
                "bytes_or_text": {
                    "value": "word",
                    "type": "variable",
                    "possible_values": [
                        [
                            "b''.join(chars)",
                            "Call"
                        ],
                        [
                            "tf.compat.as_text(word)",
                            "Call"
                        ],
                        [
                            "tf.compat.as_text(word)",
                            "Call"
                        ]
                    ]
                }
            },
            "GFile_91": {
                "name": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "as_text_97": {
                "variable": {
                    "value": "word",
                    "type": "variable",
                    "possible_values": []
                },
                "bytes_or_text": {
                    "value": "word",
                    "type": "variable",
                    "possible_values": [
                        [
                            "b''.join(chars)",
                            "Call"
                        ],
                        [
                            "tf.compat.as_text(word)",
                            "Call"
                        ],
                        [
                            "tf.compat.as_text(word)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "texar_repo/texar/data/embedding_test.py": {
        "tensorflow": {
            "main_88": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "as_bytes_65": {
                "bytes_or_text": {
                    "value": "header + '\\n'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "as_bytes_67": {
                "bytes_or_text": {
                    "value": "word + ' '",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "texar_repo/texar/data/vocabulary.py": {
        "tensorflow": {
            "HashTable_155": {
                "variable": {
                    "value": "id_to_token_map",
                    "type": "variable",
                    "possible_values": []
                },
                "key_dtype": {
                    "value": "tf.contrib.lookup.KeyValueTensorInitializer(vocab_idx, vocab, key_dtype=tf.int64, value_dtype=tf.string)",
                    "type": "Call",
                    "possible_values": []
                },
                "value_dtype": {
                    "value": "self._unk_token",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "HashTable_160": {
                "variable": {
                    "value": "token_to_id_map",
                    "type": "variable",
                    "possible_values": []
                },
                "key_dtype": {
                    "value": "tf.contrib.lookup.KeyValueTensorInitializer(vocab, vocab_idx, key_dtype=tf.string, value_dtype=tf.int64)",
                    "type": "Call",
                    "possible_values": []
                },
                "value_dtype": {
                    "value": "unk_token_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ]
                    ]
                }
            },
            "GFile_125": {
                "name": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "KeyValueTensorInitializer_156": {
                "keys": {
                    "value": "vocab_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.arange(vocab_size)",
                            "Call"
                        ]
                    ]
                },
                "values": {
                    "value": "vocab",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list((tf.compat.as_text(line.strip()) for line in vocab_file))",
                            "Call"
                        ],
                        [
                            "[self._pad_token, self._bos_token, self._eos_token, self._unk_token] + vocab",
                            "BinOp"
                        ]
                    ]
                },
                "key_dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value_dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "KeyValueTensorInitializer_161": {
                "keys": {
                    "value": "vocab",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list((tf.compat.as_text(line.strip()) for line in vocab_file))",
                            "Call"
                        ],
                        [
                            "[self._pad_token, self._bos_token, self._eos_token, self._unk_token] + vocab",
                            "BinOp"
                        ]
                    ]
                },
                "values": {
                    "value": "vocab_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.arange(vocab_size)",
                            "Call"
                        ]
                    ]
                },
                "key_dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value_dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "to_int64_185": {
                "x": {
                    "value": "ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "as_text_127": {
                "bytes_or_text": {
                    "value": "line.strip()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "texar_repo/texar/data/vocabulary_test.py": {
        "tensorflow": {
            "main_59": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "texar_repo/texar/evals/bleu_moses.py": {
        "tensorflow": {
            "warning_154": {
                "msg": {
                    "value": "multi-bleu.perl returned non-zero exit code",
                    "type": "str",
                    "possible_values": []
                }
            },
            "warning_156": {
                "msg": {
                    "value": "error.output",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "texar_repo/texar/evals/bleu_test.py": {
        "tensorflow": {
            "main_123": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "texar_repo/texar/evals/metrics.py": {
        "tensorflow": {
            "cast_28": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(labels, preds.dtype)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "preds.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "to_float_47": {
                "variable": {
                    "value": "psize",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.size(pos_preds)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "to_float_48": {
                "variable": {
                    "value": "nsize",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.size(neg_preds)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_29": {
                "input_tensor": {
                    "value": "tf.to_float(tf.equal(preds, labels))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "to_float_29": {
                "x": {
                    "value": "tf.equal(preds, labels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_like_45": {
                "input": {
                    "value": "pos_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_46": {
                "input": {
                    "value": "neg_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "size_47": {
                "input": {
                    "value": "pos_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "size_48": {
                "input": {
                    "value": "neg_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "equal_29": {
                "x": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(labels, preds.dtype)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "texar_repo/texar/hyperparams_test.py": {
        "tensorflow": {
            "main_173": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "texar_repo/texar/losses/adv_losses.py": {
        "tensorflow": {
            "reduce_mean_60": {
                "variable": {
                    "value": "real_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(logits=real_logits, labels=tf.ones_like(real_logits))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_66": {
                "variable": {
                    "value": "fake_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(logits=fake_logits, labels=tf.zeros_like(fake_logits))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_60": {
                "logits": {
                    "value": "real_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "discriminator_fn(real_data)",
                            "Call"
                        ],
                        [
                            "real_logits[0]",
                            "Subscript"
                        ]
                    ]
                },
                "labels": {
                    "value": "tf.ones_like(real_logits)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_66": {
                "logits": {
                    "value": "fake_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "discriminator_fn(fake_data)",
                            "Call"
                        ],
                        [
                            "fake_logits[0]",
                            "Subscript"
                        ]
                    ]
                },
                "labels": {
                    "value": "tf.zeros_like(fake_logits)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_74": {
                "variable": {
                    "value": "g_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(logits=fake_logits, labels=tf.ones_like(fake_logits))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_like_61": {
                "input": {
                    "value": "real_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "discriminator_fn(real_data)",
                            "Call"
                        ],
                        [
                            "real_logits[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_like_67": {
                "input": {
                    "value": "fake_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "discriminator_fn(fake_data)",
                            "Call"
                        ],
                        [
                            "fake_logits[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sigmoid_cross_entropy_with_logits_74": {
                "logits": {
                    "value": "fake_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "discriminator_fn(fake_data)",
                            "Call"
                        ],
                        [
                            "fake_logits[0]",
                            "Subscript"
                        ]
                    ]
                },
                "labels": {
                    "value": "tf.ones_like(fake_logits)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_like_75": {
                "input": {
                    "value": "fake_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "discriminator_fn(fake_data)",
                            "Call"
                        ],
                        [
                            "fake_logits[0]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "texar_repo/texar/losses/adv_losses_test.py": {
        "tensorflow": {
            "zeros_22": {
                "variable": {
                    "value": "real_data",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, data_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_23": {
                "variable": {
                    "value": "fake_data",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, data_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_24": {
                "variable": {
                    "value": "const_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "main_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "texar_repo/texar/losses/entropy.py": {
        "tensorflow": {
            "reduce_sum_37": {
                "variable": {
                    "value": "entropy",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "entropy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-probs * tf.log(probs)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(entropy, -1)",
                            "Call"
                        ],
                        [
                            "_get_entropy(logits)",
                            "Call"
                        ],
                        [
                            "reduce_dimensions(entropy, average_axes=average_axes, sum_axes=sum_axes)",
                            "Call"
                        ],
                        [
                            "_get_entropy(logits)",
                            "Call"
                        ],
                        [
                            "mask_and_reduce(entropy, sequence_length, rank=rank, average_across_batch=average_across_batch, average_across_timesteps=average_across_timesteps, average_across_remaining=average_across_remaining, sum_over_batch=sum_over_batch, sum_over_timesteps=sum_over_timesteps, sum_over_remaining=sum_over_remaining, time_major=time_major)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_35": {
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "log_36": {
                "x": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(logits) + 1e-08",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "texar_repo/texar/losses/losses_utils.py": {
        "tensorflow": {
            "reduce_sum_149": {
                "variable": {
                    "value": "sequence",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "sequence",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rnn._transpose_batch_time(sequence)",
                            "Call"
                        ],
                        [
                            "mask_sequences(sequence, sequence_length, dtype=dtype, time_major=False, tensor_rank=rank)",
                            "Call"
                        ],
                        [
                            "reduce_batch_time(sequence, sequence_length, average_across_batch, average_across_timesteps, sum_over_batch, sum_over_timesteps)",
                            "Call"
                        ],
                        [
                            "rnn._transpose_batch_time(sequence)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(sequence, axis=np.arange(2, rank))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(sequence, axis=np.arange(2, rank))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(sequence, axis=[1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(sequence, axis=[0])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(sequence, axis=[1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(sequence, axis=[1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(sequence, axis=[0])",
                            "Call"
                        ],
                        [
                            "sequence / tf.to_float(sequence_length)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_159": {
                "variable": {
                    "value": "sequence",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "sequence",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rnn._transpose_batch_time(sequence)",
                            "Call"
                        ],
                        [
                            "mask_sequences(sequence, sequence_length, dtype=dtype, time_major=False, tensor_rank=rank)",
                            "Call"
                        ],
                        [
                            "reduce_batch_time(sequence, sequence_length, average_across_batch, average_across_timesteps, sum_over_batch, sum_over_timesteps)",
                            "Call"
                        ],
                        [
                            "rnn._transpose_batch_time(sequence)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(sequence, axis=np.arange(2, rank))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(sequence, axis=np.arange(2, rank))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(sequence, axis=[1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(sequence, axis=[0])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(sequence, axis=[1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(sequence, axis=[1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(sequence, axis=[0])",
                            "Call"
                        ],
                        [
                            "sequence / tf.to_float(sequence_length)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_184": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tensor, axis=average_axes, keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tensor, axis=sum_axes, keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(tensor, axis=reduced_axes)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "average_axes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[average_axes]",
                            "List"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_sum_191": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tensor, axis=average_axes, keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tensor, axis=sum_axes, keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(tensor, axis=reduced_axes)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "sum_axes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[sum_axes]",
                            "List"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_203": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tensor, axis=average_axes, keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tensor, axis=sum_axes, keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(tensor, axis=reduced_axes)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "reduced_axes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "reduced_axes + sum_axes",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_mean_110": {
                "variable": {
                    "value": "sequence",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "sequence",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rnn._transpose_batch_time(sequence)",
                            "Call"
                        ],
                        [
                            "mask_sequences(sequence, sequence_length, dtype=dtype, time_major=False, tensor_rank=rank)",
                            "Call"
                        ],
                        [
                            "reduce_batch_time(sequence, sequence_length, average_across_batch, average_across_timesteps, sum_over_batch, sum_over_timesteps)",
                            "Call"
                        ],
                        [
                            "rnn._transpose_batch_time(sequence)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(sequence, axis=np.arange(2, rank))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(sequence, axis=np.arange(2, rank))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(sequence, axis=[1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(sequence, axis=[0])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(sequence, axis=[1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(sequence, axis=[1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(sequence, axis=[0])",
                            "Call"
                        ],
                        [
                            "sequence / tf.to_float(sequence_length)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "np.arange(2, rank)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_161": {
                "variable": {
                    "value": "sequence",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "sequence",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rnn._transpose_batch_time(sequence)",
                            "Call"
                        ],
                        [
                            "mask_sequences(sequence, sequence_length, dtype=dtype, time_major=False, tensor_rank=rank)",
                            "Call"
                        ],
                        [
                            "reduce_batch_time(sequence, sequence_length, average_across_batch, average_across_timesteps, sum_over_batch, sum_over_timesteps)",
                            "Call"
                        ],
                        [
                            "rnn._transpose_batch_time(sequence)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(sequence, axis=np.arange(2, rank))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(sequence, axis=np.arange(2, rank))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(sequence, axis=[1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(sequence, axis=[0])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(sequence, axis=[1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(sequence, axis=[1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(sequence, axis=[0])",
                            "Call"
                        ],
                        [
                            "sequence / tf.to_float(sequence_length)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_112": {
                "variable": {
                    "value": "sequence",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "sequence",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rnn._transpose_batch_time(sequence)",
                            "Call"
                        ],
                        [
                            "mask_sequences(sequence, sequence_length, dtype=dtype, time_major=False, tensor_rank=rank)",
                            "Call"
                        ],
                        [
                            "reduce_batch_time(sequence, sequence_length, average_across_batch, average_across_timesteps, sum_over_batch, sum_over_timesteps)",
                            "Call"
                        ],
                        [
                            "rnn._transpose_batch_time(sequence)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(sequence, axis=np.arange(2, rank))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(sequence, axis=np.arange(2, rank))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(sequence, axis=[1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(sequence, axis=[0])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(sequence, axis=[1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(sequence, axis=[1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(sequence, axis=[0])",
                            "Call"
                        ],
                        [
                            "sequence / tf.to_float(sequence_length)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "np.arange(2, rank)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_152": {
                "variable": {
                    "value": "sequence",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "sequence",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rnn._transpose_batch_time(sequence)",
                            "Call"
                        ],
                        [
                            "mask_sequences(sequence, sequence_length, dtype=dtype, time_major=False, tensor_rank=rank)",
                            "Call"
                        ],
                        [
                            "reduce_batch_time(sequence, sequence_length, average_across_batch, average_across_timesteps, sum_over_batch, sum_over_timesteps)",
                            "Call"
                        ],
                        [
                            "rnn._transpose_batch_time(sequence)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(sequence, axis=np.arange(2, rank))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(sequence, axis=np.arange(2, rank))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(sequence, axis=[1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(sequence, axis=[0])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(sequence, axis=[1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(sequence, axis=[1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(sequence, axis=[0])",
                            "Call"
                        ],
                        [
                            "sequence / tf.to_float(sequence_length)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_154": {
                "variable": {
                    "value": "sequence",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "sequence",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rnn._transpose_batch_time(sequence)",
                            "Call"
                        ],
                        [
                            "mask_sequences(sequence, sequence_length, dtype=dtype, time_major=False, tensor_rank=rank)",
                            "Call"
                        ],
                        [
                            "reduce_batch_time(sequence, sequence_length, average_across_batch, average_across_timesteps, sum_over_batch, sum_over_timesteps)",
                            "Call"
                        ],
                        [
                            "rnn._transpose_batch_time(sequence)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(sequence, axis=np.arange(2, rank))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(sequence, axis=np.arange(2, rank))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(sequence, axis=[1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(sequence, axis=[0])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(sequence, axis=[1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(sequence, axis=[1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(sequence, axis=[0])",
                            "Call"
                        ],
                        [
                            "sequence / tf.to_float(sequence_length)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_float_156": {
                "x": {
                    "value": "sequence_length",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "texar_repo/texar/losses/mle_losses.py": {
        "tensorflow": {
            "softmax_cross_entropy_with_logits_v2_104": {
                "variable": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stop_gradient(labels)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(labels)",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_with_logits_193": {
                "variable": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stop_gradient(labels)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(labels)",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_284": {
                "variable": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stop_gradient(labels)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(labels)",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "name_scope_100": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stop_gradient_102": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stop_gradient(labels)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_192": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "name_scope_280": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stop_gradient_282": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stop_gradient(labels)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_356": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sigmoid_cross_entropy_with_logits_365": {
                "variable": {
                    "value": "pos_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "pos_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "clas_fn(pos_inputs)",
                            "Call"
                        ],
                        [
                            "pos_logits[0]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "labels": {
                    "value": "tf.ones_like(pos_logits)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_372": {
                "variable": {
                    "value": "neg_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "neg_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "clas_fn(neg_inputs)",
                            "Call"
                        ],
                        [
                            "neg_logits[0]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "labels": {
                    "value": "tf.zeros_like(neg_logits)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_like_366": {
                "input": {
                    "value": "pos_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "clas_fn(pos_inputs)",
                            "Call"
                        ],
                        [
                            "pos_logits[0]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_373": {
                "input": {
                    "value": "neg_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "clas_fn(neg_inputs)",
                            "Call"
                        ],
                        [
                            "neg_logits[0]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "texar_repo/texar/losses/mle_losses_test.py": {
        "tensorflow": {
            "ones_29": {
                "variable": {
                    "value": "self._labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self._batch_size, self._max_time]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "one_hot_31": {
                "variable": {
                    "value": "one_hot_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "self._labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "depth": {
                    "value": "self._num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_33": {
                "variable": {
                    "value": "self._one_hot_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "one_hot_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(self._labels, self._num_classes, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self._batch_size, self._max_time, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_102": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "main_114": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "rank_43": {
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss_fn(labels, logits, sequence_length)",
                            "Call"
                        ],
                        [
                            "loss_fn(labels, logits, sequence_length, sum_over_timesteps=False)",
                            "Call"
                        ],
                        [
                            "loss_fn(labels, logits, sequence_length, sum_over_timesteps=False, average_across_timesteps=True, average_across_batch=False)",
                            "Call"
                        ],
                        [
                            "loss_fn(labels, logits, sequence_length, sum_over_timesteps=False, average_across_batch=False)",
                            "Call"
                        ],
                        [
                            "loss_fn(labels, logits, sequence_length_time, sum_over_timesteps=False, average_across_batch=False, time_major=True)",
                            "Call"
                        ],
                        [
                            "tx.losses.sequence_sigmoid_cross_entropy(logits=self._logits[:, :, 0], labels=tf.to_float(labels), sequence_length=self._sequence_length)",
                            "Call"
                        ]
                    ]
                }
            },
            "rank_48": {
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss_fn(labels, logits, sequence_length)",
                            "Call"
                        ],
                        [
                            "loss_fn(labels, logits, sequence_length, sum_over_timesteps=False)",
                            "Call"
                        ],
                        [
                            "loss_fn(labels, logits, sequence_length, sum_over_timesteps=False, average_across_timesteps=True, average_across_batch=False)",
                            "Call"
                        ],
                        [
                            "loss_fn(labels, logits, sequence_length, sum_over_timesteps=False, average_across_batch=False)",
                            "Call"
                        ],
                        [
                            "loss_fn(labels, logits, sequence_length_time, sum_over_timesteps=False, average_across_batch=False, time_major=True)",
                            "Call"
                        ],
                        [
                            "tx.losses.sequence_sigmoid_cross_entropy(logits=self._logits[:, :, 0], labels=tf.to_float(labels), sequence_length=self._sequence_length)",
                            "Call"
                        ]
                    ]
                }
            },
            "TensorShape_50": {
                "dims": {
                    "value": "[self._max_time]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "rank_55": {
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss_fn(labels, logits, sequence_length)",
                            "Call"
                        ],
                        [
                            "loss_fn(labels, logits, sequence_length, sum_over_timesteps=False)",
                            "Call"
                        ],
                        [
                            "loss_fn(labels, logits, sequence_length, sum_over_timesteps=False, average_across_timesteps=True, average_across_batch=False)",
                            "Call"
                        ],
                        [
                            "loss_fn(labels, logits, sequence_length, sum_over_timesteps=False, average_across_batch=False)",
                            "Call"
                        ],
                        [
                            "loss_fn(labels, logits, sequence_length_time, sum_over_timesteps=False, average_across_batch=False, time_major=True)",
                            "Call"
                        ],
                        [
                            "tx.losses.sequence_sigmoid_cross_entropy(logits=self._logits[:, :, 0], labels=tf.to_float(labels), sequence_length=self._sequence_length)",
                            "Call"
                        ]
                    ]
                }
            },
            "TensorShape_57": {
                "dims": {
                    "value": "[self._batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "rank_62": {
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss_fn(labels, logits, sequence_length)",
                            "Call"
                        ],
                        [
                            "loss_fn(labels, logits, sequence_length, sum_over_timesteps=False)",
                            "Call"
                        ],
                        [
                            "loss_fn(labels, logits, sequence_length, sum_over_timesteps=False, average_across_timesteps=True, average_across_batch=False)",
                            "Call"
                        ],
                        [
                            "loss_fn(labels, logits, sequence_length, sum_over_timesteps=False, average_across_batch=False)",
                            "Call"
                        ],
                        [
                            "loss_fn(labels, logits, sequence_length_time, sum_over_timesteps=False, average_across_batch=False, time_major=True)",
                            "Call"
                        ],
                        [
                            "tx.losses.sequence_sigmoid_cross_entropy(logits=self._logits[:, :, 0], labels=tf.to_float(labels), sequence_length=self._sequence_length)",
                            "Call"
                        ]
                    ]
                }
            },
            "TensorShape_65": {
                "dims": {
                    "value": "[self._batch_size, self._max_time]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_73": {
                "dims": {
                    "value": "[self._batch_size, self._max_time]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_float_105": {
                "x": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(dtype=tf.int32, shape=None)",
                            "Call"
                        ]
                    ]
                }
            },
            "rank_109": {
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss_fn(labels, logits, sequence_length)",
                            "Call"
                        ],
                        [
                            "loss_fn(labels, logits, sequence_length, sum_over_timesteps=False)",
                            "Call"
                        ],
                        [
                            "loss_fn(labels, logits, sequence_length, sum_over_timesteps=False, average_across_timesteps=True, average_across_batch=False)",
                            "Call"
                        ],
                        [
                            "loss_fn(labels, logits, sequence_length, sum_over_timesteps=False, average_across_batch=False)",
                            "Call"
                        ],
                        [
                            "loss_fn(labels, logits, sequence_length_time, sum_over_timesteps=False, average_across_batch=False, time_major=True)",
                            "Call"
                        ],
                        [
                            "tx.losses.sequence_sigmoid_cross_entropy(logits=self._logits[:, :, 0], labels=tf.to_float(labels), sequence_length=self._sequence_length)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "texar_repo/texar/losses/pg_losses.py": {
        "tensorflow": {
            "stop_gradient_119": {
                "variable": {
                    "value": "actions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "actions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stop_gradient(actions)",
                            "Call"
                        ]
                    ]
                }
            },
            "sparse_softmax_cross_entropy_with_logits_120": {
                "variable": {
                    "value": "neg_log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "actions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stop_gradient(actions)",
                            "Call"
                        ]
                    ]
                }
            },
            "stop_gradient_215": {
                "variable": {
                    "value": "advantages",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "advantages",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stop_gradient(advantages)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_250": {
                "variable": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-log_probs * advantages",
                            "BinOp"
                        ],
                        [
                            "mask_and_reduce(losses, sequence_length, rank=rank, average_across_batch=average_across_batch, average_across_timesteps=average_across_timesteps, average_across_remaining=average_across_remaining, sum_over_batch=sum_over_batch, sum_over_timesteps=sum_over_timesteps, sum_over_remaining=sum_over_remaining, time_major=time_major)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(losses, axis=range(1, rank))",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(losses)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(losses, axis=range(1, rank))",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(losses)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_241": {
                "variable": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-log_probs * advantages",
                            "BinOp"
                        ],
                        [
                            "mask_and_reduce(losses, sequence_length, rank=rank, average_across_batch=average_across_batch, average_across_timesteps=average_across_timesteps, average_across_remaining=average_across_remaining, sum_over_batch=sum_over_batch, sum_over_timesteps=sum_over_timesteps, sum_over_remaining=sum_over_remaining, time_major=time_major)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(losses, axis=range(1, rank))",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(losses)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(losses, axis=range(1, rank))",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(losses)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "range(1, rank)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_252": {
                "variable": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-log_probs * advantages",
                            "BinOp"
                        ],
                        [
                            "mask_and_reduce(losses, sequence_length, rank=rank, average_across_batch=average_across_batch, average_across_timesteps=average_across_timesteps, average_across_remaining=average_across_remaining, sum_over_batch=sum_over_batch, sum_over_timesteps=sum_over_timesteps, sum_over_remaining=sum_over_remaining, time_major=time_major)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(losses, axis=range(1, rank))",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(losses)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(losses, axis=range(1, rank))",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(losses)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_243": {
                "variable": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-log_probs * advantages",
                            "BinOp"
                        ],
                        [
                            "mask_and_reduce(losses, sequence_length, rank=rank, average_across_batch=average_across_batch, average_across_timesteps=average_across_timesteps, average_across_remaining=average_across_remaining, sum_over_batch=sum_over_batch, sum_over_timesteps=sum_over_timesteps, sum_over_remaining=sum_over_remaining, time_major=time_major)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(losses, axis=range(1, rank))",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(losses)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(losses, axis=range(1, rank))",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(losses)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "range(1, rank)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "texar_repo/texar/losses/rewards.py": {
        "tensorflow": {
            "reduce_max_155": {
                "variable": {
                    "value": "max_seq_length",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "sequence_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(sequence_length)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_159": {
                "variable": {
                    "value": "dmat",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "tf.concat([[batch_size], [max_seq_length]], 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dtype or reward.dtype",
                            "BoolOp"
                        ],
                        [
                            "dtype or reward.dtype",
                            "BoolOp"
                        ],
                        [
                            "dtype or reward.dtype",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sequence_mask_162": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "lengths": {
                    "value": "sequence_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(sequence_length)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dtype or reward.dtype",
                            "BoolOp"
                        ],
                        [
                            "dtype or reward.dtype",
                            "BoolOp"
                        ],
                        [
                            "dtype or reward.dtype",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_163": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[mask[:, 1:], tf.zeros_like(mask[:, -1:])]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cumprod_166": {
                "variable": {
                    "value": "dmat",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "dmat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.ones([batch_size, max_seq_length], dtype=dtype)",
                            "Call"
                        ],
                        [
                            "mask * discount + (1 - mask)",
                            "BinOp"
                        ],
                        [
                            "np.cumprod(dmat[:, ::-1], axis=1)[:, ::-1]",
                            "Subscript"
                        ],
                        [
                            "tf.ones(tf.concat([[batch_size], [max_seq_length]], 0), dtype=dtype)",
                            "Call"
                        ],
                        [
                            "mask * discount + (1 - mask)",
                            "BinOp"
                        ],
                        [
                            "tf.cumprod(dmat, axis=1, reverse=True)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "reverse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cumsum_198": {
                "variable": {
                    "value": "disc_reward",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "reward",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(reward)",
                            "Call"
                        ],
                        [
                            "np.array(reward)",
                            "Call"
                        ],
                        [
                            "mask_sequences(reward, sequence_length, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "mask_sequences(reward, sequence_length, dtype=dtype, tensor_rank=2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "reverse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "transpose_201": {
                "variable": {
                    "value": "rev_reward_T",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.reverse(reward, [1])",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "scan_202": {
                "variable": {
                    "value": "rev_reward_T_cum",
                    "type": "variable",
                    "possible_values": []
                },
                "fn": {
                    "value": "lambda acc, cur: cur + discount * acc",
                    "type": "Lambda",
                    "possible_values": []
                },
                "elems": {
                    "value": "rev_reward_T",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(tf.reverse(reward, [1]), [1, 0])",
                            "Call"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.zeros_like(reward[:, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "back_prop": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reverse_207": {
                "variable": {
                    "value": "disc_reward",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.transpose(rev_reward_T_cum, [1, 0])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "moments_101": {
                "variable": {
                    "value": "(mu, var)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "disc_reward",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_discount_reward_tensor_1d(reward, sequence_length, discount, dtype)",
                            "Call"
                        ],
                        [
                            "_discount_reward_py_1d(reward, sequence_length, discount, dtype)",
                            "Call"
                        ],
                        [
                            "_discount_reward_tensor_2d(reward, sequence_length, discount, dtype)",
                            "Call"
                        ],
                        [
                            "_discount_reward_py_2d(reward, sequence_length, discount, dtype)",
                            "Call"
                        ],
                        [
                            "(disc_reward - mu) / (tf.sqrt(var) + 1e-08)",
                            "BinOp"
                        ],
                        [
                            "(disc_reward - mu) / (std + 1e-08)",
                            "BinOp"
                        ],
                        [
                            "dmat * reward[:, None]",
                            "BinOp"
                        ],
                        [
                            "mask_sequences(disc_reward, sequence_length, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "dmat * tf.expand_dims(reward, -1)",
                            "BinOp"
                        ],
                        [
                            "mask_sequences(disc_reward, sequence_length, dtype=dtype, tensor_rank=2)",
                            "Call"
                        ],
                        [
                            "np.cumsum(reward[:, ::-1], axis=1, dtype=dtype)[:, ::-1]",
                            "Subscript"
                        ],
                        [
                            "np.copy(reward)",
                            "Call"
                        ],
                        [
                            "tf.cumsum(reward, axis=1, reverse=True)",
                            "Call"
                        ],
                        [
                            "tf.reverse(tf.transpose(rev_reward_T_cum, [1, 0]), [1])",
                            "Call"
                        ]
                    ]
                },
                "axes": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "shape_154": {
                "input": {
                    "value": "reward",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(reward)",
                            "Call"
                        ],
                        [
                            "np.array(reward)",
                            "Call"
                        ],
                        [
                            "mask_sequences(reward, sequence_length, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "mask_sequences(reward, sequence_length, dtype=dtype, tensor_rank=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_168": {
                "input": {
                    "value": "reward",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(reward)",
                            "Call"
                        ],
                        [
                            "np.array(reward)",
                            "Call"
                        ],
                        [
                            "mask_sequences(reward, sequence_length, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "mask_sequences(reward, sequence_length, dtype=dtype, tensor_rank=2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_160": {
                "values": {
                    "value": "[[batch_size], [max_seq_length]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reverse_201": {
                "tensor": {
                    "value": "reward",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(reward)",
                            "Call"
                        ],
                        [
                            "np.array(reward)",
                            "Call"
                        ],
                        [
                            "mask_sequences(reward, sequence_length, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "mask_sequences(reward, sequence_length, dtype=dtype, tensor_rank=2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_208": {
                "a": {
                    "value": "rev_reward_T_cum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.scan(fn=lambda acc, cur: cur + discount * acc, elems=rev_reward_T, initializer=tf.zeros_like(reward[:, 1]), back_prop=False)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_like_163": {
                "input": {
                    "value": "mask[:, -1:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_like_205": {
                "input": {
                    "value": "reward[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sqrt_102": {
                "x": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "texar_repo/texar/losses/rewards_test.py": {
        "tensorflow": {
            "ones_111": {
                "variable": {
                    "value": "reward",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_170": {
                "variable": {
                    "value": "reward",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2, 10]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "main_199": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_38": {
                "value": {
                    "value": "reward",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.ones([2], dtype=np.float64)",
                            "Call"
                        ],
                        [
                            "np.ones([2, 10], dtype=np.float64)",
                            "Call"
                        ],
                        [
                            "np.ones([2], dtype=np.float64)",
                            "Call"
                        ],
                        [
                            "tf.ones([2], dtype=tf.float64)",
                            "Call"
                        ],
                        [
                            "np.ones([2, 10], dtype=np.float64)",
                            "Call"
                        ],
                        [
                            "tf.ones([2, 10], dtype=tf.float64)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_41": {
                "value": {
                    "value": "reward",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.ones([2], dtype=np.float64)",
                            "Call"
                        ],
                        [
                            "np.ones([2, 10], dtype=np.float64)",
                            "Call"
                        ],
                        [
                            "np.ones([2], dtype=np.float64)",
                            "Call"
                        ],
                        [
                            "tf.ones([2], dtype=tf.float64)",
                            "Call"
                        ],
                        [
                            "np.ones([2, 10], dtype=np.float64)",
                            "Call"
                        ],
                        [
                            "tf.ones([2, 10], dtype=tf.float64)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_64": {
                "value": {
                    "value": "reward",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.ones([2], dtype=np.float64)",
                            "Call"
                        ],
                        [
                            "np.ones([2, 10], dtype=np.float64)",
                            "Call"
                        ],
                        [
                            "np.ones([2], dtype=np.float64)",
                            "Call"
                        ],
                        [
                            "tf.ones([2], dtype=tf.float64)",
                            "Call"
                        ],
                        [
                            "np.ones([2, 10], dtype=np.float64)",
                            "Call"
                        ],
                        [
                            "tf.ones([2, 10], dtype=tf.float64)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_67": {
                "value": {
                    "value": "reward",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.ones([2], dtype=np.float64)",
                            "Call"
                        ],
                        [
                            "np.ones([2, 10], dtype=np.float64)",
                            "Call"
                        ],
                        [
                            "np.ones([2], dtype=np.float64)",
                            "Call"
                        ],
                        [
                            "tf.ones([2], dtype=tf.float64)",
                            "Call"
                        ],
                        [
                            "np.ones([2, 10], dtype=np.float64)",
                            "Call"
                        ],
                        [
                            "tf.ones([2, 10], dtype=tf.float64)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_45": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_71": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_121": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_180": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "texar_repo/texar/losses/rl_losses.py": {
        "tensorflow": {
            "shape_62": {
                "variable": {
                    "value": "(batch, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "sequences",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "constant_63": {
                "variable": {
                    "value": "rewards_local",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "probs.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "probs.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_70": {
                "tensor": {
                    "value": "rewards_global",
                    "type": "variable",
                    "possible_values": [
                        [
                            "global_reward_fn(sequences, seq_lens)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "log_73": {
                "x": {
                    "value": "probs + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_74": {
                "input_tensor": {
                    "value": "tf.reduce_sum(log_probs * rewards, axis=1) / seq_lens",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_75": {
                "input_tensor": {
                    "value": "log_probs * rewards",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "texar_repo/texar/models/seq2seq/basic_seq2seq.py": {
        "tensorflow": {
            "ones_like_143": {
                "input": {
                    "value": "features['source_length']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "texar_repo/texar/models/seq2seq/seq2seq_base.py": {
        "tensorflow": {
            "EstimatorSpec_283": {
                "mode": {
                    "value": "mode",
                    "type": "variable",
                    "possible_values": []
                },
                "predictions": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._get_predictions(decoder_results, features, labels)",
                            "Call"
                        ],
                        [
                            "self._get_predictions(decoder_results, features, labels, loss)",
                            "Call"
                        ]
                    ]
                },
                "loss": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_loss(decoder_results, features, labels)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "train_op": {
                    "value": "train_op",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._get_train_op(loss)",
                            "Call"
                        ]
                    ]
                },
                "eval_metric_ops": {
                    "value": "eval_metric_ops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._get_eval_metric_ops(decoder_results, features, labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_to_collection_316": {
                "name": {
                    "value": "tf.GraphKeys.TABLE_INITIALIZERS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "iterator.initializer",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "texar_repo/texar/module_base.py": {
        "tensorflow": {
            "make_template_72": {
                "variable": {
                    "value": "self._template",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name_": {
                    "value": "self._hparams.name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "func_": {
                    "value": "self._build",
                    "type": "Attribute",
                    "possible_values": []
                },
                "create_scope_now_": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_collection_129": {
                "variable": {
                    "value": "internal_trainable_variables",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "scope_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.variable_scope.name",
                            "Attribute"
                        ],
                        [
                            "re.escape(scope_name) + '/'",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "texar_repo/texar/modules/classifiers/conv_classifiers.py": {
        "tensorflow": {
            "to_int64_192": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reshape(pred, [-1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "greater_188": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._encoder(inputs, sequence_length, dtype, mode)",
                            "Call"
                        ],
                        [
                            "tf.reshape(logits, [-1])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_189": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._encoder(inputs, sequence_length, dtype, mode)",
                            "Call"
                        ],
                        [
                            "tf.reshape(logits, [-1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "argmax_191": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._encoder(inputs, sequence_length, dtype, mode)",
                            "Call"
                        ],
                        [
                            "tf.reshape(logits, [-1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_65": {
                "name_or_scope": {
                    "value": "self.variable_scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_192": {
                "tensor": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.greater(logits, 0)",
                            "Call"
                        ],
                        [
                            "tf.argmax(logits, 1)",
                            "Call"
                        ],
                        [
                            "tf.to_int64(tf.reshape(pred, [-1]))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "texar_repo/texar/modules/classifiers/conv_classifiers_test.py": {
        "tensorflow": {
            "ones_29": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[64, 16, 300]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_34": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[64, None, 300]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_45": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[64, 16, 300]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "main_52": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "texar_repo/texar/modules/classifiers/rnn_classifiers.py": {
        "tensorflow": {
            "flatten_260": {
                "variable": {
                    "value": "enc_outputs_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "enc_outputs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "flatten_261": {
                "variable": {
                    "value": "enc_output_size_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "enc_output_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "to_int64_331": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(tf.greater(logits, 0), -1)",
                            "Call"
                        ],
                        [
                            "tf.argmax(logits, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.greater(logits, 0)",
                            "Call"
                        ],
                        [
                            "tf.argmax(logits, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.to_int64(pred)",
                            "Call"
                        ],
                        [
                            "tf.reshape(pred, [-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_268": {
                "variable": {
                    "value": "enc_outputs_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "enc_outputs_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nest.flatten(enc_outputs)",
                            "Call"
                        ],
                        [
                            "[shapes.flatten(x, 2, xs) for (x, xs) in zip(enc_outputs_flat, enc_output_dims_flat)]",
                            "ListComp"
                        ],
                        [
                            "enc_outputs_flat[0]",
                            "Subscript"
                        ],
                        [
                            "tf.concat(enc_outputs_flat, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_330": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(tf.greater(logits, 0), -1)",
                            "Call"
                        ],
                        [
                            "tf.argmax(logits, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.greater(logits, 0)",
                            "Call"
                        ],
                        [
                            "tf.argmax(logits, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.to_int64(pred)",
                            "Call"
                        ],
                        [
                            "tf.reshape(pred, [-1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_87": {
                "name_or_scope": {
                    "value": "self.variable_scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_320": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.greater(logits, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "squeeze_321": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "enc_outputs_flat",
                            "variable"
                        ],
                        [
                            "enc_outputs_flat[-1, :, :]",
                            "Subscript"
                        ],
                        [
                            "enc_outputs_flat[:, -1, :]",
                            "Subscript"
                        ],
                        [
                            "self._logit_layer(logits)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(logits, -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(logits, [-1])",
                            "Call"
                        ],
                        [
                            "self._logit_layer(logit_input)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_323": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "enc_outputs_flat",
                            "variable"
                        ],
                        [
                            "enc_outputs_flat[-1, :, :]",
                            "Subscript"
                        ],
                        [
                            "enc_outputs_flat[:, -1, :]",
                            "Subscript"
                        ],
                        [
                            "self._logit_layer(logits)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(logits, -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(logits, [-1])",
                            "Call"
                        ],
                        [
                            "self._logit_layer(logit_input)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "greater_326": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "enc_outputs_flat",
                            "variable"
                        ],
                        [
                            "enc_outputs_flat[-1, :, :]",
                            "Subscript"
                        ],
                        [
                            "enc_outputs_flat[:, -1, :]",
                            "Subscript"
                        ],
                        [
                            "self._logit_layer(logits)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(logits, -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(logits, [-1])",
                            "Call"
                        ],
                        [
                            "self._logit_layer(logit_input)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_327": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "enc_outputs_flat",
                            "variable"
                        ],
                        [
                            "enc_outputs_flat[-1, :, :]",
                            "Subscript"
                        ],
                        [
                            "enc_outputs_flat[:, -1, :]",
                            "Subscript"
                        ],
                        [
                            "self._logit_layer(logits)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(logits, -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(logits, [-1])",
                            "Call"
                        ],
                        [
                            "self._logit_layer(logit_input)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "argmax_329": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "enc_outputs_flat",
                            "variable"
                        ],
                        [
                            "enc_outputs_flat[-1, :, :]",
                            "Subscript"
                        ],
                        [
                            "enc_outputs_flat[:, -1, :]",
                            "Subscript"
                        ],
                        [
                            "self._logit_layer(logits)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(logits, -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(logits, [-1])",
                            "Call"
                        ],
                        [
                            "self._logit_layer(logit_input)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_303": {
                "variable": {
                    "value": "length_diff",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "length_diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._hparams.max_seq_length - tf.shape(inputs)[1]",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(length_diff, [1, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pad_305": {
                "variable": {
                    "value": "paddings",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "length_diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._hparams.max_seq_length - tf.shape(inputs)[1]",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(length_diff, [1, 1])",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[1, 1], [1, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pad_306": {
                "variable": {
                    "value": "logit_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "enc_outputs_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nest.flatten(enc_outputs)",
                            "Call"
                        ],
                        [
                            "[shapes.flatten(x, 2, xs) for (x, xs) in zip(enc_outputs_flat, enc_output_dims_flat)]",
                            "ListComp"
                        ],
                        [
                            "enc_outputs_flat[0]",
                            "Subscript"
                        ],
                        [
                            "tf.concat(enc_outputs_flat, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "paddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(length_diff, paddings=[[1, 1], [1, 0]])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_309": {
                "variable": {
                    "value": "logit_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "logit_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(enc_outputs_flat, paddings=paddings)",
                            "Call"
                        ],
                        [
                            "tf.reshape(logit_input, [-1, logit_input_dim])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, logit_input_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "greater_320": {
                "x": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "enc_outputs_flat",
                            "variable"
                        ],
                        [
                            "enc_outputs_flat[-1, :, :]",
                            "Subscript"
                        ],
                        [
                            "enc_outputs_flat[:, -1, :]",
                            "Subscript"
                        ],
                        [
                            "self._logit_layer(logits)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(logits, -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(logits, [-1])",
                            "Call"
                        ],
                        [
                            "self._logit_layer(logit_input)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_302": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "texar_repo/texar/modules/classifiers/rnn_classifiers_test.py": {
        "tensorflow": {
            "placeholder_28": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None, 100]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_106": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, 6, emb_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_168": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, 6, emb_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "main_181": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_60": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_74": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_93": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_111": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_138": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_156": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_173": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "texar_repo/texar/modules/connectors/connectors.py": {
        "tensorflow": {
            "flatten_53": {
                "variable": {
                    "value": "flat_output_size",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "flatten_54": {
                "variable": {
                    "value": "flat_output",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "flatten_93": {
                "variable": {
                    "value": "flat_input",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "concat_96": {
                "variable": {
                    "value": "concat_input",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "flat_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nest.flatten(inputs)",
                            "Call"
                        ],
                        [
                            "[tf.reshape(x, [-1, d]) for (x, d) in zip(flat_input, dims)]",
                            "ListComp"
                        ],
                        [
                            "nest.flatten(inputs)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flatten_99": {
                "variable": {
                    "value": "flat_output_size",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "dense_110": {
                "variable": {
                    "value": "fc_output",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "concat_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(flat_input, 1)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "sum_output_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sum(size_list)",
                            "Call"
                        ]
                    ]
                },
                "activation": {
                    "value": "activation_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layers.get_activation_fn(self.hparams.activation_fn)",
                            "Call"
                        ],
                        [
                            "get_function(self.hparams.activation_fn, fn_modules)",
                            "Call"
                        ],
                        [
                            "get_function(self.hparams.activation_fn, fn_modules)",
                            "Call"
                        ],
                        [
                            "tf.identity",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "split_113": {
                "variable": {
                    "value": "flat_output",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "fc_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(concat_input, sum_output_size, activation=activation_fn)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "size_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[0] * len(flat_output_size)",
                            "BinOp"
                        ],
                        [
                            "flat_output_size",
                            "variable"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pack_sequence_as_118": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": []
                },
                "flat_sequence": {
                    "value": "flat_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nest.flatten(outputs)",
                            "Call"
                        ],
                        [
                            "tf.split(fc_output, size_list, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "assert_same_structure_52": {
                "nest1": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "nest2": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "map_structure_200": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "lambda x: tf.constant(value_, shape=[batch_size, x])",
                    "type": "Lambda",
                    "possible_values": []
                },
                "*structure": {
                    "value": "self._output_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stop_gradient_673": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nest.pack_sequence_as(structure=output_size, flat_sequence=flat_output)",
                            "Call"
                        ],
                        [
                            "nest.map_structure(lambda x: tf.constant(value_, shape=[batch_size, x]), self._output_size)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "nest.pack_sequence_as(self._output_size, flat_input)",
                            "Call"
                        ],
                        [
                            "_mlp_transform(inputs, self._output_size, activation_fn)",
                            "Call"
                        ],
                        [
                            "_mlp_transform(sample, self._output_size, activation_fn)",
                            "Call"
                        ],
                        [
                            "dstr.sample(num_samples)",
                            "Call"
                        ],
                        [
                            "dstr.sample()",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, output.shape.concatenate(tf.TensorShape(1)))",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(output)",
                            "Call"
                        ],
                        [
                            "tf.cast(output, tf.float32)",
                            "Call"
                        ],
                        [
                            "_mlp_transform(output, self._output_size, activation_fn)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_675": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nest.pack_sequence_as(structure=output_size, flat_sequence=flat_output)",
                            "Call"
                        ],
                        [
                            "nest.map_structure(lambda x: tf.constant(value_, shape=[batch_size, x]), self._output_size)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "nest.pack_sequence_as(self._output_size, flat_input)",
                            "Call"
                        ],
                        [
                            "_mlp_transform(inputs, self._output_size, activation_fn)",
                            "Call"
                        ],
                        [
                            "_mlp_transform(sample, self._output_size, activation_fn)",
                            "Call"
                        ],
                        [
                            "dstr.sample(num_samples)",
                            "Call"
                        ],
                        [
                            "dstr.sample()",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, output.shape.concatenate(tf.TensorShape(1)))",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(output)",
                            "Call"
                        ],
                        [
                            "tf.cast(output, tf.float32)",
                            "Call"
                        ],
                        [
                            "_mlp_transform(output, self._output_size, activation_fn)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_95": {
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, d]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_117": {
                "variable": {
                    "value": "flat_output[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensor": {
                    "value": "flat_output[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1] + shape.as_list()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_669": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nest.pack_sequence_as(structure=output_size, flat_sequence=flat_output)",
                            "Call"
                        ],
                        [
                            "nest.map_structure(lambda x: tf.constant(value_, shape=[batch_size, x]), self._output_size)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "nest.pack_sequence_as(self._output_size, flat_input)",
                            "Call"
                        ],
                        [
                            "_mlp_transform(inputs, self._output_size, activation_fn)",
                            "Call"
                        ],
                        [
                            "_mlp_transform(sample, self._output_size, activation_fn)",
                            "Call"
                        ],
                        [
                            "dstr.sample(num_samples)",
                            "Call"
                        ],
                        [
                            "dstr.sample()",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, output.shape.concatenate(tf.TensorShape(1)))",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(output)",
                            "Call"
                        ],
                        [
                            "tf.cast(output, tf.float32)",
                            "Call"
                        ],
                        [
                            "_mlp_transform(output, self._output_size, activation_fn)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "output.shape.concatenate(tf.TensorShape(1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "TensorShape_57": {
                "dims": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "assert_same_structure_289": {
                "nest1": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "nest2": {
                    "value": "self._output_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "flatten_291": {
                "variable": {
                    "value": "flat_input",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "pack_sequence_as_292": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "self._output_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "flat_sequence": {
                    "value": "flat_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nest.flatten(inputs)",
                            "Call"
                        ],
                        [
                            "[tf.reshape(x, [-1, d]) for (x, d) in zip(flat_input, dims)]",
                            "ListComp"
                        ],
                        [
                            "nest.flatten(inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_201": {
                "value": {
                    "value": "value_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "variable"
                        ],
                        [
                            "self.hparams.value",
                            "Attribute"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, x]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_670": {
                "dims": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "texar_repo/texar/modules/connectors/connectors_test.py": {
        "tensorflow": {
            "zeros_84": {
                "variable": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self._batch_size, variable_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_85": {
                "variable": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self._batch_size, variable_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_86": {
                "variable": {
                    "value": "mu_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[variable_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_87": {
                "variable": {
                    "value": "var_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[variable_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "main_180": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "assert_same_structure_42": {
                "nest1": {
                    "value": "decoder_initial_state_0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "connector(self._batch_size)",
                            "Call"
                        ]
                    ]
                },
                "nest2": {
                    "value": "self._decoder_cell.state_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "assert_same_structure_44": {
                "nest1": {
                    "value": "decoder_initial_state_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "connector(self._batch_size, value=1.0)",
                            "Call"
                        ]
                    ]
                },
                "nest2": {
                    "value": "self._decoder_cell.state_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "assert_same_structure_67": {
                "nest1": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "connector(tf.zeros([5, 10]))",
                            "Call"
                        ]
                    ]
                },
                "nest2": {
                    "value": "self._decoder_cell.state_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_66": {
                "shape": {
                    "value": "[5, 10]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "assert_same_structure_73": {
                "nest1": {
                    "value": "output_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sess.run(output)",
                            "Call"
                        ]
                    ]
                },
                "nest2": {
                    "value": "self._decoder_cell.state_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorShape_81": {
                "dims": {
                    "value": "[2, 3, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "global_variables_initializer_48": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_110": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "TensorShape_119": {
                "dims": {
                    "value": "[sample_num, state_size[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_121": {
                "dims": {
                    "value": "[self._batch_size, state_size[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_123": {
                "dims": {
                    "value": "[self._batch_size, state_size[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "flatten_51": {
                "structure": {
                    "value": "s_0",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "flatten_52": {
                "structure": {
                    "value": "s_1",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "texar_repo/texar/modules/decoders/beam_search_decode.py": {
        "tensorflow": {
            "convert_to_tensor_200": {
                "variable": {
                    "value": "start_tokens",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "start_tokens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(start_tokens, dtype=tf.int32, name='start_tokens')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "start_tokens",
                    "type": "str",
                    "possible_values": []
                }
            },
            "size_204": {
                "variable": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "start_tokens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(start_tokens, dtype=tf.int32, name='start_tokens')",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_237": {
                "name_or_scope": {
                    "value": "vs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "decoder_or_cell.variable_scope",
                            "Attribute"
                        ]
                    ]
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "texar_repo/texar/modules/decoders/beam_search_decode_test.py": {
        "tensorflow": {
            "constant_188": {
                "variable": {
                    "value": "encoder_values_length",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "seq_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.randint(self._max_time, size=[self._batch_size]) + 1",
                            "BinOp"
                        ],
                        [
                            "np.random.randint(self._max_time, size=[self._batch_size]) + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "constant_210": {
                "variable": {
                    "value": "encoder_values_length",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "seq_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.randint(self._max_time, size=[self._batch_size]) + 1",
                            "BinOp"
                        ],
                        [
                            "np.random.randint(self._max_time, size=[self._batch_size]) + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "main_236": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_62": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_69": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_110": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "texar_repo/texar/modules/decoders/rnn_decoder_base.py": {
        "tensorflow": {
            "cond_405": {
                "variable": {
                    "value": "max_l",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "is_train_mode(mode)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : max_l_train",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : max_l_infer",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "map_structure_447": {
                "variable": {
                    "value": "output_shape_with_unknown_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "lambda s: tensor_shape.TensorShape([None]).concatenate(s)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "*structure": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._cell.output_size",
                            "Attribute"
                        ]
                    ]
                }
            },
            "variable_scope_66": {
                "name_or_scope": {
                    "value": "self.variable_scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_84": {
                "variable": {
                    "value": "self._output_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "self._vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "map_structure_452": {
                "func": {
                    "value": "lambda s: s[1:]",
                    "type": "Lambda",
                    "possible_values": []
                },
                "*structure": {
                    "value": "layer_output_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._output_layer.compute_output_shape(output_shape_with_unknown_batch)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_83": {
                "name_or_scope": {
                    "value": "self.variable_scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorShape_448": {
                "dims": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concatenate_448": {
                "arys": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "texar_repo/texar/modules/decoders/rnn_decoder_helpers.py": {
        "tensorflow": {
            "convert_to_tensor_229": {
                "variable": {
                    "value": "self._start_tokens",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "start_tokens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "start_tokens",
                    "type": "str",
                    "possible_values": []
                }
            },
            "convert_to_tensor_231": {
                "variable": {
                    "value": "self._end_token",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "end_token",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "end_token",
                    "type": "str",
                    "possible_values": []
                }
            },
            "size_234": {
                "variable": {
                    "value": "self._batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self._start_tokens",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tile_252": {
                "variable": {
                    "value": "finished",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "[False]",
                    "type": "List",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[self._batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_259": {
                "variable": {
                    "value": "sample_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "outputs / self._tau",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_270": {
                "variable": {
                    "value": "next_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "sample_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(outputs / self._tau)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(sample_ids)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(outputs / self._tau)",
                            "Call"
                        ],
                        [
                            "GumbelSoftmax(self._tau, logits=outputs).sample()",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(sample_ids_hard - sample_ids) + sample_ids",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "self._embedding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_320": {
                "variable": {
                    "value": "sample_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "outputs / self._tau",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "name_scope_174": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "argmax_264": {
                "variable": {
                    "value": "hard_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sample_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(outputs / self._tau)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(sample_ids)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(outputs / self._tau)",
                            "Call"
                        ],
                        [
                            "GumbelSoftmax(self._tau, logits=outputs).sample()",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(sample_ids_hard - sample_ids) + sample_ids",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "output_type": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_265": {
                "variable": {
                    "value": "finished",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "hard_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(sample_ids, axis=-1, output_type=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "self._end_token",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tile_267": {
                "variable": {
                    "value": "finished",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "[False]",
                    "type": "List",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[self._batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stop_gradient_269": {
                "variable": {
                    "value": "sample_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sample_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(outputs / self._tau)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(sample_ids)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(outputs / self._tau)",
                            "Call"
                        ],
                        [
                            "GumbelSoftmax(self._tau, logits=outputs).sample()",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(sample_ids_hard - sample_ids) + sample_ids",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cast_324": {
                "variable": {
                    "value": "sample_ids_hard",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.one_hot(tf.argmax(sample_ids, -1), size)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "sample_ids.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_179": {
                "params": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedding.embedding",
                            "Attribute"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "ids": {
                    "value": "ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "embedding_lookup_227": {
                "params": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedding.embedding",
                            "Attribute"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "ids": {
                    "value": "ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_323": {
                "input": {
                    "value": "sample_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(outputs / self._tau)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(sample_ids)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(outputs / self._tau)",
                            "Call"
                        ],
                        [
                            "GumbelSoftmax(self._tau, logits=outputs).sample()",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(sample_ids_hard - sample_ids) + sample_ids",
                            "BinOp"
                        ]
                    ]
                }
            },
            "one_hot_325": {
                "indices": {
                    "value": "tf.argmax(sample_ids, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(sample_ids)[-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "stop_gradient_326": {
                "input": {
                    "value": "sample_ids_hard - sample_ids",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "argmax_325": {
                "input": {
                    "value": "sample_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(outputs / self._tau)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(sample_ids)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(outputs / self._tau)",
                            "Call"
                        ],
                        [
                            "GumbelSoftmax(self._tau, logits=outputs).sample()",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(sample_ids_hard - sample_ids) + sample_ids",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "texar_repo/texar/modules/decoders/rnn_decoders.py": {
        "tensorflow": {
            "flatten_565": {
                "variable": {
                    "value": "flat_initial_state",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "self._initial_state",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_383": {
                "name_or_scope": {
                    "value": "self.variable_scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_396": {
                "name_or_scope": {
                    "value": "self.variable_scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_536": {
                "name_or_scope": {
                    "value": "self.variable_scope",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "flatten_278": {
                "structure": {
                    "value": "self._initial_state",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "map_structure_280": {
                "func": {
                    "value": "lambda _: dtype",
                    "type": "Lambda",
                    "possible_values": []
                },
                "*structure": {
                    "value": "self._rnn_output_size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "map_structure_282": {
                "func": {
                    "value": "lambda _: dtype",
                    "type": "Lambda",
                    "possible_values": []
                },
                "*structure": {
                    "value": "self._cell.output_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "flatten_628": {
                "structure": {
                    "value": "self._initial_state",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "map_structure_630": {
                "func": {
                    "value": "lambda _: dtype",
                    "type": "Lambda",
                    "possible_values": []
                },
                "*structure": {
                    "value": "self._rnn_output_size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "map_structure_632": {
                "func": {
                    "value": "lambda _: dtype",
                    "type": "Lambda",
                    "possible_values": []
                },
                "*structure": {
                    "value": "self._cell.output_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "map_structure_634": {
                "func": {
                    "value": "lambda _: dtype",
                    "type": "Lambda",
                    "possible_values": []
                },
                "*structure": {
                    "value": "self._alignments_size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "map_structure_636": {
                "func": {
                    "value": "lambda _: dtype",
                    "type": "Lambda",
                    "possible_values": []
                },
                "*structure": {
                    "value": "self._cell.state_size.attention",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_568": {
                "input": {
                    "value": "flat_initial_state[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "shape_608": {
                "input": {
                    "value": "am._keys",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "texar_repo/texar/modules/decoders/rnn_decoders_test.py": {
        "tensorflow": {
            "Dense_69": {
                "variable": {
                    "value": "output_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "self._vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_104": {
                "variable": {
                    "value": "_inputs_placeholder",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self._batch_size, self._max_time]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "inputs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_106": {
                "variable": {
                    "value": "_embedding_placeholder",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self._vocab_size, self._emb_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "emb",
                    "type": "str",
                    "possible_values": []
                }
            },
            "embedding_lookup_108": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "_embedding_placeholder",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [self._vocab_size, self._emb_dim], name='emb')",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "_inputs_placeholder",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int32, [self._batch_size, self._max_time], name='inputs')",
                            "Call"
                        ]
                    ]
                }
            },
            "Dense_111": {
                "variable": {
                    "value": "output_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "self._vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_169": {
                "variable": {
                    "value": "output_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "self._vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_228": {
                "variable": {
                    "value": "encoder_values_length",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "seq_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.randint(self._max_time, size=[self._batch_size]) + 1",
                            "BinOp"
                        ],
                        [
                            "np.random.randint(self._max_time, size=[self._batch_size]) + 1",
                            "BinOp"
                        ],
                        [
                            "np.random.randint(self._max_time, size=[self._batch_size]) + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "constant_281": {
                "variable": {
                    "value": "encoder_values_length",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "seq_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.randint(self._max_time, size=[self._batch_size]) + 1",
                            "BinOp"
                        ],
                        [
                            "np.random.randint(self._max_time, size=[self._batch_size]) + 1",
                            "BinOp"
                        ],
                        [
                            "np.random.randint(self._max_time, size=[self._batch_size]) + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "constant_331": {
                "variable": {
                    "value": "encoder_values_length",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "seq_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.randint(self._max_time, size=[self._batch_size]) + 1",
                            "BinOp"
                        ],
                        [
                            "np.random.randint(self._max_time, size=[self._batch_size]) + 1",
                            "BinOp"
                        ],
                        [
                            "np.random.randint(self._max_time, size=[self._batch_size]) + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "main_371": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_48": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_137": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_188": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_260": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_311": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "texar_repo/texar/modules/decoders/transformer_decoders.py": {
        "tensorflow": {
            "embedding_lookup_250": {
                "variable": {
                    "value": "token_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self._embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "tokens",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "expand_dims_257": {
                "variable": {
                    "value": "positions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.range(max_length, dtype=tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_497": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedding_fn(ids)",
                            "Call"
                        ],
                        [
                            "inputs + timing_signal[:, step:step + 1]",
                            "BinOp"
                        ],
                        [
                            "mask_sequences(inputs, sequence_length, tensor_rank=3)",
                            "Call"
                        ],
                        [
                            "target_inputs + pos_embeds",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dropout(inputs, rate=self._hparams.embedding_dropout, training=is_train_mode(mode))",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "rate": {
                    "value": "self._hparams.embedding_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "is_train_mode(mode)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "fill_604": {
                "variable": {
                    "value": "finished",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "value": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_605": {
                "variable": {
                    "value": "seq_length",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_606": {
                "variable": {
                    "value": "step",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_607": {
                "variable": {
                    "value": "decoded_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_608": {
                "variable": {
                    "value": "logits_list",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, 0, self._vocab_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_610": {
                "variable": {
                    "value": "next_id",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "start_tokens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "while_loop_653": {
                "variable": {
                    "value": "(_, _, _, decoded_ids, _, logits_list, seq_length)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "_not_finished",
                    "type": "variable",
                    "possible_values": []
                },
                "body": {
                    "value": "_body",
                    "type": "variable",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "(step, finished, next_id, decoded_ids, cache, logits_list, seq_length)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "shape_invariants": {
                    "value": "(tf.TensorShape([]), tf.TensorShape([None]), tf.TensorShape([None, None]), tf.TensorShape([None, None]), nest.map_structure(beam_search.get_state_shape_invariants, cache), tf.TensorShape([None, None, None]), tf.TensorShape([None]))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_698": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._self_attention_stack(inputs, memory=cache['memory'], cache=cache)",
                            "Call"
                        ],
                        [
                            "tf.reshape(outputs, [-1, dim])",
                            "Call"
                        ],
                        [
                            "outputs[:, :, 1:]",
                            "Subscript"
                        ],
                        [
                            "tf.transpose(outputs, [0, 2, 1])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_280": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.output_layer(outputs)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(logits, axis=[1])",
                            "Call"
                        ],
                        [
                            "self.output_layer(decoder_output)",
                            "Call"
                        ],
                        [
                            "tf.matmul(outputs, self._embedding, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "logits + affine_bias",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(logits, shape[:-1] + [self._vocab_size])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(logits, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_425": {
                "variable": {
                    "value": "positions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.range(lengths, dtype=tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "to_int32_438": {
                "variable": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(logits, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dense_571": {
                "variable": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "self._vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "self._hparams.output_layer_bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_628": {
                "variable": {
                    "value": "cur_finished",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "next_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(start_tokens, 1)",
                            "Call"
                        ],
                        [
                            "tf.argmax(logits, -1, output_type=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(next_id, axis=1)",
                            "Call"
                        ],
                        [
                            "sample_id_sampler.sample()",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "end_token",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "logical_and_630": {
                "variable": {
                    "value": "update_len",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.logical_not(finished)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "cur_finished",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(next_id, end_token)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_633": {
                "variable": {
                    "value": "seq_length",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "update_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.logical_and(tf.logical_not(finished), cur_finished)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "tf.fill(tf.shape(seq_length), step + 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "seq_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros([batch_size], dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.where(update_len, tf.fill(tf.shape(seq_length), step + 1), seq_length)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_638": {
                "variable": {
                    "value": "next_id",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "next_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(start_tokens, 1)",
                            "Call"
                        ],
                        [
                            "tf.argmax(logits, -1, output_type=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(next_id, axis=1)",
                            "Call"
                        ],
                        [
                            "sample_id_sampler.sample()",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_643": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.output_layer(outputs)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(logits, axis=[1])",
                            "Call"
                        ],
                        [
                            "self.output_layer(decoder_output)",
                            "Call"
                        ],
                        [
                            "tf.matmul(outputs, self._embedding, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "logits + affine_bias",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(logits, shape[:-1] + [self._vocab_size])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(logits, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_644": {
                "variable": {
                    "value": "logits_list",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[logits_list, logits]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_645": {
                "variable": {
                    "value": "decoded_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[decoded_ids, next_id]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_86": {
                "name_or_scope": {
                    "value": "self.variable_scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "range_257": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_562": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._self_attention_stack(inputs, memory=cache['memory'], cache=cache)",
                            "Call"
                        ],
                        [
                            "tf.reshape(outputs, [-1, dim])",
                            "Call"
                        ],
                        [
                            "outputs[:, :, 1:]",
                            "Subscript"
                        ],
                        [
                            "tf.transpose(outputs, [0, 2, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_563": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._self_attention_stack(inputs, memory=cache['memory'], cache=cache)",
                            "Call"
                        ],
                        [
                            "tf.reshape(outputs, [-1, dim])",
                            "Call"
                        ],
                        [
                            "outputs[:, :, 1:]",
                            "Subscript"
                        ],
                        [
                            "tf.transpose(outputs, [0, 2, 1])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self._embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reshape_566": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.output_layer(outputs)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(logits, axis=[1])",
                            "Call"
                        ],
                        [
                            "self.output_layer(decoder_output)",
                            "Call"
                        ],
                        [
                            "tf.matmul(outputs, self._embedding, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "logits + affine_bias",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(logits, shape[:-1] + [self._vocab_size])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(logits, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "shape[:-1] + [self._vocab_size]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_582": {
                "input": {
                    "value": "memory",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_603": {
                "input": {
                    "value": "start_tokens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "argmax_623": {
                "variable": {
                    "value": "next_id",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.output_layer(outputs)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(logits, axis=[1])",
                            "Call"
                        ],
                        [
                            "self.output_layer(decoder_output)",
                            "Call"
                        ],
                        [
                            "tf.matmul(outputs, self._embedding, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "logits + affine_bias",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(logits, shape[:-1] + [self._vocab_size])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(logits, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "output_type": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_scope_88": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sequence_mask_410": {
                "lengths": {
                    "value": "memory_sequence_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "maxlen": {
                    "value": "tf.shape(memory)[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "range_425": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argmax_438": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.output_layer(outputs)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(logits, axis=[1])",
                            "Call"
                        ],
                        [
                            "self.output_layer(decoder_output)",
                            "Call"
                        ],
                        [
                            "tf.matmul(outputs, self._embedding, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "logits + affine_bias",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(logits, shape[:-1] + [self._vocab_size])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(logits, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "variable_scope_510": {
                "name_or_scope": {
                    "value": "layer_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'layer_{}'.format(i)",
                            "Call"
                        ],
                        [
                            "'layer_{}'.format(i)",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_542": {
                "variable": {
                    "value": "sub_output",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "poswise_network(layers.layer_normalize(x))",
                    "type": "Call",
                    "possible_values": []
                },
                "rate": {
                    "value": "self._hparams.residual_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "is_train_mode(mode)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_555": {
                "variable": {
                    "value": "affine_bias",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "affine_bias",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self._vocab_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_586": {
                "shape": {
                    "value": "[batch_size, 0, depth]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_587": {
                "shape": {
                    "value": "[batch_size, 0, depth]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_588": {
                "shape": {
                    "value": "[batch_size, 0, depth]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_589": {
                "shape": {
                    "value": "[batch_size, 0, depth]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Categorical_625": {
                "variable": {
                    "value": "sample_id_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.output_layer(outputs)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(logits, axis=[1])",
                            "Call"
                        ],
                        [
                            "self.output_layer(decoder_output)",
                            "Call"
                        ],
                        [
                            "tf.matmul(outputs, self._embedding, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "logits + affine_bias",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(logits, shape[:-1] + [self._vocab_size])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(logits, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "logical_not_631": {
                "x": {
                    "value": "finished",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.fill([batch_size], False)",
                            "Call"
                        ],
                        [
                            "finished | cur_finished",
                            "BinOp"
                        ]
                    ]
                }
            },
            "fill_635": {
                "dims": {
                    "value": "tf.shape(seq_length)",
                    "type": "Call",
                    "possible_values": []
                },
                "value": {
                    "value": "step + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "logical_not_651": {
                "x": {
                    "value": "tf.reduce_all(finished)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_107": {
                "name_or_scope": {
                    "value": "layer_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'layer_{}'.format(i)",
                            "Call"
                        ],
                        [
                            "'layer_{}'.format(i)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_511": {
                "name_or_scope": {
                    "value": "self_attention",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_541": {
                "name_or_scope": {
                    "value": "past_poswise_ln",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_554": {
                "name_or_scope": {
                    "value": "self.variable_scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_635": {
                "input": {
                    "value": "seq_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros([batch_size], dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.where(update_len, tf.fill(tf.shape(seq_length), step + 1), seq_length)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_all_651": {
                "input_tensor": {
                    "value": "finished",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.fill([batch_size], False)",
                            "Call"
                        ],
                        [
                            "finished | cur_finished",
                            "BinOp"
                        ]
                    ]
                }
            },
            "TensorShape_659": {
                "dims": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_660": {
                "dims": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_661": {
                "dims": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_662": {
                "dims": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "map_structure_663": {
                "func": {
                    "value": "beam_search.get_state_shape_invariants",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*structure": {
                    "value": "cache",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'memory': memory, 'memory_attention_bias': memory_attention_bias}",
                            "Dict"
                        ],
                        [
                            "self._init_cache(memory, memory_attention_bias)",
                            "Call"
                        ],
                        [
                            "self._init_cache(memory, memory_attention_bias)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "TensorShape_665": {
                "dims": {
                    "value": "[None, None, None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_666": {
                "dims": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_108": {
                "name_or_scope": {
                    "value": "self_attention",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_120": {
                "name_or_scope": {
                    "value": "encdec_attention",
                    "type": "str",
                    "possible_values": []
                }
            },
            "shape_411": {
                "input": {
                    "value": "memory",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "dropout_521": {
                "x": {
                    "value": "selfatt_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "multihead_attention(queries=layers.layer_normalize(x), memory=None, memory_attention_bias=decoder_self_attention_bias, cache=layer_cache, mode=mode)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "self._hparams.residual_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "is_train_mode(mode)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_527": {
                "name_or_scope": {
                    "value": "encdec_attention",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dropout_536": {
                "x": {
                    "value": "encdec_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "multihead_attention(queries=layers.layer_normalize(x), memory=memory, memory_attention_bias=memory_attention_bias, mode=mode)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "self._hparams.residual_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "is_train_mode(mode)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "texar_repo/texar/modules/decoders/transformer_decoders_test.py": {
        "tensorflow": {
            "fill_40": {
                "variable": {
                    "value": "self._start_tokens",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dims": {
                    "value": "[self._batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "main_129": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_60": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_81": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_101": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_121": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "texar_repo/texar/modules/embedders/embedder_base.py": {
        "tensorflow": {
            "Dropout_87": {
                "variable": {
                    "value": "dropout_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "rate": {
                    "value": "hparams.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "noise_shape": {
                    "value": "noise_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "tf.concat([tf.shape(dropout_input)[:ids_rank], tf.ones([self._dim_rank], tf.int32)], axis=0)",
                            "Call"
                        ],
                        [
                            "[None] + [1] * self._dim_rank",
                            "BinOp"
                        ]
                    ]
                }
            },
            "concat_79": {
                "variable": {
                    "value": "noise_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.shape(dropout_input)[:ids_rank], tf.ones([self._dim_rank], tf.int32)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_80": {
                "shape": {
                    "value": "[self._dim_rank]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_79": {
                "input": {
                    "value": "dropout_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "texar_repo/texar/modules/embedders/embedder_utils.py": {
        "tensorflow": {
            "tensordot_242": {
                "a": {
                    "value": "tf.to_float(soft_ids)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='w', initializer=tf.to_float(init_value), regularizer=regularizer, trainable=hparams['trainable'])",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='w', shape=[num_embeds] + dim, initializer=initializer, regularizer=regularizer, trainable=hparams['trainable'])",
                            "Call"
                        ]
                    ]
                },
                "axes": {
                    "value": "[-1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_196": {
                "name_or_scope": {
                    "value": "variable_scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'Embedding'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_205": {
                "variable": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_embeds] + dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layers.get_initializer(hparams['initializer'])",
                            "Call"
                        ]
                    ]
                },
                "regularizer": {
                    "value": "regularizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layers.get_regularizer(hparams['regularizer'])",
                            "Call"
                        ]
                    ]
                },
                "trainable": {
                    "value": "hparams['trainable']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "HParams(hparams, default_embedding_hparams())",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_211": {
                "variable": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.to_float(init_value)",
                    "type": "Call",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "regularizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layers.get_regularizer(hparams['regularizer'])",
                            "Call"
                        ]
                    ]
                },
                "trainable": {
                    "value": "hparams['trainable']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "HParams(hparams, default_embedding_hparams())",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "to_float_242": {
                "x": {
                    "value": "soft_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "to_float_212": {
                "x": {
                    "value": "init_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "texar_repo/texar/modules/embedders/embedder_utils_test.py": {
        "tensorflow": {
            "main_46": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "random_uniform_initializer_31": {
                "minval": {
                    "value": "-0.1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "maxval": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "L1L2_34": {
                "l1": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "l2": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "texar_repo/texar/modules/embedders/embedders.py": {
        "tensorflow": {
            "embedding_lookup_242": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._embedding",
                            "Attribute"
                        ],
                        [
                            "dropout_layer.apply(inputs=embedding, training=is_training)",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "texar_repo/texar/modules/embedders/embedders_test.py": {
        "tensorflow": {
            "ones_31": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[64, 16]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_34": {
                "variable": {
                    "value": "inputs_soft",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[64, 16, embedder.vocab_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_60": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_64": {
                "variable": {
                    "value": "inputs_soft",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None, None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_75": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[64, 16]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_168": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[64, 16]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_177": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[64, 10, 20]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "main_203": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_52": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_94": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_198": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_max_96": {
                "input_tensor": {
                    "value": "seq_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform([64], maxval=pos_size, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "texar_repo/texar/modules/embedders/position_embedders.py": {
        "tensorflow": {
            "embedding_lookup_185": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._embedding",
                            "Attribute"
                        ],
                        [
                            "dropout_layer.apply(inputs=embedding, training=is_training)",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "positions",
                            "variable"
                        ],
                        [
                            "expander * tf.expand_dims(single_inputs, 0)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "to_float_282": {
                "variable": {
                    "value": "position",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.squeeze(positions, axis=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_294": {
                "variable": {
                    "value": "signal",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.sin(scaled_time), tf.cos(scaled_time)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_295": {
                "variable": {
                    "value": "signal",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "signal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([tf.sin(scaled_time), tf.cos(scaled_time)], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.pad(signal, [[0, 0], [0, tf.mod(dim, 2)]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(signal, [1, position_size, dim])",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [0, tf.mod(dim, 2)]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_296": {
                "variable": {
                    "value": "signal",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "signal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([tf.sin(scaled_time), tf.cos(scaled_time)], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.pad(signal, [[0, 0], [0, tf.mod(dim, 2)]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(signal, [1, position_size, dim])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, position_size, dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_max_156": {
                "variable": {
                    "value": "max_length",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "sequence_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "expand_dims_159": {
                "variable": {
                    "value": "expander",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.ones_like(sequence_length)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "squeeze_282": {
                "input": {
                    "value": "positions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_283": {
                "input": {
                    "value": "position",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(tf.squeeze(positions, axis=0))",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_290": {
                "x": {
                    "value": "tf.to_float(tf.range(num_timescales)) * -log_timescale_increment",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "expand_dims_292": {
                "input": {
                    "value": "position",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(tf.squeeze(positions, axis=0))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_293": {
                "input": {
                    "value": "inv_timescales",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min_timescale * tf.exp(tf.to_float(tf.range(num_timescales)) * -log_timescale_increment)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_like_159": {
                "input": {
                    "value": "sequence_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "expand_dims_160": {
                "input": {
                    "value": "single_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.range(start=0, limit=max_length, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "to_float_289": {
                "x": {
                    "value": "num_timescales",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sin_294": {
                "x": {
                    "value": "scaled_time",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(position, 1) * tf.expand_dims(inv_timescales, 0)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cos_294": {
                "x": {
                    "value": "scaled_time",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(position, 1) * tf.expand_dims(inv_timescales, 0)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "to_float_291": {
                "x": {
                    "value": "tf.range(num_timescales)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mod_295": {
                "x1": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._hparams.dim",
                            "Attribute"
                        ]
                    ]
                },
                "x2": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "range_291": {}
        }
    },
    "texar_repo/texar/modules/encoders/conv_encoders_test.py": {
        "tensorflow": {
            "ones_31": {
                "variable": {
                    "value": "inputs_1",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[64, 16, 300]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_62": {
                "variable": {
                    "value": "inputs_2",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[64, 16, 300]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_71": {
                "variable": {
                    "value": "inputs_1",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[64, None, 300]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_93": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[64, None, 300]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_111": {
                "variable": {
                    "value": "inputs_2",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[64, 300, None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "main_117": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "texar_repo/texar/modules/encoders/hierarchical_encoders.py": {
        "tensorflow": {
            "reshape_253": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, shape + [inputs.shape[3]])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "shape + [inputs.shape[3]]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_272": {
                "variable": {
                    "value": "states_minor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "states_minor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.flatten(states_minor)",
                            "Call"
                        ],
                        [
                            "tf.reshape(states_minor, tf.concat([expand, tf.shape(states_minor)[1:]], 0))",
                            "Call"
                        ],
                        [
                            "self.flatten(states_minor)",
                            "Call"
                        ],
                        [
                            "fn(states_minor)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.concat([expand, tf.shape(states_minor)[1:]], 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_246": {
                "variable": {
                    "value": "sequence_length_minor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "sequence_length_minor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(sequence_length_minor, [-1])",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_251": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, shape + [inputs.shape[3]])",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_273": {
                "values": {
                    "value": "[expand, tf.shape(states_minor)[1:]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "map_structure_309": {
                "func": {
                    "value": "lambda x: tf.tile(x, multiplier)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "*structure": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "concat_362": {
                "values": {
                    "value": "[HierarchicalRNNEncoder.flatten(v) for v in x]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "variable_scope_78": {
                "name_or_scope": {
                    "value": "self.variable_scope.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_79": {
                "name_or_scope": {
                    "value": "encoder_major",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_88": {
                "name_or_scope": {
                    "value": "self.variable_scope.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_95": {
                "name_or_scope": {
                    "value": "self.variable_scope.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tile_309": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "multiples": {
                    "value": "multiplier",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_89": {
                "name_or_scope": {
                    "value": "encoder_minor",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_96": {
                "name_or_scope": {
                    "value": "encoder_minor",
                    "type": "str",
                    "possible_values": []
                }
            },
            "shape_273": {
                "input": {
                    "value": "states_minor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.flatten(states_minor)",
                            "Call"
                        ],
                        [
                            "tf.reshape(states_minor, tf.concat([expand, tf.shape(states_minor)[1:]], 0))",
                            "Call"
                        ],
                        [
                            "self.flatten(states_minor)",
                            "Call"
                        ],
                        [
                            "fn(states_minor)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "texar_repo/texar/modules/encoders/hierarchical_encoders_test.py": {
        "tensorflow": {
            "main_148": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_53": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_76": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "texar_repo/texar/modules/encoders/multihead_attention.py": {
        "tensorflow": {
            "reshape_207": {
                "variable": {
                    "value": "splitted_x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[tf.shape(x)[0], tf.shape(x)[1], self._hparams.num_heads, depth // self._hparams.num_heads]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_219": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Dense_57": {
                "variable": {
                    "value": "self.Q_dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "self._hparams.num_units",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._hparams.use_bias",
                            "Attribute"
                        ]
                    ]
                },
                "name": {
                    "value": "query",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_60": {
                "variable": {
                    "value": "self.K_dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "self._hparams.num_units",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._hparams.use_bias",
                            "Attribute"
                        ]
                    ]
                },
                "name": {
                    "value": "key",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_63": {
                "variable": {
                    "value": "self.V_dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "self._hparams.num_units",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._hparams.use_bias",
                            "Attribute"
                        ]
                    ]
                },
                "name": {
                    "value": "value",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_66": {
                "variable": {
                    "value": "self.O_dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "self._hparams.output_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._hparams.use_bias",
                            "Attribute"
                        ]
                    ]
                },
                "name": {
                    "value": "output",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_181": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "Q_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._split_heads(Q)",
                            "Call"
                        ],
                        [
                            "Q_ * key_depth_per_head ** (-0.5)",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "K_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._split_heads(K)",
                            "Call"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_184": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(Q_, K_, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "logits + memory_attention_bias",
                            "BinOp"
                        ]
                    ]
                },
                "name": {
                    "value": "attention_weights",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dropout_185": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(logits, name='attention_weights')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(weights, rate=self._hparams.dropout_rate, training=is_train_mode(mode))",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "self._hparams.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "is_train_mode(mode)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_188": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(logits, name='attention_weights')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(weights, rate=self._hparams.dropout_rate, training=is_train_mode(mode))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "V_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._split_heads(V)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_209": {
                "a": {
                    "value": "splitted_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [tf.shape(x)[0], tf.shape(x)[1], self._hparams.num_heads, depth // self._hparams.num_heads])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_222": {
                "tensor": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 2, 1, 3])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[tf.shape(t)[0], tf.shape(t)[1], num_heads * dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_52": {
                "name_or_scope": {
                    "value": "self.variable_scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_142": {
                "name_or_scope": {
                    "value": "self.variable_scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_scope_54": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "concat_157": {
                "variable": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[cache['self_keys'], K]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_158": {
                "variable": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[cache['self_values'], V]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cond_165": {
                "variable": {
                    "value": "(K, V)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.equal(tf.shape(cache['memory_keys'])[1], 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : [self.K_dense(memory), self.V_dense(memory)]",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : [cache['memory_keys'], cache['memory_values']]",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "shape_207": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_222": {
                "input": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 2, 1, 3])",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_166": {
                "x": {
                    "value": "tf.shape(cache['memory_keys'])[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_166": {
                "input": {
                    "value": "cache['memory_keys']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "texar_repo/texar/modules/encoders/rnn_encoders.py": {
        "tensorflow": {
            "reshape_105": {
                "variable": {
                    "value": "inputs_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputs_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.reshape(inputs_flat, [-1, dim])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_111": {
                "variable": {
                    "value": "output_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.shape(inputs)[:2], output_size]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_112": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "output_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_layer(inputs_flat)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "output_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([tf.shape(inputs)[:2], output_size], axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "flatten_191": {
                "variable": {
                    "value": "cell_outputs_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "cell_outputs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "flatten_192": {
                "variable": {
                    "value": "cell_output_size_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "cell_output_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "pack_sequence_as_196": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "cell_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "flat_sequence": {
                    "value": "outputs_flat",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "pack_sequence_as_197": {
                "variable": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "cell_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "flat_sequence": {
                    "value": "output_size_flat",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "dropout_128": {
                "x": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "rate": {
                    "value": "hparams.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "noise_shape": {
                    "value": "noise_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "[1, None, None]",
                            "List"
                        ],
                        [
                            "[None, 1, None]",
                            "List"
                        ]
                    ]
                },
                "training": {
                    "value": "training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "is_train_mode(mode)",
                            "Call"
                        ]
                    ]
                }
            },
            "dynamic_rnn_491": {
                "variable": {
                    "value": "(cell_outputs, state)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell": {
                    "value": "self._cell",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "sequence_length": {
                    "value": "sequence_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "initial_state": {
                    "value": "initial_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "time_major": {
                    "value": "time_major",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dynamic_rnn_500": {
                "variable": {
                    "value": "(cell_outputs, state)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell": {
                    "value": "self._cell",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "sequence_length": {
                    "value": "sequence_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "initial_state": {
                    "value": "initial_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "time_major": {
                    "value": "time_major",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "bidirectional_dynamic_rnn_820": {
                "variable": {
                    "value": "(cell_outputs, states)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell_fw": {
                    "value": "self._cell_fw",
                    "type": "Attribute",
                    "possible_values": []
                },
                "cell_bw": {
                    "value": "self._cell_bw",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "sequence_length": {
                    "value": "sequence_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "initial_state_fw": {
                    "value": "initial_state_fw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "initial_state_bw": {
                    "value": "initial_state_bw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "time_major": {
                    "value": "time_major",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bidirectional_dynamic_rnn_831": {
                "variable": {
                    "value": "(cell_outputs, states)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell_fw": {
                    "value": "self._cell_fw",
                    "type": "Attribute",
                    "possible_values": []
                },
                "cell_bw": {
                    "value": "self._cell_bw",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "sequence_length": {
                    "value": "sequence_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "initial_state_fw": {
                    "value": "initial_state_fw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "initial_state_bw": {
                    "value": "initial_state_bw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "time_major": {
                    "value": "time_major",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_288": {
                "name_or_scope": {
                    "value": "self.variable_scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_296": {
                "name_or_scope": {
                    "value": "self.variable_scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_607": {
                "name_or_scope": {
                    "value": "self.variable_scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_624": {
                "name_or_scope": {
                    "value": "self.variable_scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_111": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "texar_repo/texar/modules/encoders/rnn_encoders_test.py": {
        "tensorflow": {
            "placeholder_28": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None, 100]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_117": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[64, 16]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_137": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None, 100]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "main_266": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_79": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_108": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_124": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_193": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_225": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "texar_repo/texar/modules/encoders/transformer_encoders.py": {
        "tensorflow": {
            "expand_dims_331": {
                "variable": {
                    "value": "positions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.range(lengths, dtype=tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_338": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layers.layer_normalize(input_embedding)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(x, rate=self._hparams.embedding_dropout, training=is_train_mode(mode))",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(input_embedding, rate=self._hparams.embedding_dropout, training=is_train_mode(mode))",
                            "Call"
                        ],
                        [
                            "layers.layer_normalize(x)",
                            "Call"
                        ],
                        [
                            "x + attention_output",
                            "BinOp"
                        ],
                        [
                            "layers.layer_normalize(x)",
                            "Call"
                        ],
                        [
                            "x + sub_output",
                            "BinOp"
                        ],
                        [
                            "layers.layer_normalize(x)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "self._hparams.embedding_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "is_train_mode(mode)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_342": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "input_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs + pos_embeds",
                            "BinOp"
                        ]
                    ]
                },
                "rate": {
                    "value": "self._hparams.embedding_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "is_train_mode(mode)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_131": {
                "name_or_scope": {
                    "value": "self.variable_scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sequence_mask_320": {
                "lengths": {
                    "value": "sequence_length",
                    "type": "variable",
                    "possible_values": []
                },
                "maxlen": {
                    "value": "tf.shape(inputs)[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "range_331": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_367": {
                "variable": {
                    "value": "attention_output",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "attention_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "multihead_attention(queries=_queries_input, memory=_queries_input, memory_attention_bias=encoder_self_attention_bias, mode=mode)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(attention_output, rate=self._hparams.residual_dropout, training=is_train_mode(mode))",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "self._hparams.residual_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "is_train_mode(mode)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_scope_133": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_353": {
                "name_or_scope": {
                    "value": "'layer_{}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_382": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "layers.layer_normalize(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [-1, self._hparams.dim])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(pad_remover.remove(y), axis=0)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self._hparams.dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dropout_387": {
                "variable": {
                    "value": "sub_output",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "layer_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "poswise_network(y, mode=mode)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "self._hparams.residual_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "is_train_mode(mode)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_153": {
                "name_or_scope": {
                    "value": "'layer_{}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_321": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs * self._hparams.dim ** 0.5",
                            "BinOp"
                        ],
                        [
                            "mask_sequences(inputs, sequence_length, tensor_rank=3)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_373": {
                "name_or_scope": {
                    "value": "output",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_380": {
                "name_or_scope": {
                    "value": "poswise_network.variable_scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_384": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pad_remover.remove(y)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_393": {
                "variable": {
                    "value": "sub_output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "pad_remover.restore(tf.squeeze(sub_output, axis=0))",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "original_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape_list(y)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_397": {
                "variable": {
                    "value": "sub_output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "sub_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dropout(layer_output, rate=self._hparams.residual_dropout, training=is_train_mode(mode))",
                            "Call"
                        ],
                        [
                            "tf.reshape(pad_remover.restore(tf.squeeze(sub_output, axis=0)), original_shape)",
                            "Call"
                        ],
                        [
                            "tf.reshape(sub_output, original_shape)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "original_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape_list(y)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_154": {
                "name_or_scope": {
                    "value": "attention",
                    "type": "str",
                    "possible_values": []
                }
            },
            "squeeze_393": {
                "input": {
                    "value": "sub_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dropout(layer_output, rate=self._hparams.residual_dropout, training=is_train_mode(mode))",
                            "Call"
                        ],
                        [
                            "tf.reshape(pad_remover.restore(tf.squeeze(sub_output, axis=0)), original_shape)",
                            "Call"
                        ],
                        [
                            "tf.reshape(sub_output, original_shape)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "texar_repo/texar/modules/memory/memory_network.py": {
        "tensorflow": {
            "matmul_87": {
                "variable": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.expand_dims(u, axis=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_88": {
                "variable": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(m, tf.expand_dims(u, axis=2))",
                            "Call"
                        ],
                        [
                            "tf.transpose(p, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(p)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_90": {
                "variable": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(m, tf.expand_dims(u, axis=2))",
                            "Call"
                        ],
                        [
                            "tf.transpose(p, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(p)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_93": {
                "variable": {
                    "value": "o",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(m, tf.expand_dims(u, axis=2))",
                            "Call"
                        ],
                        [
                            "tf.transpose(p, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(p)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "squeeze_94": {
                "variable": {
                    "value": "o",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "o",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(p, c)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(o, axis=[1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "add_98": {
                "variable": {
                    "value": "u_",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(u, self._H)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "o",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(p, c)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(o, axis=[1])",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_97": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(u, self._H)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self._H",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tile_290": {
                "variable": {
                    "value": "temporal_embedded",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "temporal_embedded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "temporal_embedder(sequence_length=tf.constant([memory_size]), mode=mode)",
                            "Call"
                        ],
                        [
                            "tf.tile(temporal_embedded, [tf.shape(embedded_memory)[0], 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[tf.shape(embedded_memory)[0], 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Dense_459": {
                "variable": {
                    "value": "self._W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "raw_memory_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                }
            },
            "squeeze_576": {
                "variable": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self._B(_unsqueeze(query), _unsqueeze(soft_query), mode=mode)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_87": {
                "input": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(u, self._H)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_164": {
                "name_or_scope": {
                    "value": "self.variable_scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_170": {
                "variable": {
                    "value": "self.H",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "H",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self._memory_dim, self._memory_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_454": {
                "name_or_scope": {
                    "value": "self.variable_scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "floor_588": {
                "variable": {
                    "value": "binary_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "random_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "keep_prob + noise",
                            "BinOp"
                        ]
                    ]
                }
            },
            "dropout_609": {
                "variable": {
                    "value": "u_",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "u_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.add(u, o)",
                            "Call"
                        ],
                        [
                            "self._AC(self._u[-1], self._m, self._c)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(u_)",
                            "Call"
                        ],
                        [
                            "_variational_dropout(u_)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(u_, keep_prob)",
                            "Call"
                        ],
                        [
                            "tf.concat(axis=1, values=[linear_part, relued_part])",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "keep_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "switch_dropout(1 - self.hparams.dropout_rate, mode=mode)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_294": {
                "x": {
                    "value": "embedded_memory",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedder(ids=memory, soft_ids=soft_memory, mode=mode)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "temporal_embedded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "temporal_embedder(sequence_length=tf.constant([memory_size]), mode=mode)",
                            "Call"
                        ],
                        [
                            "tf.tile(temporal_embedded, [tf.shape(embedded_memory)[0], 1, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_585": {
                "name_or_scope": {
                    "value": "variational_dropout",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_597": {
                "variable": {
                    "value": "u_",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "u_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.add(u, o)",
                            "Call"
                        ],
                        [
                            "self._AC(self._u[-1], self._m, self._c)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(u_)",
                            "Call"
                        ],
                        [
                            "_variational_dropout(u_)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(u_, keep_prob)",
                            "Call"
                        ],
                        [
                            "tf.concat(axis=1, values=[linear_part, relued_part])",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_289": {
                "value": {
                    "value": "[memory_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_296": {
                "values": {
                    "value": "[embedded_memory, temporal_embedded]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_575": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_586": {
                "input": {
                    "value": "self._u[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "div_590": {
                "x": {
                    "value": "val",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "keep_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "switch_dropout(1 - self.hparams.dropout_rate, mode=mode)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_601": {
                "variable": {
                    "value": "relued_part",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "relu_part",
                    "type": "variable",
                    "possible_values": [
                        [
                            "u_[:, self._memory_dim - self._relu_dim:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "concat_602": {
                "variable": {
                    "value": "u_",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[linear_part, relued_part]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_291": {
                "input": {
                    "value": "embedded_memory",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedder(ids=memory, soft_ids=soft_memory, mode=mode)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "texar_repo/texar/modules/memory/memory_network_test.py": {
        "tensorflow": {
            "main_99": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tile_71": {
                "variable": {
                    "value": "kwargs[memory]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(tf.range(memory_size, dtype=tf.int32), 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[batch_size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_71": {
                "input": {
                    "value": "tf.range(memory_size, dtype=tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "range_72": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "texar_repo/texar/modules/networks/conv_networks.py": {
        "tensorflow": {
            "variable_scope_91": {
                "name_or_scope": {
                    "value": "self.variable_scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "texar_repo/texar/modules/networks/conv_networks_test.py": {
        "tensorflow": {
            "ones_31": {
                "variable": {
                    "value": "inputs_1",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[64, 16, 300]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_62": {
                "variable": {
                    "value": "inputs_2",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[64, 16, 300]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_71": {
                "variable": {
                    "value": "inputs_1",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[64, None, 300]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_93": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[64, None, 300]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_111": {
                "variable": {
                    "value": "inputs_2",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[64, 300, None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_119": {
                "variable": {
                    "value": "inputs_1",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[3, 16, 300]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "main_126": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "texar_repo/texar/modules/networks/network_base.py": {
        "tensorflow": {
            "variable_scope_52": {
                "name_or_scope": {
                    "value": "network.variable_scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_153": {
                "name_or_scope": {
                    "value": "self.variable_scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "texar_repo/texar/modules/networks/networks.py": {
        "tensorflow": {
            "variable_scope_66": {
                "name_or_scope": {
                    "value": "self.variable_scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "texar_repo/texar/modules/networks/networks_test.py": {
        "tensorflow": {
            "main_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_37": {
                "shape": {
                    "value": "[64, 16, 16]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "texar_repo/texar/modules/policies/policy_nets.py": {
        "tensorflow": {
            "Categorical_306": {
                "variable": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._network(inputs, mode=mode)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_311": {
                "variable": {
                    "value": "action",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "action",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dist.sample()",
                            "Call"
                        ],
                        [
                            "tf.reshape(action, to_shape)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "to_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[-1]",
                            "List"
                        ]
                    ]
                }
            },
            "variable_scope_62": {
                "name_or_scope": {
                    "value": "self.variable_scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_191": {
                "name_or_scope": {
                    "value": "self.variable_scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "texar_repo/texar/modules/policies/policy_nets_test.py": {
        "tensorflow": {
            "main_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "texar_repo/texar/modules/qnets/qnets.py": {
        "tensorflow": {
            "variable_scope_61": {
                "name_or_scope": {
                    "value": "self.variable_scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_179": {
                "name_or_scope": {
                    "value": "self.variable_scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "texar_repo/texar/run/executor.py": {
        "tensorflow": {
            "Estimator_94": {
                "variable": {
                    "value": "self._estimator",
                    "type": "Attribute",
                    "possible_values": []
                },
                "model_fn": {
                    "value": "self._model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self._model_hparams",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TrainSpec_104": {
                "input_fn": {
                    "value": "input_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._model.get_input_fn(mode=tf.estimator.ModeKeys.TRAIN, hparams=self._data_hparams['train'])",
                            "Call"
                        ],
                        [
                            "self._model.get_input_fn(mode=tf.estimator.ModeKeys.EVAL, hparams=self._data_hparams['eval'])",
                            "Call"
                        ]
                    ]
                },
                "max_steps": {
                    "value": "max_steps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "hooks": {
                    "value": "self._train_hooks",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "EvalSpec_116": {
                "input_fn": {
                    "value": "input_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._model.get_input_fn(mode=tf.estimator.ModeKeys.TRAIN, hparams=self._data_hparams['train'])",
                            "Call"
                        ],
                        [
                            "self._model.get_input_fn(mode=tf.estimator.ModeKeys.EVAL, hparams=self._data_hparams['eval'])",
                            "Call"
                        ]
                    ]
                },
                "steps": {
                    "value": "steps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "hooks": {
                    "value": "self._eval_hooks",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "train_and_evaluate_174": {
                "estimator": {
                    "value": "self._estimator",
                    "type": "Attribute",
                    "possible_values": []
                },
                "train_spec": {
                    "value": "train_spec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._get_train_spec(max_steps=max_steps)",
                            "Call"
                        ],
                        [
                            "self._get_train_spec(max_steps=max_train_steps)",
                            "Call"
                        ]
                    ]
                },
                "eval_spec": {
                    "value": "eval_spec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._get_eval_spec(steps=steps)",
                            "Call"
                        ],
                        [
                            "self._get_eval_spec(steps=eval_steps)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "texar_repo/texar/run/executor_test.py": {
        "tensorflow": {
            "RunConfig_67": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "model_dir": {
                    "value": "model_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tempfile.mkdtemp()",
                            "Call"
                        ]
                    ]
                },
                "save_summary_steps": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "save_checkpoints_steps": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "save_checkpoints_secs": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "main_83": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "texar_repo/texar/utils/average_recorder_test.py": {
        "tensorflow": {
            "main_71": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "texar_repo/texar/utils/beam_search.py": {
        "tensorflow": {
            "expand_dims_76": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tensor, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_110": {
                "variable": {
                    "value": "batch_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "batch_pos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.range(batch_size * beam_size) // beam_size",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(batch_pos, [batch_size, beam_size])",
                            "Call"
                        ],
                        [
                            "compute_batch_indices(batch_size, beam_size)",
                            "Call"
                        ],
                        [
                            "compute_batch_indices(batch_size, beam_size * 2)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, beam_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "top_k_156": {
                "variable": {
                    "value": "(_, topk_indexes)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "k": {
                    "value": "beam_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stack_167": {
                "variable": {
                    "value": "top_coordinates",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[batch_pos, topk_indexes]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_247": {
                "variable": {
                    "value": "initial_log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0.0] + [-float('inf')] * (beam_size - 1)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_250": {
                "variable": {
                    "value": "alive_log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "initial_log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([[0.0] + [-float('inf')] * (beam_size - 1)])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[batch_size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_254": {
                "variable": {
                    "value": "alive_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alive_seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_expand_to_beam_size(initial_ids, beam_size)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(alive_seq, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_267": {
                "variable": {
                    "value": "finished_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape_list(alive_seq)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_270": {
                "variable": {
                    "value": "finished_flags",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, beam_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "while_loop_561": {
                "variable": {
                    "value": "(_, alive_seq, alive_log_probs, finished_seq, finished_scores, finished_flags, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "_is_finished",
                    "type": "variable",
                    "possible_values": []
                },
                "body": {
                    "value": "inner_loop",
                    "type": "variable",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "[tf.constant(0), alive_seq, alive_log_probs, finished_seq, finished_scores, finished_flags, states]",
                    "type": "List",
                    "possible_values": []
                },
                "shape_invariants": {
                    "value": "[tf.TensorShape([]), tf.TensorShape([None, None, None]), alive_log_probs.get_shape(), tf.TensorShape([None, None, None]), finished_scores.get_shape(), finished_flags.get_shape(), nest.map_structure(get_state_shape_invariants, states)]",
                    "type": "List",
                    "possible_values": []
                },
                "parallel_iterations": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "back_prop": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "where_588": {
                "variable": {
                    "value": "finished_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.reduce_any(finished_flags, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "finished_seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros(shape_list(alive_seq), tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.reduce_any(finished_flags, 1), finished_seq, alive_seq)",
                            "Call"
                        ],
                        [
                            "tf.concat([finished_seq, tf.zeros([batch_size, beam_size, 1], tf.int32)], axis=2)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "alive_seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_expand_to_beam_size(initial_ids, beam_size)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(alive_seq, axis=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_590": {
                "variable": {
                    "value": "finished_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.reduce_any(finished_flags, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "finished_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones([batch_size, beam_size]) * -INF",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.reduce_any(finished_flags, 1), finished_scores, alive_log_probs)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "alive_log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(initial_log_probs, [batch_size, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_47": {
                "tensor": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tensor, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape_list(tensor)",
                            "Call"
                        ],
                        [
                            "shape_list(tensor)",
                            "Call"
                        ],
                        [
                            "tensor.shape.as_list()",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_63": {
                "tensor": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tensor, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "new_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[batch_size] + [beam_size] + shape[1:]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tile_80": {
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tensor, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "tile_dims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1] * tensor.shape.ndims",
                            "BinOp"
                        ]
                    ]
                }
            },
            "TensorShape_88": {
                "dims": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape_list(tensor)",
                            "Call"
                        ],
                        [
                            "shape_list(tensor)",
                            "Call"
                        ],
                        [
                            "tensor.shape.as_list()",
                            "Call"
                        ]
                    ]
                }
            },
            "map_structure_179": {
                "variable": {
                    "value": "topk_gathered_states",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "lambda state: gather(state, '_topk_states')",
                    "type": "Lambda",
                    "possible_values": []
                },
                "*structure": {
                    "value": "states_to_gather",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "map_structure_257": {
                "variable": {
                    "value": "states",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "lambda state: _expand_to_beam_size(state, beam_size)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "*structure": {
                    "value": "states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nest.map_structure(lambda state: _expand_to_beam_size(state, beam_size), states)",
                            "Call"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "nest.map_structure(lambda t: _unmerge_beam_dim(t, batch_size, beam_size), flat_states)",
                            "Call"
                        ],
                        [
                            "nest.map_structure(lambda state: tf.gather_nd(state, topk_coordinates), states)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_299": {
                "variable": {
                    "value": "finished_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[finished_seq, tf.zeros([batch_size, beam_size, 1], tf.int32)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_307": {
                "variable": {
                    "value": "curr_finished_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[finished_seq, curr_seq]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_308": {
                "variable": {
                    "value": "curr_finished_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[finished_scores, curr_scores]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_310": {
                "variable": {
                    "value": "curr_finished_flags",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[finished_flags, curr_finished]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_375": {
                "variable": {
                    "value": "flat_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "alive_seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_expand_to_beam_size(initial_ids, beam_size)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(alive_seq, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size * beam_size, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_387": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "flat_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "symbols_to_logits_fn(flat_ids)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, beam_size, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pow_398": {
                "variable": {
                    "value": "length_penalty",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "(5.0 + tf.to_float(i + 1)) / 6.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reshape_403": {
                "variable": {
                    "value": "flat_curr_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "curr_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "curr_scores + tf.to_float(curr_finished) * -INF",
                            "BinOp"
                        ],
                        [
                            "log_probs / length_penalty",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, beam_size * vocab_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "top_k_406": {
                "variable": {
                    "value": "(topk_scores, topk_ids)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "flat_curr_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(curr_scores, [-1, beam_size * vocab_size])",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "beam_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_425": {
                "variable": {
                    "value": "topk_coordinates",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[batch_pos, topk_beam_index]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_nd_429": {
                "variable": {
                    "value": "topk_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "alive_seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_expand_to_beam_size(initial_ids, beam_size)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(alive_seq, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "topk_coordinates",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([batch_pos, topk_beam_index], axis=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_436": {
                "variable": {
                    "value": "topk_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[topk_seq, tf.expand_dims(topk_ids, axis=2)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "equal_439": {
                "variable": {
                    "value": "topk_finished",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "topk_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "topk_ids % vocab_size",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "eos_id",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "pow_531": {
                "variable": {
                    "value": "max_length_penalty",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "(5.0 + tf.to_float(decode_length)) / 6.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_min_542": {
                "variable": {
                    "value": "lowest_score_of_fininshed_in_finished",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "finished_scores * tf.to_float(finished_in_finished)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_all_553": {
                "variable": {
                    "value": "bound_is_met",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.greater(lowest_score_of_fininshed_in_finished, lower_bound_alive_scores)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_logsumexp_92": {
                "input_tensor": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(flat_logits, [batch_size, beam_size, -1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "gather_nd_174": {
                "params": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tensor, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "top_coordinates",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([batch_pos, topk_indexes], axis=2)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "prefix + name",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_269": {
                "shape": {
                    "value": "[batch_size, beam_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "map_structure_379": {
                "variable": {
                    "value": "flat_states",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "_merge_beam_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "*structure": {
                    "value": "states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nest.map_structure(lambda state: _expand_to_beam_size(state, beam_size), states)",
                            "Call"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "nest.map_structure(lambda t: _unmerge_beam_dim(t, batch_size, beam_size), flat_states)",
                            "Call"
                        ],
                        [
                            "nest.map_structure(lambda state: tf.gather_nd(state, topk_coordinates), states)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "map_structure_382": {
                "variable": {
                    "value": "states",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "lambda t: _unmerge_beam_dim(t, batch_size, beam_size)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "*structure": {
                    "value": "flat_states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nest.map_structure(_merge_beam_dim, states)",
                            "Call"
                        ]
                    ]
                }
            },
            "map_structure_431": {
                "variable": {
                    "value": "states",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "lambda state: tf.gather_nd(state, topk_coordinates)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "*structure": {
                    "value": "states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nest.map_structure(lambda state: _expand_to_beam_size(state, beam_size), states)",
                            "Call"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "nest.map_structure(lambda t: _unmerge_beam_dim(t, batch_size, beam_size), flat_states)",
                            "Call"
                        ],
                        [
                            "nest.map_structure(lambda state: tf.gather_nd(state, topk_coordinates), states)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "logical_and_557": {
                "x": {
                    "value": "tf.less(i, decode_length)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.logical_not(bound_is_met)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_any_589": {
                "input_tensor": {
                    "value": "finished_flags",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros([batch_size, beam_size], tf.bool)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_any_591": {
                "input_tensor": {
                    "value": "finished_flags",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros([batch_size, beam_size], tf.bool)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "to_float_341": {
                "x": {
                    "value": "curr_finished",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "expand_dims_395": {
                "input": {
                    "value": "alive_log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(initial_log_probs, [batch_size, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "less_530": {
                "x": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(1, len(shape) - 1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "decode_length",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "greater_554": {
                "x": {
                    "value": "lowest_score_of_fininshed_in_finished",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_min(finished_scores * tf.to_float(finished_in_finished), axis=1)",
                            "Call"
                        ],
                        [
                            "lowest_score_of_fininshed_in_finished + (1.0 - tf.to_float(tf.reduce_any(finished_in_finished, 1))) * -INF",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "lower_bound_alive_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "alive_log_probs[:, 0] / max_length_penalty",
                            "BinOp"
                        ]
                    ]
                }
            },
            "less_558": {
                "x": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(1, len(shape) - 1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "decode_length",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "logical_not_558": {
                "x": {
                    "value": "bound_is_met",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_all(tf.greater(lowest_score_of_fininshed_in_finished, lower_bound_alive_scores))",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_564": {
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_301": {
                "shape": {
                    "value": "[batch_size, beam_size, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "to_float_305": {
                "x": {
                    "value": "curr_finished",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "expand_dims_436": {
                "input": {
                    "value": "topk_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "topk_ids % vocab_size",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "to_float_543": {
                "x": {
                    "value": "finished_in_finished",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "to_float_550": {
                "x": {
                    "value": "tf.reduce_any(finished_in_finished, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "TensorShape_568": {
                "dims": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_569": {
                "dims": {
                    "value": "[None, None, None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_571": {
                "dims": {
                    "value": "[None, None, None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "map_structure_574": {
                "func": {
                    "value": "get_state_shape_invariants",
                    "type": "variable",
                    "possible_values": []
                },
                "*structure": {
                    "value": "states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nest.map_structure(lambda state: _expand_to_beam_size(state, beam_size), states)",
                            "Call"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "nest.map_structure(lambda t: _unmerge_beam_dim(t, batch_size, beam_size), flat_states)",
                            "Call"
                        ],
                        [
                            "nest.map_structure(lambda state: tf.gather_nd(state, topk_coordinates), states)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "to_float_398": {
                "x": {
                    "value": "i + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gather_nd_432": {
                "params": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "topk_coordinates",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([batch_pos, topk_beam_index], axis=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "to_float_531": {
                "x": {
                    "value": "decode_length",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_any_550": {
                "input_tensor": {
                    "value": "finished_in_finished",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "texar_repo/texar/utils/dtypes.py": {
        "tensorflow": {
            "as_text_134": {
                "bytes_or_text": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "as_text_136": {
                "bytes_or_text": {
                    "value": "str(s)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "texar_repo/texar/utils/mode.py": {
        "tensorflow": {
            "equal_54": {
                "x": {
                    "value": "mode",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.estimator.ModeKeys.TRAIN",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_64": {
                "x": {
                    "value": "mode",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.estimator.ModeKeys.EVAL",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_74": {
                "x": {
                    "value": "mode",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.estimator.ModeKeys.PREDICT",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "to_float_148": {
                "x": {
                    "value": "is_train_mode(mode)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "texar_repo/texar/utils/mode_test.py": {
        "tensorflow": {
            "main_47": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "texar_repo/texar/utils/shapes.py": {
        "tensorflow": {
            "flatten_56": {
                "variable": {
                    "value": "flat_input",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "to_int32_179": {
                "variable": {
                    "value": "max_time",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.shape(sequence)[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sequence_mask_182": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "lengths": {
                    "value": "tf.to_int32(sequence_length)",
                    "type": "Call",
                    "possible_values": []
                },
                "maxlen": {
                    "value": "max_time",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_int32(tf.shape(sequence)[1])",
                            "Call"
                        ],
                        [
                            "sequence.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sequence.dtype",
                            "Attribute"
                        ],
                        [
                            "dtype or sequence.dtype",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_271": {
                "variable": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.shape(tensor)[:preserve_dims], [flattened_dim]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_273": {
                "variable": {
                    "value": "tensor_",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor.shape",
                            "Attribute"
                        ],
                        [
                            "tf.concat([tf.shape(tensor)[:preserve_dims], [flattened_dim]], axis=0)",
                            "Call"
                        ],
                        [
                            "tf.shape(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "convert_to_tensor_288": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_293": {
                "variable": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "pack_sequence_as_60": {
                "structure": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "flat_sequence": {
                    "value": "flat_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nest.flatten(inputs)",
                            "Call"
                        ],
                        [
                            "[ops.convert_to_tensor(input_) for input_ in flat_input]",
                            "ListComp"
                        ],
                        [
                            "[rnn._transpose_batch_time(input_) for input_ in flat_input]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "is_tensor_80": {
                "x": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "expand_dims_185": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sequence_mask(tf.to_int32(sequence_length), max_time, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(mask, axis=-1)",
                            "Call"
                        ],
                        [
                            "np.asarray(steps < sequence_length[:, None], dtype=dtype)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(mask, -1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_max_374": {
                "variable": {
                    "value": "max_dim_size",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "[tf.shape(v)[pa] for v in values]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "concat_378": {
                "values": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "convert_to_tensor_57": {
                "value": {
                    "value": "input_",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_66": {
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "to_int32_183": {
                "x": {
                    "value": "sequence_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(sequence_length)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_291": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "pad_365": {
                "tensor": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "values",
                            "variable"
                        ]
                    ]
                },
                "paddings": {
                    "value": "paddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros([rank, 2], dtype=np.int32)",
                            "Call"
                        ],
                        [
                            "paddings * (size - tf.shape(value)[axis_])",
                            "BinOp"
                        ]
                    ]
                },
                "mode": {
                    "value": "CONSTANT",
                    "type": "str",
                    "possible_values": []
                },
                "constant_values": {
                    "value": "pad_constant_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_179": {
                "input": {
                    "value": "sequence",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rnn._transpose_batch_time(sequence)",
                            "Call"
                        ],
                        [
                            "sequence * mask",
                            "BinOp"
                        ],
                        [
                            "rnn._transpose_batch_time(sequence)",
                            "Call"
                        ],
                        [
                            "np.array(sequence)",
                            "Call"
                        ],
                        [
                            "np.transpose(sequence, axes=[1, 0, 2])",
                            "Call"
                        ],
                        [
                            "sequence * mask",
                            "BinOp"
                        ],
                        [
                            "np.transpose(sequence, axes=[1, 0, 2])",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_271": {
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_364": {
                "input": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "values",
                            "variable"
                        ]
                    ]
                }
            },
            "shape_374": {
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "texar_repo/texar/utils/shapes_test.py": {
        "tensorflow": {
            "ones_35": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[3, 10, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_36": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[4, 20, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_37": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[5, 1, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_46": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[6, None, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "main_53": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "texar_repo/texar/utils/transformer_attentions.py": {
        "tensorflow": {
            "expand_dims_86": {
                "input": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": [
                        [
                            "memory_padding * bias_value",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_104": {
                "variable": {
                    "value": "band",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "band",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_ones_matrix_band_part(length, length, max_backward, max_forward, out_shape=[1, 1, length, length])",
                            "Call"
                        ],
                        [
                            "tf.matrix_band_part(tf.ones([rows, cols]), tf.cast(num_lower, tf.int64), tf.cast(num_upper, tf.int64))",
                            "Call"
                        ],
                        [
                            "tf.reshape(band, out_shape)",
                            "Call"
                        ],
                        [
                            "np.ones((rows, cols)) * lower_mask * upper_mask",
                            "BinOp"
                        ],
                        [
                            "band.reshape(out_shape)",
                            "Call"
                        ],
                        [
                            "tf.constant(band, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_110": {
                "variable": {
                    "value": "band",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "band",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_ones_matrix_band_part(length, length, max_backward, max_forward, out_shape=[1, 1, length, length])",
                            "Call"
                        ],
                        [
                            "tf.matrix_band_part(tf.ones([rows, cols]), tf.cast(num_lower, tf.int64), tf.cast(num_upper, tf.int64))",
                            "Call"
                        ],
                        [
                            "tf.reshape(band, out_shape)",
                            "Call"
                        ],
                        [
                            "np.ones((rows, cols)) * lower_mask * upper_mask",
                            "BinOp"
                        ],
                        [
                            "band.reshape(out_shape)",
                            "Call"
                        ],
                        [
                            "tf.constant(band, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "out_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_106": {
                "shape": {
                    "value": "[rows, cols]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_107": {
                "x": {
                    "value": "num_lower",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rows - 1",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_108": {
                "x": {
                    "value": "num_upper",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cols - 1",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "texar_repo/texar/utils/transformer_utils.py": {
        "tensorflow": {
            "reduce_sum_126": {
                "variable": {
                    "value": "emb_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.abs(emb)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "to_float_127": {
                "x": {
                    "value": "tf.equal(emb_sum, 0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_66": {
                "variable": {
                    "value": "pad_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "pad_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(pad_mask, [-1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_int32_71": {
                "variable": {
                    "value": "self.nonpad_ids",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.where(pad_mask < 1e-09)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_nd_86": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather_nd(x, indices=self.nonpad_ids)",
                            "Call"
                        ],
                        [
                            "tf.scatter_nd(indices=self.nonpad_ids, updates=x, shape=tf.concat([self.dim_origin, tf.shape(x)[1:]], axis=0))",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "self.nonpad_ids",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scatter_nd_108": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "self.nonpad_ids",
                    "type": "Attribute",
                    "possible_values": []
                },
                "updates": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather_nd(x, indices=self.nonpad_ids)",
                            "Call"
                        ],
                        [
                            "tf.scatter_nd(indices=self.nonpad_ids, updates=x, shape=tf.concat([self.dim_origin, tf.shape(x)[1:]], axis=0))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.concat([self.dim_origin, tf.shape(x)[1:]], axis=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_126": {
                "x": {
                    "value": "emb",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "equal_127": {
                "x": {
                    "value": "emb_sum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.abs(emb), axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "name_scope_153": {
                "name": {
                    "value": "smoothing_cross_entropy",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[logits, labels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_163": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(labels, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Normal_164": {
                "variable": {
                    "value": "normal_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(labels, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "confidence",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "transpose_171": {
                "variable": {
                    "value": "soft_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "soft_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "normal_dist.prob(tf.cast(tf.range(vocab_size), tf.float32)[:, None, None])",
                            "Call"
                        ],
                        [
                            "tf.transpose(soft_targets, perm=[1, 2, 0])",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(labels, tf.int32), depth=vocab_size, on_value=confidence, off_value=low_confidence, dtype=logits.dtype)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.expand_dims(tf.zeros_like(labels, dtype=tf.float32), 2), soft_targets[:, :, 1:]], -1)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 2, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "one_hot_173": {
                "variable": {
                    "value": "soft_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "tf.cast(labels, tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": []
                },
                "on_value": {
                    "value": "confidence",
                    "type": "variable",
                    "possible_values": []
                },
                "off_value": {
                    "value": "low_confidence",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1.0 - confidence) / tf.to_float(vocab_size - 2)",
                            "BinOp"
                        ],
                        [
                            "(1.0 - confidence) / tf.to_float(vocab_size - 1)",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "logits.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_180": {
                "variable": {
                    "value": "soft_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.expand_dims(tf.zeros_like(labels, dtype=tf.float32), 2), soft_targets[:, :, 1:]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "name_scope_65": {
                "name": {
                    "value": "pad_reduce/get_ids",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_84": {
                "name": {
                    "value": "pad_reduce/remove",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_107": {
                "name": {
                    "value": "pad_reduce/restore",
                    "type": "str",
                    "possible_values": []
                }
            },
            "stop_gradient_190": {
                "input": {
                    "value": "soft_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "normal_dist.prob(tf.cast(tf.range(vocab_size), tf.float32)[:, None, None])",
                            "Call"
                        ],
                        [
                            "tf.transpose(soft_targets, perm=[1, 2, 0])",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(labels, tf.int32), depth=vocab_size, on_value=confidence, off_value=low_confidence, dtype=logits.dtype)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.expand_dims(tf.zeros_like(labels, dtype=tf.float32), 2), soft_targets[:, :, 1:]], -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_71": {
                "condition": {
                    "value": "pad_mask < 1e-09",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "shape_72": {
                "input": {
                    "value": "pad_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(pad_mask, [-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "to_float_156": {
                "x": {
                    "value": "vocab_size - 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "to_float_159": {
                "x": {
                    "value": "vocab_size - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_174": {
                "x": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(labels, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_111": {
                "values": {
                    "value": "[self.dim_origin, tf.shape(x)[1:]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_167": {
                "x": {
                    "value": "tf.range(vocab_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_180": {
                "input": {
                    "value": "tf.zeros_like(labels, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_181": {
                "input": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(labels, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_111": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather_nd(x, indices=self.nonpad_ids)",
                            "Call"
                        ],
                        [
                            "tf.scatter_nd(indices=self.nonpad_ids, updates=x, shape=tf.concat([self.dim_origin, tf.shape(x)[1:]], axis=0))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "texar_repo/texar/utils/utils.py": {
        "tensorflow": {
            "stop_gradient_972": {
                "input": {
                    "value": "fw_tensor",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "texar_repo/texar/utils/utils_io.py": {
        "tensorflow": {
            "GFile_76": {
                "name": {
                    "value": "fname",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gfile.ListDirectory(config_path)",
                            "Call"
                        ],
                        [
                            "config_path.split(',')",
                            "Call"
                        ],
                        [
                            "fnames",
                            "variable"
                        ],
                        [
                            "os.path.join(config_path, fname)",
                            "Call"
                        ],
                        [
                            "fname.strip()",
                            "Call"
                        ]
                    ]
                }
            },
            "IsDirectory_134": {
                "dirname": {
                    "value": "config_path",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "IsDirectory_226": {
                "dirname": {
                    "value": "dirname",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "MakeDirs_227": {
                "dirname": {
                    "value": "dirname",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Glob_253": {
                "variable": {
                    "value": "files",
                    "type": "variable",
                    "possible_values": []
                },
                "filename": {
                    "value": "file_paths",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ListDirectory_135": {
                "dirname": {
                    "value": "config_path",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "IsDirectory_137": {
                "dirname": {
                    "value": "fname",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gfile.ListDirectory(config_path)",
                            "Call"
                        ],
                        [
                            "config_path.split(',')",
                            "Call"
                        ],
                        [
                            "fnames",
                            "variable"
                        ],
                        [
                            "os.path.join(config_path, fname)",
                            "Call"
                        ],
                        [
                            "fname.strip()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "texar_repo/texar/utils/utils_test.py": {
        "tensorflow": {
            "main_166": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "texar_repo/texar/utils/variables.py": {
        "tensorflow": {
            "variable_scope_50": {
                "name_or_scope": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "default_name": {
                    "value": "base_name",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "texar_repo/examples/seq2seq_exposure_bias/utils/raml_samples_generation/process_samples.py": {
        "torch": {
            "load_102": {
                "variable": {
                    "value": "vocab",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.vocab",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_172": {
                "variable": {
                    "value": "vocab",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.vocab",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_234": {
                "variable": {
                    "value": "vocab",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.vocab",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "texar_repo/examples/seq2seq_exposure_bias/utils/raml_samples_generation/vocab.py": {
        "torch": {
            "save_104": {
                "obj": {
                    "value": "vocab",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Vocab(src_sents, tgt_sents, args.src_vocab_size, args.tgt_vocab_size, remove_singleton=not args.include_singleton)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "args.output",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}