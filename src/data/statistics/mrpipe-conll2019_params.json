{
    "src/generate_embeddings/bert_wrapper.py": {
        "tensorflow": {
            "list_variables_925": {
                "variable": {
                    "value": "init_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "init_checkpoint",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "dropout_953": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "rate": {
                    "value": "1.0 - dropout_prob",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_variable_1005": {
                "variable": {
                    "value": "embedding_table",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "word_embedding_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'word_embeddings'",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[vocab_size, embedding_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "create_initializer(initializer_range)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_1019": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.nn.dropout(input_tensor, 1.0 - dropout_prob)",
                            "Call"
                        ],
                        [
                            "tf.matmul(one_hot_input_ids, embedding_table)",
                            "Call"
                        ],
                        [
                            "tf.nn.embedding_lookup(embedding_table, input_ids)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, input_shape[0:-1] + [input_shape[-1] * embedding_size])",
                            "Call"
                        ],
                        [
                            "input_tensor",
                            "variable"
                        ],
                        [
                            "output + position_embeddings",
                            "BinOp"
                        ],
                        [
                            "layer_norm_and_dropout(output, dropout_prob)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "copy.deepcopy(self.__dict__)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "input_shape[0:-1] + [input_shape[-1] * embedding_size]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_1137": {
                "variable": {
                    "value": "to_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reshape(to_mask, [batch_size, 1, to_seq_length])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_1145": {
                "variable": {
                    "value": "broadcast_ones",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, from_seq_length, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_1262": {
                "variable": {
                    "value": "query_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "from_tensor_2d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reshape_to_matrix(from_tensor)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "num_attention_heads * size_per_head",
                    "type": "BinOp",
                    "possible_values": []
                },
                "activation": {
                    "value": "query_act",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "query",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "create_initializer(initializer_range)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_1270": {
                "variable": {
                    "value": "key_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "to_tensor_2d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reshape_to_matrix(to_tensor)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "num_attention_heads * size_per_head",
                    "type": "BinOp",
                    "possible_values": []
                },
                "activation": {
                    "value": "key_act",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "key",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "create_initializer(initializer_range)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_1278": {
                "variable": {
                    "value": "value_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "to_tensor_2d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reshape_to_matrix(to_tensor)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "num_attention_heads * size_per_head",
                    "type": "BinOp",
                    "possible_values": []
                },
                "activation": {
                    "value": "value_act",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "value",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "create_initializer(initializer_range)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_1297": {
                "variable": {
                    "value": "attention_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "query_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(from_tensor_2d, num_attention_heads * size_per_head, activation=query_act, name='query', kernel_initializer=create_initializer(initializer_range))",
                            "Call"
                        ],
                        [
                            "transpose_for_scores(query_layer, batch_size, num_attention_heads, from_seq_length, size_per_head)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "key_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(to_tensor_2d, num_attention_heads * size_per_head, activation=key_act, name='key', kernel_initializer=create_initializer(initializer_range))",
                            "Call"
                        ],
                        [
                            "transpose_for_scores(key_layer, batch_size, num_attention_heads, to_seq_length, size_per_head)",
                            "Call"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "multiply_1298": {
                "variable": {
                    "value": "attention_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "attention_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(query_layer, key_layer, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.multiply(attention_scores, 1.0 / math.sqrt(float(size_per_head)))",
                            "Call"
                        ],
                        [
                            "attention_scores + adder",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "1.0 / math.sqrt(float(size_per_head))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softmax_1316": {
                "variable": {
                    "value": "attention_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "attention_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(query_layer, key_layer, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.multiply(attention_scores, 1.0 / math.sqrt(float(size_per_head)))",
                            "Call"
                        ],
                        [
                            "attention_scores + adder",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_1323": {
                "variable": {
                    "value": "value_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "value_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(to_tensor_2d, num_attention_heads * size_per_head, activation=value_act, name='value', kernel_initializer=create_initializer(initializer_range))",
                            "Call"
                        ],
                        [
                            "tf.reshape(value_layer, [batch_size, to_seq_length, num_attention_heads, size_per_head])",
                            "Call"
                        ],
                        [
                            "tf.transpose(value_layer, [0, 2, 1, 3])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, to_seq_length, num_attention_heads, size_per_head]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_1328": {
                "variable": {
                    "value": "value_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "value_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(to_tensor_2d, num_attention_heads * size_per_head, activation=value_act, name='value', kernel_initializer=create_initializer(initializer_range))",
                            "Call"
                        ],
                        [
                            "tf.reshape(value_layer, [batch_size, to_seq_length, num_attention_heads, size_per_head])",
                            "Call"
                        ],
                        [
                            "tf.transpose(value_layer, [0, 2, 1, 3])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_1331": {
                "variable": {
                    "value": "context_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "attention_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(attention_scores)",
                            "Call"
                        ],
                        [
                            "dropout(attention_probs, attention_probs_dropout_prob)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "value_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(to_tensor_2d, num_attention_heads * size_per_head, activation=value_act, name='value', kernel_initializer=create_initializer(initializer_range))",
                            "Call"
                        ],
                        [
                            "tf.reshape(value_layer, [batch_size, to_seq_length, num_attention_heads, size_per_head])",
                            "Call"
                        ],
                        [
                            "tf.transpose(value_layer, [0, 2, 1, 3])",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_1334": {
                "variable": {
                    "value": "context_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "context_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(attention_probs, value_layer)",
                            "Call"
                        ],
                        [
                            "tf.transpose(context_layer, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(context_layer, [batch_size * from_seq_length, num_attention_heads * size_per_head])",
                            "Call"
                        ],
                        [
                            "tf.reshape(context_layer, [batch_size, from_seq_length, num_attention_heads * size_per_head])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_1522": {
                "variable": {
                    "value": "dyn_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reshape_1538": {
                "variable": {
                    "value": "output_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Estimator_105": {
                "variable": {
                    "value": "self._estimator",
                    "type": "Attribute",
                    "possible_values": []
                },
                "model_fn": {
                    "value": "model_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "tf.estimator.RunConfig(session_config=tf.ConfigProto(inter_op_parallelism_threads=threads, intra_op_parallelism_threads=threads))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_972": {
                "stddev": {
                    "value": "initializer_range",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.02",
                            "Method Argument"
                        ],
                        [
                            "0.02",
                            "Method Argument"
                        ],
                        [
                            "0.02",
                            "Method Argument"
                        ],
                        [
                            "0.02",
                            "Method Argument"
                        ],
                        [
                            "0.02",
                            "Method Argument"
                        ],
                        [
                            "0.02",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "expand_dims_1003": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(input_ids, axis=[-1])",
                            "Call"
                        ],
                        [
                            "np.zeros(self._MAX_SENTENCE_LEN, dtype=np.int32)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_1011": {
                "variable": {
                    "value": "flat_input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(input_ids, axis=[-1])",
                            "Call"
                        ],
                        [
                            "np.zeros(self._MAX_SENTENCE_LEN, dtype=np.int32)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "one_hot_1012": {
                "variable": {
                    "value": "one_hot_input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "flat_input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(input_ids, [-1])",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "matmul_1013": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "one_hot_input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(flat_input_ids, depth=vocab_size)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "embedding_table",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name=word_embedding_name, shape=[vocab_size, embedding_size], initializer=create_initializer(initializer_range))",
                            "Call"
                        ]
                    ]
                }
            },
            "embedding_lookup_1015": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "embedding_table",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name=word_embedding_name, shape=[vocab_size, embedding_size], initializer=create_initializer(initializer_range))",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(input_ids, axis=[-1])",
                            "Call"
                        ],
                        [
                            "np.zeros(self._MAX_SENTENCE_LEN, dtype=np.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_1072": {
                "variable": {
                    "value": "token_type_table",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "token_type_embedding_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'token_type_embeddings'",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[token_type_vocab_size, width]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "create_initializer(initializer_range)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_1078": {
                "variable": {
                    "value": "flat_token_type_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "token_type_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros(shape=[batch_size, seq_length], dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "one_hot_1079": {
                "variable": {
                    "value": "one_hot_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "flat_token_type_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(token_type_ids, [-1])",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "token_type_vocab_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "16",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_1080": {
                "variable": {
                    "value": "token_type_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "one_hot_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(flat_token_type_ids, depth=token_type_vocab_size)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "token_type_table",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name=token_type_embedding_name, shape=[token_type_vocab_size, width], initializer=create_initializer(initializer_range))",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_1081": {
                "variable": {
                    "value": "token_type_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "token_type_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(one_hot_ids, token_type_table)",
                            "Call"
                        ],
                        [
                            "tf.reshape(token_type_embeddings, [batch_size, seq_length, width])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, seq_length, width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "assert_less_equal_1086": {
                "variable": {
                    "value": "assert_op",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "seq_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_shape[1]",
                            "Subscript"
                        ],
                        [
                            "input_shape[1]",
                            "Subscript"
                        ],
                        [
                            "input_shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "max_position_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_1227": {
                "variable": {
                    "value": "output_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, seq_length, num_attention_heads, width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_1230": {
                "variable": {
                    "value": "output_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "output_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer_norm(input_tensor, name)",
                            "Call"
                        ],
                        [
                            "dropout(output_tensor, dropout_prob)",
                            "Call"
                        ],
                        [
                            "tf.reshape(input_tensor, [batch_size, seq_length, num_attention_heads, width])",
                            "Call"
                        ],
                        [
                            "tf.transpose(output_tensor, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(input_tensor, [-1, width])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_1303": {
                "variable": {
                    "value": "attention_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(attention_mask, axis=[1])",
                            "Call"
                        ],
                        [
                            "create_attention_mask_from_input_mask(input_ids, input_mask)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_1338": {
                "variable": {
                    "value": "context_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "context_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(attention_probs, value_layer)",
                            "Call"
                        ],
                        [
                            "tf.transpose(context_layer, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(context_layer, [batch_size * from_seq_length, num_attention_heads * size_per_head])",
                            "Call"
                        ],
                        [
                            "tf.reshape(context_layer, [batch_size, from_seq_length, num_attention_heads * size_per_head])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size * from_seq_length, num_attention_heads * size_per_head]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_1343": {
                "variable": {
                    "value": "context_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "context_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(attention_probs, value_layer)",
                            "Call"
                        ],
                        [
                            "tf.transpose(context_layer, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(context_layer, [batch_size * from_seq_length, num_attention_heads * size_per_head])",
                            "Call"
                        ],
                        [
                            "tf.reshape(context_layer, [batch_size, from_seq_length, num_attention_heads * size_per_head])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, from_seq_length, num_attention_heads * size_per_head]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_1552": {
                "tensor": {
                    "value": "output_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer_norm(input_tensor, name)",
                            "Call"
                        ],
                        [
                            "dropout(output_tensor, dropout_prob)",
                            "Call"
                        ],
                        [
                            "tf.reshape(input_tensor, [batch_size, seq_length, num_attention_heads, width])",
                            "Call"
                        ],
                        [
                            "tf.transpose(output_tensor, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(input_tensor, [-1, width])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "orig_dims + [width]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "trainable_variables_94": {
                "variable": {
                    "value": "tvars",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GFile_347": {
                "name": {
                    "value": "vocab_file",
                    "type": "variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "r",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ones_761": {
                "variable": {
                    "value": "input_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, seq_length]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_764": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, seq_length]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_1088": {
                "variable": {
                    "value": "full_position_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "position_embedding_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'position_embeddings'",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[max_position_embeddings, width]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "create_initializer(initializer_range)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "slice_1101": {
                "variable": {
                    "value": "position_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "full_position_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name=position_embedding_name, shape=[max_position_embeddings, width], initializer=create_initializer(initializer_range))",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[seq_length, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_1112": {
                "variable": {
                    "value": "position_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "position_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(full_position_embeddings, [0, 0], [seq_length, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(position_embeddings, position_broadcast_shape)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "position_broadcast_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "reshape_1138": {
                "tensor": {
                    "value": "to_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.reshape(to_mask, [batch_size, 1, to_seq_length]), tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, 1, to_seq_length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "init_from_checkpoint_96": {
                "ckpt_dir_or_file": {
                    "value": "'{}/bert_model.ckpt'.format(model_path)",
                    "type": "Call",
                    "possible_values": []
                },
                "assignment_map": {
                    "value": "assignment_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "collections.OrderedDict()",
                            "Call"
                        ]
                    ]
                }
            },
            "EstimatorSpec_103": {
                "mode": {
                    "value": "mode",
                    "type": "variable",
                    "possible_values": []
                },
                "predictions": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'unique_id': features['unique_ids']}",
                            "Dict"
                        ]
                    ]
                }
            },
            "GFile_686": {
                "name": {
                    "value": "json_file",
                    "type": "variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "r",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_766": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "bert",
                    "type": "str",
                    "possible_values": []
                }
            },
            "squeeze_822": {
                "variable": {
                    "value": "first_token_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.sequence_output[:, 0:1, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dense_823": {
                "variable": {
                    "value": "self.pooled_output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "first_token_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(self.sequence_output[:, 0:1, :], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "create_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "erf_871": {
                "x": {
                    "value": "input_tensor / tf.sqrt(2.0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "control_dependencies_1087": {
                "control_inputs": {
                    "value": "[assert_op]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_1423": {
                "name_or_scope": {
                    "value": "'layer_%d' % layer_idx",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dense_1463": {
                "variable": {
                    "value": "intermediate_output",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "attention_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "attention_heads[0]",
                            "Subscript"
                        ],
                        [
                            "tf.concat(attention_heads, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(attention_output, hidden_size, kernel_initializer=create_initializer(initializer_range))",
                            "Call"
                        ],
                        [
                            "dropout(attention_output, hidden_dropout_prob)",
                            "Call"
                        ],
                        [
                            "layer_norm(attention_output + layer_input)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "intermediate_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3072",
                            "Method Argument"
                        ],
                        [
                            "3072",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "intermediate_act_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gelu",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "create_initializer(initializer_range)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_1471": {
                "variable": {
                    "value": "layer_output",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "intermediate_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(attention_output, intermediate_size, activation=intermediate_act_fn, kernel_initializer=create_initializer(initializer_range))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "768",
                            "Method Argument"
                        ],
                        [
                            "768",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "create_initializer(initializer_range)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_scope_1578": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "RunConfig_107": {
                "session_config": {
                    "value": "tf.ConfigProto(inter_op_parallelism_threads=threads, intra_op_parallelism_threads=threads)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_767": {
                "name_or_scope": {
                    "value": "embeddings",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_791": {
                "name_or_scope": {
                    "value": "encoder",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_819": {
                "name_or_scope": {
                    "value": "pooler",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_1308": {
                "x": {
                    "value": "attention_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(attention_mask, axis=[1])",
                            "Call"
                        ],
                        [
                            "create_attention_mask_from_input_mask(input_ids, input_mask)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_1426": {
                "name_or_scope": {
                    "value": "attention",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_1449": {
                "variable": {
                    "value": "attention_output",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "attention_heads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "dense_1454": {
                "variable": {
                    "value": "attention_output",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "attention_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "attention_heads[0]",
                            "Subscript"
                        ],
                        [
                            "tf.concat(attention_heads, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(attention_output, hidden_size, kernel_initializer=create_initializer(initializer_range))",
                            "Call"
                        ],
                        [
                            "dropout(attention_output, hidden_dropout_prob)",
                            "Call"
                        ],
                        [
                            "layer_norm(attention_output + layer_input)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "768",
                            "Method Argument"
                        ],
                        [
                            "768",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "create_initializer(initializer_range)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_1462": {
                "name_or_scope": {
                    "value": "intermediate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_1470": {
                "name_or_scope": {
                    "value": "output",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sqrt_871": {
                "x": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "variable_scope_1428": {
                "name_or_scope": {
                    "value": "self",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_1453": {
                "name_or_scope": {
                    "value": "output",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ConfigProto_107": {
                "inter_op_parallelism_threads": {
                    "value": "threads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "intra_op_parallelism_threads": {
                    "value": "threads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "src/mr_pipe.py": {
        "tensorflow": {
            "set_seed_110": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_inter_op_parallelism_threads_111": {
                "num_threads": {
                    "value": "args.threads",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_intra_op_parallelism_threads_112": {
                "num_threads": {
                    "value": "args.threads",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/mtool_evaluate.py": {
        "tensorflow": {
            "create_file_writer_53": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "logdir",
                    "type": "variable",
                    "possible_values": []
                },
                "filename_suffix": {
                    "value": "'.eval{}.v2'.format(step)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_57": {
                "name": {
                    "value": "'{}/{}'.format(label, k)",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "score[k]['f']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "step": {
                    "value": "step",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "scalar_61": {
                "name": {
                    "value": "'{}_details/{}'.format(label, k)",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "score[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "step": {
                    "value": "step",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "scalar_64": {
                "name": {
                    "value": "'{}_details/{}_{}'.format(label, k, i)",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "score[k][i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "step": {
                    "value": "step",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "src/network.py": {
        "tensorflow": {
            "Model_67": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Embedding_70": {
                "variable": {
                    "value": "self.layers.encoder_we",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_dim": {
                    "value": "len(train.mappings[Sentence.TOKENS].strings)",
                    "type": "Call",
                    "possible_values": []
                },
                "output_dim": {
                    "value": "args.we_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mask_zero": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Embedding_71": {
                "variable": {
                    "value": "self.layers.encoder_cle",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_dim": {
                    "value": "len(train.mappings[Sentence.TOKENS].alphabet)",
                    "type": "Call",
                    "possible_values": []
                },
                "output_dim": {
                    "value": "args.cle_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mask_zero": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Bidirectional_72": {
                "variable": {
                    "value": "self.layers.encoder_cle_rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layer": {
                    "value": "tf.keras.layers.GRU(args.cle_dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "merge_mode": {
                    "value": "concat",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_129": {
                "variable": {
                    "value": "self.layers.decoder_tops",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.softmax",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_132": {
                "variable": {
                    "value": "self.layers.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "args.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Concatenate_133": {
                "variable": {
                    "value": "self.layers.concat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Add_134": {
                "variable": {
                    "value": "self.layers.sum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SparseCategoricalCrossentropy_142": {
                "variable": {
                    "value": "self.loss_sce",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "create_file_writer_143": {
                "variable": {
                    "value": "self.writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logdir": {
                    "value": "args.logdir",
                    "type": "Attribute",
                    "possible_values": []
                },
                "flush_millis": {
                    "value": "10 * 1000",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gather_167": {
                "variable": {
                    "value": "charseqs",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "charseqs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.layers.encoder_cle_rnn(characters_embedded)",
                            "Call"
                        ],
                        [
                            "tf.gather(charseqs, token_charseq_ids)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "token_charseq_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cast_159": {
                "variable": {
                    "value": "word_dropout_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.math.greater_equal(tf.random.uniform(token_ids.shape), self.word_dropout)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "segment_mean_256": {
                "variable": {
                    "value": "node_values",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "edge_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "edge_embeddings + encoder(np.array([edge_values[i] for edge_values in edge_values], np.int32))",
                            "BinOp"
                        ]
                    ]
                },
                "segment_ids": {
                    "value": "node_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "concat_599": {
                "variable": {
                    "value": "nodes",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[s.nodes for s in states]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_600": {
                "variable": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.layers.decoder_tops(nodes)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "GRU_72": {
                "units": {
                    "value": "args.cle_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_74": {
                "input_dim": {
                    "value": "len(train.mappings[Sentence.TOKEN_VALUES][prop].strings)",
                    "type": "Call",
                    "possible_values": []
                },
                "output_dim": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "mask_zero": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Bidirectional_78": {
                "layer": {
                    "value": "tf.keras.layers.LSTM(args.encoder_dim, return_sequences=True)",
                    "type": "Call",
                    "possible_values": []
                },
                "merge_mode": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Embedding_82": {
                "input_dim": {
                    "value": "len(train.mappings[Sentence.NODE_VALUES][prop].strings)",
                    "type": "Call",
                    "possible_values": []
                },
                "output_dim": {
                    "value": "args.encoder_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_87": {
                "input_dim": {
                    "value": "2 * edge_values",
                    "type": "BinOp",
                    "possible_values": []
                },
                "output_dim": {
                    "value": "args.encoder_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_91": {
                "units": {
                    "value": "args.encoder_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.tanh",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_96": {
                "units": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.softmax",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_104": {
                "units": {
                    "value": "args.edge_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_107": {
                "units": {
                    "value": "args.edge_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_110": {
                "units": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.softmax",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_117": {
                "units": {
                    "value": "args.deprel_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_120": {
                "units": {
                    "value": "args.deprel_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_259": {
                "variable": {
                    "value": "node_values",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "node_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.segment_mean(edge_embeddings, node_ids)",
                            "Call"
                        ],
                        [
                            "tf.pad(node_values, [[0, start - max_node_id - 1], [0, 0]])",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, start - max_node_id - 1], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_430": {
                "variable": {
                    "value": "nodes",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[s.nodes for s in states]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "scalar_471": {
                "name": {
                    "value": "train/skipped",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "skipped",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ]
                    ]
                }
            },
            "concat_496": {
                "variable": {
                    "value": "nodes",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[s.nodes for s in states]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_498": {
                "variable": {
                    "value": "prediction_ops",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.layers.decoder_node_operation[iteration](nodes)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_518": {
                "variable": {
                    "value": "nodes",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[s.nodes for s in states]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_537": {
                "variable": {
                    "value": "a_parent",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.layers.sum([tf.gather(edge_parents, indices_a), tf.gather(edge_children, indices_b)])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "argmax_541": {
                "variable": {
                    "value": "a_parent",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.layers.decoder_edge_arc[iteration](a_parent)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_542": {
                "variable": {
                    "value": "a_child",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.layers.sum([tf.gather(edge_parents, indices_b), tf.gather(edge_children, indices_a)])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "argmax_546": {
                "variable": {
                    "value": "a_child",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.layers.decoder_edge_arc[iteration](a_child)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_572": {
                "variable": {
                    "value": "deprel_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.layers.sum([tf.gather(deprel_parents, indices_parents), tf.gather(deprel_children, indices_children)])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_754": {
                "variable": {
                    "value": "network.nodes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "[s.nodes for s in network.states]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LSTM_78": {
                "units": {
                    "value": "args.encoder_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "return_sequences": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dense_98": {
                "units": {
                    "value": "len(train.mappings[Sentence.NODE_VALUES][prop].strings)",
                    "type": "Call",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.softmax",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_114": {
                "units": {
                    "value": "args.edge_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.tanh",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_123": {
                "units": {
                    "value": "len(train.mappings[Sentence.EDGE_VALUES][prop].strings)",
                    "type": "Call",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.softmax",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_127": {
                "units": {
                    "value": "args.edge_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.tanh",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "greater_equal_159": {
                "x": {
                    "value": "tf.random.uniform(token_ids.shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "self.word_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_160": {
                "x": {
                    "value": "tf.math.not_equal(token_ids, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_223": {
                "params": {
                    "value": "nodes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "set(range(s.n_tokens()))",
                            "Call"
                        ],
                        [
                            "nodes | new_nodes",
                            "BinOp"
                        ],
                        [
                            "tf.concat([s.nodes for s in states], axis=0)",
                            "Call"
                        ],
                        [
                            "tf.concat([s.nodes for s in states], axis=0)",
                            "Call"
                        ],
                        [
                            "tf.concat([s.nodes for s in states], axis=0)",
                            "Call"
                        ],
                        [
                            "tf.concat([s.nodes for s in states], axis=0)",
                            "Call"
                        ],
                        [
                            "tf.concat([s.nodes for s in states], axis=0)",
                            "Call"
                        ],
                        [
                            "tf.concat([s.nodes for s in states], axis=0)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "np.array(nodes_token, np.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_233": {
                "variable": {
                    "value": "state.nodes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "[state.nodes, new_nodes[start:start + num_nodes]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_264": {
                "tensor": {
                    "value": "node_values[start:start + state.n_nodes - ori_nodes[i]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "paddings": {
                    "value": "[[ori_nodes[i], 0], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "GradientTape_287": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "concat_305": {
                "variable": {
                    "value": "nodes",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[s.nodes for s in states]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_342": {
                "variable": {
                    "value": "nodes",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[s.nodes for s in states]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_397": {
                "variable": {
                    "value": "a_parent",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.layers.sum([tf.gather(edge_parents, target_indices_a), tf.gather(edge_children, target_indices_b)])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_405": {
                "variable": {
                    "value": "a_child",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.layers.sum([tf.gather(edge_parents, target_indices_b), tf.gather(edge_children, target_indices_a)])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_416": {
                "variable": {
                    "value": "deprel_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.layers.sum([tf.gather(deprel_parents, target_deprel_parents), tf.gather(deprel_children, target_deprel_children)])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_640": {
                "variable": {
                    "value": "network.nodes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "[s.nodes for s in network.states]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_664": {
                "variable": {
                    "value": "network.nodes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "[s.nodes for s in network.states]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "uniform_159": {
                "shape": {
                    "value": "token_ids.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "not_equal_160": {
                "x": {
                    "value": "token_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "word_dropout_mask * token_ids + (1 - word_dropout_mask) * unk_mask",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_727": {
                "variable": {
                    "value": "deprel_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "network.layers.sum([tf.gather(deprel_parents, indices_parents), tf.gather(deprel_children, indices_children)])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "SparseCategoricalAccuracy_149": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "IndexedSlices_460": {
                "values": {
                    "value": "*map(np.concatenate, zip(*g))",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "argmax_500": {
                "input": {
                    "value": "decoder(nodes)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_578": {
                "input": {
                    "value": "self.layers.decoder_deprel_values[iteration][i](deprel_weights)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_685": {
                "x": {
                    "value": "network.layers.sum([tf.gather(edge_parents, indices_a), tf.gather(edge_children, indices_b)])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_691": {
                "x": {
                    "value": "network.layers.sum([tf.gather(edge_parents, indices_b), tf.gather(edge_children, indices_a)])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "SparseCategoricalAccuracy_148": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "scalar_467": {
                "name": {
                    "value": "'train/' + name",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "accuracy.result()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_537": {
                "params": {
                    "value": "edge_parents",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.layers.decoder_edge_parents[iteration](nodes)",
                            "Call"
                        ],
                        [
                            "self.layers.decoder_edge_parents[iteration](nodes)",
                            "Call"
                        ],
                        [
                            "network.layers.decoder_edge_parents[iteration](network.nodes)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "indices_a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.concatenate(indices_a, axis=0)",
                            "Call"
                        ],
                        [
                            "np.concatenate(indices_a, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_538": {
                "params": {
                    "value": "edge_children",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.layers.decoder_edge_children[iteration](nodes)",
                            "Call"
                        ],
                        [
                            "self.layers.decoder_edge_children[iteration](nodes)",
                            "Call"
                        ],
                        [
                            "network.layers.decoder_edge_children[iteration](network.nodes)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "indices_b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.concatenate(indices_b, axis=0)",
                            "Call"
                        ],
                        [
                            "np.concatenate(indices_b, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_542": {
                "params": {
                    "value": "edge_parents",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.layers.decoder_edge_parents[iteration](nodes)",
                            "Call"
                        ],
                        [
                            "self.layers.decoder_edge_parents[iteration](nodes)",
                            "Call"
                        ],
                        [
                            "network.layers.decoder_edge_parents[iteration](network.nodes)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "indices_b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.concatenate(indices_b, axis=0)",
                            "Call"
                        ],
                        [
                            "np.concatenate(indices_b, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_543": {
                "params": {
                    "value": "edge_children",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.layers.decoder_edge_children[iteration](nodes)",
                            "Call"
                        ],
                        [
                            "self.layers.decoder_edge_children[iteration](nodes)",
                            "Call"
                        ],
                        [
                            "network.layers.decoder_edge_children[iteration](network.nodes)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "indices_a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.concatenate(indices_a, axis=0)",
                            "Call"
                        ],
                        [
                            "np.concatenate(indices_a, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_572": {
                "params": {
                    "value": "deprel_parents",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.layers.decoder_deprel_parents[iteration](nodes)",
                            "Call"
                        ],
                        [
                            "self.layers.decoder_deprel_parents[iteration](nodes)",
                            "Call"
                        ],
                        [
                            "network.layers.decoder_deprel_parents[iteration](network.nodes)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "indices_parents",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(indices_parents, np.int32)",
                            "Call"
                        ],
                        [
                            "np.array(indices_parents, np.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_573": {
                "params": {
                    "value": "deprel_children",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.layers.decoder_deprel_children[iteration](nodes)",
                            "Call"
                        ],
                        [
                            "self.layers.decoder_deprel_children[iteration](nodes)",
                            "Call"
                        ],
                        [
                            "network.layers.decoder_deprel_children[iteration](network.nodes)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "indices_children",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(indices_children, np.int32)",
                            "Call"
                        ],
                        [
                            "np.array(indices_children, np.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "SparseCategoricalAccuracy_147": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "gather_397": {
                "params": {
                    "value": "edge_parents",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.layers.decoder_edge_parents[iteration](nodes)",
                            "Call"
                        ],
                        [
                            "self.layers.decoder_edge_parents[iteration](nodes)",
                            "Call"
                        ],
                        [
                            "network.layers.decoder_edge_parents[iteration](network.nodes)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "target_indices_a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.concatenate(target_indices_a, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_398": {
                "params": {
                    "value": "edge_children",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.layers.decoder_edge_children[iteration](nodes)",
                            "Call"
                        ],
                        [
                            "self.layers.decoder_edge_children[iteration](nodes)",
                            "Call"
                        ],
                        [
                            "network.layers.decoder_edge_children[iteration](network.nodes)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "target_indices_b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.concatenate(target_indices_b, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_405": {
                "params": {
                    "value": "edge_parents",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.layers.decoder_edge_parents[iteration](nodes)",
                            "Call"
                        ],
                        [
                            "self.layers.decoder_edge_parents[iteration](nodes)",
                            "Call"
                        ],
                        [
                            "network.layers.decoder_edge_parents[iteration](network.nodes)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "target_indices_b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.concatenate(target_indices_b, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_406": {
                "params": {
                    "value": "edge_children",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.layers.decoder_edge_children[iteration](nodes)",
                            "Call"
                        ],
                        [
                            "self.layers.decoder_edge_children[iteration](nodes)",
                            "Call"
                        ],
                        [
                            "network.layers.decoder_edge_children[iteration](network.nodes)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "target_indices_a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.concatenate(target_indices_a, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_417": {
                "params": {
                    "value": "deprel_parents",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.layers.decoder_deprel_parents[iteration](nodes)",
                            "Call"
                        ],
                        [
                            "self.layers.decoder_deprel_parents[iteration](nodes)",
                            "Call"
                        ],
                        [
                            "network.layers.decoder_deprel_parents[iteration](network.nodes)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "target_deprel_parents",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(target_deprel_parents, np.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_418": {
                "params": {
                    "value": "deprel_children",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.layers.decoder_deprel_children[iteration](nodes)",
                            "Call"
                        ],
                        [
                            "self.layers.decoder_deprel_children[iteration](nodes)",
                            "Call"
                        ],
                        [
                            "network.layers.decoder_deprel_children[iteration](network.nodes)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "target_deprel_children",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(target_deprel_children, np.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "SparseCategoricalAccuracy_145": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SparseCategoricalAccuracy_146": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "gather_685": {
                "params": {
                    "value": "edge_parents",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.layers.decoder_edge_parents[iteration](nodes)",
                            "Call"
                        ],
                        [
                            "self.layers.decoder_edge_parents[iteration](nodes)",
                            "Call"
                        ],
                        [
                            "network.layers.decoder_edge_parents[iteration](network.nodes)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "indices_a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.concatenate(indices_a, axis=0)",
                            "Call"
                        ],
                        [
                            "np.concatenate(indices_a, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_686": {
                "params": {
                    "value": "edge_children",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.layers.decoder_edge_children[iteration](nodes)",
                            "Call"
                        ],
                        [
                            "self.layers.decoder_edge_children[iteration](nodes)",
                            "Call"
                        ],
                        [
                            "network.layers.decoder_edge_children[iteration](network.nodes)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "indices_b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.concatenate(indices_b, axis=0)",
                            "Call"
                        ],
                        [
                            "np.concatenate(indices_b, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_691": {
                "params": {
                    "value": "edge_parents",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.layers.decoder_edge_parents[iteration](nodes)",
                            "Call"
                        ],
                        [
                            "self.layers.decoder_edge_parents[iteration](nodes)",
                            "Call"
                        ],
                        [
                            "network.layers.decoder_edge_parents[iteration](network.nodes)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "indices_b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.concatenate(indices_b, axis=0)",
                            "Call"
                        ],
                        [
                            "np.concatenate(indices_b, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_692": {
                "params": {
                    "value": "edge_children",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.layers.decoder_edge_children[iteration](nodes)",
                            "Call"
                        ],
                        [
                            "self.layers.decoder_edge_children[iteration](nodes)",
                            "Call"
                        ],
                        [
                            "network.layers.decoder_edge_children[iteration](network.nodes)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "indices_a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.concatenate(indices_a, axis=0)",
                            "Call"
                        ],
                        [
                            "np.concatenate(indices_a, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_727": {
                "params": {
                    "value": "deprel_parents",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.layers.decoder_deprel_parents[iteration](nodes)",
                            "Call"
                        ],
                        [
                            "self.layers.decoder_deprel_parents[iteration](nodes)",
                            "Call"
                        ],
                        [
                            "network.layers.decoder_deprel_parents[iteration](network.nodes)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "indices_parents",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(indices_parents, np.int32)",
                            "Call"
                        ],
                        [
                            "np.array(indices_parents, np.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_728": {
                "params": {
                    "value": "deprel_children",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.layers.decoder_deprel_children[iteration](nodes)",
                            "Call"
                        ],
                        [
                            "self.layers.decoder_deprel_children[iteration](nodes)",
                            "Call"
                        ],
                        [
                            "network.layers.decoder_deprel_children[iteration](network.nodes)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "indices_children",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(indices_children, np.int32)",
                            "Call"
                        ],
                        [
                            "np.array(indices_children, np.int32)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}